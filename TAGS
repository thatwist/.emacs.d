
evil-org-mode/evil-org.el,3264
(defgroup evil-org nilevil-org46,1438
(defcustom evil-org-key-themeevil-org-key-theme52,1565
(defcustom evil-org-movement-bindingsevil-org-movement-bindings70,2181
(defcustom evil-org-use-additional-insert nilevil-org-use-additional-insert81,2495
(defcustom evil-org-special-o/O '(table-row item)evil-org-special-o/O86,2655
(defcustom evil-org-retain-visual-state-on-shift nilevil-org-retain-visual-state-on-shift93,2950
(defcustom evil-org-want-hybrid-shift tevil-org-want-hybrid-shift98,3112
(defvar browse-url-generic-program)browse-url-generic-program106,3415
(defvar browse-url-generic-args)browse-url-generic-args107,3451
(defvar evil-disable-insert-state-bindings)evil-disable-insert-state-bindings108,3484
(defvar org-capture-mode-map)org-capture-mode-map109,3528
(defvar evil-org-mode-map (make-sparse-keymap))evil-org-mode-map111,3559
(define-minor-mode evil-org-modeevil-org-mode114,3623
(defun evil-org-eol-call (fun &rest arguments)evil-org-eol-call125,3902
(defun evil-org-bol-call (fun &rest arguments)evil-org-bol-call134,4195
(defalias 'evil-org-beginning-of-line 'org-beginning-of-line)evil-org-beginning-of-line224,7128
(defun evil-org-insert-line (count)evil-org-insert-line227,7214
(defun evil-org-append-line (count)evil-org-append-line239,7665
(defun evil-org-open-below (count)evil-org-open-below251,8089
(defun evil-org-open-above (count)evil-org-open-above266,8758
(defun evil-org-return (arg)evil-org-return281,9420
(defun evil-org--empty-element-p ()evil-org--empty-element-p296,10089
(defun evil-org-shift-fallback-command ()evil-org-shift-fallback-command307,10530
(defmacro evil-org-define-eol-command (cmd)evil-org-define-eol-command317,10980
(defmacro evil-org-define-bol-command (cmd)evil-org-define-bol-command331,11569
(defun evil-org-indent-items (beg end count)evil-org-indent-items391,13753
(defun evil-org-table-move-column (beg end arg)evil-org-table-move-column410,14560
(defun evil-org-generic-open-links (beg end incog)evil-org-generic-open-links454,16460
(defun evil-org-open-incognito ()evil-org-open-incognito475,17164
(defun evil-org-select-an-element (element)evil-org-select-an-element503,18305
(defun evil-org-select-inner-element (element)evil-org-select-inner-element508,18494
(defun evil-org-parent (element)evil-org-parent535,19916
(defun evil-org--populate-base-bindings ()evil-org--populate-base-bindings636,23963
(defun evil-org--populate-textobjects-bindings ()evil-org--populate-textobjects-bindings664,25148
(defun evil-org--populate-insert-bindings ()evil-org--populate-insert-bindings676,25855
(defun evil-org--populate-navigation-bindings ()evil-org--populate-navigation-bindings682,26042
(defun evil-org--populate-additional-bindings ()evil-org--populate-additional-bindings692,26483
(defun evil-org--populate-shift-bindings ()evil-org--populate-shift-bindings712,27478
(defun evil-org--populate-todo-bindings ()evil-org--populate-todo-bindings729,28183
(defun evil-org--populate-heading-bindings ()evil-org--populate-heading-bindings736,28477
(defun evil-org--populate-calendar-bindings ()evil-org--populate-calendar-bindings742,28743
(defun evil-org-set-key-theme (&optional theme)evil-org-set-key-theme778,30756

evil-org-mode/evil-org-test.el,59
(defmacro evil-org-with (in &rest body)evil-org-with4,36

evil-org-mode/doc/example_config.el,0

evil-org-mode/evil-org-agenda.el,68
(defun evil-org-agenda-set-keys ()evil-org-agenda-set-keys42,1348

workspace/.cache/java.lang.String.java,8184
package java.lang;java.lang3,136
public final class String implements java.io.Serializable, java.lang.Comparable, java.lang.CharSequence {String4,155
  private final char[] value;value6,264
  private int hash;hash8,297
  private static final long serialVersionUID = -6849794470754667710L;serialVersionUID10,320
  private static final java.io.ObjectStreamField[] serialPersistentFields;serialPersistentFields12,393
  public static final java.util.Comparator<java.lang.String> CASE_INSENSITIVE_ORDER;CASE_INSENSITIVE_ORDER14,471
  public String() {String16,559
  public String(java.lang.String original) {String19,586
  public String(char[] value) {String22,638
  public String(char[] value, int offset, int count) {String25,677
  public String(int[] codePoints, int offset, int count) {String28,739
  public String(byte[] ascii, int hibyte, int offset, int count) {String31,805
  public String(byte[] ascii, int hibyte) {String34,879
  private static void checkBounds(byte[] bytes, int offset, int length) {checkBounds37,930
  public String(byte[] bytes, int offset, int length, java.lang.String charsetName) throws java.io.UnsupportedEncodingException {String40,1011
  public String(byte[] bytes, int offset, int length, java.nio.charset.Charset charset) {String43,1148
  public String(byte[] bytes, java.lang.String charsetName) throws java.io.UnsupportedEncodingException {String46,1245
  public String(byte[] bytes, java.nio.charset.Charset charset) {String49,1358
  public String(byte[] bytes, int offset, int length) {String52,1431
  public String(byte[] bytes) {String55,1494
  public String(java.lang.StringBuffer buffer) {String58,1533
  public String(java.lang.StringBuilder builder) {String61,1589
  String(char[] value, boolean share) {String64,1647
  public int length() {length67,1694
  public boolean isEmpty() {isEmpty71,1739
  public char charAt(int index) {charAt75,1793
  public int codePointAt(int index) {codePointAt79,1848
  public int codePointBefore(int index) {codePointBefore83,1907
  public int codePointCount(int beginIndex, int endIndex) {codePointCount87,1970
  public int offsetByCodePoints(int index, int codePointOffset) {offsetByCodePoints91,2051
  void getChars(char[] dst, int dstBegin) {getChars95,2138
  public void getChars(int srcBegin, int srcEnd, char[] dst, int dstBegin) {getChars98,2189
  public void getBytes(int srcBegin, int srcEnd, byte[] dst, int dstBegin) {getBytes101,2273
  public byte[] getBytes(java.lang.String charsetName) throws java.io.UnsupportedEncodingException {getBytes104,2357
  public byte[] getBytes(java.nio.charset.Charset charset) {getBytes108,2482
  public byte[] getBytes() {getBytes112,2567
  public boolean equals(java.lang.Object anObject) {equals116,2620
  public boolean contentEquals(java.lang.StringBuffer sb) {contentEquals120,2698
  private boolean nonSyncContentEquals(java.lang.AbstractStringBuilder sb) {nonSyncContentEquals124,2783
  public boolean contentEquals(java.lang.CharSequence cs) {contentEquals128,2885
  public boolean equalsIgnoreCase(java.lang.String anotherString) {equalsIgnoreCase132,2970
  public int compareTo(java.lang.String anotherString) {compareTo136,3063
  public int compareToIgnoreCase(java.lang.String str) {compareToIgnoreCase140,3141
  public boolean regionMatches(int toffset, java.lang.String other, int ooffset, int len) {regionMatches144,3219
  public boolean regionMatches(boolean ignoreCase, int toffset, java.lang.String other, int ooffset, int len) {regionMatches148,3336
  public boolean startsWith(java.lang.String prefix, int toffset) {startsWith152,3473
  public boolean startsWith(java.lang.String prefix) {startsWith156,3566
  public boolean endsWith(java.lang.String suffix) {endsWith160,3646
  public int hashCode() {hashCode164,3724
  public int indexOf(int ch) {indexOf168,3771
  public int indexOf(int ch, int fromIndex) {indexOf172,3823
  private int indexOfSupplementary(int ch, int fromIndex) {indexOfSupplementary176,3890
  public int lastIndexOf(int ch) {lastIndexOf180,3971
  public int lastIndexOf(int ch, int fromIndex) {lastIndexOf184,4027
  private int lastIndexOfSupplementary(int ch, int fromIndex) {lastIndexOfSupplementary188,4098
  public int indexOf(java.lang.String str) {indexOf192,4183
  public int indexOf(java.lang.String str, int fromIndex) {indexOf196,4249
  static int indexOf(char[] source, int sourceOffset, int sourceCount, java.lang.String target, int fromIndex) {indexOf200,4330
  static int indexOf(char[] source, int sourceOffset, int sourceCount, char[] target, int targetOffset, int targetCount, int fromIndex) {indexOf204,4464
  public int lastIndexOf(java.lang.String str) {lastIndexOf208,4623
  public int lastIndexOf(java.lang.String str, int fromIndex) {lastIndexOf212,4693
  static int lastIndexOf(char[] source, int sourceOffset, int sourceCount, java.lang.String target, int fromIndex) {lastIndexOf216,4778
  static int lastIndexOf(char[] source, int sourceOffset, int sourceCount, char[] target, int targetOffset, int targetCount, int fromIndex) {lastIndexOf220,4916
  public java.lang.String substring(int beginIndex) {substring224,5079
  public java.lang.String substring(int beginIndex, int endIndex) {substring228,5157
  public java.lang.CharSequence subSequence(int beginIndex, int endIndex) {subSequence232,5249
  public java.lang.String concat(java.lang.String str) {concat236,5349
  public java.lang.String replace(char oldChar, char newChar) {replace240,5430
  public boolean matches(java.lang.String regex) {matches244,5518
  public boolean contains(java.lang.CharSequence s) {contains248,5594
  public java.lang.String replaceFirst(java.lang.String regex, java.lang.String replacement) {replaceFirst252,5673
  public java.lang.String replaceAll(java.lang.String regex, java.lang.String replacement) {replaceAll256,5792
  public java.lang.String replace(java.lang.CharSequence target, java.lang.CharSequence replacement) {replace260,5909
  public java.lang.String[] split(java.lang.String regex, int limit) {split264,6036
  public java.lang.String[] split(java.lang.String regex) {split268,6131
  public static java.lang.String join(java.lang.CharSequence delimiter, java.lang.CharSequence... elements) {join272,6215
  public static  java.lang.String join(java.lang.CharSequence delimiter, java.lang.Iterable<? extends java.lang.CharSequence> elements) {join276,6349
  public java.lang.String toLowerCase(java.util.Locale locale) {toLowerCase280,6511
  public java.lang.String toLowerCase() {toLowerCase284,6600
  public java.lang.String toUpperCase(java.util.Locale locale) {toUpperCase288,6666
  public java.lang.String toUpperCase() {toUpperCase292,6755
  public java.lang.String trim() {trim296,6821
  public java.lang.String toString() {toString300,6880
  public char[] toCharArray() {toCharArray304,6943
  public static java.lang.String format(java.lang.String format, java.lang.Object... args) {format308,6999
  public static java.lang.String format(java.util.Locale l, java.lang.String format, java.lang.Object... args) {format312,7116
  public static java.lang.String valueOf(java.lang.Object obj) {valueOf316,7253
  public static java.lang.String valueOf(char[] data) {valueOf320,7342
  public static java.lang.String valueOf(char[] data, int offset, int count) {valueOf324,7422
  public static java.lang.String copyValueOf(char[] data, int offset, int count) {copyValueOf328,7525
  public static java.lang.String copyValueOf(char[] data) {copyValueOf332,7632
  public static java.lang.String valueOf(boolean b) {valueOf336,7716
  public static java.lang.String valueOf(char c) {valueOf340,7794
  public static java.lang.String valueOf(int i) {valueOf344,7869
  public static java.lang.String valueOf(long l) {valueOf348,7943
  public static java.lang.String valueOf(float f) {valueOf352,8018
  public static java.lang.String valueOf(double d) {valueOf356,8094
  public native java.lang.String intern();intern360,8171
  public bridge int compareTo(java.lang.Object arg0) {compareTo362,8217

workspace/.cache/kafka.api.OffsetRequest.java,5238
package kafka.api;kafka.api3,136
public class OffsetRequest extends kafka.api.RequestOrResponse implements scala.Product, scala.Serializable {OffsetRequest4,155
  private final scala.collection.immutable.Map<kafka.common.TopicAndPartition,kafka.api.PartitionOffsetRequestInfo> requestInfo;requestInfo6,268
  private final short versionId;versionId8,400
  private final int correlationId;correlationId10,436
  private final java.lang.String clientId;clientId12,474
  private final int replicaId;replicaId14,520
  private scala.collection.immutable.Map<java.lang.String,scala.collection.immutable.Map<kafka.common.TopicAndPartition,kafka.api.PartitionOffsetRequestInfo>> requestInfoGroupedByTopic;requestInfoGroupedByTopic16,554
  private volatile boolean bitmap$0;bitmap$018,743
  public static int apply$default$5() {apply$default$520,783
  public static java.lang.String apply$default$4() {apply$default$424,844
  public static int apply$default$3() {apply$default$328,921
  public static short apply$default$2() {apply$default$232,982
  public static int $lessinit$greater$default$5() {$lessinit$greater$default$536,1045
  public static java.lang.String $lessinit$greater$default$4() {$lessinit$greater$default$440,1118
  public static int $lessinit$greater$default$3() {$lessinit$greater$default$344,1207
  public static short $lessinit$greater$default$2() {$lessinit$greater$default$248,1280
  public static  scala.Option<scala.Tuple5<scala.collection.immutable.Map<kafka.common.TopicAndPartition,kafka.api.PartitionOffsetRequestInfo>,java.lang.Object,java.lang.Object,java.lang.String,java.lang.Object>> unapply(kafka.api.OffsetRequest arg0) {unapply52,1355
  public static  kafka.api.OffsetRequest apply(scala.collection.immutable.Map<kafka.common.TopicAndPartition,kafka.api.PartitionOffsetRequestInfo> arg0, short arg1, int arg2, java.lang.String arg3, int arg4) {apply56,1632
  public static kafka.api.OffsetRequest readFrom(java.nio.ByteBuffer arg0) {readFrom60,1866
  public static long EarliestTime() {EarliestTime64,1967
  public static long LatestTime() {LatestTime68,2026
  public static java.lang.String LargestTimeString() {LargestTimeString72,2083
  public static java.lang.String SmallestTimeString() {SmallestTimeString76,2162
  public static java.lang.String DefaultClientId() {DefaultClientId80,2242
  public static short CurrentVersion() {CurrentVersion84,2319
  private scala.collection.immutable.Map requestInfoGroupedByTopic$lzycompute() {requestInfoGroupedByTopic$lzycompute88,2381
  public  scala.collection.immutable.Map<kafka.common.TopicAndPartition,kafka.api.PartitionOffsetRequestInfo> requestInfo() {requestInfo92,2487
  public short versionId() {versionId96,2637
  public int correlationId() {correlationId100,2687
  public java.lang.String clientId() {clientId104,2739
  public int replicaId() {replicaId108,2802
  public  scala.collection.immutable.Map<java.lang.String,scala.collection.immutable.Map<kafka.common.TopicAndPartition,kafka.api.PartitionOffsetRequestInfo>> requestInfoGroupedByTopic() {requestInfoGroupedByTopic112,2850
  public void writeTo(java.nio.ByteBuffer buffer) {writeTo116,3063
  public int sizeInBytes() {sizeInBytes119,3122
  public boolean isFromOrdinaryClient() {isFromOrdinaryClient123,3172
  public boolean isFromDebuggingClient() {isFromDebuggingClient127,3239
  public java.lang.String toString() {toString131,3307
  public void handleError(java.lang.Throwable e, kafka.network.RequestChannel requestChannel, kafka.network.RequestChannel.Request request) {handleError135,3370
  public java.lang.String describe(boolean details) {describe138,3519
  public  kafka.api.OffsetRequest copy(scala.collection.immutable.Map<kafka.common.TopicAndPartition,kafka.api.PartitionOffsetRequestInfo> requestInfo, short versionId, int correlationId, java.lang.String clientId, int replicaId) {copy142,3597
  public  scala.collection.immutable.Map<kafka.common.TopicAndPartition,kafka.api.PartitionOffsetRequestInfo> copy$default$1() {copy$default$1146,3853
  public short copy$default$2() {copy$default$2150,4006
  public int copy$default$3() {copy$default$3154,4061
  public java.lang.String copy$default$4() {copy$default$4158,4114
  public int copy$default$5() {copy$default$5162,4183
  public java.lang.String productPrefix() {productPrefix166,4236
  public int productArity() {productArity170,4304
  public java.lang.Object productElement(int x$1) {productElement174,4355
  public  scala.collection.Iterator<java.lang.Object> productIterator() {productIterator178,4431
  public boolean canEqual(java.lang.Object x$1) {canEqual182,4529
  public int hashCode() {hashCode186,4604
  public boolean equals(java.lang.Object x$1) {equals190,4651
  public  OffsetRequest(scala.collection.immutable.Map<kafka.common.TopicAndPartition,kafka.api.PartitionOffsetRequestInfo> requestInfo, short versionId, int correlationId, java.lang.String clientId, int replicaId) {OffsetRequest194,4724
  public  OffsetRequest(scala.collection.immutable.Map<kafka.common.TopicAndPartition,kafka.api.PartitionOffsetRequestInfo> requestInfo, int correlationId, int replicaId) {OffsetRequest197,4948

workspace/.cache/storm.kafka.SpoutConfig.java,718
package storm.kafka;storm.kafka18,803
public class SpoutConfig extends KafkaConfig implements Serializable {SpoutConfig24,879
    public List<String> zkServers = null;zkServers25,950
    public Integer zkPort = null;zkPort26,992
    public String zkRoot = null;zkRoot27,1026
    public String id = null;id28,1059
    public long stateUpdateIntervalMs = 2000;stateUpdateIntervalMs31,1164
    public long retryInitialDelayMs = 0;retryInitialDelayMs35,1344
    public double retryDelayMultiplier = 1.0;retryDelayMultiplier36,1385
    public long retryDelayMaxMs = 60 * 1000;retryDelayMaxMs37,1431
    public SpoutConfig(BrokerHosts hosts, String topic, String zkRoot, String id) {SpoutConfig39,1477

workspace/.cache/storm.kafka.KafkaConfig.java,1191
package storm.kafka;storm.kafka18,803
public class KafkaConfig implements Serializable {KafkaConfig25,941
    public final BrokerHosts hosts;hosts27,993
    public final String topic;topic28,1029
    public final String clientId;clientId29,1060
    public int fetchSizeBytes = 1024 * 1024;fetchSizeBytes31,1095
    public int socketTimeoutMs = 10000;socketTimeoutMs32,1140
    public int fetchMaxWait = 10000;fetchMaxWait33,1180
    public int bufferSizeBytes = 1024 * 1024;bufferSizeBytes34,1217
    public MultiScheme scheme = new RawMultiScheme();scheme35,1263
    public boolean ignoreZkOffsets = false;ignoreZkOffsets36,1317
    public long startOffsetTime = kafka.api.OffsetRequest.EarliestTime();startOffsetTime37,1361
    public long maxOffsetBehind = Long.MAX_VALUE;maxOffsetBehind38,1435
    public boolean useStartOffsetTimeIfOffsetOutOfRange = true;useStartOffsetTimeIfOffsetOutOfRange39,1485
    public int metricsTimeBucketSizeInSecs = 60;metricsTimeBucketSizeInSecs40,1549
    public KafkaConfig(BrokerHosts hosts, String topic) {KafkaConfig42,1599
    public KafkaConfig(BrokerHosts hosts, String topic, String clientId) {KafkaConfig46,1735

org-clock-save.el,0

dired-plus/dired+.el,81561
(defmacro diredp-user-error (&rest args)diredp-user-error1834,101017
(defvar bmkp-copied-tags)                         ; In `bookmark+-1.el'bmkp-copied-tags1865,102212
(defvar bmkp-current-bookmark-file)               ; In `bookmark+-1.el'bmkp-current-bookmark-file1866,102284
(defvar bookmark-default-file)                    ; In `bookmark.el'bookmark-default-file1867,102356
(defvar compilation-current-error)                ; In `compile.el'compilation-current-error1868,102425
(defvar delete-by-moving-to-trash)                ; Built-in, Emacs 23+delete-by-moving-to-trash1869,102493
(defvar dired-always-read-filesystem)             ; In `dired.el', Emacs 26+dired-always-read-filesystem1870,102565
(defvar dired-auto-revert-buffer)                 ; In `dired.el', Emacs 23+dired-auto-revert-buffer1871,102642
(defvar dired-details-state)                      ; In `dired-details+.el'dired-details-state1872,102719
(defvar dired-keep-marker-hardlink)               ; In `dired-x.el'dired-keep-marker-hardlink1873,102794
(defvar dired-recursive-deletes)                  ; In `dired.el', Emacs 22+dired-recursive-deletes1874,102862
(defvar dired-shrink-to-fit)                      ; In `dired.el'dired-shrink-to-fit1875,102939
(defvar dired-switches-alist)                     ; In `dired.el'dired-switches-alist1876,103005
(defvar dired-subdir-switches)                    ; In `dired.el'dired-subdir-switches1877,103071
(defvar dired-touch-program)                      ; Emacs 22+dired-touch-program1878,103137
(defvar dired-use-ls-dired)                       ; Emacs 22+dired-use-ls-dired1879,103199
(defvar diredp-count-.-and-..-flag)               ; Here, Emacs 22+diredp-count-.-and-..-flag1880,103261
(defvar diredp-hide-details-initially-flag)       ; Here, Emacs 24.4+diredp-hide-details-initially-flag1881,103329
(defvar diredp-hide-details-last-state)           ; Here, Emacs 24.4+diredp-hide-details-last-state1882,103399
(defvar diredp-hide-details-propagate-flag)       ; Here, Emacs 24.4+diredp-hide-details-propagate-flag1883,103469
(defvar diredp-hide-details-toggled)              ; Here, Emacs 24.4+diredp-hide-details-toggled1884,103539
(defvar diredp-highlight-autofiles-mode)          ; Here, Emacs 22+diredp-highlight-autofiles-mode1885,103609
(defvar diredp-menu-bar-encryption-menu)          ; Here, Emacs 23+diredp-menu-bar-encryption-menu1886,103677
(defvar diredp-menu-bar-images-recursive-menu)    ; Here (old name)diredp-menu-bar-images-recursive-menu1887,103745
(defvar diredp-menu-bar-regexp-recursive-menu)    ; Here (old name)diredp-menu-bar-regexp-recursive-menu1888,103813
(defvar diredp-menu-bar-subdir-menu)              ; Here (old name)diredp-menu-bar-subdir-menu1889,103881
(defvar diredp-single-bookmarks-menu)             ; Here, if Bookmark+ is availablediredp-single-bookmarks-menu1890,103949
(defvar filesets-data)                            ; In `filesets.el'filesets-data1891,104033
(defvar grep-use-null-device)                     ; In `grep.el'grep-use-null-device1892,104102
(defvar header-line-format)                       ; Emacs 22+header-line-format1893,104167
(defvar icicle-file-sort)                         ; In `icicles-opt.el'icicle-file-sort1894,104229
(defvar icicle-file-sort-first-time-p)            ; In `icicles-var.el'icicle-file-sort-first-time-p1895,104301
(defvar icicle-files-ido-like-flag)               ; In `icicles-opt.el'icicle-files-ido-like-flag1896,104373
(defvar icicle-ignored-directories)               ; In `icicles-opt.el'icicle-ignored-directories1897,104445
(defvar icicle-sort-comparer)                     ; In `icicles-opt.el'icicle-sort-comparer1898,104517
(defvar image-dired-display-image-buffer)         ; In `image-dired.el'image-dired-display-image-buffer1899,104589
(defvar image-dired-line-up-method)               ; In `image-dired.el'image-dired-line-up-method1900,104661
(defvar image-dired-main-image-directory)         ; In `image-dired.el'image-dired-main-image-directory1901,104733
(defvar image-dired-thumbnail-buffer)             ; In `image-dired.el'image-dired-thumbnail-buffer1902,104805
(defvar image-dired-thumb-height)                 ; In `image-dired.el'image-dired-thumb-height1903,104877
(defvar image-dired-thumb-width)                  ; In `image-dired.el'image-dired-thumb-width1904,104949
(defvar image-dired-widget-list)                  ; In `image-dired.el'image-dired-widget-list1905,105021
(defvar ls-lisp-use-insert-directory-program)     ; In `ls-lisp.el'ls-lisp-use-insert-directory-program1906,105093
(defvar minibuffer-default-add-function)          ; In `simple.el', Emacs 23+minibuffer-default-add-function1907,105161
(defvar mouse3-dired-function)                    ; In `mouse3.el'mouse3-dired-function1908,105239
(defvar read-file-name-completion-ignore-case)    ; In `minibuffer.el', Emacs 23+.  In C code, Emacs 22.read-file-name-completion-ignore-case1909,105306
(defvar recentf-list)                             ; In `recentf.el'recentf-list1910,105411
(defvar switch-to-buffer-preserve-window-point)   ; In `window.el', Emacs 24+switch-to-buffer-preserve-window-point1911,105479
(defvar tooltip-mode)                             ; In `tooltip.el'tooltip-mode1912,105557
(defvar vc-directory-exclusion-list)              ; In `vc'vc-directory-exclusion-list1913,105625
(defvar w32-browser-wait-time)                    ; In `w32-browser.el'w32-browser-wait-time1914,105685
(defgroup Dired-Plus nilDired-Plus1918,105783
(defcustom diff-switches "-c"diff-switches1941,106733
(defcustom diredp-auto-focus-frame-for-thumbnail-tooltip-flag nildiredp-auto-focus-frame-for-thumbnail-tooltip-flag1947,106925
(defcustom diredp-bind-problematic-terminal-keys tdiredp-bind-problematic-terminal-keys1958,107436
(defcustom diredp-compressed-extensions '(".tar" ".taz" ".tgz" ".arj" ".lzh"diredp-compressed-extensions1966,107814
(defcustom diredp-dwim-any-frame-flag pop-up-framesdiredp-dwim-any-frame-flag1977,108309
(defcustom diredp-ignore-compressed-flag tdiredp-ignore-compressed-flag2029,110495
(defcustom diredp-image-preview-in-tooltip (or (and (boundp 'image-dired-thumb-size)  image-dired-thumb-size)diredp-image-preview-in-tooltip2037,110820
(defcustom diredp-image-show-this-file-use-frame-flag tdiredp-image-show-this-file-use-frame-flag2059,111796
(defcustom diredp-max-frames 200diredp-max-frames2073,112389
(defcustom diredp-prompt-for-bookmark-prefix-flag nildiredp-prompt-for-bookmark-prefix-flag2082,112823
(defcustom diredp-w32-local-drives '(("C:" "Local disk"))diredp-w32-local-drives2087,112996
(defcustom diredp-wrap-around-flag tdiredp-wrap-around-flag2097,113409
(defvar diredp-re-no-dot "^\\([^.]\\|\\.\\([^.]\\|\\..\\)\\).*"diredp-re-no-dot2111,114049
(defvar diredp-w32-drives-mode-map (let ((map  (make-sparse-keymap)))diredp-w32-drives-mode-map2114,114169
(defmacro diredp-mark-if (predicate singular &optional plural)diredp-mark-if2137,115247
(defun diredp-get-file-or-dir-name (arg)diredp-get-file-or-dir-name2179,117440
(defmacro dired-map-over-marks (body arg &optional show-progressdired-map-over-marks2201,118231
(defmacro diredp-with-help-window (buffer &rest body)diredp-with-help-window2283,122605
(defun diredp-read-regexp (prompt &optional default history)diredp-read-regexp2307,123630
(defun diredp-nonempty-region-p ()diredp-nonempty-region-p2328,124396
(defun diredp-get-image-filename (&optional localp no-error-if-not-filep)diredp-get-image-filename2332,124573
(defun diredp-root-directory-p (file)diredp-root-directory-p2350,125443
(defun diredp-parent-dir (file &optional relativep)diredp-parent-dir2360,125987
(defun diredp-ensure-mode ()diredp-ensure-mode2377,126837
(defun diredp-ensure-bookmark+ ()diredp-ensure-bookmark+2382,127051
(defun dired-get-marked-files (&optional localp arg filter distinguish-one-marked error-if-none-p)dired-get-marked-files2402,127803
(defun dired-map-over-marks-check (fun arg op-symbol &optional show-progress)dired-map-over-marks-check2453,130364
(defun dired-read-dir-and-switches (string &optional read-extra-files-p dired-buffer)dired-read-dir-and-switches2575,136834
(defadvice dired (before diredp-doc-cons-arg activate)dired2755,149011
(defadvice dired-other-window (before diredp-doc-cons-arg activate)dired-other-window2817,151864
(defadvice dired-other-frame (before diredp-doc-cons-arg activate)dired-other-frame2828,152304
(defun dired-switches-escape-p (switches)dired-switches-escape-p2840,152823
(defun diredp-image-dired-required-msg ()diredp-image-dired-required-msg2967,159756
(defun diredp-image-dired-create-thumb (file &optional arg)diredp-image-dired-create-thumb2975,160145
(defun image-dired-dired-insert-marked-thumbs () ; Bound to `C-t C-t' (Emacs 22-23)image-dired-dired-insert-marked-thumbs3002,161678
(defun image-dired-dired-toggle-marked-thumbs (&optional arg) ; Bound to `C-t C-t' (Emacs 24+)image-dired-dired-toggle-marked-thumbs3029,163000
(defun diredp-image-dired-comment-file ()diredp-image-dired-comment-file3058,164535
(defun diredp-image-dired-tag-file ()diredp-image-dired-tag-file3065,164820
(defun diredp-image-dired-delete-tag ()diredp-image-dired-delete-tag3073,165170
(defun diredp-image-dired-display-thumb (&optional append)diredp-image-dired-display-thumb3080,165478
(defun diredp-image-dired-copy-with-exif-name ()diredp-image-dired-copy-with-exif-name3105,166998
(defun diredp-image-dired-edit-comment-and-tags ()diredp-image-dired-edit-comment-and-tags3119,167729
(defun diredp-do-display-images (&optional arg)diredp-do-display-images3166,170057
(defun diredp-display-image ()diredp-display-image3180,170808
(defun diredp-image-show-this-file (&optional arg)diredp-image-show-this-file3196,171583
(defface diredp-autofile-namediredp-autofile-name3230,173643
(defvar diredp-autofile-name 'diredp-autofile-name)diredp-autofile-name3235,173960
(defface diredp-compressed-file-namediredp-compressed-file-name3237,174013
(defvar diredp-compressed-file-name 'diredp-compressed-file-name)diredp-compressed-file-name3242,174251
(defface diredp-compressed-file-suffixdiredp-compressed-file-suffix3244,174318
(defvar diredp-compressed-file-suffix 'diredp-compressed-file-suffix)diredp-compressed-file-suffix3250,174641
(defface diredp-date-timediredp-date-time3252,174712
(defvar diredp-date-time 'diredp-date-time)diredp-date-time3257,174979
(defface diredp-deletiondiredp-deletion3259,175024
(defvar diredp-deletion 'diredp-deletion)diredp-deletion3263,175216
(defface diredp-deletion-file-namediredp-deletion-file-name3265,175259
(defvar diredp-deletion-file-name 'diredp-deletion-file-name)diredp-deletion-file-name3269,175444
(defface diredp-dir-headingdiredp-dir-heading3271,175507
(defvar diredp-dir-heading 'diredp-dir-heading)diredp-dir-heading3276,175813
(defface diredp-dir-namediredp-dir-name3278,175862
(defvar diredp-dir-name 'diredp-dir-name)diredp-dir-name3284,176154
(defface diredp-dir-privdiredp-dir-priv3286,176197
(defvar diredp-dir-priv 'diredp-dir-priv)diredp-dir-priv3292,176524
(defface diredp-exec-privdiredp-exec-priv3294,176567
(defvar diredp-exec-priv 'diredp-exec-priv)diredp-exec-priv3299,176854
(defface diredp-executable-tagdiredp-executable-tag3303,177042
(defvar diredp-executable-tag 'diredp-executable-tag)diredp-executable-tag3307,177233
(defface diredp-file-namediredp-file-name3309,177288
(defvar diredp-file-name 'diredp-file-name)diredp-file-name3315,177597
(defface diredp-file-suffixdiredp-file-suffix3317,177642
(defvar diredp-file-suffix 'diredp-file-suffix)diredp-file-suffix3323,177973
(defface diredp-flag-markdiredp-flag-mark3325,178022
(defvar diredp-flag-mark 'diredp-flag-mark)diredp-flag-mark3330,178341
(defface diredp-flag-mark-linediredp-flag-mark-line3332,178386
(defvar diredp-flag-mark-line 'diredp-flag-mark-line)diredp-flag-mark-line3337,178668
(defface diredp-ignored-file-namediredp-ignored-file-name3339,178723
(defvar diredp-ignored-file-name 'diredp-ignored-file-name)diredp-ignored-file-name3346,179181
(defface diredp-link-privdiredp-link-priv3348,179242
(defvar diredp-link-priv 'diredp-link-priv)diredp-link-priv3353,179516
(defface diredp-no-privdiredp-no-priv3366,180012
(defvar diredp-no-priv 'diredp-no-priv)diredp-no-priv3371,180286
(defface diredp-numberdiredp-number3373,180327
(defvar diredp-number 'diredp-number)diredp-number3379,180658
(defface diredp-other-privdiredp-other-priv3381,180697
(defvar diredp-other-priv 'diredp-other-priv)diredp-other-priv3386,180982
(defface diredp-rare-privdiredp-rare-priv3388,181029
(defvar diredp-rare-priv 'diredp-rare-priv)diredp-rare-priv3393,181361
(defface diredp-read-privdiredp-read-priv3395,181406
(defvar diredp-read-priv 'diredp-read-priv)diredp-read-priv3400,181705
(defface diredp-symlinkdiredp-symlink3402,181750
(defvar diredp-symlink 'diredp-symlink)diredp-symlink3407,182008
(defface diredp-tagged-autofile-namediredp-tagged-autofile-name3409,182049
(defvar diredp-tagged-autofile-name 'diredp-tagged-autofile-name)diredp-tagged-autofile-name3414,182372
(defface diredp-write-privdiredp-write-priv3416,182439
(defvar diredp-write-priv 'diredp-write-priv)diredp-write-priv3421,182717
(defvar diredp-font-lock-keywords-1diredp-font-lock-keywords-13431,183278
(defun diredp--set-up-font-locking ()diredp--set-up-font-locking3547,189846
(defun diredp-refontify-buffer ()diredp-refontify-buffer3564,190688
(defun diredp-dired-for-files (arg &optional switches) ; Bound to `C-x D F'diredp-dired-for-files3607,192585
(defun diredp-dired-for-files-other-window (arg &optional switches) ; Bound to `C-x 4 D F'diredp-dired-for-files-other-window3622,193215
(defun diredp-dired-recent-dirs (buffer &optional arg) ; Bound to `C-x D R'diredp-dired-recent-dirs3629,193586
(defun diredp-dired-recent-dirs-other-window (buffer &optional arg) ; Bound to `C-x 4 D R'diredp-dired-recent-dirs-other-window3651,194654
(defun diredp-recent-dirs (arg)diredp-recent-dirs3659,195276
(defun diredp-read-include/exclude (thing things &optional exclude)diredp-read-include/exclude3671,195923
(defun diredp-dired-union (dired-name dirbufs &optional switches extra) ; Bound to `C-x 4 D U'diredp-dired-union3745,200252
(defun diredp-dired-union-other-window (dired-name dirbufs &optional switches extra) ; Bound to `C-x 4 D U'diredp-dired-union-other-window3812,203555
(defun diredp-add-to-dired-buffer (dired-name to-add &optional switches) ; Bound to `C-x D A'diredp-add-to-dired-buffer3821,204110
(defun diredp-add-to-dired-buffer-other-window (dired-name to-add &optional switches) ; Bound to `C-x 4 D A'diredp-add-to-dired-buffer-other-window3853,205602
(defun diredp-add-to-this-dired-buffer (dired-name to-add &optional switches) ; Not bound by defaultdiredp-add-to-this-dired-buffer3866,206364
(defun diredp-dired-union-1 (dired-name dirbufs switches extra &optional otherwin)diredp-dired-union-13883,207505
(defun diredp-dired-union-interactive-spec (string &optional no-dired-bufs read-extra-files-p dired-buffer)diredp-dired-union-interactive-spec3935,210541
(defun diredp-fileset (flset-name)      ; Bound to `C-x D S'diredp-fileset4006,214440
(defun diredp-fileset-other-window (flset-name) ; Bound to `C-x 4 D S'diredp-fileset-other-window4015,214848
(defun diredp-fileset-1 (flset-name &optional other-window-p)diredp-fileset-14023,215300
(defun diredp-dired-this-subdir (&optional tear-off-p msgp)diredp-dired-this-subdir4043,216357
(defun diredp-dired-inserted-subdirs (&optional no-show-p msgp) ; Bound to `C-M-i'diredp-dired-inserted-subdirs4068,217417
(defun diredp-get-subdirs (&optional ignore-marks-p predicate)diredp-get-subdirs4100,218842
(defun diredp-get-files (&optional ignore-marks-p predicate include-dirs-pdiredp-get-files4114,219559
(defun diredp-get-files-for-dir (directory accum askp &optional include-dirs-p only-marked-p)diredp-get-files-for-dir4182,223253
(defun diredp-marked-here (&optional only-marked-p no-dot-dot-p)diredp-marked-here4214,224891
(defun diredp-y-or-n-files-p (prompt files &optional predicate)diredp-y-or-n-files-p4233,226093
(defvar diredp-list-files-mapdiredp-list-files-map4315,231629
(defun diredp-find-line-file-other-window ()diredp-find-line-file-other-window4325,232001
(defun diredp-mouse-find-line-file-other-window (e)diredp-mouse-find-line-file-other-window4333,232331
(defun diredp-list-marked (&optional arg predicate interactivep) ; Bound to `C-M-l'diredp-list-marked4340,232605
(defun diredp-list-files (files &optional dir bufname predicate)diredp-list-files4360,233567
(defvar diredp-files-within-dirs-done ()diredp-files-within-dirs-done4410,236013
(defun diredp-directories-within (&optional directory no-symlinks-p predicate)diredp-directories-within4415,236155
(defun diredp-files-within (file-list accum &optional no-symlinks-p include-dirs-p predicate)diredp-files-within4435,237217
(defun diredp-files-within-1 (file-list accum no-symlinks-p include-dirs-p predicate)diredp-files-within-14470,239048
(defun diredp-remove-if (pred xs)diredp-remove-if4503,241125
(defun diredp-remove-if-not (pred xs)diredp-remove-if-not4509,241336
(defun diredp-ancestor-dirs (dir)diredp-ancestor-dirs4559,243696
(defun diredp-maplist (function list)diredp-maplist4565,243981
(defun diredp-existing-dired-buffer-p (buffer-name)diredp-existing-dired-buffer-p4570,244198
(defun diredp-set-union (list1 list2)diredp-set-union4577,244549
(defvar diredp-last-copied-filenames ()diredp-last-copied-filenames4593,245235
(defun dired-copy-filename-as-kill (&optional arg)dired-copy-filename-as-kill4602,245530
(defun diredp-copy-abs-filenames-as-kill () ; Not bound.diredp-copy-abs-filenames-as-kill4631,247029
(defalias 'diredp-paste-files 'diredp-yank-files) ; Bound to `C-y'.diredp-paste-files4642,247486
(defun diredp-yank-files (&optional dir no-confirm-p)diredp-yank-files4644,247569
(defun diredp-get-confirmation-recursive (&optional type)diredp-get-confirmation-recursive4676,249233
(defun diredp-insert-subdirs (&optional switches interactivep) ; Bound to `M-i'diredp-insert-subdirs4694,249974
(defun diredp-insert-subdirs-recursive (&optional ignore-marks-p) ; Bound to `M-+ M-i'diredp-insert-subdirs-recursive4711,250971
(defun diredp-do-shell-command-recursive (command &optional ignore-marks-p) ; Bound to `M-+ !'diredp-do-shell-command-recursive4726,251774
(defun diredp-do-symlink-recursive (&optional ignore-marks-p) ; Bound to `M-+ S'diredp-do-symlink-recursive4777,254750
(defun diredp-do-hardlink-recursive (&optional ignore-marks-p) ; Bound to `M-+ H'diredp-do-hardlink-recursive4809,256331
(defun diredp-do-print-recursive (&optional ignore-marks-p) ; Bound to `M-+ P'diredp-do-print-recursive4824,257057
(defun diredp-image-dired-display-thumbs-recursive (&optional ignore-marks-p append do-not-pop)diredp-image-dired-display-thumbs-recursive4846,258147
(defun diredp-image-dired-tag-files-recursive (&optional ignore-marks-p) ; Bound to `M-+ C-t t'diredp-image-dired-tag-files-recursive4887,260155
(defun diredp-image-dired-delete-tag-recursive (&optional ignore-marks-p) ; Bound to `M-+ C-t r'diredp-image-dired-delete-tag-recursive4903,261050
(defun diredp-image-dired-comment-files-recursive (&optional ignore-marks-p)diredp-image-dired-comment-files-recursive4918,261861
(defun diredp-do-bookmark-recursive (&optional ignore-marks-p prefix) ; Bound to `M-+ M-b'diredp-do-bookmark-recursive5007,266243
(defun diredp-do-bookmark-dirs-recursive (ignore-marks-p &optional msg-p)diredp-do-bookmark-dirs-recursive5024,267131
(defun diredp-do-bookmark-in-bookmark-file-recursive (bookmark-file ; Bound to `M-+ C-M-B', aka `M-+ C-M-S-b')diredp-do-bookmark-in-bookmark-file-recursive5074,269580
(defun diredp-set-bookmark-file-bookmark-for-marked-recursive (bookmark-filediredp-set-bookmark-file-bookmark-for-marked-recursive5093,270685
(defun diredp-do-find-marked-files-recursive (&optional arg) ; Bound to `M-+ F'diredp-do-find-marked-files-recursive5112,271639
(defun diredp-do-search-recursive (regexp &optional ignore-marks-p) ; Bound to `M-+ A'diredp-do-search-recursive5150,273722
(defun diredp-do-query-replace-regexp-recursive (from to &optional arg)diredp-do-query-replace-regexp-recursive5163,274352
(defun diredp-do-grep-recursive (command-args) ; Bound to `M+ C-M-G'diredp-do-grep-recursive5200,276067
(defun diredp-marked-recursive (dirname &optional ignore-marks-p) ; Not bound to a keydiredp-marked-recursive5218,277015
(defun diredp-marked-recursive-other-window (dirname &optional ignore-marks-p) ; Bound to `M-+ C-M-*'diredp-marked-recursive-other-window5235,277864
(defun diredp-list-marked-recursive (&optional ignore-marks-p predicate) ; Bound to `M-+ C-M-l'diredp-list-marked-recursive5242,278263
(defun diredp-flag-auto-save-files-recursive (&optional arg) ; `M-+ #'diredp-flag-auto-save-files-recursive5262,279266
(defun diredp-copy-filename-as-kill-recursive (&optional arg) ; Bound to `M-+ M-w'diredp-copy-filename-as-kill-recursive5407,286625
(defun diredp-copy-abs-filenames-as-kill-recursive (&optional ignore-marks-p) ; Not bound.diredp-copy-abs-filenames-as-kill-recursive5442,288391
(defun diredp-mark-files-regexp-recursive (regexp &optional marker-char ignore-marks-p) ; Bound to `M-+ % m'diredp-mark-files-regexp-recursive5457,289136
(defun diredp-mark-extension-recursive (extension &optional arg) ; Bound to `M-+ * .'diredp-mark-extension-recursive5512,292055
(defun diredp-mark-autofiles-recursive (&optional arg) ; Bound to `M-+ * B'diredp-mark-autofiles-recursive5543,293645
(defun diredp-mark-executables-recursive (&optional arg) ; Bound to `M-+ * *'diredp-mark-executables-recursive5560,294426
(defun diredp-mark-directories-recursive (&optional arg) ; Bound to `M-+ * /'diredp-mark-directories-recursive5575,295111
(defun diredp-mark-symlinks-recursive (&optional arg) ; Bound to `M-+ * @'diredp-mark-symlinks-recursive5590,295912
(defun diredp-mark-recursive-1 (arg plural singular predicate-sexp)diredp-mark-recursive-15604,296573
(defun diredp-capitalize-recursive (&optional ignore-marks-p) ; Bound to `M-+ % c'diredp-capitalize-recursive5629,297878
(defun diredp-upcase-recursive (&optional ignore-marks-p) ; Bound to `M-+ % u'diredp-upcase-recursive5644,298625
(defun diredp-downcase-recursive (&optional ignore-marks-p) ; Bound to `M-+ % l'diredp-downcase-recursive5659,299357
(defun diredp-do-apply-function-recursive (function &optional arg) ; Bound to `M-+ @'diredp-do-apply-function-recursive5674,300095
(defun diredp-do-delete-recursive (arg) ; Bound to `M-+ D'diredp-do-delete-recursive5698,301319
(defun diredp-do-move-recursive (&optional ignore-marks-p) ; Bound to `M-+ R'diredp-do-move-recursive5751,304372
(defun diredp-do-copy-recursive (&optional ignore-marks-p) ; Bound to `M-+ C'diredp-do-copy-recursive5775,305399
(defun diredp-do-create-files-recursive (file-creator operation ignore-marks-p)diredp-do-create-files-recursive5803,306623
(defun diredp-create-files-non-directory-recursive (file-creator basename-constructor operationdiredp-create-files-non-directory-recursive5840,309016
(defun diredp-do-chxxx-recursive (attribute-name program op-symbol &optional ignore-marks-p default)diredp-do-chxxx-recursive5871,310616
(defun diredp-do-chmod-recursive (&optional ignore-marks-p) ; Bound to `M-+ M'diredp-do-chmod-recursive5907,312831
(defun diredp-do-touch-recursive (&optional ignore-marks-p)diredp-do-touch-recursive5955,315465
(defun diredp-do-redisplay-recursive (&optional msgp)diredp-do-redisplay-recursive5974,316453
(defun diredp-marked (dirname &optional n switches) ; Not bounddiredp-marked6008,318170
(defun diredp-marked-other-window (dirname &optional n switches) ; Bound to `C-M-*'diredp-marked-other-window6035,319753
(defun diredp-mark/unmark-extension (extension &optional unmark-p) ; Bound to `* .'diredp-mark/unmark-extension6058,321182
(defun diredp-mark-files-tagged-all/none (tags &optional none-p unmarkp prefix)diredp-mark-files-tagged-all/none6075,322138
(defun diredp-mark-files-tagged-some/not-all (tags &optional notallp unmarkp prefix)diredp-mark-files-tagged-some/not-all6102,323848
(defun diredp-mark-files-tagged-all (tags &optional none-p prefix) ; `T m *'diredp-mark-files-tagged-all6129,325581
(defun diredp-mark-files-tagged-none (tags &optional allp prefix) ; `T m ~ +'diredp-mark-files-tagged-none6144,326357
(defun diredp-mark-files-tagged-some (tags &optional somenotp prefix) ; `T m +'diredp-mark-files-tagged-some6159,327117
(defun diredp-mark-files-tagged-not-all (tags &optional somep prefix) ; `T m ~ *'diredp-mark-files-tagged-not-all6174,327902
(defun diredp-mark-files-tagged-regexp (regexp &optional notp prefix) ; `T m %'diredp-mark-files-tagged-regexp6189,328657
(defun diredp-unmark-files-tagged-regexp (regexp &optional notp prefix) ; `T u %'diredp-unmark-files-tagged-regexp6213,330158
(defun diredp-unmark-files-tagged-all (tags &optional none-p prefix) ; `T u *'diredp-unmark-files-tagged-all6237,331669
(defun diredp-unmark-files-tagged-none (tags &optional allp prefix) ; `T u ~ +'diredp-unmark-files-tagged-none6252,332457
(defun diredp-unmark-files-tagged-some (tags &optional somenotp prefix) ; `T u +'diredp-unmark-files-tagged-some6267,333231
(defun diredp-unmark-files-tagged-not-all (tags &optional somep prefix) ; `T u ~ *'diredp-unmark-files-tagged-not-all6282,334003
(defun diredp-do-tag (tags &optional prefix arg) ; `T > +'diredp-do-tag6297,334772
(defun diredp-tag (tags &optional prefix)diredp-tag6322,336086
(defun diredp-mouse-do-tag (event)      ; Not bounddiredp-mouse-do-tag6340,336830
(defun diredp-do-untag (tags &optional prefix arg) ; `T > -'diredp-do-untag6357,337571
(defun diredp-untag (tags &optional prefix)diredp-untag6383,338927
(defun diredp-mouse-do-untag (event)    ; Not bounddiredp-mouse-do-untag6401,339686
(defun diredp-do-remove-all-tags (&optional prefix arg) ; `T > 0'diredp-do-remove-all-tags6421,340624
(defun diredp-remove-all-tags (&optional prefix)diredp-remove-all-tags6442,341718
(defun diredp-mouse-do-remove-all-tags (event) ; Not bounddiredp-mouse-do-remove-all-tags6460,342491
(defun diredp-do-paste-add-tags (&optional prefix arg) ; `T > p', `T > C-y'diredp-do-paste-add-tags6477,343267
(defun diredp-paste-add-tags (&optional prefix)diredp-paste-add-tags6498,344466
(defun diredp-mouse-do-paste-add-tags (event) ; Not bounddiredp-mouse-do-paste-add-tags6517,345307
(defun diredp-do-paste-replace-tags (&optional prefix arg) ; `T > q'diredp-do-paste-replace-tags6535,346128
(defun diredp-paste-replace-tags (&optional prefix)diredp-paste-replace-tags6555,347298
(defun diredp-mouse-do-paste-replace-tags (event) ; Not bounddiredp-mouse-do-paste-replace-tags6575,348179
(defun diredp-do-set-tag-value (tag value &optional prefix arg) ; `T > v'diredp-do-set-tag-value6593,349027
(defun diredp-set-tag-value (tag value &optional prefix)diredp-set-tag-value6619,350424
(defun diredp-mouse-do-set-tag-value (event) ; Not bounddiredp-mouse-do-set-tag-value6638,351229
(defun diredp-mark-autofiles ()         ; Bound to `* B'diredp-mark-autofiles6660,352256
(defun diredp-unmark-autofiles ()diredp-unmark-autofiles6668,352501
(defun diredp-mark/unmark-autofiles (&optional unmarkp)diredp-mark/unmark-autofiles6676,352727
(defun diredp-do-bookmark (&optional prefix arg) ; Bound to `M-b'diredp-do-bookmark6768,357621
(defun diredp-mouse-do-bookmark (event) ; Not bounddiredp-mouse-do-bookmark6792,358938
(defun diredp-bookmark (&optional prefix file no-msg-p)diredp-bookmark6804,359535
(defun diredp-set-bookmark-file-bookmark-for-marked (bookmark-file ; Bound to `C-M-b'diredp-set-bookmark-file-bookmark-for-marked6848,361844
(defun diredp-do-bookmark-in-bookmark-file (bookmark-file ; Bound to `C-M-B' (aka `C-M-S-b')diredp-do-bookmark-in-bookmark-file6898,364215
(defun diredp-read-bookmark-file-args ()diredp-read-bookmark-file-args6951,366968
(defun dired-buffers-for-dir (dir &optional file)dired-buffers-for-dir6972,367979
(defun diredp-find-a-file (filename &optional wildcards) ; Not bounddiredp-find-a-file7008,369824
(defun diredp-find-a-file-other-frame (filename &optional wildcards) ; Not bounddiredp-find-a-file-other-frame7014,370074
(defun diredp-find-a-file-other-window (filename &optional wildcards) ; Not bounddiredp-find-a-file-other-window7020,370357
(defun diredp-find-a-file-read-args (prompt mustmatch) ; Not bounddiredp-find-a-file-read-args7026,370643
(defun diredp-find-file-reuse-dir-buffer () ; Not bounddiredp-find-file-reuse-dir-buffer7034,371063
(defun diredp-mouse-find-file-reuse-dir-buffer (event &optional find-file-func find-dir-func) ; Not bounddiredp-mouse-find-file-reuse-dir-buffer7047,371588
(defun diredp--reuse-dir-buffer-helper (file &optional find-file-func find-dir-func other-window)diredp--reuse-dir-buffer-helper7070,372620
(defalias 'toggle-diredp-find-file-reuse-dir 'diredp-toggle-find-file-reuse-dir)toggle-diredp-find-file-reuse-dir7111,375328
(defun diredp-toggle-find-file-reuse-dir (force-p) ; Bound to `C-M-R' (aka `C-M-S-r')diredp-toggle-find-file-reuse-dir7113,375424
(defun diredp-make-find-file-keys-reuse-dirs ()diredp-make-find-file-keys-reuse-dirs7145,376771
(defun diredp-make-find-file-keys-not-reuse-dirs ()diredp-make-find-file-keys-not-reuse-dirs7155,377513
(defun diredp-omit-marked ()            ; Not bounddiredp-omit-marked7166,378299
(defun diredp-omit-unmarked ()          ; Not bounddiredp-omit-unmarked7177,378731
(defun diredp-ediff (file2)             ; Bound to `='diredp-ediff7190,379212
(defun diredp-fewer-than-2-files-p (arg)diredp-fewer-than-2-files-p7227,381408
(defun diredp-do-apply-function (function &optional arg) ; Bound to `@'diredp-do-apply-function7238,381902
(defun dired-do-compress (&optional arg) ; Bound to `Z'dired-do-compress7262,382983
(defun dired-do-byte-compile (&optional arg) ; Bound to `B'dired-do-byte-compile7280,383792
(defun dired-do-load (&optional arg)    ; Bound to `L'dired-do-load7301,384737
(defun dired-do-search (regexp &optional arg interactivep)dired-do-search7368,387771
(defun dired-do-query-replace-regexp (from to &optional arg interactivep)dired-do-query-replace-regexp7396,388975
(defun diredp-do-grep (command-args)    ; Bound to `C-M-G'diredp-do-grep7437,391040
(defun diredp-do-grep-1 (&optional files)diredp-do-grep-17451,391769
(defun diredp-all-files ()diredp-all-files7526,395384
(defun dired-maybe-insert-subdir (dirname &optional switches no-error-if-not-dir-p)dired-maybe-insert-subdir7560,396974
(defun diredp-this-subdir ()diredp-this-subdir7616,399775
(defun dired-insert-subdir-validate (dirname &optional switches))dired-insert-subdir-validate7635,400527
(defun dired-insert-subdir-newpos (new-dir)dired-insert-subdir-newpos7662,401801
(defun diredp-hide-subdir-nomove (arg &optional next)diredp-hide-subdir-nomove7688,402759
(defun dired-do-find-marked-files (&optional arg interactivep) ; Bound to `F'dired-do-find-marked-files7803,407675
(defun dired-simultaneous-find-file (file-list option)dired-simultaneous-find-file7848,409455
(defun dired-do-run-mail ()dired-do-run-mail7959,415526
(defun dired-insert-set-properties (beg end)dired-insert-set-properties7977,416130
(defun diredp-mouseover-help (window buffer pos)diredp-mouseover-help8007,417851
(defun diredp-up-directory (&optional other-window) ; Bound to `^'diredp-up-directory8107,423380
(defun diredp-up-directory-reuse-dir-buffer (&optional other-window) ; Not bounddiredp-up-directory-reuse-dir-buffer8127,424325
(defun diredp-next-line (arg)           ; Bound to `SPC', `n', `C-n', `down'diredp-next-line8147,425344
(defun diredp-previous-line (arg)       ; Bound to `p', `C-p', `up'diredp-previous-line8178,427021
(defun diredp-next-dirline (arg &optional opoint) ; Bound to `>'diredp-next-dirline8192,427757
(defun diredp-prev-dirline (arg)        ; Bound to `<'diredp-prev-dirline8215,428850
(defun diredp-next-subdir (arg &optional no-error-if-not-found no-skip) ; Bound to `C-M-n'diredp-next-subdir8223,429246
(defun diredp-prev-subdir (arg &optional no-error-if-not-found no-skip) ; Bound to `C-M-p'diredp-prev-subdir8253,430731
(defun dired-get-filename (&optional localp no-error-if-not-filep)dired-get-filename8273,431685
(defun dired-do-flagged-delete (&optional no-msg) ; Bound to `x'dired-do-flagged-delete8507,444583
(defun dired-do-delete (&optional arg)  ; Bound to `D'dired-do-delete8539,445908
(defun diredp-internal-do-deletions (file-alist arg &optional trash)diredp-internal-do-deletions8559,446803
(defun dired-mark-pop-up (buffer-or-name op-symbol files function &rest args)dired-mark-pop-up8604,449026
(defun dired-mark-files-regexp (regexp &optional marker-char localp)dired-mark-files-regexp8661,451798
(defun dired-mark-files-containing-regexp (regexp &optional marker-char)dired-mark-files-containing-regexp8740,455556
(defun dired-mark-symlinks (unflag-p)dired-mark-symlinks8777,457562
(defun dired-mark-directories (unflag-p)dired-mark-directories8790,457951
(defun dired-mark-executables (unflag-p)dired-mark-executables8804,458449
(defun dired-flag-auto-save-files (&optional unflag-p)dired-flag-auto-save-files8817,458847
(defun diredp-capitalize (&optional arg) ; Bound to `% c'diredp-capitalize8836,459912
(defun diredp-delete-this-file (&optional use-trash-can) ; Bound to `C-k', `delete'diredp-delete-this-file8844,460286
(defun diredp-capitalize-this-file ()   ; Bound to `M-c'diredp-capitalize-this-file8865,461292
(defun diredp-downcase-this-file ()     ; Bound to `M-l'diredp-downcase-this-file8871,461542
(defun diredp-upcase-this-file ()       ; Bound to `M-u'diredp-upcase-this-file8876,461715
(defun diredp-rename-this-file ()       ; Bound to `r'diredp-rename-this-file8881,461886
(defun diredp-copy-this-file ()         ; Not bounddiredp-copy-this-file8908,462798
(defun diredp-relsymlink-this-file ()   ; Bound to `y'diredp-relsymlink-this-file8914,462982
(defun diredp-symlink-this-file ()      ; Not bounddiredp-symlink-this-file8920,463233
(defun diredp-hardlink-this-file ()     ; Not bounddiredp-hardlink-this-file8926,463439
(defun diredp-print-this-file ()        ; Bound to `M-p'diredp-print-this-file8932,463648
(defun diredp-grep-this-file ()         ; Not bounddiredp-grep-this-file8937,463806
(defun diredp-compress-this-file ()     ; Bound to `z'diredp-compress-this-file8947,464209
(defun diredp-async-shell-command-this-file (command filelist) ; Not bounddiredp-async-shell-command-this-file8952,464385
(defun diredp-shell-command-this-file (command filelist) ; Not bounddiredp-shell-command-this-file8963,465018
(defun diredp-bookmark-this-file (&optional prefix) ; Bound to `C-B' (`C-S-b')diredp-bookmark-this-file8970,465373
(defun diredp-tag-this-file (tags &optional prefix) ; Bound to `T +'diredp-tag-this-file8979,465774
(defun diredp-untag-this-file (tags &optional prefix arg) ; Bound to `T -'diredp-untag-this-file8990,466304
(defun diredp-remove-all-tags-this-file (&optional prefix msgp) ; Bound to `T 0'diredp-remove-all-tags-this-file9007,467275
(defun diredp-paste-add-tags-this-file (&optional prefix msgp) ; Bound to `T p', `T C-y'diredp-paste-add-tags-this-file9019,467824
(defun diredp-paste-replace-tags-this-file (&optional prefix msgp) ; Bound to `T q'diredp-paste-replace-tags-this-file9032,468418
(defun diredp-set-tag-value-this-file (tag value &optional prefix msgp) ; Bound to `T v'diredp-set-tag-value-this-file9045,469026
(defun diredp-copy-tags-this-file (&optional prefix msgp) ; Bound to `T c', `T M-w'diredp-copy-tags-this-file9060,469742
(defun diredp-mouse-copy-tags (event)   ; Not bounddiredp-mouse-copy-tags9074,470431
(defalias 'diredp-show-metadata 'diredp-describe-autofile)diredp-show-metadata9112,472291
(defun diredp-describe-autofile (&optional internal-form-p)diredp-describe-autofile9114,472365
(defun diredp-mouse-describe-autofile (event &optional internal-form-p) ; Not bounddiredp-mouse-describe-autofile9132,473096
(defalias 'diredp-show-metadata-for-marked 'diredp-describe-marked-autofiles)diredp-show-metadata-for-marked9154,474060
(defun diredp-describe-marked-autofiles (&optional internal-form-p interactivep)diredp-describe-marked-autofiles9156,474153
(defun diredp-byte-compile-this-file () ; Bound to `b'diredp-byte-compile-this-file9188,475891
(defun diredp-load-this-file ()         ; Not bounddiredp-load-this-file9193,476075
(defun diredp-chmod-this-file ()        ; Bound to `M-m'diredp-chmod-this-file9198,476226
(defun dired-mark-sexp (predicate &optional unmark-p) ; Bound to `M-(', `* ('dired-mark-sexp9225,477210
(defun diredp-this-file-marked-p (&optional mark-char)diredp-this-file-marked-p9363,485842
(defun diredp-this-file-unmarked-p (&optional mark-char)diredp-this-file-unmarked-p9373,486403
(defun diredp-mark-region-files (&optional unmark-p) ; Not bounddiredp-mark-region-files9386,487087
(defun diredp-unmark-region-files (&optional mark-p) ; Not bounddiredp-unmark-region-files9399,487798
(defun diredp-flag-region-files-for-deletion () ; Not bounddiredp-flag-region-files-for-deletion9412,488505
(defun diredp-toggle-marks-in-region (start end) ; Not bounddiredp-toggle-marks-in-region9425,489179
(defvar diredp-file-line-overlay nil)diredp-file-line-overlay9451,490151
(defun diredp-mouse-3-menu (event)      ; Bound to `mouse-3'diredp-mouse-3-menu9454,490205
(defun diredp-find-file-other-frame ()  ; Bound to `C-o'diredp-find-file-other-frame9634,501899
(defun diredp-mouse-find-file-other-frame (event) ; Bound to `M-mouse-2'diredp-mouse-find-file-other-frame9640,502131
(defun dired-mouse-find-file-other-window (event) ; Bound to `mouse-2'dired-mouse-find-file-other-window9651,502498
(defun diredp-mouse-view-file (event)   ; Not bounddiredp-mouse-view-file9663,503049
(defun diredp-mouse-ediff (event)       ; Not bounddiredp-mouse-ediff9678,503752
(defun diredp-mouse-diff (event &optional switches) ; Not bounddiredp-mouse-diff9692,504336
(defun diredp-mouse-backup-diff (event) ; Not bounddiredp-mouse-backup-diff9723,506374
(defun diredp-mouse-mark (event)        ; Not bounddiredp-mouse-mark9748,507965
(defun diredp-mouse-unmark (event)      ; Not bounddiredp-mouse-unmark9765,508664
(defun diredp-mouse-mark/unmark (event) ; Not bounddiredp-mouse-mark/unmark9778,509222
(defun diredp-mouse-mark-region-files (event) ; Bound to `S-mouse-1'diredp-mouse-mark-region-files9799,510458
(defun diredp-mouse-mark/unmark-mark-region-files (event) ; Not bounddiredp-mouse-mark/unmark-mark-region-files9809,510889
(defun diredp-mouse-flag-file-deletion (event) ; Not bounddiredp-mouse-flag-file-deletion9829,511831
(defun diredp-mouse-do-copy (event)     ; Not bounddiredp-mouse-do-copy9840,512253
(defun diredp-mouse-do-rename (event)   ; Not bounddiredp-mouse-do-rename9851,512708
(defun diredp-mouse-upcase (event)      ; Not bounddiredp-mouse-upcase9860,513050
(defun diredp-mouse-downcase (event)    ; Not bounddiredp-mouse-downcase9869,513378
(defun diredp-mouse-do-delete (event)   ; Not bounddiredp-mouse-do-delete9878,513708
(defun diredp-mouse-do-shell-command (event) ; Not bounddiredp-mouse-do-shell-command9890,514210
(defun diredp-mouse-do-symlink (event)  ; Not bounddiredp-mouse-do-symlink9913,515294
(defun diredp-mouse-do-hardlink (event) ; Not bounddiredp-mouse-do-hardlink9922,515640
(defun diredp-mouse-do-print (event)    ; Not bounddiredp-mouse-do-print9931,515991
(defun diredp-mouse-do-grep (event)     ; Not bounddiredp-mouse-do-grep9946,516652
(defun diredp-mouse-do-compress (event) ; Not bounddiredp-mouse-do-compress9956,517005
(defun diredp-mouse-do-byte-compile (event) ; Not bounddiredp-mouse-do-byte-compile9967,517386
(defun diredp-mouse-do-load (event)     ; Not bounddiredp-mouse-do-load9978,517769
(defun diredp-mouse-do-chmod (event)    ; Not bounddiredp-mouse-do-chmod9989,518135
(defun diredp-describe-mode (&optional buffer)diredp-describe-mode10080,522282
(defun diredp-dired-plus-help ()diredp-dired-plus-help10101,523204
(defun diredp-dired-plus-description+links ()diredp-dired-plus-description+links10106,523355
(defun diredp-dired-plus-help-link ()diredp-dired-plus-help-link10128,524206
(defun diredp-dired-plus-description ()diredp-dired-plus-description10139,524802
(defun diredp-send-bug-report ()diredp-send-bug-report10609,545642
(define-key dired-mode-map [menu-bar] nil)dired-mode-map10628,546237
(define-key dired-mode-map [menu-bar edit] 'undefined)dired-mode-map10630,546328
(defvar diredp-menu-bar-single-menu (make-sparse-keymap "Single"))diredp-menu-bar-single-menu10637,546461
(define-key dired-mode-map [menu-bar immediate] (cons "Single" diredp-menu-bar-single-menu))dired-mode-map10638,546528
(define-key diredp-menu-bar-single-menu [separator-describe] '("--")) ; ---------------------diredp-menu-bar-single-menu10654,547389
(define-key diredp-menu-bar-single-menu [chmod]diredp-menu-bar-single-menu10664,547882
(define-key diredp-menu-bar-single-menu [separator-change] '("--")) ; -----------------------diredp-menu-bar-single-menu10671,548285
(define-key diredp-menu-bar-single-menu [load]diredp-menu-bar-single-menu10673,548380
(define-key diredp-menu-bar-single-menu [compile]diredp-menu-bar-single-menu10676,548510
(define-key diredp-menu-bar-single-menu [diredp-async-shell-command-this-file]diredp-menu-bar-single-menu10679,548667
(define-key diredp-menu-bar-single-menu [command]diredp-menu-bar-single-menu10682,548896
(define-key diredp-menu-bar-single-menu [compress]diredp-menu-bar-single-menu10685,549062
(define-key diredp-menu-bar-single-menu [grep]diredp-menu-bar-single-menu10688,549224
(define-key diredp-menu-bar-single-menu [print]diredp-menu-bar-single-menu10690,549347
(define-key diredp-menu-bar-single-menu [separator-misc] '("--")) ; -------------------------diredp-menu-bar-single-menu10698,549743
(define-key diredp-menu-bar-single-menu [delete]diredp-menu-bar-single-menu10700,549838
(define-key diredp-menu-bar-single-menu [separator-delete] '("--")) ; -----------------------diredp-menu-bar-single-menu10702,549966
(define-key diredp-menu-bar-single-menu [backup-diff]diredp-menu-bar-single-menu10704,550061
(define-key diredp-menu-bar-single-menu [diff]diredp-menu-bar-single-menu10707,550223
(define-key diredp-menu-bar-single-menu [ediff]diredp-menu-bar-single-menu10710,550373
(define-key diredp-menu-bar-single-menu [separator-diff] '("--")) ; -------------------------diredp-menu-bar-single-menu10712,550512
(define-key diredp-menu-bar-single-menu [diredp-kill-this-tree]diredp-menu-bar-single-menu10714,550607
(define-key diredp-menu-bar-single-menu [dired-kill-subdir]diredp-menu-bar-single-menu10720,550973
(define-key diredp-menu-bar-single-menu [diredp-dired-this-subdir]diredp-menu-bar-single-menu10724,551253
(define-key diredp-menu-bar-single-menu [insert-subdir]diredp-menu-bar-single-menu10731,551773
(define-key diredp-menu-bar-single-menu [goto-subdir]diredp-menu-bar-single-menu10737,552122
(define-key diredp-menu-bar-single-menu [separator-subdir] '("--" ; ------------------------diredp-menu-bar-single-menu10743,552476
(define-key diredp-menu-bar-single-menu [view]diredp-menu-bar-single-menu10748,552810
(define-key diredp-menu-bar-single-menu [display]diredp-menu-bar-single-menu10751,552961
(defvar diredp-single-open-menu (make-sparse-keymap "Rename")diredp-single-open-menu10758,553161
(define-key diredp-menu-bar-single-menu [multiple-open] (cons "Open" diredp-single-open-menu))diredp-menu-bar-single-menu10760,553277
(define-key diredp-single-open-menu [find-file-other-frame]diredp-single-open-menu10771,553817
(define-key diredp-single-open-menu [find-file-other-window]diredp-single-open-menu10774,553997
(define-key diredp-single-open-menu [find-file]diredp-single-open-menu10777,554180
(defvar diredp-single-rename-menu (make-sparse-keymap "Rename")diredp-single-rename-menu10783,554329
(define-key diredp-menu-bar-single-menu [multiple-case] (cons "Rename" diredp-single-rename-menu))diredp-menu-bar-single-menu10785,554449
(define-key diredp-single-rename-menu [single-rename-capitalize]diredp-single-rename-menu10787,554549
(define-key diredp-single-rename-menu [single-rename-downcase]diredp-single-rename-menu10790,554732
(define-key diredp-single-rename-menu [single-rename-upcase]diredp-single-rename-menu10795,555067
(defvar diredp-single-move-copy-link-menu (make-sparse-keymap "Move / Copy / Link")diredp-single-move-copy-link-menu10803,555360
(define-key diredp-menu-bar-single-menu [multiple-move-copy-link]diredp-menu-bar-single-menu10805,555512
(define-key diredp-single-move-copy-link-menu [single-hardlink]diredp-single-move-copy-link-menu10808,555644
(define-key diredp-single-move-copy-link-menu [single-copy]diredp-single-move-copy-link-menu10821,556503
(define-key diredp-single-move-copy-link-menu [single-rename]diredp-single-move-copy-link-menu10823,556642
(defvar diredp-single-image-menu (make-sparse-keymap "Image"))diredp-single-image-menu10830,556861
(defalias 'diredp-single-image-menu diredp-single-image-menu)diredp-single-image-menu10831,556924
(define-key diredp-menu-bar-single-menu [image]diredp-menu-bar-single-menu10832,556986
(define-key diredp-single-image-menu [diredp-image-dired-display-thumb]diredp-single-image-menu10837,557235
(define-key diredp-single-image-menu [diredp-image-dired-create-thumb]diredp-single-image-menu10840,557441
(define-key diredp-single-image-menu [diredp-image-dired-edit-comment-and-tags]diredp-single-image-menu10843,557636
(define-key diredp-single-image-menu [diredp-image-dired-delete-tag]diredp-single-image-menu10846,557854
(define-key diredp-single-image-menu [diredp-image-dired-tag-file]diredp-single-image-menu10849,558052
(define-key diredp-single-image-menu [diredp-image-dired-comment-file]diredp-single-image-menu10852,558217
(define-key diredp-single-image-menu [diredp-image-dired-copy-with-exif-name]diredp-single-image-menu10855,558398
(define-key diredp-single-image-menu [image-dired-dired-display-external]diredp-single-image-menu10858,558620
(define-key diredp-single-image-menu [image-dired-dired-display-image]diredp-single-image-menu10861,558814
(define-key diredp-single-image-menu [diredp-image-show-this-file]diredp-single-image-menu10864,559021
(define-key diredp-single-image-menu [dired-find-file]diredp-single-image-menu10867,559233
(defvar diredp-menu-bar-multiple-menu (make-sparse-keymap "Multiple"))diredp-menu-bar-multiple-menu10950,563648
(define-key dired-mode-map [menu-bar operate] (cons "Multiple" diredp-menu-bar-multiple-menu))dired-mode-map10951,563719
(define-key diredp-menu-bar-multiple-menu [diredp-describe-marked-autofiles]diredp-menu-bar-multiple-menu10959,564164
(define-key diredp-menu-bar-multiple-menu [separator-describe] '("--")) ; -----------------------diredp-menu-bar-multiple-menu10963,564422
(define-key diredp-menu-bar-multiple-menu [chmod]diredp-menu-bar-multiple-menu10973,564919
(define-key diredp-menu-bar-multiple-menu [separator-change] '("--")) ; -------------------------diredp-menu-bar-multiple-menu10980,565310
(define-key diredp-menu-bar-multiple-menu [load]diredp-menu-bar-multiple-menu10982,565409
(define-key diredp-menu-bar-multiple-menu [compile]diredp-menu-bar-multiple-menu10984,565532
(define-key diredp-menu-bar-multiple-menu [command]diredp-menu-bar-multiple-menu10990,565949
(define-key diredp-menu-bar-multiple-menu [compress]diredp-menu-bar-multiple-menu10997,566339
(define-key diredp-menu-bar-multiple-menu [diredp-do-apply-function]diredp-menu-bar-multiple-menu10999,566489
(define-key diredp-menu-bar-multiple-menu [print]diredp-menu-bar-multiple-menu11002,566720
(define-key diredp-menu-bar-multiple-menu [separator-misc] '("--")) ; ---------------------------diredp-menu-bar-multiple-menu11012,567304
(define-key diredp-menu-bar-multiple-menu [diredp-copy-abs-filenames-as-kill]diredp-menu-bar-multiple-menu11014,567403
(define-key diredp-menu-bar-multiple-menu [kill-ring]diredp-menu-bar-multiple-menu11018,567646
(define-key diredp-menu-bar-multiple-menu [diredp-list-marked]diredp-menu-bar-multiple-menu11021,567833
(define-key diredp-menu-bar-multiple-menu [diredp-insert-subdirs]diredp-menu-bar-multiple-menu11024,568034
(defvar diredp-multiple-dired-menu (make-sparse-keymap "Dired")diredp-multiple-dired-menu11040,568785
(define-key diredp-menu-bar-multiple-menu [multiple-dired]diredp-menu-bar-multiple-menu11042,568906
(define-key diredp-multiple-dired-menu [diredp-marked-other-window]diredp-multiple-dired-menu11049,569287
(define-key diredp-multiple-dired-menu [diredp-marked]diredp-multiple-dired-menu11055,569715
(defvar diredp-multiple-omit-menu (make-sparse-keymap "Omit")diredp-multiple-omit-menu11065,570118
(define-key diredp-menu-bar-multiple-menu [multiple-omit] (cons "Omit" diredp-multiple-omit-menu))diredp-menu-bar-multiple-menu11067,570236
(define-key diredp-multiple-omit-menu [omit-unmarked]diredp-multiple-omit-menu11069,570336
(define-key diredp-multiple-omit-menu [omit-marked]diredp-multiple-omit-menu11071,570480
(defvar diredp-multiple-delete-menu (make-sparse-keymap "Delete")diredp-multiple-delete-menu11077,570652
(define-key diredp-menu-bar-multiple-menu [multiple-delete] (cons "Delete" diredp-multiple-delete-menu))diredp-menu-bar-multiple-menu11079,570776
(define-key diredp-multiple-delete-menu [delete-flagged]diredp-multiple-delete-menu11081,570882
(define-key diredp-multiple-delete-menu [delete]diredp-multiple-delete-menu11084,571050
(defvar diredp-multiple-rename-menu (make-sparse-keymap "Rename")diredp-multiple-rename-menu11091,571269
(define-key diredp-menu-bar-multiple-menu [multiple-case] (cons "Rename" diredp-multiple-rename-menu))diredp-menu-bar-multiple-menu11093,571393
(define-key diredp-multiple-rename-menu [multiple-rename-rename]diredp-multiple-rename-menu11095,571497
(define-key diredp-multiple-rename-menu [multiple-rename-capitalize]diredp-multiple-rename-menu11099,571695
(define-key diredp-multiple-rename-menu [multiple-rename-downcase]diredp-multiple-rename-menu11102,571879
(define-key diredp-multiple-rename-menu [multiple-rename-upcase]diredp-multiple-rename-menu11106,572120
(defvar diredp-multiple-move-copy-link-menu (make-sparse-keymap "Move / Copy / Link")diredp-multiple-move-copy-link-menu11114,572403
(define-key diredp-menu-bar-multiple-menu [multiple-move-copy-link]diredp-menu-bar-multiple-menu11116,572559
(define-key diredp-multiple-move-copy-link-menu [multiple-move-copy-link-hardlink]diredp-multiple-move-copy-link-menu11119,572695
(define-key diredp-multiple-move-copy-link-menu [multiple-move-copy-link-copy]diredp-multiple-move-copy-link-menu11133,573636
(define-key diredp-multiple-move-copy-link-menu [multiple-move-copy-link-rename]diredp-multiple-move-copy-link-menu11135,573804
(defvar diredp-multiple-images-menu (make-sparse-keymap "Images"))diredp-multiple-images-menu11141,574015
(defalias 'diredp-multiple-images-menu diredp-multiple-images-menu)diredp-multiple-images-menu11142,574082
(define-key diredp-menu-bar-multiple-menu [images]diredp-menu-bar-multiple-menu11143,574150
(define-key diredp-menu-bar-multiple-menu [image-dired-delete-tag] nil)diredp-menu-bar-multiple-menu11154,574690
(define-key diredp-menu-bar-multiple-menu [image-dired-tag-files] nil)diredp-menu-bar-multiple-menu11155,574762
(define-key diredp-menu-bar-multiple-menu [image-dired-dired-comment-files] nil)diredp-menu-bar-multiple-menu11156,574833
(define-key diredp-menu-bar-multiple-menu [image-dired-display-thumbs] nil)diredp-menu-bar-multiple-menu11157,574914
(define-key diredp-multiple-images-menu [image-dired-delete-tag]diredp-multiple-images-menu11160,575034
(define-key diredp-multiple-images-menu [image-dired-tag-files]diredp-multiple-images-menu11163,575201
(define-key diredp-multiple-images-menu [image-dired-dired-comment-files]diredp-multiple-images-menu11166,575360
(define-key diredp-multiple-images-menu [image-dired-display-thumbs]diredp-multiple-images-menu11169,575545
(define-key diredp-multiple-images-menu [diredp-do-display-images]diredp-multiple-images-menu11172,575732
(defvar diredp-multiple-search-menu (make-sparse-keymap "Search"))diredp-multiple-search-menu11213,577788
(define-key diredp-menu-bar-multiple-menu [search]diredp-menu-bar-multiple-menu11214,577855
(define-key diredp-multiple-search-menu [query-replace]diredp-multiple-search-menu11234,578973
(define-key diredp-multiple-search-menu [search]diredp-multiple-search-menu11243,579459
(define-key diredp-multiple-search-menu [grep]diredp-multiple-search-menu11245,579597
(defvar diredp-multiple-bookmarks-menu (make-sparse-keymap "Bookmark"))diredp-multiple-bookmarks-menu11251,579771
(define-key diredp-menu-bar-multiple-menu [bookmark]diredp-menu-bar-multiple-menu11252,579843
(define-key diredp-multiple-bookmarks-menudiredp-multiple-bookmarks-menu11282,581614
(define-key diredp-multiple-bookmarks-menudiredp-multiple-bookmarks-menu11287,581916
(define-key diredp-multiple-bookmarks-menu [diredp-do-bookmark-dirs-recursive]diredp-multiple-bookmarks-menu11292,582237
(define-key diredp-multiple-bookmarks-menu [diredp-do-bookmark-recursive]diredp-multiple-bookmarks-menu11295,582497
(define-key diredp-multiple-bookmarks-menu [separator-book-1] '("--")) ; ---------------diredp-multiple-bookmarks-menu11298,582720
(define-key diredp-multiple-bookmarks-menu [diredp-do-bookmark-in-bookmark-file]diredp-multiple-bookmarks-menu11300,582810
(define-key diredp-multiple-bookmarks-menu [diredp-set-bookmark-file-bookmark-for-marked]diredp-multiple-bookmarks-menu11303,583052
(define-key diredp-multiple-bookmarks-menu [diredp-do-bookmark]diredp-multiple-bookmarks-menu11306,583319
(defvar diredp-multiple-recursive-menu (make-sparse-keymap "Marked Here and Below"))diredp-multiple-recursive-menu11312,583527
(define-key diredp-menu-bar-multiple-menu [operate-recursive]diredp-menu-bar-multiple-menu11313,583612
(define-key diredp-multiple-recursive-menu [chmod]diredp-multiple-recursive-menu11330,584593
(define-key diredp-multiple-recursive-menu [separator-change] '("--")) ; ----------------diredp-multiple-recursive-menu11337,585055
(define-key diredp-multiple-recursive-menu [diredp-do-shell-command-recursive]diredp-multiple-recursive-menu11343,585474
(define-key diredp-multiple-recursive-menu [diredp-do-apply-function-recursive]diredp-multiple-recursive-menu11346,585711
(define-key diredp-multiple-recursive-menu [diredp-do-print-recursive]diredp-multiple-recursive-menu11349,585960
(define-key diredp-multiple-recursive-menu [separator-misc] '("--")) ; ------------------diredp-multiple-recursive-menu11365,586983
(define-key diredp-multiple-recursive-menu [diredp-do-delete-recursive]diredp-multiple-recursive-menu11367,587074
(define-key diredp-multiple-recursive-menu [separator-delete] '("--")) ; ----------------diredp-multiple-recursive-menu11370,587298
(define-key diredp-multiple-recursive-menu [diredp-do-hardlink-recursive]diredp-multiple-recursive-menu11372,587389
(define-key diredp-multiple-recursive-menu [diredp-do-copy-recursive]diredp-multiple-recursive-menu11386,588415
(define-key diredp-multiple-recursive-menu [diredp-do-move-recursive]diredp-multiple-recursive-menu11389,588624
(define-key diredp-multiple-recursive-menu [separator-copy-move] '("--")) ; -------------diredp-multiple-recursive-menu11392,588833
(define-key diredp-multiple-recursive-menu [diredp-capitalize-recursive]diredp-multiple-recursive-menu11394,588924
(define-key diredp-multiple-recursive-menu [diredp-downcase-recursive]diredp-multiple-recursive-menu11398,589217
(define-key diredp-multiple-recursive-menu [diredp-upcase-recursive]diredp-multiple-recursive-menu11402,589503
(define-key diredp-multiple-recursive-menu [separator-lettercase] '("--")) ; ------------diredp-multiple-recursive-menu11406,589783
(define-key diredp-multiple-recursive-menu [diredp-list-marked-recursive]diredp-multiple-recursive-menu11408,589874
(define-key diredp-multiple-recursive-menu [diredp-copy-filename-as-kill-recursive]diredp-multiple-recursive-menu11411,590091
(define-key diredp-multiple-recursive-menu [diredp-insert-subdirs-recursive]diredp-multiple-recursive-menu11414,590345
(define-key diredp-multiple-recursive-menu [separator-dirs] '("--")) ; ------------------diredp-multiple-recursive-menu11417,590554
(define-key diredp-multiple-recursive-menu [diredp-marked-recursive-other-window]diredp-multiple-recursive-menu11419,590645
(define-key diredp-multiple-recursive-menu [diredp-marked-recursive]diredp-multiple-recursive-menu11422,590909
(define-key diredp-multiple-recursive-menu [diredp-do-find-marked-files-recursive]diredp-multiple-recursive-menu11430,591432
(defvar diredp-images-recursive-menu (make-sparse-keymap "Images"))diredp-images-recursive-menu11437,591722
(defalias 'diredp-images-recursive-menu diredp-images-recursive-menu)diredp-images-recursive-menu11438,591790
(define-key diredp-multiple-recursive-menu [images]diredp-multiple-recursive-menu11450,592470
(define-key diredp-images-recursive-menu [diredp-image-dired-delete-tag-recursive]diredp-images-recursive-menu11453,592622
(define-key diredp-images-recursive-menu [diredp-image-dired-tag-files-recursive]diredp-images-recursive-menu11456,592876
(define-key diredp-images-recursive-menu [diredp-image-dired-comment-files-recursive]diredp-images-recursive-menu11459,593119
(define-key diredp-images-recursive-menu [diredp-image-dired-display-thumbs-recursive]diredp-images-recursive-menu11462,593368
(defvar diredp-menu-bar-search-recursive-menu (make-sparse-keymap "Search"))diredp-menu-bar-search-recursive-menu11489,594865
(define-key diredp-multiple-recursive-menu [search]diredp-multiple-recursive-menu11490,594942
(define-key diredp-menu-bar-search-recursive-menu [diredp-do-query-replace-regexp-recursive]diredp-menu-bar-search-recursive-menu11499,595593
(define-key diredp-menu-bar-search-recursive-menu [diredp-do-search-recursive]diredp-menu-bar-search-recursive-menu11502,595840
(define-key diredp-menu-bar-search-recursive-menu [diredp-do-grep-recursive]diredp-menu-bar-search-recursive-menu11505,596054
(defvar diredp-menu-bar-bookmarks-recursive-menu (make-sparse-keymap "Bookmark"))diredp-menu-bar-bookmarks-recursive-menu11512,596324
(define-key diredp-multiple-recursive-menu [bookmarks]diredp-multiple-recursive-menu11513,596406
(define-key diredp-menu-bar-bookmarks-recursive-menudiredp-menu-bar-bookmarks-recursive-menu11515,596523
(define-key diredp-menu-bar-bookmarks-recursive-menudiredp-menu-bar-bookmarks-recursive-menu11519,596814
(define-key diredp-menu-bar-bookmarks-recursive-menu [diredp-do-bookmark-dirs-recursive]diredp-menu-bar-bookmarks-recursive-menu11524,597128
(define-key diredp-menu-bar-bookmarks-recursive-menu [diredp-do-bookmark-recursive]diredp-menu-bar-bookmarks-recursive-menu11527,597381
(defvar diredp-menu-bar-regexp-menu (make-sparse-keymap "Regexp"))diredp-menu-bar-regexp-menu11537,597677
(define-key dired-mode-map [menu-bar regexp] (cons "Regexp" diredp-menu-bar-regexp-menu))dired-mode-map11538,597744
(define-key diredp-menu-bar-regexp-menu [hardlink]diredp-menu-bar-regexp-menu11540,597835
(define-key diredp-menu-bar-regexp-menu [copy]diredp-menu-bar-regexp-menu11556,598765
(define-key diredp-menu-bar-regexp-menu [rename]diredp-menu-bar-regexp-menu11558,598904
(define-key diredp-menu-bar-regexp-menu [flag]diredp-menu-bar-regexp-menu11560,599047
(define-key diredp-menu-bar-regexp-menu [image-dired-mark-tagged-files]diredp-menu-bar-regexp-menu11562,599192
(define-key diredp-menu-bar-regexp-menu [mark-cont]diredp-menu-bar-regexp-menu11566,599451
(define-key diredp-menu-bar-regexp-menu [mark]diredp-menu-bar-regexp-menu11569,599628
(defvar diredp-regexp-recursive-menu (make-sparse-keymap "Here and Below"))diredp-regexp-recursive-menu11576,599806
(define-key diredp-menu-bar-regexp-menu [mark-recursive]diredp-menu-bar-regexp-menu11577,599882
(define-key diredp-regexp-recursive-menu [diredp-mark-files-regexp-recursive]diredp-regexp-recursive-menu11579,599995
(defvar diredp-menu-bar-marks-menu (make-sparse-keymap "Marks"))diredp-menu-bar-marks-menu11598,600900
(define-key dired-mode-map [menu-bar mark] (cons "Marks" diredp-menu-bar-marks-menu))dired-mode-map11599,600965
(define-key diredp-menu-bar-marks-menu [prev]diredp-menu-bar-marks-menu11607,601389
(define-key diredp-menu-bar-marks-menu [next]diredp-menu-bar-marks-menu11609,601529
(define-key diredp-menu-bar-marks-menu [marks]diredp-menu-bar-marks-menu11611,601661
(define-key diredp-menu-bar-marks-menu [toggle-marks]diredp-menu-bar-marks-menu11614,601816
(defvar diredp-marks-omit-menu (make-sparse-keymap "Omit")diredp-marks-omit-menu11665,604799
(define-key diredp-menu-bar-marks-menu [marks-omit] (cons "Omit" diredp-marks-omit-menu))diredp-menu-bar-marks-menu11667,604911
(define-key diredp-marks-omit-menu [marks-omit-unmarked]diredp-marks-omit-menu11669,605002
(define-key diredp-marks-omit-menu [marks-omit-marked]diredp-marks-omit-menu11671,605149
(defvar diredp-marks-flag-menu (make-sparse-keymap "Flag")diredp-marks-flag-menu11677,605319
(define-key diredp-menu-bar-marks-menu [mark-flag] (cons "Flag" diredp-marks-flag-menu))diredp-menu-bar-marks-menu11679,605431
(define-key diredp-marks-flag-menu [marks-flag-garbage-files]diredp-marks-flag-menu11685,605770
(define-key diredp-marks-flag-menu [marks-flag-backup-files]diredp-marks-flag-menu11688,605939
(define-key diredp-marks-flag-menu [marks-flag-auto-save-files]diredp-marks-flag-menu11691,606107
(define-key diredp-marks-flag-menu [marks-flag-region]diredp-marks-flag-menu11694,606283
(define-key diredp-marks-flag-menu [marks-flag-deletion]diredp-marks-flag-menu11700,606634
(defvar diredp-marks-unmark-menu (make-sparse-keymap "Unmark")diredp-marks-unmark-menu11708,606873
(define-key diredp-menu-bar-marks-menu [mark-mark] (cons "Unmark" diredp-marks-unmark-menu))diredp-menu-bar-marks-menu11710,606991
(define-key diredp-marks-unmark-menu [unmark-autofiles]diredp-marks-unmark-menu11712,607085
(define-key diredp-marks-unmark-menu [unmark-all]diredp-marks-unmark-menu11716,607302
(define-key diredp-marks-unmark-menu [unmark-with]diredp-marks-unmark-menu11718,607444
(define-key diredp-marks-unmark-menu [unmark-region]diredp-marks-unmark-menu11721,607624
(define-key diredp-marks-unmark-menu [unmark-this]diredp-marks-unmark-menu11727,607942
(defvar diredp-marks-mark-menu (make-sparse-keymap "Mark")diredp-marks-mark-menu11735,608162
(define-key diredp-menu-bar-marks-menu [marks-mark] (cons "Mark" diredp-marks-mark-menu))diredp-menu-bar-marks-menu11737,608274
(define-key diredp-marks-mark-menu [marks-image-dired-mark-tagged-files]diredp-marks-mark-menu11743,608583
(define-key diredp-marks-mark-menu [marks-mark-cont]diredp-marks-mark-menu11747,608843
(define-key diredp-marks-mark-menu [marks-mark...]diredp-marks-mark-menu11750,609034
(define-key diredp-marks-mark-menu [marks-mark-extension]diredp-marks-mark-menu11757,609429
(define-key diredp-marks-mark-menu [marks-mark-autofiles]diredp-marks-mark-menu11760,609604
(define-key diredp-marks-mark-menu [marks-mark-symlinks]diredp-marks-mark-menu11764,609817
(define-key diredp-marks-mark-menu [marks-mark-directories]diredp-marks-mark-menu11767,610001
(define-key diredp-marks-mark-menu [marks-mark-directory]diredp-marks-mark-menu11770,610172
(define-key diredp-marks-mark-menu [marks-mark-executables]diredp-marks-mark-menu11773,610338
(define-key diredp-marks-mark-menu [marks-mark-region]diredp-marks-mark-menu11775,610490
(define-key diredp-marks-mark-menu [marks-mark-this]diredp-marks-mark-menu11781,610809
(defvar diredp-marks-recursive-menu (make-sparse-keymap "Here and Below"))diredp-marks-recursive-menu11789,611047
(define-key diredp-menu-bar-marks-menu [mark-recursive]diredp-menu-bar-marks-menu11790,611122
(define-key diredp-marks-recursive-menu [diredp-flag-auto-save-files-recursive]diredp-marks-recursive-menu11793,611234
(define-key diredp-marks-recursive-menu [diredp-mark-files-regexp-recursive]diredp-marks-recursive-menu11807,612294
(define-key diredp-marks-recursive-menu [diredp-mark-extension-recursive]diredp-marks-recursive-menu11810,612514
(define-key diredp-marks-recursive-menu [diredp-mark-autofiles-recursive]diredp-marks-recursive-menu11813,612736
(define-key diredp-marks-recursive-menu [diredp-mark-symlinks-recursive]diredp-marks-recursive-menu11817,612989
(define-key diredp-marks-recursive-menu [diredp-mark-directories-recursive]diredp-marks-recursive-menu11820,613197
(define-key diredp-marks-recursive-menu [diredp-mark-executables-recursive]diredp-marks-recursive-menu11823,613405
(defvar diredp-menu-bar-dir-menu (make-sparse-keymap "Dir"))diredp-menu-bar-dir-menu11832,613690
(define-key dired-mode-map [menu-bar subdir] (cons "Dir" diredp-menu-bar-dir-menu))dired-mode-map11833,613751
(defvar diredp-hide/show-menu (make-sparse-keymap "Hide/Show")diredp-hide/show-menu11848,614379
(define-key diredp-menu-bar-dir-menu [hide-show] (cons "Hide/Show" diredp-hide/show-menu))diredp-menu-bar-dir-menu11850,614498
(define-key diredp-hide/show-menu [hide-all]diredp-hide/show-menu11860,615054
(define-key diredp-hide/show-menu [hide-subdir]diredp-hide/show-menu11863,615215
(defvar diredp-bookmark-menu (make-sparse-keymap "Bookmark")diredp-bookmark-menu11870,615410
(define-key diredp-menu-bar-dir-menu [bookmark] (cons "Bookmark" diredp-bookmark-menu))diredp-menu-bar-dir-menu11872,615526
(define-key diredp-bookmark-menu [diredp-highlight-autofiles-mode]diredp-bookmark-menu11874,615615
(define-key diredp-bookmark-menu [diredp-do-bookmark-dirs-recursive]diredp-bookmark-menu11878,615884
(define-key diredp-bookmark-menu [bookmark-dired]diredp-bookmark-menu11881,616132
(defvar diredp-navigate-menu (make-sparse-keymap "Navigate")diredp-navigate-menu11887,616306
(define-key diredp-menu-bar-dir-menu [navigate] (cons "Navigate" diredp-navigate-menu))diredp-menu-bar-dir-menu11889,616422
(define-key diredp-navigate-menu [insert]diredp-navigate-menu11891,616511
(define-key diredp-navigate-menu [tree-down]diredp-navigate-menu11894,616666
(define-key diredp-navigate-menu [tree-up]diredp-navigate-menu11896,616809
(define-key diredp-navigate-menu [up]diredp-navigate-menu11898,616944
(define-key diredp-navigate-menu [prev-subdir]diredp-navigate-menu11900,617068
(define-key diredp-navigate-menu [next-subdir]diredp-navigate-menu11902,617212
(define-key diredp-navigate-menu [prev-dirline]diredp-navigate-menu11904,617352
(define-key diredp-navigate-menu [next-dirline]diredp-navigate-menu11906,617496
(define-key diredp-menu-bar-dir-menu [separator-subdir] '("--")) ; --------------------------diredp-menu-bar-dir-menu11909,617637
(define-key diredp-menu-bar-dir-menu [image-dired-dired-toggle-marked-thumbs]diredp-menu-bar-dir-menu11911,617732
(define-key diredp-menu-bar-dir-menu [diredp-yank-files]diredp-menu-bar-dir-menu11927,618857
(define-key diredp-menu-bar-dir-menu [separator-dired-on-set] '("--")) ; --------------------diredp-menu-bar-dir-menu11941,619618
(define-key diredp-menu-bar-dir-menu [diredp-dired-recent-dirs]diredp-menu-bar-dir-menu11943,619713
(define-key diredp-menu-bar-dir-menu [diredp-dired-inserted-subdirs]diredp-menu-bar-dir-menu11947,620006
(define-key diredp-menu-bar-dir-menu [diredp-add-to-this-dired-buffer]diredp-menu-bar-dir-menu11951,620325
(define-key diredp-menu-bar-dir-menu [diredp-dired-union]diredp-menu-bar-dir-menu11955,620551
(define-key diredp-menu-bar-dir-menu [diredp-fileset-other-window]diredp-menu-bar-dir-menu11958,620729
(define-key diredp-menu-bar-dir-menu [diredp-dired-for-files]diredp-menu-bar-dir-menu11961,620937
(define-key diredp-menu-bar-dir-menu [diredp-marked-other-window]diredp-menu-bar-dir-menu11964,621134
(define-key diredp-menu-bar-dir-menu [diredp-marked]diredp-menu-bar-dir-menu11970,621557
(define-key diredp-menu-bar-dir-menu [dired]diredp-menu-bar-dir-menu11976,621921
(define-key diredp-menu-bar-dir-menu [separator-dired] '("--")) ; ---------------------diredp-menu-bar-dir-menu11980,622083
(define-key diredp-menu-bar-dir-menu [insert]diredp-menu-bar-dir-menu11982,622172
(define-key diredp-menu-bar-dir-menu [revert]diredp-menu-bar-dir-menu11985,622338
(define-key diredp-menu-bar-dir-menu [create-directory] ; Moved from "Immediate".diredp-menu-bar-dir-menu11987,622477
(define-key dired-mode-map [down-mouse-3] 'diredp-mouse-3-menu)dired-mode-map11992,622672
(define-key dired-mode-map [mouse-3]      'ignore)dired-mode-map11993,622736
(define-key dired-mode-map "\C-x\M-o" (if (fboundp 'dired-omit-mode) 'dired-omit-mode 'dired-omit-toggle))dired-mode-map11999,622913
(define-key dired-mode-map [S-down-mouse-1] 'ignore) ; (normally `mouse-set-font')dired-mode-map12030,624883
(define-key dired-mode-map [S-mouse-1] 'diredp-mouse-mark-region-files)     ; `S-mouse-1'dired-mode-map12033,625071
(define-key dired-mode-map [mouse-2] 'dired-mouse-find-file-other-window)   ; `mouse-2'dired-mode-map12034,625161
(define-key dired-mode-map [S-down-mouse-2] 'dired-mouse-find-file)         ; `S-mouse-2'dired-mode-map12036,625337
(define-key dired-mode-map [S-mouse-2] 'ignore)dired-mode-map12037,625427
(define-key dired-mode-map [M-mouse-2] 'diredp-mouse-find-file-other-frame) ; `M-mouse-2'dired-mode-map12038,625475
(define-key dired-mode-map "@"       'diredp-do-apply-function)                     ; `@'dired-mode-map12053,626255
(define-key dired-mode-map "\$"      'diredp-hide-subdir-nomove)                    ; `$'dired-mode-map12054,626345
(define-key dired-mode-map "\M-$"    'dired-hide-subdir)                            ; `M-$'dired-mode-map12055,626435
(define-key dired-mode-map "="       'diredp-ediff)                                 ; `='dired-mode-map12056,626527
(define-key dired-mode-map "*."      'diredp-mark/unmark-extension)                 ; `* .'dired-mode-map12058,626686
(define-key dired-mode-map "*B"      'diredp-mark-autofiles)                        ; `* B'dired-mode-map12059,626778
(define-key dired-mode-map [(control meta ?*)] 'diredp-marked-other-window)         ; `C-M-*'dired-mode-map12060,626870
(define-key dired-mode-map "\M-a"    'dired-do-search)                              ; `M-a'dired-mode-map12061,626964
(define-key dired-mode-map "\M-b"    'diredp-do-bookmark)                           ; `M-b'dired-mode-map12062,627056
(define-key dired-mode-map "\C-\M-b" 'diredp-set-bookmark-file-bookmark-for-marked) ; `C-M-b'dired-mode-map12063,627148
(define-key dired-mode-map "\C-\M-G" 'diredp-do-grep)                               ; `C-M-G'dired-mode-map12067,627439
(define-key dired-mode-map "\C-\M-i" 'diredp-dired-inserted-subdirs)                ; `C-M-i'dired-mode-map12070,627683
(define-key dired-mode-map "\M-q"    (if (< emacs-major-version 21)dired-mode-map12071,627777
(define-key dired-mode-map "U"       'dired-unmark-all-marks)                       ; `U'dired-mode-map12077,628197
(define-key dired-mode-map "T"       nil) ; For Emacs 20dired-mode-map12085,628593
(define-key dired-mode-map "T+"      'diredp-tag-this-file)                ; `T +'dired-mode-map12086,628650
(define-key dired-mode-map "T-"      'diredp-untag-this-file)              ; `T -'dired-mode-map12087,628733
(define-key dired-mode-map "T0"      'diredp-remove-all-tags-this-file)    ; `T 0'dired-mode-map12088,628816
(define-key dired-mode-map "Tc"      'diredp-copy-tags-this-file)          ; `T c'dired-mode-map12089,628899
(define-key dired-mode-map "Tp"      'diredp-paste-add-tags-this-file)     ; `T p'dired-mode-map12090,628982
(define-key dired-mode-map "Tq"      'diredp-paste-replace-tags-this-file) ; `T q'dired-mode-map12091,629065
(define-key dired-mode-map "Tv"      'diredp-set-tag-value-this-file)      ; `T v'dired-mode-map12092,629148
(define-key dired-mode-map "T\M-w"   'diredp-copy-tags-this-file)          ; `T M-w'dired-mode-map12093,629231
(define-key dired-mode-map "T\C-y"   'diredp-paste-add-tags-this-file)     ; `T C-y'dired-mode-map12094,629316
(define-key dired-mode-map "T>+"     'diredp-do-tag)                       ; `T > +'dired-mode-map12095,629401
(define-key dired-mode-map "T>-"     'diredp-do-untag)                     ; `T > -'dired-mode-map12096,629486
(define-key dired-mode-map "T>0"     'diredp-do-remove-all-tags)           ; `T > 0'dired-mode-map12097,629571
(define-key dired-mode-map "T>p"     'diredp-do-paste-add-tags)            ; `T > p'dired-mode-map12098,629656
(define-key dired-mode-map "T>q"     'diredp-do-paste-replace-tags)        ; `T > q'dired-mode-map12099,629741
(define-key dired-mode-map "T>v"     'diredp-do-set-tag-value)             ; `T > v'dired-mode-map12100,629826
(define-key dired-mode-map "T>\C-y"  'diredp-do-paste-add-tags)            ; `T > C-y'dired-mode-map12101,629911
(define-key dired-mode-map "Tm%"     'diredp-mark-files-tagged-regexp)     ; `T m %'dired-mode-map12102,629998
(define-key dired-mode-map "Tm*"     'diredp-mark-files-tagged-all)        ; `T m *'dired-mode-map12103,630083
(define-key dired-mode-map "Tm+"     'diredp-mark-files-tagged-some)       ; `T m +'dired-mode-map12104,630168
(define-key dired-mode-map "Tm~*"    'diredp-mark-files-tagged-not-all)    ; `T m ~ *'dired-mode-map12105,630253
(define-key dired-mode-map "Tm~+"    'diredp-mark-files-tagged-none)       ; `T m ~ +'dired-mode-map12106,630340
(define-key dired-mode-map "Tu%"     'diredp-unmark-files-tagged-regexp)   ; `T u %'dired-mode-map12107,630427
(define-key dired-mode-map "Tu*"     'diredp-unmark-files-tagged-all)      ; `T u *'dired-mode-map12108,630512
(define-key dired-mode-map "Tu+"     'diredp-unmark-files-tagged-some)     ; `T u +'dired-mode-map12109,630597
(define-key dired-mode-map "Tu~*"    'diredp-unmark-files-tagged-not-all)  ; `T u ~ *'dired-mode-map12110,630682
(define-key dired-mode-map "Tu~+"    'diredp-unmark-files-tagged-none)     ; `T u ~ +'dired-mode-map12111,630769
(define-key dired-mode-map "\r"      'dired-find-file)                      ; `RET'dired-mode-map12130,631701
(define-key dired-mode-map "%c"      'diredp-capitalize)                    ; `% c'dired-mode-map12134,632001
(define-key dired-mode-map "b"       'diredp-byte-compile-this-file)        ; `b'dired-mode-map12135,632085
(define-key dired-mode-map [(control shift ?b)] 'diredp-bookmark-this-file) ; `C-B'dired-mode-map12136,632167
(define-key dired-mode-map "\M-c"    'diredp-capitalize-this-file)          ; `M-c'dired-mode-map12137,632251
(define-key dired-mode-map "\M-i"    'diredp-insert-subdirs)                ; `M-i'dired-mode-map12140,632527
(define-key dired-mode-map "\M-l"    'diredp-downcase-this-file)            ; `M-l'dired-mode-map12141,632611
(define-key dired-mode-map "\C-\M-l" 'diredp-list-marked)                   ; `C-M-l'dired-mode-map12142,632695
(define-key dired-mode-map "\C-o"    'diredp-find-file-other-frame)         ; `C-o'dired-mode-map12145,632923
(define-key dired-mode-map "\C-\M-o" 'dired-display-file)                   ; `C-M-o' (not `C-o')dired-mode-map12148,633190
(define-key dired-mode-map "\M-p"    'diredp-print-this-file)               ; `M-p'dired-mode-map12149,633288
(define-key dired-mode-map "r"       'diredp-rename-this-file)              ; `r'dired-mode-map12150,633372
(define-key dired-mode-map "\M-u"    'diredp-upcase-this-file)              ; `M-u'dired-mode-map12156,633833
(define-key dired-mode-map "y"       'diredp-relsymlink-this-file)          ; `y'dired-mode-map12157,633917
(define-key dired-mode-map "\C-y"    'diredp-yank-files)                    ; `C-y'dired-mode-map12158,633999
(define-key dired-mode-map "z"       'diredp-compress-this-file)            ; `z'dired-mode-map12159,634083
(define-prefix-command 'diredp-recursive-map)diredp-recursive-map12169,634576
(define-key dired-mode-map "\M-+"  diredp-recursive-map) ; `M-+'dired-mode-map12170,634622
(define-key diredp-recursive-map "@"           'diredp-do-apply-function-recursive)     ; `@'diredp-recursive-map12174,634838
(define-key diredp-recursive-map "#"           'diredp-flag-auto-save-files-recursive)  ; `#'diredp-recursive-map12175,634932
(define-key diredp-recursive-map "*@"          'diredp-mark-symlinks-recursive)         ; `* @'diredp-recursive-map12176,635026
(define-key diredp-recursive-map "**"          'diredp-mark-executables-recursive)      ; `* *'diredp-recursive-map12177,635122
(define-key diredp-recursive-map "*/"          'diredp-mark-directories-recursive)      ; `* /'diredp-recursive-map12178,635218
(define-key diredp-recursive-map "*."          'diredp-mark-extension-recursive)        ; `* .'diredp-recursive-map12179,635314
(define-key diredp-recursive-map "*B"          'diredp-mark-autofiles-recursive)        ; `* B'diredp-recursive-map12180,635410
(define-key diredp-recursive-map "*%"          'diredp-mark-files-regexp-recursive)     ; `* %'diredp-recursive-map12183,635654
(define-key diredp-recursive-map "%c"          'diredp-capitalize-recursive)            ; `% c'diredp-recursive-map12189,636167
(define-key diredp-recursive-map "%l"          'diredp-downcase-recursive)              ; `% l'diredp-recursive-map12190,636263
(define-key diredp-recursive-map "%m"          'diredp-mark-files-regexp-recursive)     ; `% m'diredp-recursive-map12191,636359
(define-key diredp-recursive-map "%u"          'diredp-upcase-recursive)                ; `% u'diredp-recursive-map12192,636455
(define-key diredp-recursive-map "!"           'diredp-do-shell-command-recursive)      ; `!'diredp-recursive-map12195,636705
(define-key diredp-recursive-map (kbd "C-M-*") 'diredp-marked-recursive-other-window)   ; `C-M-*'diredp-recursive-map12196,636799
(define-key diredp-recursive-map "A"           'diredp-do-search-recursive)             ; `A'diredp-recursive-map12197,636897
(define-key diredp-recursive-map "\M-b"        'diredp-do-bookmark-recursive)           ; `M-b'diredp-recursive-map12198,636991
(define-key diredp-recursive-map (kbd "C-M-b")                                          ; `C-M-b'diredp-recursive-map12202,637282
(define-key diredp-recursive-map "C"           'diredp-do-copy-recursive)               ; `C'diredp-recursive-map12207,637650
(define-key diredp-recursive-map "D"           'diredp-do-delete-recursive)             ; `D'diredp-recursive-map12208,637744
(define-key diredp-recursive-map "F"           'diredp-do-find-marked-files-recursive)  ; `F'diredp-recursive-map12209,637838
(define-key diredp-recursive-map "\C-\M-G"     'diredp-do-grep-recursive)               ; `C-M-G'diredp-recursive-map12212,638069
(define-key diredp-recursive-map "H"           'diredp-do-hardlink-recursive)           ; `H'diredp-recursive-map12213,638167
(define-key diredp-recursive-map "\M-i"        'diredp-insert-subdirs-recursive)        ; `M-i'diredp-recursive-map12214,638261
(define-key diredp-recursive-map "\C-\M-l"     'diredp-list-marked-recursive)           ; `C-M-l'diredp-recursive-map12215,638357
(define-key diredp-recursive-map "M"           'diredp-do-chmod-recursive)              ; `M'diredp-recursive-map12216,638455
(define-key diredp-recursive-map "P"           'diredp-do-print-recursive)              ; `P'diredp-recursive-map12219,638686
(define-key diredp-recursive-map "Q"         'diredp-do-query-replace-regexp-recursive) ; `Q'diredp-recursive-map12220,638780
(define-key diredp-recursive-map "R"           'diredp-do-move-recursive)               ; `R'diredp-recursive-map12221,638874
(define-key diredp-recursive-map "S"           'diredp-do-symlink-recursive)            ; `S'diredp-recursive-map12222,638968
(define-key diredp-recursive-map (kbd "M-s a C-s")                                      ; `M-s a C-s'diredp-recursive-map12223,639062
(define-key diredp-recursive-map (kbd "M-s a C-M-s")                                    ; `M-s a C-M-s'diredp-recursive-map12225,639196
(define-key diredp-recursive-map "\C-tc"   'diredp-image-dired-comment-files-recursive) ; `C-t c'diredp-recursive-map12230,639558
(define-key diredp-recursive-map "\C-td"  'diredp-image-dired-display-thumbs-recursive) ; `C-t d'diredp-recursive-map12231,639656
(define-key diredp-recursive-map "\C-tr"      'diredp-image-dired-delete-tag-recursive) ; `C-t r'diredp-recursive-map12232,639754
(define-key diredp-recursive-map "\C-tt"       'diredp-image-dired-tag-files-recursive) ; `C-t t'diredp-recursive-map12233,639852
(define-key diredp-recursive-map "\M-w"        'diredp-copy-filename-as-kill-recursive) ; `M-w'diredp-recursive-map12236,640096
(define-key diredp-recursive-map "Y"           'diredp-do-relsymlink-recursive)         ; `Y'diredp-recursive-map12237,640192

elpa/request-deferred-20181129.317/request-deferred.el,66
(defun request-deferred (url &rest args)request-deferred36,1111

elpa/request-deferred-20181129.317/request-deferred-pkg.el,353
(define-package "request-deferred" "20181129.317" "Wrap request.el by deferred" '((deferred "0.3.1") (request "0.2.0")) :commit "6d170649ae9ef1c7c3d545517f896c03ca12062c" :authors '(("Takafumi Arakaki <aka.tkf at gmail.com>")) :maintainer '("Takafumi Arakaki <aka.tkf at gmail.com>") :url "https://github.com/tkf/emacs-request")"request-deferred"2,31

elpa/request-deferred-20181129.317/request-deferred-autoloads.el,0

elpa/gh-0.10.0/gh-users.el,354
(defclass gh-users-api (gh-api-v3)gh-users-api40,1035
(defclass gh-users-user (gh-user)gh-users-user45,1160
(defmethod gh-object-read-into ((user gh-users-user) data)gh-object-read-into73,2141
(defmethod gh-users-get ((api gh-users-api) &optional username)gh-users-get107,3765
(defmethod gh-users-list ((api gh-users-api))gh-users-list114,3984

elpa/gh-0.10.0/gh-repos.el,2764
(defclass gh-repos-api (gh-api-v3)gh-repos-api40,1033
(defclass gh-repos-repo-stub (gh-object)gh-repos-repo-stub46,1208
(defmethod gh-object-read-into ((stub gh-repos-repo-stub) data)gh-object-read-into53,1426
(defclass gh-repos-repo (gh-repos-repo-stub)gh-repos-repo63,1763
(defmethod gh-object-read-into ((repo gh-repos-repo) data)gh-object-read-into100,3086
(defclass gh-repos-ref (gh-object)gh-repos-ref142,5149
(defmethod gh-object-read-into ((r gh-repos-ref) data)gh-object-read-into152,5475
(defmethod gh-repos-user-list ((api gh-repos-api) &optional username)gh-repos-user-list166,6025
(defmethod gh-repos-org-list ((api gh-repos-api) org)gh-repos-org-list171,6257
(defmethod gh-repos-repo-to-obj ((repo gh-repos-repo-stub)gh-repos-repo-to-obj176,6436
(defmethod gh-repos-repo-new ((api gh-repos-api) repo-stubgh-repos-repo-new195,7311
(defmethod gh-repos-repo-get ((api gh-repos-api) repo-id &optional user)gh-repos-repo-get203,7623
(defmethod gh-repos-repo-update ((api gh-repos-api) repo-stubgh-repos-repo-update210,7876
(defmethod gh-repos-repo-rename ((api gh-repos-api) repo-stub new-namegh-repos-repo-rename219,8243
(defmethod gh-repos-repo-delete ((api gh-repos-api) repo-idgh-repos-repo-delete229,8671
(defmethod gh-repos-repo-contributors ((api gh-repos-api) repo)gh-repos-repo-contributors239,8991
(defmethod gh-repos-repo-languages ((api gh-repos-api) repo)gh-repos-repo-languages248,9318
(defmethod gh-repos-repo-teams ((api gh-repos-api) repo)gh-repos-repo-teams254,9566
(defmethod gh-repos-repo-tags ((api gh-repos-api) repo)gh-repos-repo-tags260,9806
(defmethod gh-repos-repo-branches ((api gh-repos-api) repo)gh-repos-repo-branches266,10044
(defmethod gh-repos-forks-list ((api gh-repos-api) repo &optional recursive)gh-repos-forks-list281,10483
(defmethod gh-repos-fork ((api gh-repos-api) repo &optional org)gh-repos-fork297,11111
(defmethod gh-repos-stargazers ((api gh-repos-api) repo)gh-repos-stargazers311,11499
(defmethod gh-repos-starred-list ((api gh-repos-api) &optional username)gh-repos-starred-list318,11759
(defmethod gh-repos-starred-p ((api gh-repos-api) repo)gh-repos-starred-p323,11996
(defmethod gh-repos-star ((api gh-repos-api) repo)gh-repos-star332,12298
(defmethod gh-repos-unstar ((api gh-repos-api) repo)gh-repos-unstar339,12508
(defmethod gh-repos-watchers ((api gh-repos-api) repo)gh-repos-watchers350,12772
(defmethod gh-repos-watched-list ((api gh-repos-api) &optional username)gh-repos-watched-list357,13031
(defmethod gh-repos-watched-p ((api gh-repos-api) repo)gh-repos-watched-p363,13285
(defmethod gh-repos-watch ((api gh-repos-api) repo)gh-repos-watch372,13593
(defmethod gh-repos-unwatch ((api gh-repos-api) repo)gh-repos-unwatch379,13810

elpa/gh-0.10.0/gh-orgs.el,804
(defclass gh-orgs-api (gh-api-v3)gh-orgs-api40,1032
(defclass gh-orgs-org-stub (gh-object)gh-orgs-org-stub45,1151
(defmethod gh-object-read-into ((stub gh-orgs-org-stub) data)gh-object-read-into51,1301
(defclass gh-orgs-plan (gh-object)gh-orgs-plan60,1591
(defmethod gh-object-read-into ((plan gh-orgs-plan) data)gh-object-read-into65,1724
(defclass gh-orgs-org (gh-orgs-org-stub)gh-orgs-org73,1987
(defmethod gh-object-read-into ((org gh-orgs-org) data)gh-object-read-into97,2826
(defmethod gh-orgs-org-to-obj ((org gh-orgs-org))gh-orgs-org-to-obj128,4258
(defmethod gh-orgs-list ((api gh-orgs-api) &optional username)gh-orgs-list142,4860
(defmethod gh-orgs-get ((api gh-orgs-api) org)gh-orgs-get147,5083
(defmethod gh-orgs-update ((api gh-orgs-api) org-obj)gh-orgs-update152,5243

elpa/gh-0.10.0/gh-api.el,1938
(defgroup gh-api nilgh-api44,1075
(defcustom gh-api-username-filter 'gh-api-enterprise-username-filtergh-api-username-filter48,1127
(defclass gh-api ()gh-api54,1305
(defmethod logito-log ((api gh-api) level tag string &rest objects)logito-log66,1722
(defmethod constructor :static ((api gh-api) &rest args)constructor69,1855
(defmethod gh-api-set-default-auth ((api gh-api) auth)gh-api-set-default-auth72,1935
(defmethod gh-api-expand-resource ((api gh-api)gh-api-expand-resource88,2698
(defun gh-api-enterprise-username-filter (username)gh-api-enterprise-username-filter92,2804
(defmethod gh-api-get-username ((api gh-api))gh-api-get-username95,2919
(defclass gh-api-v3 (gh-api)gh-api-v3100,3083
(defcustom gh-api-v3-authenticator 'gh-oauth-authenticatorgh-api-v3-authenticator104,3188
(defmethod constructor :static ((api gh-api-v3) &rest args)constructor110,3431
(defclass gh-api-request (gh-url-request)gh-api-request120,3852
(defclass gh-api-response (gh-url-response)gh-api-response123,3968
(defun gh-api-json-decode (repr)gh-api-json-decode126,4019
(defun gh-api-json-encode (json)gh-api-json-encode132,4180
(defmethod gh-url-response-set-data ((resp gh-api-response) data)gh-url-response-set-data135,4241
(defclass gh-api-paged-request (gh-api-request)gh-api-paged-request138,4361
(defclass gh-api-paged-response (gh-api-response)gh-api-paged-response142,4539
(defmethod gh-api-paging-links ((resp gh-api-paged-response))gh-api-paging-links145,4596
(defmethod gh-url-response-set-data ((resp gh-api-paged-response) data)gh-url-response-set-data153,4975
(defmethod gh-api-authenticated-requestgh-api-authenticated-request176,6144
(defclass gh-api-callback (gh-url-callback)gh-api-callback239,9388
(defmethod gh-url-callback-run ((cb gh-api-callback) resp)gh-url-callback-run244,9514
(define-obsolete-function-alias 'gh-api-add-response-callbackgh-api-add-response-callback255,9964

elpa/gh-0.10.0/gh-pull-comments.el,1062
(defclass gh-pull-comments-api (gh-api-v3)gh-pull-comments-api49,1436
(defclass gh-pull-comments-comment (gh-object)gh-pull-comments-comment53,1595
(defmethod gh-object-read-into ((comment gh-pull-comments-comment) data)gh-object-read-into71,2233
(defmethod gh-pull-comments-list ((api gh-pull-comments-api) user repo pull-id)gh-pull-comments-list94,3208
(defmethod gh-pull-comments-get ((api gh-pull-comments-api) user repo pull-id)gh-pull-comments-get99,3451
(defmethod gh-pull-comments-req-to-create ((req gh-pull-comments-comment))gh-pull-comments-req-to-create104,3688
(defmethod gh-pull-comments-req-to-update ((req gh-pull-comments-comment))gh-pull-comments-req-to-update114,4081
(defmethod gh-pull-comments-update ((api gh-pull-comments-api) user repo comment-id comment)gh-pull-comments-update117,4191
(defmethod gh-pull-comments-new ((api gh-pull-comments-api) user repo pull-id comment)gh-pull-comments-new123,4491
(defmethod gh-pull-comments-delete ((api gh-pull-comments-api) user repo comment-id)gh-pull-comments-delete129,4781

elpa/gh-0.10.0/gh.el,0

elpa/gh-0.10.0/gh-issue-comments.el,972
(defclass gh-issue-comments-api (gh-api-v3)gh-issue-comments-api47,1375
(defclass gh-issue-comments-comment (gh-object)gh-issue-comments-comment51,1524
(defmethod gh-object-read-into ((comment gh-issue-comments-comment) data)gh-object-read-into62,1840
(defmethod gh-issue-comments-list ((api gh-issue-comments-api) user repo issue-id)gh-issue-comments-list75,2396
(defmethod gh-issue-comments-get ((api gh-issue-comments-api) user repo comment-id)gh-issue-comments-get80,2639
(defmethod gh-issue-comments-req-to-update ((req gh-issue-comments-comment))gh-issue-comments-req-to-update85,2880
(defmethod gh-issue-comments-update ((api gh-issue-comments-api) user repo comment-id comment)gh-issue-comments-update88,2992
(defmethod gh-issue-comments-new ((api gh-issue-comments-api) user repo issue-id comment)gh-issue-comments-new94,3291
(defmethod gh-issue-comments-delete ((api gh-issue-comments-api) user repo comment-id)gh-issue-comments-delete100,3582

elpa/gh-0.10.0/gh-cache.el,1094
(defconst gh-cache-outdated-expiration-delay (* 60 60 24))gh-cache-outdated-expiration-delay37,973
(defconst gh-cache-internal-version-constant 3)gh-cache-internal-version-constant39,1033
(defconst gh-cache-version-constantgh-cache-version-constant41,1082
(defclass gh-cache (pcache-repository)gh-cache44,1201
(defclass gh-cache-entry (pcache-entry)gh-cache-entry54,1623
(defmethod pcache-invalidate :after ((cache gh-cache) key)pcache-invalidate60,1794
(defmethod pcache-get ((cache gh-cache) key &optional default)pcache-get73,2419
(defmethod pcache-has ((cache pcache-repository) key)pcache-has82,2702
(defmethod pcache-purge-invalid ((cache gh-cache))pcache-purge-invalid88,2913
(defmethod gh-cache-outdated-p ((cache gh-cache) key)gh-cache-outdated-p96,3166
(defmethod gh-cache-expired-p ((cache gh-cache) key)gh-cache-expired-p102,3348
(defmethod gh-cache-revive ((cache gh-cache) key)gh-cache-revive111,3698
(defmethod gh-cache-etag ((cache gh-cache) key)gh-cache-etag119,3952
(defmethod gh-cache-set-etag ((cache gh-cache) key etag)gh-cache-set-etag125,4124

elpa/gh-0.10.0/gh-profile.el,702
(defgroup gh-profile nilgh-profile35,967
(defun gh-profile-remote-regexp (domain)gh-profile-remote-regexp39,1027
(defcustom gh-profile-alist `(("github"gh-profile-alist46,1299
(defun gh-profile-get-remote-regexp (profile)gh-profile-get-remote-regexp62,2109
(defcustom gh-profile-default-profile "github"gh-profile-default-profile72,2524
(defvar gh-profile-current-profile nil)gh-profile-current-profile78,2686
(defun gh-profile-current-profile ()gh-profile-current-profile81,2784
(defun gh-profile-url ()gh-profile-url85,2890
(defun gh-profile-completing-read ()gh-profile-completing-read90,3080
(defun gh-profile-get-remote-profile (remote-url)gh-profile-get-remote-profile96,3311

elpa/gh-0.10.0/gh-url.el,1098
(defclass gh-url-request ()gh-url-request37,979
(defclass gh-url-response ()gh-url-response49,1454
(defmethod gh-url-response-set-data ((resp gh-url-response) data)gh-url-response-set-data58,1817
(defclass gh-url-callback ()gh-url-callback66,2066
(defmethod gh-url-callback-run ((cb gh-url-callback) resp)gh-url-callback-run69,2103
(defmethod gh-url-response-run-callbacks ((resp gh-url-response))gh-url-response-run-callbacks72,2170
(defmethod gh-url-add-response-callback ((resp gh-url-response) callback)gh-url-add-response-callback90,2963
(defun gh-url-parse-headers (data)gh-url-parse-headers97,3216
(defmethod gh-url-response-finalize ((resp gh-url-response))gh-url-response-finalize119,4020
(defmethod gh-url-response-init ((resp gh-url-response)gh-url-response-init123,4160
(defun gh-url-set-response (status req-resp)gh-url-set-response140,4855
(defun gh-url-form-encode (form)gh-url-form-encode154,5366
(defun gh-url-params-encode (form)gh-url-params-encode158,5483
(defmethod gh-url-run-request ((req gh-url-request) &optional resp)gh-url-run-request161,5561

elpa/gh-0.10.0/gh-pulls.el,961
(defclass gh-pulls-cache (gh-cache)gh-pulls-cache41,1047
(defclass gh-pulls-api (gh-api-v3)gh-pulls-api47,1282
(defclass gh-pulls-request-stub (gh-object)gh-pulls-request-stub53,1465
(defmethod gh-object-read-into ((stub gh-pulls-request-stub) data)gh-object-read-into72,2057
(defclass gh-pulls-request (gh-pulls-request-stub)gh-pulls-request99,3227
(defmethod gh-object-read-into ((req gh-pulls-request) data)gh-object-read-into114,3729
(defmethod gh-pulls-req-to-new ((req gh-pulls-request))gh-pulls-req-to-new132,4493
(defmethod gh-pulls-req-to-update ((req gh-pulls-request-stub))gh-pulls-req-to-update140,4804
(defmethod gh-pulls-list ((api gh-pulls-api) user repo)gh-pulls-list145,4974
(defmethod gh-pulls-get ((api gh-pulls-api) user repo id)gh-pulls-get150,5164
(defmethod gh-pulls-new ((api gh-pulls-api) user repo req)gh-pulls-new155,5357
(defmethod gh-pulls-update ((api gh-pulls-api) user repo id req)gh-pulls-update161,5575

elpa/gh-0.10.0/gh-autoloads.el,0

elpa/gh-0.10.0/gh-gist.el,1596
(defclass gh-gist-api (gh-api-v3)gh-gist-api40,1031
(defclass gh-gist-gist-stub (gh-object)gh-gist-gist-stub45,1152
(defmethod gh-object-read-into ((stub gh-gist-gist-stub) data)gh-object-read-into53,1417
(defclass gh-gist-gist (gh-gist-gist-stub)gh-gist-gist63,1780
(defmethod gh-object-read-into ((gist gh-gist-gist) data)gh-object-read-into78,2230
(defclass gh-gist-gist-file (gh-object)gh-gist-gist-file96,2963
(defmethod gh-object-read-into ((file gh-gist-gist-file) data)gh-object-read-into102,3118
(defmethod gh-gist-gist-to-obj ((gist gh-gist-gist-stub))gh-gist-gist-to-obj112,3409
(defmethod gh-gist-gist-has-files ((gist gh-gist-gist-stub))gh-gist-gist-has-files117,3627
(defmethod gh-gist-gist-file-to-obj ((file gh-gist-gist-file))gh-gist-gist-file-to-obj121,3795
(defmethod gh-gist-list ((api gh-gist-api) &optional username)gh-gist-list125,3996
(defmethod gh-gist-list-public ((api gh-gist-api))gh-gist-list-public130,4221
(defmethod gh-gist-list-starred ((api gh-gist-api))gh-gist-list-starred134,4380
(defmethod gh-gist-get ((api gh-gist-api) gist-or-id)gh-gist-get138,4541
(defmethod gh-gist-new ((api gh-gist-api) gist-stub)gh-gist-new148,4924
(defmethod gh-gist-edit ((api gh-gist-api) gist)gh-gist-edit153,5109
(defmethod gh-gist-set-star ((api gh-gist-api) gist-or-id star)gh-gist-set-star160,5328
(defmethod gh-gist-get-star ((api gh-gist-api) gist-or-id)gh-gist-get-star167,5593
(defmethod gh-gist-fork ((api gh-gist-api) gist-or-id)gh-gist-fork173,5829
(defmethod gh-gist-delete ((api gh-gist-api) gist-or-id)gh-gist-delete180,6099

elpa/gh-0.10.0/gh-search.el,278
(defclass gh-search-api (gh-api-v3)gh-search-api28,851
(defmacro gh-search-method-builder (method-name uri process-result-function)gh-search-method-builder32,1004
(defmacro gh-search-process-method-builder (method-name class-symbol)gh-search-process-method-builder44,1615

elpa/gh-0.10.0/gh-pkg.el,68
(define-package "gh" "0.10.0" "A GitHub library for Emacs""gh"1,0

elpa/gh-0.10.0/gh-auth.el,1345
(defgroup gh-auth nilgh-auth39,1022
(defvar gh-auth-alist nil)gh-auth-alist43,1086
(defun gh-auth-remember (profile key value)gh-auth-remember45,1114
(defun gh-auth-get-username ()gh-auth-get-username52,1379
(defun gh-auth-get-password (&optional remember)gh-auth-get-password63,1822
(defun gh-auth-get-oauth-token ()gh-auth-get-oauth-token77,2363
(defclass gh-authenticator ()gh-authenticator94,3132
(defmethod constructor :static ((auth gh-authenticator) &rest args)constructor98,3239
(defmethod gh-auth-modify-request ((auth gh-authenticator) req)gh-auth-modify-request104,3434
(defclass gh-auth-2fa-callback (gh-url-callback)gh-auth-2fa-callback107,3506
(defmethod gh-url-callback-run ((cb gh-auth-2fa-callback) resp)gh-url-callback-run111,3617
(defclass gh-password-authenticator (gh-authenticator)gh-password-authenticator127,4245
(defmethod constructor :static ((auth gh-password-authenticator) &rest args)constructor134,4513
(defmethod gh-auth-modify-request ((auth gh-password-authenticator) req)gh-auth-modify-request140,4737
(defclass gh-oauth-authenticator (gh-authenticator)gh-oauth-authenticator153,5351
(defmethod constructor :static ((auth gh-oauth-authenticator) &rest args)constructor157,5498
(defmethod gh-auth-modify-request ((auth gh-oauth-authenticator) req)gh-auth-modify-request163,5696

elpa/gh-0.10.0/gh-common.el,964
(defgroup gh nilgh37,985
(defclass gh-object ()gh-object41,1060
(defmethod gh-object-read :static ((obj gh-object) data)gh-object-read44,1090
(defmethod gh-object-reader :static ((obj gh-object))gh-object-reader51,1299
(defmethod gh-object-list-read :static ((obj gh-object) data)gh-object-list-read54,1395
(defmethod gh-object-list-reader :static ((obj gh-object))gh-object-list-reader57,1498
(defmethod gh-object-read-into ((obj gh-object) data))gh-object-read-into60,1604
(defmethod slot-unbound ((obj gh-object) cls slot-name fn)slot-unbound62,1660
(defclass gh-user (gh-object)gh-user66,1771
(defmethod gh-object-read-into ((user gh-user) data)gh-object-read-into74,1976
(defun gh-read (obj field)gh-read84,2322
(defun gh-namespaced-key (key)gh-namespaced-key87,2377
(defun gh-config (key)gh-config95,2614
(defun gh-set-config (key value)gh-set-config102,2923
(defun gh-command-to-string (&rest args)gh-command-to-string106,3092

elpa/gh-0.10.0/gh-issues.el,2940
(defclass gh-issues-api (gh-api-v3)gh-issues-api45,1280
(defclass gh-issues-issue (gh-object)gh-issues-issue51,1529
(defclass gh-issues-label (gh-object)gh-issues-label71,2199
(defclass gh-issues-milestone (gh-object)gh-issues-milestone76,2315
(defmethod gh-object-read-into ((issue gh-issues-issue) data)gh-object-read-into91,2771
(defmethod gh-object-read-into ((milestone gh-issues-milestone) data)gh-object-read-into119,4050
(defmethod gh-issues-issue-list ((api gh-issues-api) user repo)gh-issues-issue-list139,4883
(defmethod gh-issues-milestone-list ((api gh-issues-api) user repo)gh-issues-milestone-list144,5084
(defmethod gh-issues-milestone-get ((api gh-issues-api) user repo id)gh-issues-milestone-get149,5297
(defmethod gh-issues-milestone-new ((api gh-issues-api) user repo milestone)gh-issues-milestone-new154,5513
(defmethod gh-issues-milestone-update ((api gh-issues-api) user repogh-issues-milestone-update160,5780
(defmethod gh-issues-milestone-req-to-update ((milestone gh-issues-milestone))gh-issues-milestone-req-to-update167,6099
(defmethod gh-issues-issue-get ((api gh-issues-api) user repo id)gh-issues-issue-get177,6580
(defmethod gh-issues-issue-req-to-update ((req gh-issues-issue))gh-issues-issue-req-to-update182,6784
(defmethod gh-issues-issue-update ((api gh-issues-api) user repo id req)gh-issues-issue-update197,7389
(defmethod gh-issues-issue-new ((api gh-issues-api) user repo issue)gh-issues-issue-new203,7641
(defclass gh-issues-label (gh-object)gh-issues-label210,7895
(defmethod gh-object-read-into ((label gh-issues-label) data)gh-object-read-into215,8011
(defmethod gh-issues-label-req-to-update ((label gh-issues-label))gh-issues-label-req-to-update223,8249
(defmethod gh-issues-label-get ((api gh-issues-api) user repo name)gh-issues-label-get227,8389
(defmethod gh-issues-label-list ((api gh-issues-api) user repo)gh-issues-label-list232,8597
(defmethod gh-issues-label-new ((api gh-issues-api) user repo req)gh-issues-label-new237,8799
(defmethod gh-issues-label-update ((api gh-issues-api) user repo req)gh-issues-label-update243,9038
(defmethod gh-issues-label-delete ((api gh-issues-api) user repo name)gh-issues-label-delete249,9299
(defmethod gh-issues-labels-in-issue ((api gh-issues-api) user repogh-issues-labels-in-issue255,9514
(defmethod gh-issues-labels-add-to-issue ((api gh-issues-api) user repogh-issues-labels-add-to-issue262,9859
(defmethod gh-issues-labels-remove-all-from-issue ((api gh-issues-api) user repogh-issues-labels-remove-all-from-issue270,10267
(defmethod gh-issues-labels-in-milestone ((api gh-issues-api) user repogh-issues-labels-in-milestone277,10615
(defun gh-issues--issue-id (issue-or-issue-id)gh-issues--issue-id287,11014
(defun gh-issues--milestone-id (milestone-or-milestone-id)gh-issues--milestone-id292,11161
(defun gh-issues--label-name (label-or-label-name)gh-issues--label-name297,11344

elpa/gh-0.10.0/gh-oauth.el,1001
(defclass gh-oauth-api (gh-api-v3)gh-oauth-api40,1033
(defclass gh-oauth-password-authenticator (gh-password-authenticator)gh-oauth-password-authenticator44,1151
(defmethod constructor :static ((api gh-oauth-api) &rest args)constructor47,1271
(defclass gh-oauth-authorization (gh-object)gh-oauth-authorization52,1476
(defmethod gh-object-read-into ((auth gh-oauth-authorization) data)gh-object-read-into63,1791
(defclass gh-oauth-app (gh-object)gh-oauth-app77,2354
(defmethod gh-object-read-into ((app gh-oauth-app) data)gh-object-read-into81,2440
(defmethod gh-oauth-auth-list ((api gh-oauth-api))gh-oauth-auth-list88,2627
(defmethod gh-oauth-auth-get ((api gh-oauth-api) id)gh-oauth-auth-get93,2800
(defmethod gh-oauth-auth-new ((api gh-oauth-api) &optional scopes)gh-oauth-auth-new98,2976
(defmethod gh-oauth-auth-update ((api gh-oauth-api) id &optional scopes)gh-oauth-auth-update105,3331
(defmethod gh-oauth-auth-delete ((api gh-oauth-api) id)gh-oauth-auth-delete110,3558

elpa/async-1.9.3/async.el,2054
(defgroup async nilasync36,1229
(defcustom async-variables-noprops-function #'async-variables-nopropsasync-variables-noprops-function40,1311
(defvar async-debug nil)async-debug45,1478
(defvar async-send-over-pipe t)async-send-over-pipe46,1503
(defvar async-in-child-emacs nil)async-in-child-emacs47,1535
(defvar async-callback nil)async-callback48,1569
(defvar async-callback-for-process nil)async-callback-for-process49,1597
(defvar async-callback-value nil)async-callback-value50,1637
(defvar async-callback-value-set nil)async-callback-value-set51,1671
(defvar async-current-process nil)async-current-process52,1709
(defvar async--procvar nil)async--procvar53,1744
(defun async-variables-noprops (sequence)async-variables-noprops55,1773
(defun async-inject-variablesasync-inject-variables73,2384
(defalias 'async-inject-environment 'async-inject-variables)async-inject-environment114,4069
(defun async-handle-result (func result buf)async-handle-result116,4131
(defun async-when-done (proc &optional _change)async-when-done130,4614
(defun async--receive-sexp (&optional stream)async--receive-sexp154,5824
(defun async--insert-sexp (sexp)async--insert-sexp166,6284
(defun async--transmit-sexp (process sexp)async--transmit-sexp178,6699
(defun async-batch-invoke ()async-batch-invoke185,6941
(defun async-ready (future)async-ready203,7539
(defun async-wait (future)async-wait215,7916
(defun async-get (future)async-get220,8040
(defun async-message-p (value)async-message-p231,8440
(defun async-send (&rest args)async-send236,8591
(defun async-receive ()async-receive244,8902
(defun async-start-process (name program finish-func &rest program-args)async-start-process249,9029
(defvar async-quiet-switch "-Q"async-quiet-switch266,9878
(defun async-start (start-func &optional finish-func)async-start273,10136
(defmacro async-sandbox(func)async-sandbox343,12698
(defun async--fold-left (fn forms bindings)async--fold-left347,12827
(defmacro async-let (bindings &rest forms)async-let356,13096

elpa/async-1.9.3/async-pkg.el,94
(define-package "async" "1.9.3" "Asynchronous processing in Emacs" 'nil :keywords"async"1,0

elpa/async-1.9.3/async-bytecomp.el,726
(defcustom async-bytecomp-allowed-packagesasync-bytecomp-allowed-packages44,1668
(defvar async-byte-compile-log-fileasync-byte-compile-log-file54,2156
(defun async-byte-recompile-directory (directory &optional quiet)async-byte-recompile-directory58,2262
(defvar package-archive-contents)package-archive-contents108,4716
(defvar package-alist)package-alist109,4750
(defun async-bytecomp--get-package-deps (pkg &optional only)async-bytecomp--get-package-deps112,4831
(defun async-bytecomp-get-allowed-pkgs ()async-bytecomp-get-allowed-pkgs135,6075
(defadvice package--compile (around byte-compile-async)package--compile147,6606
(define-minor-mode async-bytecomp-package-modeasync-bytecomp-package-mode166,7451

elpa/async-1.9.3/async-autoloads.el,137
(defvar async-bytecomp-package-mode nil "\async-bytecomp-package-mode86,2875
(defvar dired-async-mode nil "\dired-async-mode110,3758

elpa/async-1.9.3/smtpmail-async.el,200
(defgroup smtpmail-async nilsmtpmail-async39,1320
(defvar async-smtpmail-before-send-hook nilasync-smtpmail-before-send-hook47,1475
(defun async-smtpmail-send-it ()async-smtpmail-send-it51,1639

elpa/async-1.9.3/dired-async.el,2059
(defgroup dired-async nildired-async48,1546
(defcustom dired-async-env-variables-regexpdired-async-env-variables-regexp52,1639
(defcustom dired-async-message-function 'dired-async-mode-line-messagedired-async-message-function58,1859
(defcustom dired-async-log-file "/tmp/dired-async.log"dired-async-log-file64,2069
(defcustom dired-async-mode-lighter '(:evaldired-async-mode-lighter69,2231
(defface dired-async-messagedired-async-message77,2498
(defface dired-async-failuresdired-async-failures82,2622
(defface dired-async-mode-messagedired-async-mode-message87,2744
(define-minor-mode dired-async--modeline-modedired-async--modeline-mode92,2890
(defun dired-async-mode-line-message (text face &rest args)dired-async-mode-line-message102,3299
(defun dired-async-processes ()dired-async-processes115,3766
(defun dired-async-kill-process ()dired-async-kill-process121,3978
(defun dired-async-after-file-create (total operation failures skipped)dired-async-after-file-create129,4230
(defun dired-async-maybe-kill-ftp ()dired-async-maybe-kill-ftp169,6014
(defvar overwrite-query)overwrite-query180,6403
(defun dired-async-create-files (file-creator operation fn-list name-constructordired-async-create-files181,6428
(defvar wdired-use-interactive-rename)wdired-use-interactive-rename330,14768
(defun dired-async-wdired-do-renames (old-fn &rest args)dired-async-wdired-do-renames331,14807
(defadvice wdired-do-renames (around wdired-async)wdired-do-renames339,15159
(defadvice dired-create-files (around dired-async)dired-create-files343,15265
(define-minor-mode dired-async-modedired-async-mode348,15450
(defmacro dired-async--with-async-create-files (&rest body)dired-async--with-async-create-files365,16204
(defun dired-async-do-copy (&optional arg)dired-async-do-copy372,16485
(defun dired-async-do-symlink (&optional arg)dired-async-do-symlink379,16674
(defun dired-async-do-hardlink (&optional arg)dired-async-do-hardlink386,16872
(defun dired-async-do-rename (&optional arg)dired-async-do-rename393,17073

elpa/logito-0.1/logito-autoloads.el,0

elpa/logito-0.1/logito-pkg.el,282
(define-package "logito" "0.1" "logging library for Emacs" '((eieio "1.3")) :commit "824acb89d2cc18cb47281a4fbddd81ad244a2052" :keywords '("lisp" "tool") :authors '(("Yann Hodique" . "yann.hodique@gmail.com")) :maintainer '("Yann Hodique" . "yann.hodique@gmail.com"))"logito"2,31

elpa/logito-0.1/logito.el,933
(defclass logito-object ()logito-object37,1081
(defmethod logito-insert-log ((log logito-object) format &rest objects)logito-insert-log40,1152
(defmethod logito-should-log ((log logito-object) level)logito-should-log43,1262
(defmethod logito-log ((log logito-object) level tag string &rest objects)logito-log48,1398
(defmethod logito-log (log level tag string &rest objects)logito-log52,1587
(defclass logito-message-object (logito-object)logito-message-object57,1754
(defmethod logito-insert-log ((log logito-message-object) format &rest objects)logito-insert-log60,1809
(defclass logito-buffer-object (logito-object)logito-buffer-object63,1925
(defmethod logito-should-log ((log logito-buffer-object) level)logito-should-log66,2018
(defmethod logito-insert-log ((log logito-buffer-object) format &rest objects)logito-insert-log70,2137
(defmacro logito-def-level (sym val &optional pkg)logito-def-level76,2392

elpa/ivy-rich-0.1.4/ivy-rich.el,3887
(defgroup ivy-rich nilivy-rich43,1357
(defvar obsolete-message "Please refer to the github page for latest (0.1.0) usage of ivy-rich. ")obsolete-message48,1536
(defcustom ivy-rich-switch-buffer-name-max-lengthivy-rich-switch-buffer-name-max-length51,1672
(defcustom ivy-rich-switch-buffer-mode-max-lengthivy-rich-switch-buffer-mode-max-length60,1959
(defcustom ivy-rich-switch-buffer-project-max-lengthivy-rich-switch-buffer-project-max-length69,2242
(defcustom ivy-rich-switch-buffer-delimiterivy-rich-switch-buffer-delimiter78,2537
(defcustom ivy-rich-switch-buffer-align-virtual-bufferivy-rich-switch-buffer-align-virtual-buffer84,2719
(defcustom ivy-rich-display-transformers-listivy-rich-display-transformers-list90,2960
(defalias 'ivy-rich-candidate 'identity)ivy-rich-candidate167,6162
(defun ivy-rich-empty-p (str)ivy-rich-empty-p169,6204
(defun ivy-rich-normailze-width (str len &optional left)ivy-rich-normailze-width173,6295
(defun ivy-rich-minibuffer-width (width)ivy-rich-minibuffer-width192,6953
(defcustom ivy-rich-path-styleivy-rich-path-style203,7385
(defcustom ivy-rich-parse-remote-bufferivy-rich-parse-remote-buffer215,7766
(defcustom ivy-rich-parse-remote-file-pathivy-rich-parse-remote-file-path227,8114
(defun ivy-rich-switch-buffer-user-buffer-p (buffer)ivy-rich-switch-buffer-user-buffer-p243,8642
(defun ivy-rich-switch-buffer-shorten-path (file len)ivy-rich-switch-buffer-shorten-path251,8896
(defun ivy-rich--local-values (buffer args)ivy-rich--local-values266,9411
(defun ivy-rich-switch-buffer-buffer-name (candidate)ivy-rich-switch-buffer-buffer-name272,9624
(defun ivy-rich-switch-buffer-indicators (candidate)ivy-rich-switch-buffer-indicators275,9692
(defun ivy-rich-switch-buffer-size (candidate)ivy-rich-switch-buffer-size297,10687
(defun ivy-rich-switch-buffer-major-mode (candidate)ivy-rich-switch-buffer-major-mode306,10986
(defun ivy-rich-switch-buffer-in-project-p (candidate)ivy-rich-switch-buffer-in-project-p316,11220
(defun ivy-rich-switch-buffer-project (candidate)ivy-rich-switch-buffer-project335,12092
(defun ivy-rich--switch-buffer-root-and-filename (candidate)ivy-rich--switch-buffer-root-and-filename338,12202
(defun ivy-rich-switch-buffer-path (candidate)ivy-rich-switch-buffer-path365,13644
(defun ivy-rich-counsel-function-docstring (candidate)ivy-rich-counsel-function-docstring391,14799
(defun ivy-rich-counsel-variable-docstring (candidate)ivy-rich-counsel-variable-docstring400,15251
(defun ivy-rich-file-last-modified-time (candidate)ivy-rich-file-last-modified-time408,15557
(defun ivy-rich-bookmark-value (candidate key)ivy-rich-bookmark-value414,15770
(defun ivy-rich-bookmark-filename (candidate)ivy-rich-bookmark-filename417,15878
(defun ivy-rich-bookmark-type (candidate)ivy-rich-bookmark-type420,15974
(defun ivy-rich-bookmark-info (candidate)ivy-rich-bookmark-info432,16503
(defun ivy-rich-counsel-projectile-switch-project-project-name (candidate)ivy-rich-counsel-projectile-switch-project-project-name447,17027
(defvar ivy-rich--original-display-transformers-list nil)  ; Backup listivy-rich--original-display-transformers-list451,17230
(defun ivy-rich-format-column (candidate column)ivy-rich-format-column453,17304
(defun ivy-rich-format (candidate columns &optional delimiter)ivy-rich-format470,17952
(defun ivy-rich-backup-transformer (cmd)ivy-rich-backup-transformer477,18131
(defun ivy-rich-restore-transformer (cmd)ivy-rich-restore-transformer483,18382
(defun ivy-rich-build-transformer (cmd transformer-props)ivy-rich-build-transformer489,18620
(defun ivy-rich-set-display-transformer ()ivy-rich-set-display-transformer500,19173
(defun ivy-rich-unset-display-transformer ()ivy-rich-unset-display-transformer510,19765
(define-minor-mode ivy-rich-modeivy-rich-mode516,20028
(defun ivy-rich-reload ()ivy-rich-reload525,20290

elpa/ivy-rich-0.1.4/ivy-rich-autoloads.el,50
(defvar ivy-rich-mode nil "\ivy-rich-mode12,299

elpa/ivy-rich-0.1.4/ivy-rich-pkg.el,314
(define-package "ivy-rich" "0.1.4" "More friendly display transformer for ivy." '((emacs "24.4") (ivy "0.8.0")) :commit "25e36b10eff7fd299fcc03f15288b4fff33974e4" :keywords '("ivy") :authors '(("Yevgnen Koh" . "wherejoystarts@gmail.com")) :maintainer '("Yevgnen Koh" . "wherejoystarts@gmail.com"))"ivy-rich"2,31

elpa/evil-surround-1.0.4/evil-surround-pkg.el,375
(define-package "evil-surround" "1.0.4" "emulate surround.vim from Vim" '((evil "1.2.12")) :commit "5ad01dfa86424c4b22cd1dfa375f13bd8c656f43" :keywords '("emulation" "vi" "evil") :authors '(("Tim Harper <timcharper at gmail dot com>") ("Vegard Øye <vegard_oye at hotmail dot com>           ")) :maintainer '("Tim Harper <timcharper at gmail dot com>"))"evil-surround"2,31

elpa/evil-surround-1.0.4/evil-surround-autoloads.el,75
(defvar global-evil-surround-mode nil "\global-evil-surround-mode43,1355

elpa/evil-surround-1.0.4/evil-surround.el,2448
(defgroup evil-surround nilevil-surround44,1351
(defcustom evil-surround-pairs-alistevil-surround-pairs-alist53,1599
(defcustom evil-surround-operator-alistevil-surround-operator-alist81,2522
(defvar evil-surround-read-tag-mapevil-surround-read-tag-map90,2857
(defvar evil-surround-record-repeat nilevil-surround-record-repeat103,3464
(defvar evil-surround-last-deleted-left ""evil-surround-last-deleted-left106,3565
(defun evil-surround-read-from-minibuffer (&rest args)evil-surround-read-from-minibuffer109,3650
(defun evil-surround-read-char ()evil-surround-read-char120,4083
(defun evil-surround-input-char ()evil-surround-input-char125,4211
(defun evil-surround-input-region-char ()evil-surround-input-region-char128,4283
(defun evil-surround-function ()evil-surround-function132,4399
(defconst evil-surround-tag-name-re "\\([0-9a-z-]+\\)"evil-surround-tag-name-re138,4629
(defun evil-surround-tag-p (string)evil-surround-tag-p141,4723
(defun evil-surround-read-tag ()evil-surround-read-tag145,4856
(defun evil-surround-valid-char-p (char)evil-surround-valid-char-p161,5875
(defun evil-surround-delete-char-noop-p (char)evil-surround-delete-char-noop-p165,6012
(defun evil-surround-pair (char)evil-surround-pair172,6290
(defun evil-surround-outer-overlay (char)evil-surround-outer-overlay186,6631
(defun evil-surround-trim-whitespace-from-range (range &optional regexp)evil-surround-trim-whitespace-from-range199,7231
(defun evil-surround-inner-overlay (char)evil-surround-inner-overlay211,7846
(defun evil-surround-delete (char &optional outer inner)evil-surround-delete236,8824
(defun evil-surround-change (char &optional outer inner)evil-surround-change261,9889
(defun evil-surround-interactive-setup ()evil-surround-interactive-setup283,10850
(defun evil-surround-setup-surround-line-operators ()evil-surround-setup-surround-line-operators288,11029
(defun evil-surround-column-at (pos)evil-surround-column-at292,11217
(defun evil-surround-block (beg end char)evil-surround-block295,11308
(defun evil-surround-call-with-repeat (callback)evil-surround-call-with-repeat307,11805
(define-minor-mode evil-surround-modeevil-surround-mode428,16417
(defun turn-on-evil-surround-mode ()turn-on-evil-surround-mode434,16583
(defun turn-off-evil-surround-mode ()turn-off-evil-surround-mode439,16715
(define-globalized-minor-mode global-evil-surround-modeglobal-evil-surround-mode444,16850

elpa/indent-guide-20160630/indent-guide-autoloads.el,72
(defvar indent-guide-global-mode nil "\indent-guide-global-mode17,433

elpa/indent-guide-20160630/indent-guide.el,1386
(defconst indent-guide-version "2.3.0")indent-guide-version78,2619
(defgroup indent-guide nilindent-guide82,2674
(defcustom indent-guide-char "|"indent-guide-char86,2771
(defcustom indent-guide-inhibit-modesindent-guide-inhibit-modes91,2882
(defcustom indent-guide-recursive nilindent-guide-recursive101,3124
(defcustom indent-guide-delay nilindent-guide-delay106,3261
(defcustom indent-guide-threshold -1indent-guide-threshold112,3414
(defface indent-guide-face '((t (:foreground "#535353")))indent-guide-face118,3568
(defvar indent-guide--timer-object nil)indent-guide--timer-object124,3704
(defun indent-guide--active-overlays ()indent-guide--active-overlays128,3761
(defun indent-guide--indentation-candidates (level)indent-guide--indentation-candidates136,4030
(defun indent-guide--beginning-of-level ()indent-guide--beginning-of-level148,4523
(defun indent-guide--make-overlay (line col)indent-guide--make-overlay169,5444
(defun indent-guide-show ()indent-guide-show234,8644
(defun indent-guide-remove ()indent-guide-remove271,10203
(defun indent-guide-post-command-hook ()indent-guide-post-command-hook277,10324
(defun indent-guide-pre-command-hook ()indent-guide-pre-command-hook287,10741
(define-minor-mode indent-guide-modeindent-guide-mode291,10822
(define-globalized-minor-mode indent-guide-global-modeindent-guide-global-mode304,11300

elpa/indent-guide-20160630/indent-guide-pkg.el,243
(define-package "indent-guide" "20160630" "show vertical lines to guide indentation" 'nil :commit "feb207cb5610f351c7cdcf266e0c99117b2f786c" :authors '(("zk_phi")) :maintainer '("zk_phi") :url "http://hins11.yu-yake.com/")"indent-guide"2,31

elpa/loop-1.3/loop.el,581
(defmacro loop-while (condition &rest body)loop-while33,1137
(defmacro loop-do-while (condition &rest body)loop-do-while41,1386
(defmacro loop-until (condition &rest body)loop-until53,1797
(defmacro loop-for-each (var list &rest body)loop-for-each59,2030
(defun loop--last-line-p ()loop--last-line-p72,2498
(defun loop--current-line ()loop--current-line76,2639
(defmacro loop-for-each-line (&rest body)loop-for-each-line83,2895
(defsubst loop-break ()loop-break104,3606
(defun loop-continue ()loop-continue109,3806
(defun loop-return (value)loop-return116,4045

elpa/loop-1.3/loop-pkg.el,299
(define-package "loop" "1.3" "friendly imperative loop structures" 'nil :commit "c3598bd3ad0677f66e061b3ba51a05d05275283e" :keywords '("loop" "while" "for each" "break" "continue") :authors '(("Wilfred Hughes" . "me@wilfred.me.uk")) :maintainer '("Wilfred Hughes" . "me@wilfred.me.uk"))"loop"2,31

elpa/loop-1.3/loop-autoloads.el,0

elpa/projectile-2.0.0/projectile.el,33235
(defvar grep-files-aliases)grep-files-aliases71,2471
(defvar grep-find-ignored-directories)grep-find-ignored-directories72,2499
(defvar grep-find-ignored-files)grep-find-ignored-files73,2538
(defgroup projectile nilprojectile77,2592
(defcustom projectile-indexing-method (if (eq system-type 'windows-nt) 'native 'alien)projectile-indexing-method85,2907
(defcustom projectile-enable-caching (eq projectile-indexing-method 'native)projectile-enable-caching120,4523
(defcustom projectile-kill-buffers-filter 'kill-allprojectile-kill-buffers-filter128,4779
(defcustom projectile-file-exists-local-cache-expire nilprojectile-file-exists-local-cache-expire144,5328
(defcustom projectile-file-exists-remote-cache-expire (* 5 60)projectile-file-exists-remote-cache-expire154,5693
(defcustom projectile-files-cache-expire nilprojectile-files-cache-expire164,6081
(defcustom projectile-auto-update-cache tprojectile-auto-update-cache172,6347
(defcustom projectile-require-project-root 'promptprojectile-require-project-root177,6516
(defcustom projectile-completion-system 'idoprojectile-completion-system188,6968
(defcustom projectile-keymap-prefix nilprojectile-keymap-prefix198,7291
(defcustom projectile-cache-fileprojectile-cache-file205,7542
(defcustom projectile-tags-file-name "TAGS"projectile-tags-file-name211,7716
(defcustom projectile-tags-command "ctags -Re -f \"%s\" %s \"%s\""projectile-tags-command216,7848
(defcustom projectile-tags-backend 'autoprojectile-tags-backend221,8021
(defcustom projectile-sort-order 'defaultprojectile-sort-order243,8873
(defcustom projectile-verbose tprojectile-verbose253,9251
(defcustom projectile-buffers-filter-function nilprojectile-buffers-filter-function258,9362
(defcustom projectile-project-name nilprojectile-project-name268,9724
(defcustom projectile-project-name-function 'projectile-default-project-nameprojectile-project-name-function276,9978
(defcustom projectile-project-root-filesprojectile-project-root-files284,10299
(defcustom projectile-project-root-files-bottom-upprojectile-project-root-files-bottom-up316,11691
(defcustom projectile-project-root-files-top-down-recurringprojectile-project-root-files-top-down-recurring330,12203
(defcustom projectile-project-root-files-functionsprojectile-project-root-files-functions342,12659
(defcustom projectile-globally-ignored-filesprojectile-globally-ignored-files351,12936
(defcustom projectile-globally-unignored-files nilprojectile-globally-unignored-files357,13116
(defcustom projectile-globally-ignored-file-suffixesprojectile-globally-ignored-file-suffixes365,13347
(defcustom projectile-globally-ignored-directoriesprojectile-globally-ignored-directories371,13514
(defcustom projectile-globally-unignored-directories nilprojectile-globally-unignored-directories391,13924
(defcustom projectile-globally-ignored-modesprojectile-globally-ignored-modes397,14133
(defcustom projectile-globally-ignored-buffers nilprojectile-globally-ignored-buffers411,14521
(defcustom projectile-find-file-hook nilprojectile-find-file-hook421,14866
(defcustom projectile-find-dir-hook nilprojectile-find-dir-hook426,15009
(defcustom projectile-switch-project-action 'projectile-find-fileprojectile-switch-project-action431,15155
(defcustom projectile-find-dir-includes-top-level nilprojectile-find-dir-includes-top-level438,15392
(defcustom projectile-use-git-grep nilprojectile-use-git-grep443,15562
(defcustom projectile-grep-finished-hook nilprojectile-grep-finished-hook448,15689
(defcustom projectile-test-prefix-function 'projectile-test-prefixprojectile-test-prefix-function454,15862
(defcustom projectile-test-suffix-function 'projectile-test-suffixprojectile-test-suffix-function459,16032
(defcustom projectile-dynamic-mode-line tprojectile-dynamic-mode-line464,16202
(defcustom projectile-mode-line-function 'projectile-default-mode-lineprojectile-mode-line-function474,16535
(defvar projectile-idle-timer nilprojectile-idle-timer484,16881
(defcustom projectile-idle-timer-seconds 30projectile-idle-timer-seconds487,16994
(defcustom projectile-idle-timer-hook '(projectile-regenerate-tags)projectile-idle-timer-hook492,17152
(defcustom projectile-enable-idle-timer nilprojectile-enable-idle-timer497,17333
(defvar projectile-projects-cache nilprojectile-projects-cache518,18246
(defvar projectile-projects-cache-time nilprojectile-projects-cache-time521,18365
(defvar projectile-project-root-cache (make-hash-table :test 'equal)projectile-project-root-cache524,18486
(defvar projectile-project-type-cache (make-hash-table :test 'equal)projectile-project-type-cache527,18613
(defvar projectile-known-projects nilprojectile-known-projects530,18757
(defvar projectile-known-projects-on-file nilprojectile-known-projects-on-file537,19048
(defcustom projectile-known-projects-fileprojectile-known-projects-file543,19257
(defcustom projectile-ignored-projects nilprojectile-ignored-projects550,19490
(defcustom projectile-ignored-project-function nilprojectile-ignored-project-function556,19719
(defcustom projectile-track-known-projects-automatically tprojectile-track-known-projects-automatically575,20367
(defcustom projectile-project-search-path nilprojectile-project-search-path584,20682
(defcustom projectile-git-command "git ls-files -zco --exclude-standard"projectile-git-command592,21027
(defcustom projectile-git-submodule-command "git submodule --quiet foreach 'echo $path' | tr '\\n' '\\0'"projectile-git-submodule-command597,21205
(defcustom projectile-git-ignored-command "git ls-files -zcoi --exclude-standard"projectile-git-ignored-command603,21478
(defcustom projectile-hg-command "hg locate -f -0 -I ."projectile-hg-command609,21717
(defcustom projectile-fossil-command (concat "fossil ls | "projectile-fossil-command614,21877
(defcustom projectile-bzr-command "bzr ls -R --versioned -0"projectile-bzr-command623,22326
(defcustom projectile-darcs-command "darcs show files -0 . "projectile-darcs-command628,22495
(defcustom projectile-svn-command "svn list -R . | grep -v '$/' | tr '\\n' '\\0'"projectile-svn-command633,22663
(defcustom projectile-generic-command "find . -type f -print0"projectile-generic-command638,22850
(defcustom projectile-vcs-dirty-state '("edited" "unregistered" "needs-update" "needs-merge" "unlocked-changes" "conflict")projectile-vcs-dirty-state643,23022
(defcustom projectile-other-file-alistprojectile-other-file-alist653,23461
(defcustom projectile-create-missing-test-files nilprojectile-create-missing-test-files682,24285
(defcustom projectile-after-switch-project-hook nilprojectile-after-switch-project-hook691,24649
(defcustom projectile-before-switch-project-hook nilprojectile-before-switch-project-hook696,24785
(defcustom projectile-current-project-on-switch 'removeprojectile-current-project-on-switch701,24928
(defun projectile-version (&optional show-version)projectile-version718,25465
(defun projectile-difference (list1 list2)projectile-difference739,26242
(defun projectile-unixy-system-p ()projectile-unixy-system-p744,26346
(defun projectile-symbol-or-selection-at-point ()projectile-symbol-or-selection-at-point750,26515
(defun projectile-symbol-at-point ()projectile-symbol-at-point756,26739
(defun projectile-serialize (data filename)projectile-serialize763,26914
(defun projectile-unserialize (filename)projectile-unserialize771,27180
(defvar projectile-file-exists-cacheprojectile-file-exists-cache784,27601
(defvar projectile-file-exists-cache-timer nilprojectile-file-exists-cache-timer788,27720
(defun projectile-file-exists-cache-cleanup ()projectile-file-exists-cache-cleanup791,27833
(defun projectile-file-exists-p (filename)projectile-file-exists-p803,28400
(defun projectile-invalidate-cache (prompt)projectile-invalidate-cache837,30171
(defun projectile-time-seconds ()projectile-time-seconds859,31128
(defun projectile-cache-project (project files)projectile-cache-project864,31309
(defun projectile-purge-file-from-cache (file)projectile-purge-file-from-cache873,31660
(defun projectile-purge-dir-from-cache (dir)projectile-purge-dir-from-cache890,32368
(defun projectile-file-cached-p (file project)projectile-file-cached-p902,32884
(defun projectile-cache-current-file ()projectile-cache-current-file907,33055
(defun projectile-cache-files-find-file-hook ()projectile-cache-files-find-file-hook926,34199
(defun projectile-track-known-projects-find-file-hook ()projectile-track-known-projects-find-file-hook934,34525
(defun projectile-maybe-invalidate-cache (force)projectile-maybe-invalidate-cache939,34786
(defun projectile-discover-projects-in-directory (directory)projectile-discover-projects-in-directory946,35092
(defun projectile-discover-projects-in-search-path ()projectile-discover-projects-in-search-path962,35716
(defun delete-file-projectile-remove-from-cache (filename &optional trash)delete-file-projectile-remove-from-cache969,35992
(defun projectile-parent (path)projectile-parent979,36524
(defun projectile-locate-dominating-file (file name)projectile-locate-dominating-file984,36765
(defvar-local projectile-project-root nilprojectile-project-root1007,37876
(defun projectile-root-local (_dir)projectile-root-local1011,38020
(defun projectile-root-top-down (dir &optional list)projectile-root-top-down1015,38139
(defun projectile-root-bottom-up (dir &optional list)projectile-root-bottom-up1025,38597
(defun projectile-root-top-down-recurring (dir &optional list)projectile-root-top-down-recurring1032,39001
(defun projectile-project-root (&optional dir)projectile-project-root1047,39755
(defun projectile-ensure-project (dir)projectile-ensure-project1080,41698
(defun projectile-project-p (&optional dir)projectile-project-p1092,42221
(defun projectile-default-project-name (project-root)projectile-default-project-name1098,42415
(defun projectile-project-name (&optional project)projectile-project-name1102,42631
(defun projectile-get-project-directories (project-dir)projectile-get-project-directories1113,42996
(defun projectile--directory-p (directory)projectile--directory-p1118,43252
(defun projectile-dir-files (directory)projectile-dir-files1122,43421
(defun projectile-dir-files-native (directory)projectile-dir-files-native1143,44484
(defun projectile-index-directory (directory patterns progress-reporter)projectile-index-directory1154,45052
(defun projectile-dir-files-alien (directory)projectile-dir-files-alien1179,46283
(define-obsolete-function-alias 'projectile-dir-files-external 'projectile-dir-files-alien "2.0.0")projectile-dir-files-external1188,46706
(define-obsolete-function-alias 'projectile-get-repo-files 'projectile-dir-files-alien "2.0.0")projectile-get-repo-files1189,46806
(defun projectile-get-ext-command (vcs)projectile-get-ext-command1191,46903
(defun projectile-get-sub-projects-command (vcs)projectile-get-sub-projects-command1203,47342
(defun projectile-get-ext-ignored-command (vcs)projectile-get-ext-ignored-command1211,47586
(defun projectile-flatten (lst)projectile-flatten1218,47815
(defun projectile-get-all-sub-projects (project)projectile-get-all-sub-projects1224,48024
(defun projectile-get-immediate-sub-projects (path)projectile-get-immediate-sub-projects1238,48555
(defun projectile-get-sub-projects-files (project-root vcs)projectile-get-sub-projects-files1266,49763
(defun projectile-get-repo-ignored-files (project vcs)projectile-get-repo-ignored-files1279,50439
(defun projectile-get-repo-ignored-directory (project dir vcs)projectile-get-repo-ignored-directory1285,50683
(defun projectile-files-via-ext-command (root command)projectile-files-via-ext-command1292,50994
(defun projectile-adjust-files (project vcs files)projectile-adjust-files1301,51347
(defun projectile-remove-ignored (files)projectile-remove-ignored1305,51549
(defun projectile-keep-ignored-files (project vcs files)projectile-keep-ignored-files1338,52962
(defun projectile-keep-ignored-directories (project vcs directories)projectile-keep-ignored-directories1346,53250
(defun projectile-add-unignored (project vcs files)projectile-add-unignored1355,53587
(defun projectile-buffers-with-file (buffers)projectile-buffers-with-file1371,54283
(defun projectile-buffers-with-file-or-process (buffers)projectile-buffers-with-file-or-process1375,54441
(defun projectile-project-buffers (&optional project)projectile-project-buffers1380,54687
(defun projectile-process-current-project-buffers (action)projectile-process-current-project-buffers1392,55238
(defun projectile-project-buffer-files (&optional project)projectile-project-buffer-files1398,55480
(defun projectile-project-buffer-p (buffer project-root)projectile-project-buffer-p1410,55916
(defun projectile-ignored-buffer-p (buffer)projectile-ignored-buffer-p1421,56469
(defun projectile-recently-active-files ()projectile-recently-active-files1438,56954
(defun projectile-project-buffer-names ()projectile-project-buffer-names1449,57345
(defun projectile-prepend-project-name (string)projectile-prepend-project-name1453,57483
(defun projectile-read-buffer-to-switch (prompt)projectile-read-buffer-to-switch1457,57637
(defun projectile-switch-to-buffer ()projectile-switch-to-buffer1468,57968
(defun projectile-switch-to-buffer-other-window ()projectile-switch-to-buffer-other-window1475,58151
(defun projectile-switch-to-buffer-other-frame ()projectile-switch-to-buffer-other-frame1482,58390
(defun projectile-display-buffer ()projectile-display-buffer1489,58627
(defun projectile-project-buffers-other-buffer ()projectile-project-buffers-other-buffer1498,58877
(defun projectile-project-buffers-non-visible ()projectile-project-buffers-non-visible1504,59133
(defun projectile-multi-occur (&optional nlines)projectile-multi-occur1512,59367
(defun projectile-normalise-paths (patterns)projectile-normalise-paths1521,59737
(defun projectile-expand-paths (paths)projectile-expand-paths1528,60056
(defun projectile-normalise-patterns (patterns)projectile-normalise-patterns1541,60580
(defun projectile-make-relative-to-root (files)projectile-make-relative-to-root1545,60729
(defun projectile-ignored-directory-p (directory)projectile-ignored-directory-p1550,60943
(defun projectile-ignored-file-p (file)projectile-ignored-file-p1559,61175
(defun projectile-check-pattern-p (file pattern)projectile-check-pattern-p1568,61381
(defun projectile-ignored-rel-p (file directory patterns)projectile-ignored-rel-p1574,61622
(defun projectile-ignored-files ()projectile-ignored-files1585,62042
(defun projectile-ignored-directories ()projectile-ignored-directories1595,62304
(defun projectile-ignored-directories-rel ()projectile-ignored-directories-rel1607,62642
(defun projectile-ignored-files-rel ()projectile-ignored-files-rel1611,62821
(defun projectile-project-ignored-files ()projectile-project-ignored-files1615,62982
(defun projectile-project-ignored-directories ()projectile-project-ignored-directories1620,63167
(defun projectile-paths-to-ignore ()projectile-paths-to-ignore1625,63374
(defun projectile-patterns-to-ignore ()projectile-patterns-to-ignore1629,63530
(defun projectile-project-ignored ()projectile-project-ignored1633,63693
(defun projectile-unignored-files ()projectile-unignored-files1639,63915
(defun projectile-unignored-directories ()projectile-unignored-directories1647,64122
(defun projectile-unignored-directories-rel ()projectile-unignored-directories-rel1657,64397
(defun projectile-unignored-files-rel ()projectile-unignored-files-rel1661,64582
(defun projectile-project-unignored-files ()projectile-project-unignored-files1665,64749
(defun projectile-project-unignored-directories ()projectile-project-unignored-directories1669,64906
(defun projectile-paths-to-ensure ()projectile-paths-to-ensure1673,65079
(defun projectile-files-to-ensure ()projectile-files-to-ensure1677,65237
(defun projectile-patterns-to-ensure ()projectile-patterns-to-ensure1681,65415
(defun projectile-filtering-patterns ()projectile-filtering-patterns1685,65578
(defun projectile-project-unignored ()projectile-project-unignored1689,65701
(defun projectile-dirconfig-file ()projectile-dirconfig-file1695,65955
(defun projectile-parse-dirconfig-file ()projectile-parse-dirconfig-file1699,66116
(defun projectile-expand-root (name)projectile-expand-root1729,67590
(defun projectile-project-files (project-root)projectile-project-files1775,69558
(defun projectile-current-project-files ()projectile-current-project-files1830,71916
(defun projectile-process-current-project-files (action)projectile-process-current-project-files1834,72071
(defun projectile-project-dirs (project)projectile-project-dirs1841,72369
(defun projectile-current-project-dirs ()projectile-current-project-dirs1848,72573
(defun projectile--find-other-file (&optional flex-matching ff-variant)projectile--find-other-file1854,72776
(defun projectile-find-other-file (&optional flex-matching)projectile-find-other-file1876,73914
(defun projectile-find-other-file-other-window (&optional flex-matching)projectile-find-other-file-other-window1884,74296
(defun projectile-find-other-file-other-frame (&optional flex-matching)projectile-find-other-file-other-frame1893,74763
(defun projectile--file-name-sans-extensions (file-name)projectile--file-name-sans-extensions1901,75213
(defun projectile--file-name-extensions (file-name)projectile--file-name-extensions1907,75528
(defun projectile-associated-file-name-extensions (file-name)projectile-associated-file-name-extensions1918,76072
(defun projectile-get-other-files (current-file project-file-list &optional flex-matching)projectile-get-other-files1929,76818
(defun projectile-select-files (project-files &optional invalidate-cache)projectile-select-files1972,79281
(defun projectile--find-file-dwim (invalidate-cache &optional ff-variant)projectile--find-file-dwim1991,80090
(defun projectile-find-file-dwim (&optional invalidate-cache)projectile-find-file-dwim2016,81179
(defun projectile-find-file-dwim-other-window (&optional invalidate-cache)projectile-find-file-dwim-other-window2043,82591
(defun projectile-find-file-dwim-other-frame (&optional invalidate-cache)projectile-find-file-dwim-other-frame2071,84081
(defun projectile--find-file (invalidate-cache &optional ff-variant)projectile--find-file2098,85551
(defun projectile-find-file (&optional invalidate-cache)projectile-find-file2114,86353
(defun projectile-find-file-other-window (&optional invalidate-cache)projectile-find-file-other-window2121,86601
(defun projectile-find-file-other-frame (&optional invalidate-cache)projectile-find-file-other-frame2129,86918
(defun projectile-toggle-project-read-only ()projectile-toggle-project-read-only2137,87232
(defun projectile-sort-files (files)projectile-sort-files2152,87753
(defun projectile-sort-by-recentf-first (files)projectile-sort-by-recentf-first2161,88151
(defun projectile-sort-by-recently-active-first (files)projectile-sort-by-recently-active-first2167,88402
(defun projectile-sort-by-modification-time (files)projectile-sort-by-modification-time2173,88716
(defun projectile-sort-by-access-time (files)projectile-sort-by-access-time2183,89105
(defun projectile--find-dir (invalidate-cache &optional dired-variant)projectile--find-dir2195,89529
(defun projectile-find-dir (&optional invalidate-cache)projectile-find-dir2209,90194
(defun projectile-find-dir-other-window (&optional invalidate-cache)projectile-find-dir-other-window2217,90446
(defun projectile-find-dir-other-frame (&optional invalidate-cache)projectile-find-dir-other-frame2225,90748
(defun projectile-complete-dir (project)projectile-complete-dir2232,91033
(defun projectile-find-test-file (&optional invalidate-cache)projectile-find-test-file2241,91305
(defun projectile-test-files (files)projectile-test-files2251,91774
(defun projectile-test-file-p (file)projectile-test-file-p2255,91896
(defun projectile-current-project-test-files ()projectile-current-project-test-files2262,92365
(defvar projectile-project-types nilprojectile-project-types2266,92533
(defun projectile-cabal-project-p ()projectile-cabal-project-p2310,94730
(defun projectile-go-project-p ()projectile-go-project-p2315,94942
(define-obsolete-variable-alias 'projectile-go-function 'projectile-go-project-test-function "1.0.0")projectile-go-function2319,95070
(defcustom projectile-go-project-test-function #'projectile-go-project-pprojectile-go-project-test-function2320,95172
(defvar-local projectile-project-type nilprojectile-project-type2521,105420
(defun projectile-detect-project-type ()projectile-detect-project-type2526,105639
(defun projectile-project-type (&optional dir)projectile-project-type2542,106412
(defun projectile-project-info ()projectile-project-info2559,107033
(defun projectile-verify-files (files)projectile-verify-files2567,107302
(defun projectile-verify-file (file)projectile-verify-file2571,107445
(defun projectile-verify-file-wildcard (file)projectile-verify-file-wildcard2575,107586
(defun projectile-project-vcs (&optional project-root)projectile-project-vcs2580,107809
(defun projectile--test-name-for-impl-name (impl-file-path)projectile--test-name-for-impl-name2602,109112
(defun projectile-create-test-file-for (impl-file-path)projectile-create-test-file-for2614,109819
(defun projectile-find-implementation-or-test (file-name)projectile-find-implementation-or-test2628,110642
(defun projectile-find-implementation-or-test-other-window ()projectile-find-implementation-or-test-other-window2652,111673
(defun projectile-find-implementation-or-test-other-frame ()projectile-find-implementation-or-test-other-frame2659,111921
(defun projectile-toggle-between-implementation-and-test ()projectile-toggle-between-implementation-and-test2666,112166
(defun projectile-project-type-attribute (project-type key &optional default-value)projectile-project-type-attribute2673,112383
(defun projectile-test-prefix (project-type)projectile-test-prefix2681,112762
(defun projectile-test-suffix (project-type)projectile-test-suffix2685,112931
(defun projectile-src-directory (project-type)projectile-src-directory2689,113100
(defun projectile-test-directory (project-type)projectile-test-directory2693,113270
(defun projectile-dirname-matching-count (a b)projectile-dirname-matching-count2697,113444
(defun projectile-group-file-candidates (file candidates)projectile-group-file-candidates2706,113807
(defun projectile-find-matching-test (file)projectile-find-matching-test2721,114471
(defun projectile-find-matching-file (test-file)projectile-find-matching-file2746,115712
(defun projectile-grep-default-files ()projectile-grep-default-files2771,116971
(defun projectile--globally-ignored-file-suffixes-glob ()projectile--globally-ignored-file-suffixes-glob2797,118122
(defun projectile--read-search-string-with-default (prefix-label)projectile--read-search-string-with-default2801,118328
(defun projectile-grep (&optional regexp arg)projectile-grep2811,118846
(defun projectile-ag (search-term &optional arg)projectile-ag2851,120947
(defun projectile-ripgrep (search-term)projectile-ripgrep2880,122424
(defun projectile-tags-exclude-patterns ()projectile-tags-exclude-patterns2897,123197
(defun projectile-regenerate-tags ()projectile-regenerate-tags2904,123494
(defun projectile-visit-project-tags-table ()projectile-visit-project-tags-table2930,124612
(defun projectile-determine-find-tag-fn ()projectile-determine-find-tag-fn2938,124951
(defun projectile-find-tag ()projectile-find-tag2962,125734
(defmacro projectile-with-default-dir (dir &rest body)projectile-with-default-dir2970,125993
(defun projectile-run-command-in-root ()projectile-run-command-in-root2977,126174
(defun projectile-run-shell-command-in-root ()projectile-run-shell-command-in-root2984,126446
(defun projectile-run-async-shell-command-in-root ()projectile-run-async-shell-command-in-root2991,126702
(defun projectile-run-shell ()projectile-run-shell2998,126976
(defun projectile-run-eshell ()projectile-run-eshell3007,127296
(defun projectile-run-ielm ()projectile-run-ielm3017,127656
(defun projectile-run-term (program)projectile-run-term3032,128246
(defun projectile-files-in-project-directory (directory)projectile-files-in-project-directory3054,129205
(defun projectile-files-from-cmd (cmd directory)projectile-files-from-cmd3063,129592
(defun projectile-files-with-string (string directory)projectile-files-with-string3080,130214
(defun projectile-replace (&optional arg)projectile-replace3110,131683
(defun projectile-replace-regexp (&optional arg)projectile-replace-regexp3140,133274
(defun projectile-kill-buffers ()projectile-kill-buffers3168,134566
(defun projectile-save-project-buffers ()projectile-save-project-buffers3194,135763
(defun projectile-dired ()projectile-dired3211,136566
(defun projectile-dired-other-window ()projectile-dired-other-window3217,136735
(defun projectile-dired-other-frame ()projectile-dired-other-frame3223,136949
(defun projectile-vc (&optional project-root)projectile-vc3229,137159
(defun projectile-recentf ()projectile-recentf3261,138357
(defun projectile-recentf-files ()projectile-recentf-files3271,138711
(defun projectile-serialize-cache ()projectile-serialize-cache3281,139127
(defvar projectile-configure-cmd-mapprojectile-configure-cmd-map3285,139290
(defvar projectile-compilation-cmd-mapprojectile-compilation-cmd-map3289,139438
(defvar projectile-test-cmd-mapprojectile-test-cmd-map3293,139590
(defvar projectile-run-cmd-mapprojectile-run-cmd-map3297,139728
(defvar projectile-project-configure-cmd nilprojectile-project-configure-cmd3301,139864
(defvar projectile-project-compilation-cmd nilprojectile-project-compilation-cmd3306,140081
(defvar projectile-project-compilation-dir nilprojectile-project-compilation-dir3311,140298
(defvar projectile-project-test-cmd nilprojectile-project-test-cmd3316,140493
(defvar projectile-project-run-cmd nilprojectile-project-run-cmd3321,140700
(defun projectile-default-generic-command (project-type command-type)projectile-default-generic-command3326,140905
(defun projectile-default-configure-command (project-type)projectile-default-configure-command3344,141748
(defun projectile-default-compilation-command (project-type)projectile-default-compilation-command3348,141937
(defun projectile-default-compilation-dir (project-type)projectile-default-compilation-dir3352,142128
(defun projectile-default-test-command (project-type)projectile-default-test-command3356,142317
(defun projectile-default-run-command (project-type)projectile-default-run-command3360,142491
(defun projectile-configure-command (compile-dir)projectile-configure-command3364,142662
(defun projectile-compilation-command (compile-dir)projectile-compilation-command3383,143373
(defun projectile-test-command (compile-dir)projectile-test-command3400,143974
(defun projectile-run-command (compile-dir)projectile-run-command3417,144516
(defun projectile-read-command (prompt command)projectile-read-command3434,145049
(defun projectile-compilation-dir ()projectile-compilation-dir3441,145337
(defun projectile-maybe-read-command (arg default-cmd prompt)projectile-maybe-read-command3452,145800
(defun projectile-run-compilation (cmd)projectile-run-compilation3459,146104
(defvar projectile-project-command-history (make-hash-table :test 'equal)projectile-project-command-history3465,146258
(defun projectile--get-command-history (project-root)projectile--get-command-history3470,146449
(defun projectile-configure-project (arg)projectile-configure-project3509,148102
(defun projectile-compile-project (arg)projectile-compile-project3523,148681
(defun projectile-test-project (arg)projectile-test-project3537,149262
(defun projectile-run-project (arg)projectile-run-project3551,149816
(defun projectile-repeat-last-command (show-prompt)projectile-repeat-last-command3564,150316
(defun compilation-find-file-projectile-find-compilation-buffer (orig-fun marker filename directory &rest formats)compilation-find-file-projectile-find-compilation-buffer3589,151385
(defun projectile-open-projects ()projectile-open-projects3609,152310
(defun projectile--remove-current-project (projects)projectile--remove-current-project3620,152707
(defun projectile--move-current-project-to-end (projects)projectile--move-current-project-to-end3627,152997
(defun projectile-relevant-known-projects ()projectile-relevant-known-projects3635,153310
(defun projectile-relevant-open-projects ()projectile-relevant-open-projects3642,153640
(defun projectile-switch-project (&optional arg)projectile-switch-project3651,154008
(defun projectile-switch-open-project (&optional arg)projectile-switch-open-project3666,154623
(defun projectile-switch-project-by-name (project-to-switch &optional arg)projectile-switch-project-by-name3680,155233
(defun projectile-find-file-in-directory (&optional directory)projectile-find-file-in-directory3709,156897
(defun projectile-all-project-files ()projectile-all-project-files3726,157686
(defun projectile-find-file-in-known-projects ()projectile-find-file-in-known-projects3737,158019
(defun projectile-keep-project-p (project)projectile-keep-project-p3742,158235
(defun projectile--cleanup-known-projects ()projectile--cleanup-known-projects3753,158620
(defun projectile-cleanup-known-projects ()projectile-cleanup-known-projects3763,159113
(defun projectile-clear-known-projects ()projectile-clear-known-projects3772,159460
(defun projectile-remove-known-project (&optional project)projectile-remove-known-project3779,159690
(defun projectile-remove-current-project-from-known-projects ()projectile-remove-current-project-from-known-projects3794,160348
(defun projectile-ignored-projects ()projectile-ignored-projects3799,160579
(defun projectile-ignored-project-p (project-root)projectile-ignored-project-p3803,160753
(defun projectile-add-known-project (project-root)projectile-add-known-project3809,161076
(defun projectile-load-known-projects ()projectile-load-known-projects3819,161528
(defun projectile-save-known-projects ()projectile-save-known-projects3828,161921
(defun projectile-merge-known-projects ()projectile-merge-known-projects3836,162290
(define-ibuffer-filter projectile-filesprojectile-files3857,163203
(defun projectile-ibuffer-by-project (project-root)projectile-ibuffer-by-project3865,163541
(defun projectile-ibuffer (prompt-for-project)projectile-ibuffer3872,163868
(defconst projectile-commander-help-buffer "*Projectile Commander Help*")projectile-commander-help-buffer3888,164419
(defvar projectile-commander-methods nilprojectile-commander-methods3890,164494
(defun projectile-commander ()projectile-commander3896,164741
(defmacro def-projectile-commander-method (key description &rest body)def-projectile-commander-method3910,165301
(def-projectile-commander-method ?? "Commander help buffer."??3927,165947
(defun projectile-commander-bindings ()projectile-commander-bindings3938,166415
(defun projectile-check-vcs-status (&optional project-path)projectile-check-vcs-status4006,168207
(defvar projectile-cached-dirty-projects-status nilprojectile-cached-dirty-projects-status4025,168914
(defun projectile-check-vcs-status-of-known-projects ()projectile-check-vcs-status-of-known-projects4028,169012
(defun projectile-browse-dirty-projects (&optional cached)projectile-browse-dirty-projects4047,169872
(defun projectile--repeat-until-project-buffer (orig-fun &rest args)projectile--repeat-until-project-buffer4064,170570
(defun projectile-next-project-buffer ()projectile-next-project-buffer4081,171391
(defun projectile-previous-project-buffer ()projectile-previous-project-buffer4088,171639
(defun projectile-read-variable ()projectile-read-variable4097,171941
(define-skeleton projectile-skel-variable-consprojectile-skel-variable-cons4105,172197
(define-skeleton projectile-skel-dir-localsprojectile-skel-dir-locals4114,172368
(defun projectile-edit-dir-locals ()projectile-edit-dir-locals4123,172548
(define-obsolete-variable-alias 'projectile-mode-line-lighter 'projectile-mode-line-prefix)projectile-mode-line-lighter4135,172910
(defcustom projectile-mode-line-prefixprojectile-mode-line-prefix4136,173002
(defvar-local projectile--mode-line projectile-mode-line-prefix)projectile--mode-line4146,173322
(defun projectile-default-mode-line ()projectile-default-mode-line4148,173388
(defun projectile-update-mode-line ()projectile-update-mode-line4159,173768
(defvar projectile-command-mapprojectile-command-map4165,173977
(defvar projectile-mode-mapprojectile-mode-map4228,177777
(defun projectile-find-file-hook-function ()projectile-find-file-hook-function4283,180365
(define-minor-mode projectile-modeprojectile-mode4298,180934
(define-obsolete-function-alias 'projectile-global-mode 'projectile-mode "1.0")projectile-global-mode4344,182967

elpa/projectile-2.0.0/projectile-autoloads.el,170
(defvar projectile-mode nil "\projectile-mode535,17613
(define-obsolete-function-alias 'projectile-global-mode 'projectile-mode "1.0")projectile-global-mode560,18435

elpa/projectile-2.0.0/projectile-pkg.el,384
(define-package "projectile" "2.0.0" "Manage and navigate projects in Emacs easily" '((emacs "25.1") (pkg-info "0.4")) :commit "823c0aa9ffd1e8e03b20efe97c16cfb66e2c56c5" :keywords '("project" "convenience") :authors '(("Bozhidar Batsov" . "bozhidar@batsov.com")) :maintainer '("Bozhidar Batsov" . "bozhidar@batsov.com") :url "https://github.com/bbatsov/projectile")"projectile"2,31

elpa/json-mode-1.7.0/json-mode-pkg.el,297
(define-package "json-mode" "1.7.0" "Major mode for editing JSON files" '((json-reformat "0.0.5") (json-snatcher "1.0.0")) :commit "9ba01b868a6b138feeff82b9eb0abd331d29325f" :authors '(("Josh Johnston")) :maintainer '("Josh Johnston") :url "https://github.com/joshwnj/json-mode")"json-mode"2,31

elpa/json-mode-1.7.0/json-mode-autoloads.el,0

elpa/json-mode-1.7.0/json-mode.el,757
(defconst json-mode-quoted-string-rejson-mode-quoted-string-re35,1087
(defconst json-mode-quoted-key-rejson-mode-quoted-key-re42,1379
(defconst json-mode-number-re (rx (group (one-or-more digit)json-mode-number-re51,1705
(defconst json-mode-keyword-re  (rx (group (or "true" "false" "null"))))json-mode-keyword-re53,1845
(defconst json-font-lock-keywords-1json-font-lock-keywords-155,1919
(define-derived-mode json-mode javascript-mode "JSON"json-mode65,2243
(defun json-mode-show-path ()json-mode-show-path74,2565
(define-key json-mode-map (kbd "C-c C-p") 'json-mode-show-path)json-mode-map91,3116
(defun json-mode-beautify ()json-mode-beautify94,3196
(define-key json-mode-map (kbd "C-c C-f") 'json-mode-beautify)json-mode-map103,3576

elpa/gntp-0.1/gntp-autoloads.el,0

elpa/gntp-0.1/gntp.el,1456
(defgroup gntp nilgntp46,2013
(defcustom gntp-application-name "Emacs/gntp.el"gntp-application-name50,2125
(defcustom gntp-application-icon nilgntp-application-icon54,2245
(defcustom gntp-server "localhost"gntp-server59,2381
(defcustom gntp-server-port 23053gntp-server-port64,2525
(defcustom gntp-register-alist nilgntp-register-alist69,2669
(defun gntp-register (&optional notifications server  port)gntp-register73,2771
(defun gntp-notify (name title text server &optional port priority icon)gntp-notify81,3107
(defun gntp-build-message-register (notifications)gntp-build-message-register87,3411
(defun gntp-notification-lines (notice)gntp-notification-lines121,4630
(defun gntp-build-message-notify (name title text &optional priority icon)gntp-build-message-notify141,5518
(defun gntp-notice-icon-uri (notice)gntp-notice-icon-uri168,6300
(defun gntp-notice-icon-data (notice)gntp-notice-icon-data172,6422
(defun gntp-app-icon-uri ()gntp-app-icon-uri176,6543
(defun gntp-app-icon-data ()gntp-app-icon-data180,6677
(defun gntp-icon-uri (icon)gntp-icon-uri184,6813
(defun gntp-icon-data (icon)gntp-icon-data191,7061
(defun gntp-notice-name (notice)gntp-notice-name200,7407
(defun gntp-notice-get (notice property)gntp-notice-get207,7607
(defun gntp-send (message server &optional port)gntp-send211,7716
(defun gntp-filter (proc string)gntp-filter223,8188
(defun gntp-file-string (file)gntp-file-string235,8615

elpa/gntp-0.1/gntp-pkg.el,237
(define-package "gntp" "0.1" "Growl Notification Protocol for Emacs" 'nil :commit "767571135e2c0985944017dc59b0be79af222ef5" :authors '(("Engelke Eschner" . "tekai@gmx.li")) :maintainer '("Engelke Eschner" . "tekai@gmx.li"))"gntp"2,31

elpa/swiper-0.13.0/swiper-pkg.el,340
(define-package "swiper" "0.13.0" "Isearch with an overview. Oh, man!" '((emacs "24.5") (ivy "0.13.0")) :commit "cd634c6f51458f81898ecf2821ac3169cb65a1eb" :keywords '("matching") :authors '(("Oleh Krehel" . "ohwoeowho@gmail.com")) :maintainer '("Oleh Krehel" . "ohwoeowho@gmail.com") :url "https://github.com/abo-abo/swiper")"swiper"2,31

elpa/swiper-0.13.0/swiper-autoloads.el,0

elpa/swiper-0.13.0/swiper.el,8439
(defgroup swiper nilswiper40,1289
(defface swiper-match-face-1swiper-match-face-145,1383
(defface swiper-match-face-2swiper-match-face-250,1515
(defface swiper-match-face-3swiper-match-face-355,1634
(defface swiper-match-face-4swiper-match-face-460,1751
(defface swiper-background-match-face-1swiper-background-match-face-165,1875
(defface swiper-background-match-face-2swiper-background-match-face-270,2035
(defface swiper-background-match-face-3swiper-background-match-face-375,2189
(defface swiper-background-match-face-4swiper-background-match-face-480,2343
(defface swiper-line-faceswiper-line-face85,2497
(defcustom swiper-faces '(swiper-match-face-1swiper-faces90,2611
(defvar swiper-background-facesswiper-background-faces98,2887
(defun swiper--recompute-background-faces ()swiper--recompute-background-faces105,3136
(defcustom swiper-min-highlight 2swiper-min-highlight123,3819
(defcustom swiper-include-line-number-in-search nilswiper-include-line-number-in-search127,3931
(defcustom swiper-goto-start-of-match nilswiper-goto-start-of-match132,4073
(defvar swiper-mapswiper-map138,4257
(defvar swiper--query-replace-overlays nil)swiper--query-replace-overlays148,4617
(defun swiper--query-replace-updatefn ()swiper--query-replace-updatefn150,4662
(defun swiper--query-replace-cleanup ()swiper--query-replace-cleanup165,5173
(defun swiper--query-replace-setup ()swiper--query-replace-setup169,5314
(defun swiper-query-replace ()swiper-query-replace189,6055
(defvar inhibit-message)inhibit-message228,7698
(defun swiper-all-query-replace ()swiper-all-query-replace230,7724
(defvar avy-all-windows)avy-all-windows252,8634
(defvar avy-style)avy-style253,8659
(defvar avy-keys)avy-keys254,8678
(defun swiper--avy-candidates ()swiper--avy-candidates267,9193
(defun swiper--avy-candidate ()swiper--avy-candidate306,10732
(defun swiper--avy-goto (candidate)swiper--avy-goto322,11319
(defun swiper-avy ()swiper-avy344,12124
(defun swiper-mc ()swiper-mc360,12657
(defvar swiper--current-window-start nilswiper--current-window-start380,13352
(defun swiper-recenter-top-bottom (&optional arg)swiper-recenter-top-bottom385,13563
(defvar swiper-font-lock-excludeswiper-font-lock-exclude392,13778
(defun swiper-font-lock-ensure-p ()swiper-font-lock-ensure-p444,14829
(defun swiper-font-lock-ensure ()swiper-font-lock-ensure451,15086
(defvar swiper--format-spec ""swiper--format-spec459,15393
(defvar swiper--width nilswiper--width462,15472
(defvar swiper-use-visual-line nilswiper-use-visual-line465,15567
(defvar dired-isearch-filenames)dired-isearch-filenames468,15665
(defun swiper--line ()swiper--line471,15749
(defvar swiper-use-visual-line-pswiper-use-visual-line-p494,16480
(defun swiper--candidates (&optional numbers-width)swiper--candidates503,16770
(defvar swiper--opoint 1swiper--opoint550,18699
(defun swiper-backward (&optional initial-input)swiper-backward554,18777
(defun swiper-thing-at-point ()swiper-thing-at-point563,19083
(defun swiper-all-thing-at-point ()swiper-all-thing-at-point572,19296
(defun swiper--extract-matches (regex cands)swiper--extract-matches580,19506
(defun swiper--occur-cands (fname cands)swiper--occur-cands594,19988
(defun swiper--isearch-occur-cands (cands)swiper--isearch-occur-cands623,21348
(defun swiper--occur-insert-lines (cands)swiper--occur-insert-lines634,21725
(defun swiper--occur-buffer ()swiper--occur-buffer644,22115
(defun swiper-occur (&optional cands)swiper-occur656,22538
(defvar swiper--current-line nil)swiper--current-line697,24218
(defvar swiper--current-match-start nil)swiper--current-match-start698,24252
(defvar swiper--point-min nil)swiper--point-min699,24293
(defvar swiper--point-max nil)swiper--point-max700,24324
(defvar swiper--reveal-mode nil)swiper--reveal-mode701,24355
(defun swiper--init ()swiper--init703,24389
(defun swiper--re-builder (str)swiper--re-builder721,24981
(defvar swiper-history nilswiper-history764,26762
(defvar swiper-invocation-face nilswiper-invocation-face767,26817
(defcustom swiper-stay-on-quit nilswiper-stay-on-quit770,26907
(defun swiper (&optional initial-input)swiper775,27033
(defun swiper-toggle-face-matching ()swiper-toggle-face-matching829,29061
(defun swiper--face-matcher (regexp candidates)swiper--face-matcher838,29342
(defun swiper--ensure-visible ()swiper--ensure-visible856,29910
(defvar swiper--overlays nilswiper--overlays865,30241
(defvar swiper--isearch-highlight-timer nilswiper--isearch-highlight-timer868,30292
(defun swiper--cleanup ()swiper--cleanup871,30393
(defun swiper--add-cursor-overlay (wnd)swiper--add-cursor-overlay882,30786
(defun swiper--add-line-overlay (wnd)swiper--add-line-overlay892,31179
(defun swiper--make-overlay (beg end face wnd priority)swiper--make-overlay906,31675
(defun swiper--recenter-p ()swiper--recenter-p916,32053
(defun swiper--positive-regexps (str)swiper--positive-regexps920,32142
(defun swiper--update-input-ivy ()swiper--update-input-ivy927,32387
(defun swiper--add-overlays (re &optional beg end wnd re-idx)swiper--add-overlays981,34826
(defun swiper--add-properties (faces adder-fn &optional re-idx)swiper--add-properties1024,37025
(defcustom swiper-action-recenter nilswiper-action-recenter1052,37998
(defvar evil-search-module)evil-search-module1055,38105
(defvar evil-ex-search-pattern)evil-ex-search-pattern1056,38133
(defvar evil-ex-search-persistent-highlight)evil-ex-search-persistent-highlight1057,38165
(defvar evil-ex-search-direction)evil-ex-search-direction1058,38210
(defun swiper--maybe-recenter ()swiper--maybe-recenter1061,38308
(defun swiper--action (x)swiper--action1073,38760
(defun swiper-from-isearch ()swiper-from-isearch1116,40499
(defvar swiper-multi-buffers nilswiper-multi-buffers1125,40738
(defvar swiper-multi-candidates nilswiper-multi-candidates1128,40812
(defun swiper-multi-prompt ()swiper-multi-prompt1131,40903
(defvar swiper-window-width 80)swiper-window-width1136,41060
(defun swiper-multi ()swiper-multi1138,41093
(defun swiper-multi-action-1 (x)swiper-multi-action-11157,41759
(defun swiper-multi-action-2 (x)swiper-multi-action-21180,42817
(defun swiper-all-buffer-p (buffer)swiper-all-buffer-p1198,43520
(defun swiper-all-function (str)swiper-all-function1217,44372
(defun swiper--all-format-function (cands)swiper--all-format-function1253,45755
(defvar swiper-all-mapswiper-all-map1285,46867
(defun swiper-all (&optional initial-input)swiper-all1292,47040
(defun swiper-all-action (x)swiper-all-action1308,47585
(defun swiper--multi-candidates (buffers)swiper--multi-candidates1322,48131
(defun swiper-isearch-function (str)swiper-isearch-function1336,48522
(defun swiper-match-usable-p ()swiper-match-usable-p1341,48684
(defvar swiper--isearch-backward nil)swiper--isearch-backward1348,48883
(defvar swiper--isearch-start-point nil)swiper--isearch-start-point1349,48921
(defun swiper--isearch-function-1 (re backward)swiper--isearch-function-11351,48963
(defun swiper--isearch-next-item (re cands)swiper--isearch-next-item1371,49717
(defun swiper--isearch-filter-ignore-order (re-full cands)swiper--isearch-filter-ignore-order1391,50214
(defun swiper--isearch-function (str)swiper--isearch-function1405,50719
(defcustom swiper-isearch-highlight-delay '(2 0.2)swiper-isearch-highlight-delay1423,51466
(defun swiper--delayed-add-overlays ()swiper--delayed-add-overlays1435,51888
(defun swiper-isearch-action (x)swiper-isearch-action1447,52383
(defun swiper-action-copy (_x)swiper-action-copy1468,53227
(defun swiper-isearch-thing-at-point ()swiper-isearch-thing-at-point1478,53555
(defvar swiper-isearch-mapswiper-isearch-map1507,54653
(defun swiper--isearch-same-line-p (s1 s2)swiper--isearch-same-line-p1514,54863
(defun swiper-isearch-format-function (cands)swiper-isearch-format-function1522,55112
(defun swiper--line-at-point (pt)swiper--line-at-point1533,55461
(defun swiper--isearch-highlight (str &optional current)swiper--isearch-highlight1542,55715
(defun swiper--isearch-format (index length cands regex current buffer)swiper--isearch-format1557,56137
(defun swiper-isearch (&optional initial-input)swiper-isearch1606,57897
(defun swiper-isearch-backward (&optional initial-input)swiper-isearch-backward1646,59204
(defun swiper-isearch-toggle ()swiper-isearch-toggle1652,59421

elpa/markdown-mode-2.3/markdown-mode-pkg.el,406
(define-package "markdown-mode" "2.3" "Major mode for Markdown-formatted text" '((emacs "24") (cl-lib "0.5")) :commit "cde5c5d2bcce470c494b76e23cfe1364b6291c20" :keywords '("markdown" "github flavored markdown" "itex") :authors '(("Jason R. Blevins" . "jblevins@xbeta.org")) :maintainer '("Jason R. Blevins" . "jblevins@xbeta.org") :url "https://jblevins.org/projects/markdown-mode/")"markdown-mode"2,31

elpa/markdown-mode-2.3/markdown-mode.el,48237
(defvar jit-lock-start)jit-lock-start980,48134
(defvar jit-lock-end)jit-lock-end981,48158
(defvar flyspell-generic-check-word-predicate)flyspell-generic-check-word-predicate982,48180
(defconst markdown-mode-version "2.3"markdown-mode-version990,48401
(defconst markdown-output-buffer-name "*markdown-output*"markdown-output-buffer-name993,48475
(defconst markdown-sub-superscript-displaymarkdown-sub-superscript-display996,48593
(defvar markdown-reference-label-history nilmarkdown-reference-label-history1004,48879
(defvar markdown-live-preview-mode nilmarkdown-live-preview-mode1007,48964
(defvar markdown-gfm-language-history nilmarkdown-gfm-language-history1010,49069
(defvar markdown-mode-hook nilmarkdown-mode-hook1016,49273
(defvar markdown-before-export-hook nilmarkdown-before-export-hook1019,49348
(defvar markdown-after-export-hook nilmarkdown-after-export-hook1024,49558
(defgroup markdown nilmarkdown1028,49713
(defcustom markdown-command "markdown"markdown-command1034,49898
(defcustom markdown-command-needs-filename nilmarkdown-command-needs-filename1039,50003
(defcustom markdown-open-command nilmarkdown-open-command1047,50327
(defcustom markdown-hr-stringsmarkdown-hr-strings1055,50590
(defcustom markdown-bold-underscore nilmarkdown-bold-underscore1070,51234
(defcustom markdown-italic-underscore nilmarkdown-italic-underscore1075,51387
(defcustom markdown-asymmetric-header nilmarkdown-asymmetric-header1080,51536
(defcustom markdown-indent-function 'markdown-indent-linemarkdown-indent-function1089,51892
(defcustom markdown-indent-on-enter tmarkdown-indent-on-enter1094,52020
(defcustom markdown-enable-wiki-links nilmarkdown-enable-wiki-links1121,53232
(defcustom markdown-wiki-link-alias-first tmarkdown-wiki-link-alias-first1131,53595
(defcustom markdown-wiki-link-search-subdirectories nilmarkdown-wiki-link-search-subdirectories1138,53828
(defcustom markdown-wiki-link-search-parent-directories nilmarkdown-wiki-link-search-parent-directories1147,54142
(defcustom markdown-wiki-link-fontify-missing nilmarkdown-wiki-link-fontify-missing1155,54420
(defcustom markdown-uri-typesmarkdown-uri-types1165,54853
(defcustom markdown-url-compose-charmarkdown-url-compose-char1175,55205
(defcustom markdown-blockquote-display-charmarkdown-blockquote-display-char1186,55539
(defcustom markdown-hr-display-charmarkdown-hr-display-char1198,55870
(defcustom markdown-definition-display-charmarkdown-definition-display-char1207,56138
(defcustom markdown-enable-math nilmarkdown-enable-math1219,56541
(defcustom markdown-css-paths nilmarkdown-css-paths1229,56925
(defcustom markdown-content-type ""markdown-content-type1234,57046
(defcustom markdown-coding-system nilmarkdown-coding-system1241,57289
(defcustom markdown-xhtml-header-content ""markdown-xhtml-header-content1249,57627
(defcustom markdown-xhtml-standalone-regexpmarkdown-xhtml-standalone-regexp1254,57769
(defcustom markdown-link-space-sub-char "_"markdown-link-space-sub-char1260,57966
(defcustom markdown-reference-location 'headermarkdown-reference-location1265,58124
(defcustom markdown-footnote-location 'endmarkdown-footnote-location1273,58535
(defcustom markdown-unordered-list-item-prefix "  * "markdown-unordered-list-item-prefix1281,58930
(defcustom markdown-nested-imenu-heading-index tmarkdown-nested-imenu-heading-index1286,59070
(defcustom markdown-make-gfm-checkboxes-buttons tmarkdown-make-gfm-checkboxes-buttons1296,59404
(defcustom markdown-use-pandoc-style-yaml-metadata nilmarkdown-use-pandoc-style-yaml-metadata1301,59544
(defcustom markdown-split-window-direction 'anymarkdown-split-window-direction1306,59701
(defcustom markdown-live-preview-window-functionmarkdown-live-preview-window-function1321,60443
(defcustom markdown-live-preview-delete-export 'delete-on-destroymarkdown-live-preview-delete-export1329,60710
(defcustom markdown-list-indent-width 4markdown-list-indent-width1340,61248
(defcustom markdown-enable-prefix-prompts tmarkdown-enable-prefix-prompts1347,61441
(defcustom markdown-gfm-additional-languages nilmarkdown-gfm-additional-languages1355,61671
(defcustom markdown-gfm-use-electric-backquote tmarkdown-gfm-use-electric-backquote1363,62014
(defcustom markdown-gfm-downcase-languages tmarkdown-gfm-downcase-languages1368,62174
(defcustom markdown-gfm-uppercase-checkbox nilmarkdown-gfm-uppercase-checkbox1375,62371
(defcustom markdown-hide-urls nilmarkdown-hide-urls1381,62539
(defconst markdown-regex-comment-startmarkdown-regex-comment-start1402,63483
(defconst markdown-regex-comment-endmarkdown-regex-comment-end1406,63586
(defconst markdown-regex-link-inlinemarkdown-regex-link-inline1410,63692
(defconst markdown-regex-link-referencemarkdown-regex-link-reference1422,64255
(defconst markdown-regex-reference-definitionmarkdown-regex-reference-definition1433,64845
(defconst markdown-regex-footnotemarkdown-regex-footnote1443,65265
(defconst markdown-regex-headermarkdown-regex-header1450,65550
(defconst markdown-regex-header-setextmarkdown-regex-header-setext1460,66116
(defconst markdown-regex-header-atxmarkdown-regex-header-atx1464,66267
(defconst markdown-regex-hrmarkdown-regex-hr1468,66415
(defconst markdown-regex-codemarkdown-regex-code1472,66570
(defconst markdown-regex-kbdmarkdown-regex-kbd1488,67272
(defconst markdown-regex-gfm-code-block-openmarkdown-regex-gfm-code-block-open1494,67491
(defconst markdown-regex-gfm-code-block-closemarkdown-regex-gfm-code-block-close1504,68118
(defconst markdown-regex-premarkdown-regex-pre1510,68364
(defconst markdown-regex-listmarkdown-regex-list1514,68483
(defconst markdown-regex-boldmarkdown-regex-bold1518,68622
(defconst markdown-regex-italicmarkdown-regex-italic1527,69100
(defconst markdown-regex-strike-throughmarkdown-regex-strike-through1537,69592
(defconst markdown-regex-gfm-italicmarkdown-regex-gfm-italic1546,70063
(defconst markdown-regex-blockquotemarkdown-regex-blockquote1554,70490
(defconst markdown-regex-line-breakmarkdown-regex-line-break1564,70881
(defconst markdown-regex-wiki-linkmarkdown-regex-wiki-link1568,70996
(defconst markdown-regex-urimarkdown-regex-uri1583,71687
(defconst markdown-regex-angle-urimarkdown-regex-angle-uri1587,71841
(defconst markdown-regex-emailmarkdown-regex-email1591,72032
(defsubst markdown-make-regex-link-generic ()markdown-make-regex-link-generic1595,72193
(defconst markdown-regex-gfm-checkboxmarkdown-regex-gfm-checkbox1603,72538
(defconst markdown-regex-block-separatormarkdown-regex-block-separator1608,72699
(defconst markdown-regex-block-separator-noindentmarkdown-regex-block-separator-noindent1612,72815
(defconst markdown-regex-math-inline-singlemarkdown-regex-math-inline-single1616,73009
(defconst markdown-regex-math-inline-doublemarkdown-regex-math-inline-double1622,73305
(defconst markdown-regex-math-displaymarkdown-regex-math-display1628,73605
(defsubst markdown-make-tilde-fence-regex (num-tildes &optional end-of-line)markdown-make-tilde-fence-regex1634,73885
(defconst markdown-regex-tilde-fence-beginmarkdown-regex-tilde-fence-begin1641,74210
(defconst markdown-regex-declarative-metadatamarkdown-regex-declarative-metadata1652,74819
(defconst markdown-regex-pandoc-metadatamarkdown-regex-pandoc-metadata1664,75143
(defconst markdown-regex-yaml-metadata-bordermarkdown-regex-yaml-metadata-border1668,75291
(defconst markdown-regex-yaml-pandoc-metadata-end-bordermarkdown-regex-yaml-pandoc-metadata-end-border1672,75410
(defsubst markdown-get-yaml-metadata-start-border ()markdown-get-yaml-metadata-start-border1676,75568
(defsubst markdown-get-yaml-metadata-end-border (_)markdown-get-yaml-metadata-end-border1682,75808
(defconst markdown-regex-inline-attributesmarkdown-regex-inline-attributes1688,76077
(defconst markdown-regex-leanpub-sectionsmarkdown-regex-leanpub-sections1693,76400
(defconst markdown-regex-sub-superscriptmarkdown-regex-sub-superscript1700,76649
(defconst markdown-regex-includemarkdown-regex-include1711,77187
(defconst markdown-regex-pandoc-inline-footnotemarkdown-regex-pandoc-inline-footnote1728,77884
(defsubst markdown-in-comment-p (&optional pos)markdown-in-comment-p1739,78333
(defun markdown-syntax-propertize-extend-region (start end)markdown-syntax-propertize-extend-region1744,78494
(defun markdown-font-lock-extend-region-function (start end _)markdown-font-lock-extend-region-function1769,79893
(defun markdown-syntax-propertize-pre-blocks (start end)markdown-syntax-propertize-pre-blocks1787,80781
(defconst markdown-fenced-block-pairsmarkdown-fenced-block-pairs1837,83148
(defun markdown-text-property-at-point (prop)markdown-text-property-at-point1876,85159
(defsubst markdown-maybe-funcall-regexp (object &optional arg)markdown-maybe-funcall-regexp1879,85242
(defsubst markdown-get-start-fence-regexp ()markdown-get-start-fence-regexp1885,85484
(defun markdown-get-fenced-block-begin-properties ()markdown-get-fenced-block-begin-properties1894,85835
(defun markdown-get-fenced-block-end-properties ()markdown-get-fenced-block-end-properties1897,85966
(defun markdown-get-fenced-block-middle-properties ()markdown-get-fenced-block-middle-properties1900,86096
(defun markdown-find-previous-prop (prop &optional lim)markdown-find-previous-prop1903,86205
(defun markdown-find-next-prop (prop &optional lim)markdown-find-next-prop1917,86798
(defun markdown-min-of-seq (map-fn seq)markdown-min-of-seq1927,87228
(defun markdown-max-of-seq (map-fn seq)markdown-max-of-seq1938,87640
(defun markdown-find-previous-block ()markdown-find-previous-block1949,88072
(defun markdown-get-fenced-block-from-start (prop)markdown-get-fenced-block-from-start1984,89471
(defun markdown-get-fenced-block-from-middle (prop)markdown-get-fenced-block-from-middle2013,90888
(defun markdown-get-fenced-block-from-end (prop)markdown-get-fenced-block-from-end2035,91768
(defun markdown-get-enclosing-fenced-block-construct (&optional pos)markdown-get-enclosing-fenced-block-construct2061,93011
(defun markdown-propertize-end-match (reg end fence-spec middle-begin)markdown-propertize-end-match2092,94197
(defun markdown-syntax-propertize-fenced-block-constructs (start end)markdown-syntax-propertize-fenced-block-constructs2108,95085
(defun markdown-syntax-propertize-blockquotes (start end)markdown-syntax-propertize-blockquotes2172,98232
(defun markdown-syntax-propertize-hrs (start end)markdown-syntax-propertize-hrs2182,98661
(defun markdown-syntax-propertize-yaml-metadata (start end)markdown-syntax-propertize-yaml-metadata2193,99095
(defun markdown-syntax-propertize-headings (start end)markdown-syntax-propertize-headings2207,99803
(defun markdown-syntax-propertize-comments (start end)markdown-syntax-propertize-comments2224,100625
(defvar markdown--syntax-propertiesmarkdown--syntax-properties2249,101649
(defun markdown-syntax-propertize (start end)markdown-syntax-propertize2276,102605
(defconst markdown-markup-propertiesmarkdown-markup-properties2293,103287
(defconst markdown-language-keyword-propertiesmarkdown-language-keyword-properties2297,103437
(defconst markdown-language-info-propertiesmarkdown-language-info-properties2301,103626
(defconst markdown-include-title-propertiesmarkdown-include-title-properties2305,103816
(defconst markdown-inline-footnote-propertiesmarkdown-inline-footnote-properties2309,103991
(defcustom markdown-hide-markup nilmarkdown-hide-markup2313,104154
(defun markdown-toggle-markup-hiding (&optional arg)markdown-toggle-markup-hiding2336,105215
(defvar markdown-italic-face 'markdown-italic-facemarkdown-italic-face2358,106061
(defvar markdown-bold-face 'markdown-bold-facemarkdown-bold-face2361,106152
(defvar markdown-strike-through-face 'markdown-strike-through-facemarkdown-strike-through-face2364,106237
(defvar markdown-header-delimiter-face 'markdown-header-delimiter-facemarkdown-header-delimiter-face2367,106352
(defvar markdown-header-rule-face 'markdown-header-rule-facemarkdown-header-rule-face2370,106479
(defvar markdown-header-face 'markdown-header-facemarkdown-header-face2373,106591
(defvar markdown-header-face-1 'markdown-header-face-1markdown-header-face-12376,106688
(defvar markdown-header-face-2 'markdown-header-face-2markdown-header-face-22379,106787
(defvar markdown-header-face-3 'markdown-header-face-3markdown-header-face-32382,106886
(defvar markdown-header-face-4 'markdown-header-face-4markdown-header-face-42385,106985
(defvar markdown-header-face-5 'markdown-header-face-5markdown-header-face-52388,107084
(defvar markdown-header-face-6 'markdown-header-face-6markdown-header-face-62391,107183
(defvar markdown-inline-code-face 'markdown-inline-code-facemarkdown-inline-code-face2394,107282
(defvar markdown-list-face 'markdown-list-facemarkdown-list-face2397,107383
(defvar markdown-blockquote-face 'markdown-blockquote-facemarkdown-blockquote-face2400,107471
(defvar markdown-pre-face 'markdown-pre-facemarkdown-pre-face2403,107569
(defvar markdown-language-keyword-face 'markdown-language-keyword-facemarkdown-language-keyword-face2406,107660
(defvar markdown-language-info-face 'markdown-language-info-facemarkdown-language-info-face2409,107792
(defvar markdown-link-face 'markdown-link-facemarkdown-link-face2412,107910
(defvar markdown-missing-link-face 'markdown-missing-link-facemarkdown-missing-link-face2415,107991
(defvar markdown-reference-face 'markdown-reference-facemarkdown-reference-face2418,108125
(defvar markdown-footnote-marker-face 'markdown-footnote-marker-facemarkdown-footnote-marker-face2421,108220
(defvar markdown-url-face 'markdown-url-facemarkdown-url-face2424,108334
(defvar markdown-link-title-face 'markdown-link-title-facemarkdown-link-title-face2427,108412
(defvar markdown-line-break-face 'markdown-line-break-facemarkdown-line-break-face2430,108521
(defvar markdown-comment-face 'markdown-comment-facemarkdown-comment-face2433,108625
(defvar markdown-math-face 'markdown-math-facemarkdown-math-face2436,108720
(defvar markdown-metadata-key-face 'markdown-metadata-key-facemarkdown-metadata-key-face2439,108813
(defvar markdown-metadata-value-face 'markdown-metadata-value-facemarkdown-metadata-value-face2442,108918
(defvar markdown-gfm-checkbox-face 'markdown-gfm-checkbox-facemarkdown-gfm-checkbox-face2445,109029
(defvar markdown-highlight-face 'markdown-highlight-facemarkdown-highlight-face2448,109135
(defvar markdown-markup-face 'markdown-markup-facemarkdown-markup-face2451,109239
(defgroup markdown-faces nilmarkdown-faces2454,109334
(defface markdown-italic-facemarkdown-italic-face2459,109432
(defface markdown-bold-facemarkdown-bold-face2464,109542
(defface markdown-strike-through-facemarkdown-strike-through-face2469,109646
(defface markdown-markup-facemarkdown-markup-face2474,109774
(defface markdown-header-rule-facemarkdown-header-rule-face2479,109917
(defface markdown-header-delimiter-facemarkdown-header-delimiter-face2484,110053
(defface markdown-list-facemarkdown-list-face2489,110203
(defface markdown-blockquote-facemarkdown-blockquote-face2494,110331
(defface markdown-code-facemarkdown-code-face2499,110465
(defface markdown-code-facemarkdown-code-face2513,111165
(defface markdown-inline-code-facemarkdown-inline-code-face2518,111314
(defface markdown-pre-facemarkdown-pre-face2523,111465
(defface markdown-language-keyword-facemarkdown-language-keyword-face2528,111616
(defface markdown-language-info-facemarkdown-language-info-face2533,111770
(defface markdown-link-facemarkdown-link-face2538,111924
(defface markdown-missing-link-facemarkdown-missing-link-face2543,112024
(defface markdown-reference-facemarkdown-reference-face2548,112158
(define-obsolete-face-alias 'markdown-footnote-facemarkdown-footnote-face2553,112289
(defface markdown-footnote-marker-facemarkdown-footnote-marker-face2556,112383
(defface markdown-footnote-text-facemarkdown-footnote-text-face2561,112521
(defface markdown-url-facemarkdown-url-face2566,112656
(defface markdown-plain-url-facemarkdown-plain-url-face2573,112880
(defface markdown-link-title-facemarkdown-link-title-face2580,113096
(defface markdown-line-break-facemarkdown-line-break-face2585,113236
(defface markdown-comment-facemarkdown-comment-face2590,113385
(defface markdown-math-facemarkdown-math-face2595,113514
(defface markdown-metadata-key-facemarkdown-metadata-key-face2600,113643
(defface markdown-metadata-value-facemarkdown-metadata-value-face2605,113783
(defface markdown-gfm-checkbox-facemarkdown-gfm-checkbox-face2610,113920
(defface markdown-highlight-facemarkdown-highlight-face2615,114055
(defface markdown-hr-facemarkdown-hr-face2620,114178
(defcustom markdown-header-scaling nilmarkdown-header-scaling2625,114303
(defcustom markdown-header-scaling-valuesmarkdown-header-scaling-values2639,114836
(defun markdown-make-header-faces ()markdown-make-header-faces2650,115239
(defun markdown-update-header-faces (&optional scaling scaling-values)markdown-update-header-faces2676,116295
(defun markdown-syntactic-face (state)markdown-syntactic-face2688,116960
(defcustom markdown-list-item-bulletsmarkdown-list-item-bullets2696,117215
(defvar markdown-mode-font-lock-keywords-basicmarkdown-mode-font-lock-keywords-basic2706,117652
(defvar markdown-mode-font-lock-keywords nilmarkdown-mode-font-lock-keywords2793,123370
(defvar markdown-footnote-counter 0markdown-footnote-counter2799,123569
(defconst markdown-footnote-charsmarkdown-footnote-chars2803,123697
(defconst markdown-regex-footnote-definitionmarkdown-regex-footnote-definition2807,123838
(defun markdown-replace-regexp-in-string (regexp rep string)markdown-replace-regexp-in-string2814,124132
(defsubst markdown-directory-name-p (name)markdown-directory-name-p2861,125697
(defalias 'markdown-directory-files-recursivelymarkdown-directory-files-recursively2874,126177
(defun markdown-flyspell-check-word-p ()markdown-flyspell-check-word-p2902,127561
(defun markdown-font-lock-ensure ()markdown-font-lock-ensure2923,128564
(defun markdown-cur-line-blank (&optional predicate)markdown-cur-line-blank2935,128949
(defun markdown-cur-line-blank-p ()markdown-cur-line-blank-p2945,129276
(defun markdown-prev-line-blank (&optional predicate)markdown-prev-line-blank2949,129419
(defun markdown-prev-line-blank-p ()markdown-prev-line-blank-p2958,129809
(defun markdown-next-line-blank (&optional predicate)markdown-next-line-blank2962,129955
(defun markdown-next-line-blank-p ()markdown-next-line-blank-p2971,130329
(defun markdown-prev-line-indent ()markdown-prev-line-indent2975,130475
(defun markdown-next-line-indent ()markdown-next-line-indent2984,130784
(defun markdown-cur-non-list-indent ()markdown-cur-non-list-indent2993,131069
(defun markdown-prev-non-list-indent ()markdown-prev-non-list-indent3002,131426
(defun markdown-new-baseline ()markdown-new-baseline3008,131615
(defun markdown-search-backward-baseline ()markdown-search-backward-baseline3018,131971
(defun markdown-update-list-levels (marker indent levels)markdown-update-list-levels3033,132466
(defun markdown-calculate-list-levels ()markdown-calculate-list-levels3063,133768
(defun markdown-prev-list-item (level)markdown-prev-list-item3093,135120
(defun markdown-next-list-item (level)markdown-next-list-item3140,136847
(defun markdown-cur-list-item-end (level)markdown-cur-list-item-end3187,138583
(defun markdown-cur-list-item-bounds ()markdown-cur-list-item-bounds3222,139954
(defun markdown-list-item-at-point-p ()markdown-list-item-at-point-p3269,141894
(defun markdown-prev-list-item-bounds ()markdown-prev-list-item-bounds3273,142057
(defun markdown-next-list-item-bounds ()markdown-next-list-item-bounds3291,142824
(defun markdown-beginning-of-list ()markdown-beginning-of-list3311,143611
(defun markdown-end-of-list ()markdown-end-of-list3324,144165
(defun markdown-up-list ()markdown-up-list3339,144705
(defun markdown-bounds-of-thing-at-point (thing)markdown-bounds-of-thing-at-point3349,145080
(defun markdown-reference-definition (reference)markdown-reference-definition3366,145818
(defun markdown-get-defined-references ()markdown-get-defined-references3384,146660
(defun markdown-get-used-uris ()markdown-get-used-uris3394,147053
(defun markdown-inline-code-at-pos (pos)markdown-inline-code-at-pos3415,147895
(defun markdown-inline-code-at-pos-p (pos)markdown-inline-code-at-pos-p3441,148982
(defun markdown-inline-code-at-point ()markdown-inline-code-at-point3446,149206
(defun markdown-inline-code-at-point-p ()markdown-inline-code-at-point-p3451,149398
(defun markdown-code-block-at-pos (pos)markdown-code-block-at-pos3460,149809
(defalias 'markdown-code-block-at-point 'markdown-code-block-at-point-p)markdown-code-block-at-point3475,150588
(defun markdown-code-block-at-point-p ()markdown-code-block-at-point-p3477,150662
(defun markdown-heading-at-point ()markdown-heading-at-point3484,151003
(defun markdown-pipe-at-bol-p ()markdown-pipe-at-bol-p3492,151273
(defun markdown-range-property-any (begin end prop prop-values)markdown-range-property-any3500,151561
(defun markdown-range-properties-exist (begin end props)markdown-range-properties-exist3517,152318
(defun markdown-match-inline-generic (regex last &optional faceless)markdown-match-inline-generic3526,152593
(defun markdown-match-code (last)markdown-match-code3547,153581
(defun markdown-match-bold (last)markdown-match-bold3572,154561
(defun markdown-match-italic (last)markdown-match-italic3595,155643
(defun markdown-match-math-generic (regex last)markdown-match-math-generic3622,156980
(defun markdown-match-list-items (last)markdown-match-list-items3639,157781
(defun markdown-match-math-single (last)markdown-match-math-single3657,158700
(defun markdown-match-math-double (last)markdown-match-math-double3661,158868
(defun markdown-match-propertized-text (property last)markdown-match-propertized-text3665,159038
(defun markdown-match-pre-blocks (last)markdown-match-pre-blocks3681,159675
(defun markdown-match-gfm-code-blocks (last)markdown-match-gfm-code-blocks3687,159893
(defun markdown-match-gfm-open-code-blocks (last)markdown-match-gfm-open-code-blocks3693,160129
(defun markdown-match-gfm-close-code-blocks (last)markdown-match-gfm-close-code-blocks3696,160248
(defun markdown-match-fenced-code-blocks (last)markdown-match-fenced-code-blocks3699,160366
(defun markdown-match-fenced-start-code-block (last)markdown-match-fenced-start-code-block3703,160532
(defun markdown-match-fenced-end-code-block (last)markdown-match-fenced-end-code-block3706,160656
(defun markdown-match-blockquotes (last)markdown-match-blockquotes3709,160776
(defun markdown-match-hr (last)markdown-match-hr3715,161001
(defun markdown-match-comments (last)markdown-match-comments3719,161149
(defun markdown-match-generic-links (last ref)markdown-match-generic-links3728,161455
(defun markdown-match-inline-links (last)markdown-match-inline-links3813,165948
(defun markdown-match-reference-links (last)markdown-match-reference-links3817,166086
(defun markdown-match-angle-uris (last)markdown-match-angle-uris3821,166226
(defun markdown-match-plain-uris (last)markdown-match-plain-uris3826,166423
(defun markdown-get-match-boundaries (start-header end-header last &optional pos)markdown-get-match-boundaries3831,166608
(defvar markdown-conditional-search-function #'re-search-forwardmarkdown-conditional-search-function3845,167140
(defun markdown-search-until-condition (condition &rest args)markdown-search-until-condition3849,167337
(defun markdown-match-generic-metadatamarkdown-match-generic-metadata3855,167538
(defun markdown-match-declarative-metadata (last)markdown-match-declarative-metadata3892,169339
(defun markdown-match-pandoc-metadata (last)markdown-match-pandoc-metadata3896,169523
(defun markdown-match-yaml-metadata-begin (last)markdown-match-yaml-metadata-begin3900,169692
(defun markdown-match-yaml-metadata-end (last)markdown-match-yaml-metadata-end3903,169814
(defun markdown-match-yaml-metadata-key (last)markdown-match-yaml-metadata-key3906,169932
(defun markdown-match-inline-attributes (last)markdown-match-inline-attributes3909,170045
(defun markdown-match-leanpub-sections (last)markdown-match-leanpub-sections3917,170401
(defun markdown-match-includes (last)markdown-match-includes3925,170761
(defun markdown-fontify-headings (last)markdown-fontify-headings3986,173708
(defun markdown-fontify-blockquotes (last)markdown-fontify-blockquotes4016,175058
(defun markdown-fontify-list-items (last)markdown-fontify-list-items4031,175665
(defun markdown-fontify-hrs (last)markdown-fontify-hrs4053,176619
(defun markdown-fontify-sub-superscripts (last)markdown-fontify-sub-superscripts4065,177047
(defvar markdown-mode-syntax-tablemarkdown-mode-syntax-table4087,178067
(defun markdown-ensure-blank-line-before ()markdown-ensure-blank-line-before4096,178330
(defun markdown-ensure-blank-line-after ()markdown-ensure-blank-line-after4101,178553
(defun markdown-wrap-or-insert (s1 s2 &optional thing beg end)markdown-wrap-or-insert4108,178836
(defun markdown-point-after-unwrap (cur prefix suffix)markdown-point-after-unwrap4149,180263
(defun markdown-unwrap-thing-at-point (regexp all text)markdown-unwrap-thing-at-point4162,180842
(defun markdown-unwrap-things-in-region (beg end regexp all text)markdown-unwrap-things-in-region4183,181907
(defun markdown-insert-hr (arg)markdown-insert-hr4198,182634
(defun markdown-insert-bold ()markdown-insert-bold4219,183561
(defun markdown-insert-italic ()markdown-insert-italic4238,184517
(defun markdown-insert-strike-through ()markdown-insert-strike-through4257,185498
(defun markdown-insert-code ()markdown-insert-code4276,186512
(defun markdown-insert-kbd ()markdown-insert-kbd4294,187349
(defun markdown-insert-inline-link (text url &optional title)markdown-insert-inline-link4311,188140
(defun markdown-insert-inline-image (text url &optional title)markdown-insert-inline-image4320,188532
(defun markdown-insert-reference-link (text label &optional url title)markdown-insert-reference-link4329,188922
(defun markdown-insert-reference-image (text label &optional url title)markdown-insert-reference-image4344,189654
(defun markdown-insert-reference-definition (label &optional url title)markdown-insert-reference-definition4359,190388
(defun markdown--insert-link-or-image (image)markdown--insert-link-or-image4395,191813
(defun markdown-insert-link ()markdown-insert-link4462,195103
(defun markdown-insert-image ()markdown-insert-image4492,196433
(defun markdown-insert-uri (&optional uri)markdown-insert-uri4518,197498
(defun markdown-insert-wiki-link ()markdown-insert-wiki-link4538,198405
(defun markdown-remove-header ()markdown-remove-header4556,199217
(defun markdown-insert-header (&optional level text setext)markdown-insert-header4564,199546
(defun markdown-insert-header-dwim (&optional arg setext)markdown-insert-header-dwim4610,201529
(defun markdown-insert-header-setext-dwim (&optional arg)markdown-insert-header-setext-dwim4657,203517
(defun markdown-insert-header-atx-1 ()markdown-insert-header-atx-14663,203778
(defun markdown-insert-header-atx-2 ()markdown-insert-header-atx-24669,203961
(defun markdown-insert-header-atx-3 ()markdown-insert-header-atx-34675,204142
(defun markdown-insert-header-atx-4 ()markdown-insert-header-atx-44681,204325
(defun markdown-insert-header-atx-5 ()markdown-insert-header-atx-54687,204507
(defun markdown-insert-header-atx-6 ()markdown-insert-header-atx-64693,204689
(defun markdown-insert-header-setext-1 ()markdown-insert-header-setext-14699,204872
(defun markdown-insert-header-setext-2 ()markdown-insert-header-setext-24705,205060
(defun markdown-blockquote-indentation (loc)markdown-blockquote-indentation4711,205249
(defun markdown-insert-blockquote ()markdown-insert-blockquote4721,205622
(defun markdown-block-region (beg end prefix)markdown-block-region4732,206061
(defun markdown-blockquote-region (beg end)markdown-blockquote-region4759,207046
(defun markdown-pre-indentation (loc)markdown-pre-indentation4767,207339
(defun markdown-insert-pre ()markdown-insert-pre4777,207710
(defun markdown-pre-region (beg end)markdown-pre-region4788,208123
(defun markdown-electric-backquote (arg)markdown-electric-backquote4795,208410
(defconst markdown-gfm-recognized-languagesmarkdown-gfm-recognized-languages4806,208891
(defvar markdown-gfm-used-languages nilmarkdown-gfm-used-languages4882,214072
(defun markdown-trim-whitespace (str)markdown-trim-whitespace4886,214216
(defun markdown-clean-language-string (str)markdown-clean-language-string4890,214356
(defun markdown-validate-language-string (widget)markdown-validate-language-string4894,214489
(defun markdown-gfm-get-corpus ()markdown-gfm-get-corpus4900,214732
(defun markdown-gfm-add-used-language (lang)markdown-gfm-add-used-language4909,215123
(defcustom markdown-spaces-after-code-fence 1markdown-spaces-after-code-fence4914,215321
(defun markdown-insert-gfm-code-block (&optional lang)markdown-insert-gfm-code-block4923,215654
(defun markdown-code-block-lang (&optional pos-prop)markdown-code-block-lang4975,217675
(defun markdown-gfm-parse-buffer-for-languages (&optional buffer)markdown-gfm-parse-buffer-for-languages5002,218720
(defun markdown-footnote-counter-inc ()markdown-footnote-counter-inc5017,219306
(defun markdown-insert-footnote ()markdown-insert-footnote5029,219881
(defun markdown-footnote-text-find-new-location ()markdown-footnote-text-find-new-location5041,220313
(defun markdown-footnote-kill ()markdown-footnote-kill5049,220733
(defun markdown-footnote-delete-marker ()markdown-footnote-delete-marker5087,222434
(defun markdown-footnote-kill-text ()markdown-footnote-kill-text5097,222843
(defun markdown-footnote-goto-text ()markdown-footnote-goto-text5115,223582
(defun markdown-footnote-return ()markdown-footnote-return5126,223968
(defun markdown-footnote-find-marker (id)markdown-footnote-find-marker5138,224389
(defun markdown-footnote-find-text (id)markdown-footnote-find-text5149,224800
(defun markdown-footnote-marker-positions ()markdown-footnote-marker-positions5160,225230
(defun markdown-footnote-text-positions ()markdown-footnote-text-positions5175,225975
(defun markdown-kill-thing-at-point ()markdown-kill-thing-at-point5213,227700
(defun markdown-indent-find-next-position (cur-pos positions)markdown-indent-find-next-position5292,231276
(define-obsolete-function-alias 'markdown-exdent-find-next-positionmarkdown-exdent-find-next-position5300,231599
(defun markdown-outdent-find-next-position (cur-pos positions)markdown-outdent-find-next-position5303,231715
(defun markdown-indent-line ()markdown-indent-line5312,232025
(defun markdown-calc-indents ()markdown-calc-indents5337,233140
(defun markdown-enter-key ()markdown-enter-key5375,234579
(define-obsolete-function-alias 'markdown-exdent-or-deletemarkdown-exdent-or-delete5404,235786
(defun markdown-outdent-or-delete (arg)markdown-outdent-or-delete5407,235884
(defun markdown-find-leftmost-column (beg end)markdown-find-leftmost-column5425,236694
(defun markdown-indent-region (beg end arg)markdown-indent-region5438,237071
(define-obsolete-function-alias 'markdown-exdent-regionmarkdown-exdent-region5451,237717
(defun markdown-outdent-region (beg end)markdown-outdent-region5454,237809
(defconst markdown-complete-alistmarkdown-complete-alist5462,238066
(defun markdown-incomplete-atx-p ()markdown-incomplete-atx-p5468,238340
(defun markdown-complete-atx ()markdown-complete-atx5488,239374
(defun markdown-incomplete-setext-p ()markdown-incomplete-setext-p5512,240440
(defun markdown-complete-setext ()markdown-complete-setext5520,240846
(defun markdown-incomplete-hr-p ()markdown-incomplete-hr-p5535,241543
(defun markdown-complete-hr ()markdown-complete-hr5540,241767
(defun markdown-complete ()markdown-complete5551,242182
(defun markdown-complete-at-point ()markdown-complete-at-point5560,242552
(defun markdown-complete-region (beg end)markdown-complete-region5577,243166
(defun markdown-complete-buffer ()markdown-complete-buffer5602,244216
(defun markdown-cycle-atx (arg &optional remove)markdown-cycle-atx5610,244468
(defun markdown-cycle-setext (arg &optional remove)markdown-cycle-setext5634,245474
(defun markdown-cycle-hr (arg &optional remove)markdown-cycle-hr5655,246373
(defun markdown-cycle-bold ()markdown-cycle-bold5673,247131
(defun markdown-cycle-italic ()markdown-cycle-italic5682,247492
(defun markdown--style-map-prompt ()markdown--style-map-prompt5694,247939
(defun markdown--command-map-prompt ()markdown--command-map-prompt5710,248693
(defvar markdown-mode-style-mapmarkdown-mode-style-map5723,249241
(defvar markdown-mode-command-mapmarkdown-mode-command-map5754,250908
(defvar markdown-mode-mapmarkdown-mode-map5769,251602
(defvar markdown-mode-mouse-mapmarkdown-mode-mouse-map5864,257082
(defvar gfm-mode-mapgfm-mode-map5871,257313
(defun markdown-imenu-create-nested-index ()markdown-imenu-create-nested-index6018,263418
(defun markdown-imenu-create-flat-index ()markdown-imenu-create-flat-index6069,265669
(defun markdown-reference-goto-definition ()markdown-reference-goto-definition6091,266637
(defun markdown-reference-find-links (reference)markdown-reference-find-links6104,267229
(defun markdown-get-undefined-refs ()markdown-get-undefined-refs6124,268168
(defconst markdown-reference-check-buffermarkdown-reference-check-buffer6149,269403
(defun markdown-reference-check-buffer (&optional buffer-name)markdown-reference-check-buffer6155,269639
(defconst markdown-reference-links-buffermarkdown-reference-links-buffer6169,270224
(defun markdown-reference-links-buffer (&optional buffer-name)markdown-reference-links-buffer6174,270429
(define-button-type 'markdown-undefined-reference-buttonmarkdown-undefined-reference-button6191,271171
(define-button-type 'markdown-goto-line-buttonmarkdown-goto-line-button6207,271839
(define-button-type 'markdown-location-buttonmarkdown-location-button6220,272396
(defun markdown-insert-undefined-reference-button (reference oldbuf)markdown-insert-undefined-reference-button6231,272772
(defun markdown-insert-link-button (link oldbuf)markdown-insert-link-button6254,273663
(defun markdown-reference-goto-link (&optional reference)markdown-reference-goto-link6268,274203
(defun markdown-check-refs (&optional silent)markdown-check-refs6291,275216
(defun markdown-insert-list-item (&optional arg)markdown-insert-list-item6319,276272
(defun markdown-move-list-item-up ()markdown-move-list-item-up6423,281005
(defun markdown-move-list-item-down ()markdown-move-list-item-down6443,281799
(defun markdown-demote-list-item (&optional bounds)markdown-demote-list-item6462,282569
(defun markdown-promote-list-item (&optional bounds)markdown-promote-list-item6476,283172
(defun markdown-cleanup-list-numbers-level (&optional pfx)markdown-cleanup-list-numbers-level6496,284075
(defun markdown-cleanup-list-numbers ()markdown-cleanup-list-numbers6541,285399
(defun markdown-beginning-of-defun (&optional arg)markdown-beginning-of-defun6551,285675
(defun markdown-end-of-defun ()markdown-end-of-defun6589,287249
(defun markdown-beginning-of-text-block ()markdown-beginning-of-text-block6608,288031
(defun markdown-end-of-text-block ()markdown-end-of-text-block6626,288754
(defun markdown-backward-paragraph (&optional arg)markdown-backward-paragraph6642,289296
(defun markdown-forward-paragraph (&optional arg)markdown-forward-paragraph6696,291494
(defun markdown-backward-block (&optional arg)markdown-backward-block6745,293502
(defun markdown-forward-block (&optional arg)markdown-forward-block6792,295277
(defun markdown-backward-page (&optional count)markdown-backward-page6836,296829
(defun markdown-forward-page (&optional count)markdown-forward-page6854,297521
(defun markdown-next-link ()markdown-next-link6869,298115
(defun markdown-previous-link ()markdown-previous-link6890,299066
(defun markdown-move-heading-common (move-fn &optional arg adjust)markdown-move-heading-common6908,299739
(defun markdown-next-visible-heading (arg)markdown-next-visible-heading6933,301046
(defun markdown-previous-visible-heading (arg)markdown-previous-visible-heading6940,301349
(defun markdown-next-heading ()markdown-next-heading6947,301668
(defun markdown-previous-heading ()markdown-previous-heading6951,301806
(defun markdown-back-to-heading-over-code-block (&optional invisible-ok no-error)markdown-back-to-heading-over-code-block6955,301956
(defun markdown-forward-same-level (arg)markdown-forward-same-level6978,302997
(defun markdown-backward-same-level (arg)markdown-backward-same-level6985,303304
(defun markdown-up-heading (arg)markdown-up-heading7000,303874
(defun markdown-back-to-heading (&optional invisible-ok)markdown-back-to-heading7008,304212
(defalias 'markdown-end-of-heading 'outline-end-of-heading)markdown-end-of-heading7013,304492
(defun markdown-on-heading-p ()markdown-on-heading-p7015,304553
(defun markdown-end-of-subtree (&optional invisible-OK)markdown-end-of-subtree7019,304692
(defun markdown-outline-fix-visibility ()markdown-outline-fix-visibility7040,305430
(defvar markdown-cycle-global-status 1)markdown-cycle-global-status7066,306687
(defvar markdown-cycle-subtree-status nil)markdown-cycle-subtree-status7067,306727
(defun markdown-next-preface ()markdown-next-preface7069,306771
(defun markdown-show-entry ()markdown-show-entry7079,307171
(defun markdown-cycle (&optional arg)markdown-cycle7091,307618
(defun markdown-shifttab ()markdown-shifttab7167,310368
(defun markdown-outline-level ()markdown-outline-level7173,310506
(defun markdown-promote-subtree (&optional arg)markdown-promote-subtree7184,310882
(defun markdown-demote-subtree ()markdown-demote-subtree7208,312036
(defun markdown-move-subtree-up ()markdown-move-subtree-up7213,312167
(defun markdown-move-subtree-down ()markdown-move-subtree-down7218,312299
(defun markdown-outline-next ()markdown-outline-next7223,312437
(defun markdown-outline-previous ()markdown-outline-previous7231,312699
(defun markdown-outline-next-same-level ()markdown-outline-next-same-level7239,312977
(defun markdown-outline-previous-same-level ()markdown-outline-previous-same-level7247,313245
(defun markdown-outline-up ()markdown-outline-up7255,313522
(defun markdown-mark-paragraph ()markdown-mark-paragraph7264,313776
(defun markdown-mark-block ()markdown-mark-block7283,314481
(defun markdown-narrow-to-block ()markdown-narrow-to-block7302,315170
(defun markdown-mark-text-block ()markdown-mark-text-block7310,315480
(defun markdown-mark-page ()markdown-mark-page7329,316202
(defun markdown-narrow-to-page ()markdown-narrow-to-page7349,316910
(defun markdown-mark-subtree ()markdown-mark-subtree7357,317231
(defun markdown-narrow-to-subtree ()markdown-narrow-to-subtree7370,317606
(defun markdown-move-up ()markdown-move-up7385,318057
(defun markdown-move-down ()markdown-move-down7397,318383
(defun markdown-promote ()markdown-promote7409,318721
(defun markdown-demote ()markdown-demote7437,319708
(defun markdown (&optional output-buffer-name)markdown7468,320774
(defun markdown-standalone (&optional output-buffer-name)markdown-standalone7503,322219
(defun markdown-other-window (&optional output-buffer-name)markdown-other-window7516,322719
(defun markdown-output-standalone-p ()markdown-output-standalone-p7524,323038
(defun markdown-stylesheet-link-string (stylesheet-path)markdown-stylesheet-link-string7536,323493
(defun markdown-add-xhtml-header-and-footer (title)markdown-add-xhtml-header-and-footer7541,323675
(defun markdown-preview (&optional output-buffer-name)markdown-preview7576,325088
(defun markdown-export-file-name (&optional extension)markdown-export-file-name7584,325422
(defun markdown-export (&optional output-file)markdown-export7605,326145
(defun markdown-export-and-preview ()markdown-export-and-preview7632,327282
(defvar markdown-live-preview-buffer nilmarkdown-live-preview-buffer7637,327454
(defvar markdown-live-preview-source-buffer nilmarkdown-live-preview-source-buffer7641,327634
(defvar markdown-live-preview-currently-exporting nil)markdown-live-preview-currently-exporting7646,327864
(defun markdown-live-preview-get-filename ()markdown-live-preview-get-filename7648,327920
(defun markdown-live-preview-window-eww (file)markdown-live-preview-window-eww7652,328078
(defun markdown-visual-lines-between-points (beg end)markdown-visual-lines-between-points7661,328383
(defun markdown-live-preview-window-serialize (buf)markdown-live-preview-window-serialize7670,328692
(defun markdown-get-point-back-lines (pt num-lines)markdown-get-point-back-lines7687,329367
(defun markdown-live-preview-window-deserialize (window-posns)markdown-live-preview-window-deserialize7697,329773
(defun markdown-live-preview-export ()markdown-live-preview-export7713,330519
(defun markdown-live-preview-remove ()markdown-live-preview-remove7749,332258
(defun markdown-get-other-window ()markdown-get-other-window7759,332741
(defun markdown-display-buffer-other-window (buf)markdown-display-buffer-other-window7768,333157
(defun markdown-live-preview-if-markdown ()markdown-live-preview-if-markdown7775,333411
(defun markdown-live-preview-remove-on-kill ()markdown-live-preview-remove-on-kill7784,333783
(defun markdown-live-preview-switch-to-output ()markdown-live-preview-switch-to-output7793,334182
(defun markdown-live-preview-re-export ()markdown-live-preview-re-export7802,334532
(defun markdown-open ()markdown-open7812,334948
(defun markdown-kill-ring-save ()markdown-kill-ring-save7822,335329
(defun markdown-link-p ()markdown-link-p7833,335666
(defun markdown-link-at-pos (pos)markdown-link-at-pos7846,336247
(defun markdown-link-url ()markdown-link-url7886,337796
(defun markdown-follow-link-at-point ()markdown-follow-link-at-point7898,338306
(defun markdown-fontify-inline-links (last)markdown-fontify-inline-links7920,339277
(defun markdown-fontify-reference-links (last)markdown-fontify-reference-links7963,341228
(defun markdown-fontify-angle-uris (last)markdown-fontify-angle-uris7999,342921
(defun markdown-fontify-plain-uris (last)markdown-fontify-plain-uris8019,343736
(defun markdown-toggle-url-hiding (&optional arg)markdown-toggle-url-hiding8032,344267
(defun markdown-wiki-link-p ()markdown-wiki-link-p8049,344887
(defun markdown-wiki-link-link ()markdown-wiki-link-link8064,345661
(defun markdown-wiki-link-alias ()markdown-wiki-link-alias8072,346004
(defun markdown-convert-wiki-link-to-filename (name)markdown-convert-wiki-link-to-filename8080,346358
(defun markdown-follow-wiki-link (name &optional other)markdown-follow-wiki-link8119,348199
(defun markdown-follow-wiki-link-at-point (&optional arg)markdown-follow-wiki-link-at-point8135,348848
(defun markdown-highlight-wiki-link (from to face)markdown-highlight-wiki-link8144,349215
(defun markdown-unfontify-region-wiki-links (from to)markdown-unfontify-region-wiki-links8148,349393
(defun markdown-fontify-region-wiki-links (from to)markdown-fontify-region-wiki-links8158,349901
(defun markdown-extend-changed-region (from to)markdown-extend-changed-region8177,350801
(defun markdown-check-change-for-wiki-link (from to)markdown-check-change-for-wiki-link8195,351442
(defun markdown-check-change-for-wiki-link-after-change (from to _)markdown-check-change-for-wiki-link-after-change8229,352998
(defun markdown-fontify-buffer-wiki-links ()markdown-fontify-buffer-wiki-links8234,353256
(defun markdown-follow-thing-at-point (arg)markdown-follow-thing-at-point8242,353510
(defun markdown-do ()markdown-do8259,354144
(defun markdown-compress-whitespace-string (str)markdown-compress-whitespace-string8287,355082
(defun markdown--substitute-command-keys (string)markdown--substitute-command-keys8294,355464
(defun markdown-line-number-at-pos (&optional pos)markdown-line-number-at-pos8303,355831
(defun markdown-inside-link-p ()markdown-inside-link-p8315,356259
(defun markdown-line-is-reference-definition-p ()markdown-line-is-reference-definition-p8320,356421
(defun markdown-adaptive-fill-function ()markdown-adaptive-fill-function8327,356703
(defun markdown-fill-paragraph (&optional justify)markdown-fill-paragraph8346,357381
(defun markdown-fill-forward-paragraph (&optional arg)markdown-fill-forward-paragraph8366,358184
(defun markdown--inhibit-electric-quote ()markdown--inhibit-electric-quote8401,359734
(defun markdown-reload-extensions ()markdown-reload-extensions8412,360108
(defun markdown-handle-local-variables ()markdown-handle-local-variables8434,360995
(defun markdown-toggle-wiki-links (&optional arg)markdown-toggle-wiki-links8446,361548
(defun markdown-setup-wiki-link-hooks ()markdown-setup-wiki-link-hooks8460,362123
(defun markdown-mode-font-lock-keywords-wiki-links ()markdown-mode-font-lock-keywords-wiki-links8483,363258
(defun markdown-toggle-math (&optional arg)markdown-toggle-math8497,363834
(defun markdown-mode-font-lock-keywords-math ()markdown-mode-font-lock-keywords-math8512,364462
(define-button-type 'markdown-gfm-checkbox-buttonmarkdown-gfm-checkbox-button8532,365538
(defun markdown-gfm-task-list-item-at-point (&optional bounds)markdown-gfm-task-list-item-at-point8538,365730
(defun markdown-toggle-gfm-checkbox ()markdown-toggle-gfm-checkbox8548,366182
(defun markdown-toggle-gfm-checkbox-button (button)markdown-toggle-gfm-checkbox-button8570,367068
(defun markdown-make-gfm-checkboxes-buttons (start end)markdown-make-gfm-checkboxes-buttons8577,367281
(defun markdown-gfm-checkbox-after-change-function (beg end _)markdown-gfm-checkbox-after-change-function8588,367744
(defvar markdown-inline-image-overlays nil)markdown-inline-image-overlays8601,368286
(defun markdown-remove-inline-images ()markdown-remove-inline-images8604,368392
(defun markdown-display-inline-images ()markdown-display-inline-images8612,368711
(defun markdown-toggle-inline-images ()markdown-toggle-inline-images8638,369763
(defcustom markdown-fontify-code-blocks-natively nilmarkdown-fontify-code-blocks-natively8648,370065
(defun markdown-toggle-fontify-code-blocks-natively (&optional arg)markdown-toggle-fontify-code-blocks-natively8659,370530
(defcustom markdown-code-lang-modesmarkdown-code-lang-modes8674,371237
(defun markdown-get-lang-mode (lang)markdown-get-lang-mode8693,372104
(defun markdown-fontify-code-blocks-generic (matcher last)markdown-fontify-code-blocks-generic8703,372490
(defun markdown-fontify-gfm-code-blocks (last)markdown-fontify-gfm-code-blocks8729,373819
(defun markdown-fontify-fenced-code-blocks (last)markdown-fontify-fenced-code-blocks8733,374013
(defun markdown-fontify-code-block-natively (lang start end)markdown-fontify-code-block-natively8738,374285
(defvar edit-indirect-guess-mode-function)edit-indirect-guess-mode-function8775,376034
(defvar edit-indirect-after-commit-functions)edit-indirect-after-commit-functions8776,376077
(defun markdown--edit-indirect-after-commit-function (_beg end)markdown--edit-indirect-after-commit-function8778,376124
(defun markdown-edit-code-block ()markdown-edit-code-block8784,376316
(defun markdown-eldoc-function ()markdown-eldoc-function8808,377407
(defun markdown-show-version ()markdown-show-version8848,379419
(defun markdown-mode-info ()markdown-mode-info8853,379578
(define-derived-mode markdown-mode text-mode "Markdown"markdown-mode8859,379741
(defvar gfm-mode-hook nilgfm-mode-hook8995,385842
(defvar gfm-font-lock-keywordsgfm-font-lock-keywords8998,385907
(define-derived-mode gfm-mode markdown-mode "GFM"gfm-mode9004,386134
(define-minor-mode markdown-live-preview-modemarkdown-live-preview-mode9014,386552

elpa/markdown-mode-2.3/markdown-mode-autoloads.el,0

elpa/expand-region-0.11.0/ruby-mode-expansions.el,821
(defvar er/ruby-block-end-reer/ruby-block-end-re42,1194
(defun er/ruby-skip-past-block-end ()er/ruby-skip-past-block-end46,1299
(defun er/ruby-end-of-block (&optional arg)er/ruby-end-of-block51,1453
(defun er/point-at-indentation ()er/point-at-indentation63,1932
(defun er/ruby-backward-up ()er/ruby-backward-up69,2085
(defun er/ruby-forward-up ()er/ruby-forward-up101,3329
(defun er/get-ruby-block (&optional pos)er/get-ruby-block107,3455
(defun er/mark-ruby-block-up-1 ()er/mark-ruby-block-up-1120,3803
(defun er/mark-ruby-block-up (&optional no-recurse)er/mark-ruby-block-up126,3955
(defun er/mark-ruby-instance-variable ()er/mark-ruby-instance-variable163,5480
(defun er/mark-ruby-heredoc ()er/mark-ruby-heredoc173,5781
(defun er/add-ruby-mode-expansions ()er/add-ruby-mode-expansions193,6643

elpa/expand-region-0.11.0/enh-ruby-mode-expansions.el,82
(defun er/add-enh-ruby-mode-expansions ()er/add-enh-ruby-mode-expansions31,1043

elpa/expand-region-0.11.0/expand-region-pkg.el,113
(define-package "expand-region" "0.11.0" "Increase selected region by semantic units." 'nil)"expand-region"1,0

elpa/expand-region-0.11.0/subword-mode-expansions.el,130
(defun er/mark-subword ()er/mark-subword34,1149
(defun er/add-subword-mode-expansions ()er/add-subword-mode-expansions41,1307

elpa/expand-region-0.11.0/cperl-mode-expansions.el,289
(defun er/mark-cperl-variable-name ()er/mark-cperl-variable-name25,875
(defun er/mark-cperl-package-name ()er/mark-cperl-package-name37,1195
(defun er/mark-cperl-subroutine ()er/mark-cperl-subroutine47,1434
(defun er/add-cperl-mode-expansions ()er/add-cperl-mode-expansions54,1583

elpa/expand-region-0.11.0/text-mode-expansions.el,200
(defun er/mark-text-sentence ()er/mark-text-sentence32,1060
(defun er/mark-text-paragraph ()er/mark-text-paragraph43,1394
(defun er/add-text-mode-expansions ()er/add-text-mode-expansions49,1526

elpa/expand-region-0.11.0/octave-expansions.el,323
(defconst er/old-octave-mod-p (fboundp 'octave-up-block))er/old-octave-mod-p39,1455
(defalias 'er/up-blocker/up-block41,1514
(defun er/octave-mark-up-block ()er/octave-mark-up-block44,1592
(defun er/octave-mark-block ()er/octave-mark-block54,1915
(defun er/add-octave-expansions ()er/add-octave-expansions62,2135

elpa/expand-region-0.11.0/python-el-expansions.el,379
(defvar er--python-string-delimiter "'\"")er--python-string-delimiter47,1554
(defun er/mark-python-statement ()er/mark-python-statement49,1598
(defun er/mark-outside-python-string ()er/mark-outside-python-string56,1784
(defun er/mark-inside-python-string ()er/mark-inside-python-string64,2002
(defun er/add-python-mode-expansions ()er/add-python-mode-expansions76,2443

elpa/expand-region-0.11.0/feature-mode-expansions.el,331
(defun er--block-between-keywords (start-keywords-regexp &optional end-keywords-regexp)er--block-between-keywords35,1079
(defun er/mark-feature-scenario ()er/mark-feature-scenario51,1776
(defun er/mark-feature-step ()er/mark-feature-step55,1903
(defun er/add-feature-mode-expansions ()er/add-feature-mode-expansions59,2064

elpa/expand-region-0.11.0/expand-region.el,56
(defun er/expand-region (arg)er/expand-region143,5416

elpa/expand-region-0.11.0/python-el-fgallina-expansions.el,873
(defvar er--python-string-delimiterer--python-string-delimiter41,1399
(defvar er--python-block-start-regexer--python-block-start-regex49,1703
(defun er/mark-python-string (mark-inside)er/mark-python-string56,1951
(defun er/mark-inside-python-string ()er/mark-inside-python-string75,2783
(defun er/mark-outside-python-string ()er/mark-outside-python-string82,2976
(defun er/mark-python-statement ()er/mark-python-statement89,3173
(defun er/mark-python-block (&optional next-indent-level)er/mark-python-block96,3369
(defun er/mark-outer-python-block ()er/mark-outer-python-block141,5486
(defun er/mark-python-block-and-decorator ()er/mark-python-block-and-decorator148,5704
(defun er--python-looking-at-decorator (&optional line-offset)er--python-looking-at-decorator164,6123
(defun er/add-python-mode-expansions ()er/add-python-mode-expansions173,6310

elpa/expand-region-0.11.0/css-mode-expansions.el,138
(defun er/mark-css-declaration ()er/mark-css-declaration33,1066
(defun er/add-css-mode-expansions ()er/add-css-mode-expansions42,1343

elpa/expand-region-0.11.0/er-basic-expansions.el,1346
(defun er/mark-word ()er/mark-word29,929
(defun er/mark-symbol ()er/mark-symbol39,1238
(defun er/mark-symbol-with-prefix ()er/mark-symbol-with-prefix49,1566
(defun er/mark-next-accessor ()er/mark-next-accessor65,2082
(defun er/mark-method-call ()er/mark-method-call78,2483
(defun er--point-is-in-comment-p ()er--point-is-in-comment-p94,2991
(defun er/mark-comment ()er/mark-comment99,3208
(defun er--current-quotes-char ()er--current-quotes-char115,3621
(defalias 'er--point-inside-string-p 'er--current-quotes-char)er--point-inside-string-p119,3730
(defun er--move-point-forward-out-of-string ()er--move-point-forward-out-of-string121,3794
(defun er--move-point-backward-out-of-string ()er--move-point-backward-out-of-string126,3967
(defun er/mark-inside-quotes ()er/mark-inside-quotes130,4119
(defun er/mark-outside-quotes ()er/mark-outside-quotes141,4463
(defun er--point-inside-pairs-p ()er--point-inside-pairs-p158,4983
(defun er/mark-inside-pairs ()er/mark-inside-pairs162,5079
(defun er--looking-at-pair ()er--looking-at-pair176,5524
(defun er--looking-at-marked-pair ()er--looking-at-marked-pair180,5624
(defun er/mark-outside-pairs ()er/mark-outside-pairs189,5867
(defun er/mark-url ()er/mark-url206,6404
(defun er/mark-email ()er/mark-email212,6515
(defun er/mark-defun ()er/mark-defun218,6632

elpa/expand-region-0.11.0/expand-region-autoloads.el,816
(defvar expand-region-preferred-python-mode 'python "\expand-region-preferred-python-mode94,3175
(defvar expand-region-guess-python-mode t "\expand-region-guess-python-mode99,3353
(defvar expand-region-autocopy-register "" "\expand-region-autocopy-register104,3546
(defvar expand-region-skip-whitespace t "\expand-region-skip-whitespace111,3856
(defvar expand-region-fast-keys-enabled t "\expand-region-fast-keys-enabled116,4043
(defvar expand-region-contract-fast-key "-" "\expand-region-contract-fast-key121,4237
(defvar expand-region-reset-fast-key "0" "\expand-region-reset-fast-key126,4431
(defvar expand-region-exclude-text-mode-expansions '(html-mode nxml-mode) "\expand-region-exclude-text-mode-expansions131,4605
(defvar expand-region-smart-cursor nil "\expand-region-smart-cursor136,4869

elpa/expand-region-0.11.0/js-mode-expansions.el,516
(defun er/mark-js-function ()er/mark-js-function40,1254
(defun er/mark-js-outer-return ()er/mark-js-outer-return56,1682
(defun er/mark-js-inner-return ()er/mark-js-inner-return74,2200
(defun er/mark-js-if ()er/mark-js-if92,2732
(defun er/mark-js-object-property-value ()er/mark-js-object-property-value111,3204
(defun er/mark-js-object-property ()er/mark-js-object-property130,3765
(defun er/mark-js-call ()er/mark-js-call153,4584
(defun er/add-js-mode-expansions ()er/add-js-mode-expansions169,5131

elpa/expand-region-0.11.0/web-mode-expansions.el,71
(defun er/add-web-mode-expansions ()er/add-web-mode-expansions24,886

elpa/expand-region-0.11.0/python-mode-expansions.el,729
(defvar er--python-string-delimiter "'\"")er--python-string-delimiter44,1456
(defalias 'py-goto-beyond-clause 'py-end-of-clause-bol)py-goto-beyond-clause46,1500
(defvar py-indent-offset)py-indent-offset53,1820
(defun er/mark-outside-python-string ()er/mark-outside-python-string55,1847
(defun er/mark-inside-python-string ()er/mark-inside-python-string65,2155
(defun er--move-to-beginning-of-outer-python-block (start-column)er--move-to-beginning-of-outer-python-block77,2575
(defun er/mark-outer-python-block ()er/mark-outer-python-block87,3042
(defun er/mark-x-python-compound-statement ()er/mark-x-python-compound-statement99,3506
(defun er/add-python-mode-expansions ()er/add-python-mode-expansions123,4517

elpa/expand-region-0.11.0/html-mode-expansions.el,368
(defun er/mark-html-attribute ()er/mark-html-attribute38,1169
(defun er--looking-at-marked-tag ()er--looking-at-marked-tag53,1717
(defun er--inside-tag-p ()er--inside-tag-p61,1942
(defun er/mark-outer-tag ()er/mark-outer-tag66,2053
(defun er/mark-inner-tag ()er/mark-inner-tag78,2443
(defun er/add-html-mode-expansions ()er/add-html-mode-expansions88,2728

elpa/expand-region-0.11.0/erlang-mode-expansions.el,78
(defun er/add-erlang-mode-expansions ()er/add-erlang-mode-expansions36,1147

elpa/expand-region-0.11.0/cc-mode-expansions.el,310
(defun er/c-mark-statement ()er/c-mark-statement52,1736
(defun er/c-mark-fully-qualified-name ()er/c-mark-fully-qualified-name96,3000
(defmacro er/c-define-construct (name mark-first-part open-brace doc)er/c-define-construct115,3541
(defun er/add-cc-mode-expansions ()er/add-cc-mode-expansions166,5896

elpa/expand-region-0.11.0/nxml-mode-expansions.el,595
(defun er/mark-nxml-tag ()er/mark-nxml-tag35,1119
(defun er/mark-nxml-element ()er/mark-nxml-element46,1439
(defun er/mark-nxml-containing-element ()er/mark-nxml-containing-element55,1685
(defun er/mark-nxml-inside-element ()er/mark-nxml-inside-element62,1867
(defun er/inside-nxml-attribute-string? ()er/inside-nxml-attribute-string?72,2161
(defun er/mark-nxml-attribute-inner-string ()er/mark-nxml-attribute-inner-string83,2527
(defun er/mark-nxml-attribute-string ()er/mark-nxml-attribute-string92,2826
(defun er/add-nxml-mode-expansions ()er/add-nxml-mode-expansions101,3150

elpa/expand-region-0.11.0/latex-mode-expansions.el,432
(defvar texmathp-why)texmathp-why34,1159
(defvar texmathp-tex-commands1)texmathp-tex-commands135,1181
(defvar texmathp-onoff-regexp)texmathp-onoff-regexp36,1213
(defvar LaTeX-mode-hook)LaTeX-mode-hook37,1244
(defun er/mark-LaTeX-inside-environment ()er/mark-LaTeX-inside-environment41,1360
(defun er/mark-LaTeX-math ()er/mark-LaTeX-math61,2059
(defun er/add-latex-mode-expansions ()er/add-latex-mode-expansions88,2977

elpa/expand-region-0.11.0/expand-region-core.el,1563
(defvar er/history '()er/history33,1042
(defvar er--space-str " \t\n")er--space-str39,1229
(defvar er--blank-list (append er--space-str nil))er--blank-list40,1260
(defvar er/try-expand-list niler/try-expand-list44,1359
(defun er--prepare-expanding ()er--prepare-expanding47,1447
(defun er--copy-region-to-register ()er--copy-region-to-register56,1787
(defun er--expand-region-1 ()er--expand-region-168,2296
(defun er--this-expansion-is-better (start end best-start best-end)er--this-expansion-is-better125,4343
(defun er/contract-region (arg)er/contract-region138,4765
(defun er/prepare-for-more-expansions-internal (repeat-key-str)er/prepare-for-more-expansions-internal173,5891
(defun er/prepare-for-more-expansions ()er/prepare-for-more-expansions188,6915
(defadvice keyboard-quit (before collapse-region activate)keyboard-quit247,9500
(defadvice minibuffer-keyboard-quit (around collapse-region activate)minibuffer-keyboard-quit251,9656
(defadvice cua-cancel (before collapse-region activate)cua-cancel256,9836
(defun er/clear-history (&rest args)er/clear-history260,9989
(defsubst er--first-invocation ()er--first-invocation265,10135
(defun er--point-is-surrounded-by-white-space ()er--point-is-surrounded-by-white-space269,10318
(defun er/enable-mode-expansions (mode add-fn)er/enable-mode-expansions274,10496
(defun er/looking-back-on-line (regexp)er/looking-back-on-line284,10810
(defun er/looking-back-exact (s)er/looking-back-exact288,10963
(defun er/looking-back-max (regexp count)er/looking-back-max293,11169

elpa/expand-region-0.11.0/expand-region-custom.el,917
(defgroup expand-region nilexpand-region28,917
(defcustom expand-region-preferred-python-mode 'pythonexpand-region-preferred-python-mode33,1026
(defcustom expand-region-guess-python-mode texpand-region-guess-python-mode41,1353
(defun expand-region-guess-python-mode ()expand-region-guess-python-mode47,1586
(defcustom expand-region-autocopy-register ""expand-region-autocopy-register55,1822
(defcustom expand-region-skip-whitespace texpand-region-skip-whitespace63,2113
(defcustom expand-region-fast-keys-enabled texpand-region-fast-keys-enabled70,2377
(defcustom expand-region-contract-fast-key "-"expand-region-contract-fast-key77,2642
(defcustom expand-region-reset-fast-key "0"expand-region-reset-fast-key83,2817
(defcustom expand-region-exclude-text-mode-expansionsexpand-region-exclude-text-mode-expansions89,2975
(defcustom expand-region-smart-cursor nilexpand-region-smart-cursor96,3248

elpa/expand-region-0.11.0/js2-mode-expansions.el,142
(defun js2-mark-parent-statement ()js2-mark-parent-statement38,1273
(defun er/add-js2-mode-expansions ()er/add-js2-mode-expansions49,1711

elpa/expand-region-0.11.0/the-org-mode-expansions.el,298
(defun er/mark-sentence ()er/mark-sentence39,1302
(defun er/mark-paragraph ()er/mark-paragraph48,1486
(defun er/mark-org-code-block ()er/mark-org-code-block57,1707
(defun er/mark-org-parent ()er/mark-org-parent68,2027
(defun er/add-org-mode-expansions ()er/add-org-mode-expansions74,2169

elpa/expand-region-0.11.0/clojure-mode-expansions.el,346
(defun er/mark-clj-word ()er/mark-clj-word38,1216
(defun er/mark-clj-set-literal ()er/mark-clj-set-literal50,1630
(defun er/mark-clj-regexp-literal ()er/mark-clj-regexp-literal64,2060
(defun er/mark-clj-function-literal ()er/mark-clj-function-literal78,2520
(defun er/add-clojure-mode-expansions ()er/add-clojure-mode-expansions92,2949

elpa/expand-region-0.11.0/sml-mode-expansions.el,170
(defun er/sml-mark-keyword-prefixed-expression ()er/sml-mark-keyword-prefixed-expression44,1447
(defun er/add-sml-mode-expansions ()er/add-sml-mode-expansions52,1641

elpa/expand-region-0.11.0/jsp-expansions.el,120
(defun er/mark-jstl-escape ()er/mark-jstl-escape41,1314
(defun er/add-jsp-expansions ()er/add-jsp-expansions54,1718

elpa/counsel-projectile-20191107.2249/counsel-projectile-autoloads.el,72
(defvar counsel-projectile-mode nil "\counsel-projectile-mode126,4017

elpa/counsel-projectile-20191107.2249/counsel-projectile.el,11617
(defgroup counsel-projectile nilcounsel-projectile52,1801
(defun counsel-projectile--defcustom-action (command action group)counsel-projectile--defcustom-action57,1907
(defun counsel-projectile--action-index (action-item action-list)counsel-projectile--action-index100,3781
(defun counsel-projectile-modify-action (action-var modifications)counsel-projectile-modify-action128,4949
(defsubst counsel-projectile--string-trim-right (string &optional regexp)counsel-projectile--string-trim-right250,10513
(defcustom counsel-projectile-sort-files nilcounsel-projectile-sort-files260,10842
(defcustom counsel-projectile-find-file-matcher 'counsel--find-file-matchercounsel-projectile-find-file-matcher269,11156
(defun counsel-projectile-find-file-matcher-basename (regexp candidates)counsel-projectile-find-file-matcher-basename317,13094
(defun counsel-projectile-find-file-action (file)counsel-projectile-find-file-action352,14818
(defun counsel-projectile-find-file-action-other-window (file)counsel-projectile-find-file-action-other-window357,15006
(defun counsel-projectile-find-file-action-find-file-manually (file)counsel-projectile-find-file-action-find-file-manually363,15238
(defun counsel-projectile-find-file-action-extern (file)counsel-projectile-find-file-action-extern369,15483
(defun counsel-projectile-find-file-action-root (file)counsel-projectile-find-file-action-root374,15704
(defun counsel-projectile-find-file-action-delete (file)counsel-projectile-find-file-action-delete379,15921
(defun counsel-projectile-find-file-action-switch-project (&optional _)counsel-projectile-find-file-action-switch-project383,16056
(defun counsel-projectile-find-file-transformer (str)counsel-projectile-find-file-transformer387,16282
(defun counsel-projectile-find-file (&optional arg dwim)counsel-projectile-find-file394,16525
(defun counsel-projectile-find-file-dwim (&optional arg)counsel-projectile-find-file-dwim419,17571
(defcustom counsel-projectile-sort-directories nilcounsel-projectile-sort-directories428,17847
(defun counsel-projectile--project-directories ()counsel-projectile--project-directories454,18695
(defun counsel-projectile-find-dir-action (dir)counsel-projectile-find-dir-action460,18940
(defun counsel-projectile-find-dir-action-other-window (dir)counsel-projectile-find-dir-action-other-window465,19130
(defun counsel-projectile-find-dir-action-extern (dir)counsel-projectile-find-dir-action-extern471,19364
(defun counsel-projectile-find-dir-action-root (dir)counsel-projectile-find-dir-action-root476,19580
(defun counsel-projectile-find-dir-action-switch-project (&optional _)counsel-projectile-find-dir-action-switch-project481,19792
(defun counsel-projectile-find-dir-transformer (str)counsel-projectile-find-dir-transformer485,20015
(defun counsel-projectile-find-dir (&optional arg)counsel-projectile-find-dir490,20171
(defcustom counsel-projectile-sort-buffers nilcounsel-projectile-sort-buffers512,20997
(defcustom counsel-projectile-remove-current-buffer nilcounsel-projectile-remove-current-buffer522,21329
(defvar counsel-projectile-switch-to-buffer-mapcounsel-projectile-switch-to-buffer-map544,22037
(defun counsel-projectile--project-buffers (&rest _)counsel-projectile--project-buffers552,22380
(defun counsel-projectile-switch-to-buffer-action (buffer)counsel-projectile-switch-to-buffer-action567,23111
(defun counsel-projectile-switch-to-buffer-action-find-file-manually (buffer)counsel-projectile-switch-to-buffer-action-find-file-manually571,23245
(defun counsel-projectile-switch-to-buffer-action-switch-project (&optional _)counsel-projectile-switch-to-buffer-action-switch-project579,23582
(defun counsel-projectile-switch-to-buffer-transformer (str)counsel-projectile-switch-to-buffer-transformer583,23829
(defun counsel-projectile-switch-to-buffer ()counsel-projectile-switch-to-buffer591,24236
(defcustom counsel-projectile-grep-initial-input nilcounsel-projectile-grep-initial-input615,25282
(defcustom counsel-projectile-git-grep-extra-actionscounsel-projectile-git-grep-extra-actions639,26192
(defvar counsel-projectile-grep-base-command "grep -rnEI %s -- %%s %s"counsel-projectile-grep-base-command652,26698
(defvar counsel-projectile-grep-command nil)counsel-projectile-grep-command656,26850
(defun counsel-projectile-grep-function (string)counsel-projectile-grep-function658,26896
(defun counsel-projectile-grep-action-switch-project (&optional _)counsel-projectile-grep-action-switch-project667,27284
(defun counsel-projectile-git-grep-action-switch-project (&optional _)counsel-projectile-git-grep-action-switch-project671,27495
(defun counsel-projectile-grep-transformer (str)counsel-projectile-grep-transformer675,27718
(defun counsel-projectile-grep-occur (&optional _cands)counsel-projectile-grep-occur682,28028
(defun counsel-projectile-grep (&optional options-or-cmd)counsel-projectile-grep688,28230
(defun counsel-projectile-git-grep (&optional cmd)counsel-projectile-git-grep746,31001
(defcustom counsel-projectile-ag-initial-input nilcounsel-projectile-ag-initial-input773,32116
(defcustom counsel-projectile-ag-extra-actionscounsel-projectile-ag-extra-actions788,32806
(defun counsel-projectile-ag-action-switch-project (&optional _)counsel-projectile-ag-action-switch-project801,33288
(defun counsel-projectile-ag (&optional options)counsel-projectile-ag806,33508
(defcustom counsel-projectile-rg-initial-input nilcounsel-projectile-rg-initial-input843,35138
(defcustom counsel-projectile-rg-extra-actionscounsel-projectile-rg-extra-actions858,35828
(defun counsel-projectile-rg-action-switch-project (&optional _)counsel-projectile-rg-action-switch-project871,36310
(defun counsel-projectile-rg (&optional options)counsel-projectile-rg876,36530
(defvar org-capture-templates)org-capture-templates915,38208
(defvar org-capture-templates-contexts)org-capture-templates-contexts916,38239
(defcustom counsel-projectile-org-capture-templatescounsel-projectile-org-capture-templates918,38280
(defcustom counsel-projectile-org-capture-templates-contexts nilcounsel-projectile-org-capture-templates-contexts1028,44389
(defcustom counsel-projectile-org-capture-extra-actionscounsel-projectile-org-capture-extra-actions1050,45518
(defvar counsel-projectile--org-capture-templates-backup nilcounsel-projectile--org-capture-templates-backup1063,46036
(defun counsel-projectile-org-capture-action-switch-project (&optional _)counsel-projectile-org-capture-action-switch-project1066,46147
(defun counsel-projectile-org-capture (&optional from-buffer)counsel-projectile-org-capture1072,46476
(defvar org-agenda-files)org-agenda-files1132,49116
(defun counsel-projectile-org-agenda (&optional arg keys restriction)counsel-projectile-org-agenda1135,49158
(defcustom counsel-projectile-sort-projects nilcounsel-projectile-sort-projects1158,50018
(defcustom counsel-projectile-remove-current-project nilcounsel-projectile-remove-current-project1168,50323
(defun counsel-projectile-switch-project-by-name (project)counsel-projectile-switch-project-by-name1223,52720
(defun counsel-projectile-switch-project-action (project)counsel-projectile-switch-project-action1250,53994
(defun counsel-projectile-switch-project-action-find-file (project)counsel-projectile-switch-project-action-find-file1257,54272
(defun counsel-projectile-switch-project-action-find-file-manually (project)counsel-projectile-switch-project-action-find-file-manually1264,54560
(defun counsel-projectile-switch-project-action-find-dir (project)counsel-projectile-switch-project-action-find-dir1271,54842
(defun counsel-projectile-switch-project-action-dired (project)counsel-projectile-switch-project-action-dired1278,55133
(defun counsel-projectile-switch-project-action-switch-to-buffer (project)counsel-projectile-switch-project-action-switch-to-buffer1283,55352
(defun counsel-projectile-switch-project-action-save-all-buffers (project)counsel-projectile-switch-project-action-save-all-buffers1288,55600
(defun counsel-projectile-switch-project-action-kill-buffers (project)counsel-projectile-switch-project-action-kill-buffers1293,55844
(defun counsel-projectile-switch-project-action-remove-known-project (project)counsel-projectile-switch-project-action-remove-known-project1298,56076
(defun counsel-projectile-switch-project-action-compile (project)counsel-projectile-switch-project-action-compile1305,56357
(defun counsel-projectile-switch-project-action-configure (project)counsel-projectile-switch-project-action-configure1312,56647
(defun counsel-projectile-switch-project-action-edit-dir-locals (project)counsel-projectile-switch-project-action-edit-dir-locals1319,56939
(defun counsel-projectile-switch-project-action-vc (project)counsel-projectile-switch-project-action-vc1324,57175
(defun counsel-projectile-switch-project-action-run-shell (project)counsel-projectile-switch-project-action-run-shell1329,57398
(defun counsel-projectile-switch-project-action-run-eshell (project)counsel-projectile-switch-project-action-run-eshell1334,57631
(defun counsel-projectile-switch-project-action-run-term (project)counsel-projectile-switch-project-action-run-term1339,57867
(defun counsel-projectile-switch-project-action-grep (project)counsel-projectile-switch-project-action-grep1346,58134
(defun counsel-projectile-switch-project-action-git-grep (project)counsel-projectile-switch-project-action-git-grep1351,58355
(defun counsel-projectile-switch-project-action-ag (project)counsel-projectile-switch-project-action-ag1356,58588
(defun counsel-projectile-switch-project-action-rg (project)counsel-projectile-switch-project-action-rg1361,58803
(defun counsel-projectile-switch-project-action-org-capture (project)counsel-projectile-switch-project-action-org-capture1366,59018
(defun counsel-projectile-switch-project-action-org-agenda (project)counsel-projectile-switch-project-action-org-agenda1373,59374
(defun counsel-projectile-switch-project (&optional default-action)counsel-projectile-switch-project1379,59617
(defvar counsel-projectile-mapcounsel-projectile-map1425,61561
(defvar counsel-projectile--buffers nilcounsel-projectile--buffers1433,61884
(defvar counsel-projectile--non-visited-files nilcounsel-projectile--non-visited-files1436,61964
(defun counsel-projectile--project-buffers-and-files (&rest _)counsel-projectile--project-buffers-and-files1440,62097
(defun counsel-projectile--matcher (regexp _candidates)counsel-projectile--matcher1477,64048
(defun counsel-projectile-action (name)counsel-projectile-action1486,64478
(defun counsel-projectile-action-other-window (name)counsel-projectile-action-other-window1492,64718
(defun counsel-projectile-action-kill-delete (name)counsel-projectile-action-kill-delete1498,64989
(defun counsel-projectile-action-find-file-manually (name)counsel-projectile-action-find-file-manually1504,65228
(defun counsel-projectile-action-file-extern (name)counsel-projectile-action-file-extern1511,65571
(defun counsel-projectile-action-file-root (name)counsel-projectile-action-file-root1517,65822
(defun counsel-projectile-action-switch-project (&optional _)counsel-projectile-action-switch-project1523,66066
(defun counsel-projectile-transformer (str)counsel-projectile-transformer1527,66262
(defun counsel-projectile (&optional arg)counsel-projectile1534,66547
(defcustom counsel-projectile-key-bindingscounsel-projectile-key-bindings1562,67621
(define-minor-mode counsel-projectile-modecounsel-projectile-mode1587,68969

elpa/counsel-projectile-20191107.2249/counsel-projectile-pkg.el,354
(define-package "counsel-projectile" "20191107.2249" "Ivy integration for Projectile" '((counsel "0.13.0") (projectile "2.0.0")) :commit "d71a3274cfa9d7425f1bcee3eb2dfed9714ac16d" :keywords '("project" "convenience") :authors '(("Eric Danan")) :maintainer '("Eric Danan") :url "https://github.com/ericdanan/counsel-projectile")"counsel-projectile"2,31

elpa/smartparens-1.11.0/smartparens-clojure.el,75
(defvar sp-clojure-prefix "\\(?:[@`'#~,_?^]+\\)"sp-clojure-prefix42,1342

elpa/smartparens-1.11.0/smartparens-ruby.el,1319
(defun sp-ruby-forward-sexp ()sp-ruby-forward-sexp51,1568
(defun sp-ruby-backward-sexp ()sp-ruby-backward-sexp58,1772
(defun sp-ruby-maybe-one-space ()sp-ruby-maybe-one-space65,1981
(defun sp-ruby-delete-indentation (&optional arg)sp-ruby-delete-indentation83,2625
(defun sp-ruby-block-post-handler (id action context)sp-ruby-block-post-handler90,2810
(defun sp-ruby-def-post-handler (id action context)sp-ruby-def-post-handler100,3107
(defun sp-ruby-post-handler (id action context)sp-ruby-post-handler111,3408
(defun sp-ruby-pre-handler (id action context)sp-ruby-pre-handler133,4198
(defun sp-ruby-inline-p (id)sp-ruby-inline-p201,6845
(defun sp-ruby-method-p (id)sp-ruby-method-p219,7461
(defun sp-ruby-skip-inline-match-p (ms mb me)sp-ruby-skip-inline-match-p239,8114
(defun sp-ruby-skip-method-p (ms mb me)sp-ruby-skip-method-p245,8266
(defun sp-ruby-in-string-or-word-p (id action context)sp-ruby-in-string-or-word-p250,8373
(defun sp-ruby-in-string-word-or-inline-p (id action context)sp-ruby-in-string-word-or-inline-p258,8656
(defun sp-ruby-pre-pipe-handler (id action context)sp-ruby-pre-pipe-handler265,8911
(defun sp-ruby-should-insert-pipe-close (id action context)sp-ruby-should-insert-pipe-close275,9156
(defun sp--ruby-skip-match (ms me mb)sp--ruby-skip-match283,9438

elpa/smartparens-1.11.0/smartparens-autoloads.el,320
(defvar smartparens-mode-map (make-sparse-keymap) "\smartparens-mode-map30,900
(defvar smartparens-global-strict-mode nil "\smartparens-global-strict-mode70,2180
(defvar smartparens-global-mode nil "\smartparens-global-mode102,3313
(defvar show-smartparens-global-mode nil "\show-smartparens-global-mode154,5064

elpa/smartparens-1.11.0/smartparens-ml.el,0

elpa/smartparens-1.11.0/smartparens-python.el,185
(defun sp-python-fix-tripple-quotes (id action _context)sp-python-fix-tripple-quotes63,2125
(defadvice python-indent-dedent-line-backspacepython-indent-dedent-line-backspace81,2893

elpa/smartparens-1.11.0/smartparens-lua.el,89
(defun sp-lua-post-keyword-insert (id action context)sp-lua-post-keyword-insert50,1550

elpa/smartparens-1.11.0/smartparens-rust.el,271
(defun sp-in-rust-lifetime-context (&rest args)sp-in-rust-lifetime-context47,1344
(defun sp-rust-skip-match-angle-bracket (ms mb me)sp-rust-skip-match-angle-bracket66,2019
(defun sp-rust-filter-angle-brackets (id action context)sp-rust-filter-angle-brackets83,2698

elpa/smartparens-1.11.0/smartparens-markdown.el,252
(defun sp-gfm-electric-backquote-p (_id action _context)sp-gfm-electric-backquote-p52,1591
(defun sp--gfm-point-after-word-p (id action context)sp--gfm-point-after-word-p58,1848
(defun sp--gfm-skip-asterisk (ms mb me)sp--gfm-skip-asterisk64,2104

elpa/smartparens-1.11.0/smartparens-scala.el,102
(defun sp-scala-wrap-with-indented-newlines (_ action _)sp-scala-wrap-with-indented-newlines56,1790

elpa/smartparens-1.11.0/smartparens-elixir.el,330
(defun sp-elixir-def-p (id)sp-elixir-def-p33,1045
(defun sp-elixir-skip-def-p (ms mb me)sp-elixir-skip-def-p60,1968
(defun sp-elixir-do-block-post-handler (id action context)sp-elixir-do-block-post-handler65,2086
(defun sp-elixir-empty-do-block-post-handler (id action context)sp-elixir-empty-do-block-post-handler78,2526

elpa/smartparens-1.11.0/smartparens-config.el,91
(defun sp-lisp-invalid-hyperlink-p (id action context)sp-lisp-invalid-hyperlink-p48,1568

elpa/smartparens-1.11.0/smartparens-html.el,205
(defun sp-html-next-tag (arg)sp-html-next-tag58,1840
(defun sp-html-previous-tag (arg)sp-html-previous-tag75,2402
(defun sp-html-post-handler (&optional id action context)sp-html-post-handler92,2978

elpa/smartparens-1.11.0/smartparens-pkg.el,142
(define-package "smartparens" "1.11.0" "Automatic insertion, wrapping and paredit-like navigation with user defined pairs.""smartparens"1,0

elpa/smartparens-1.11.0/smartparens-latex.el,472
(defun sp-latex-insert-spaces-inside-pair (id action context)sp-latex-insert-spaces-inside-pair50,1556
(defun sp-latex-skip-match-apostrophe (ms mb me)sp-latex-skip-match-apostrophe65,2069
(defun sp-latex-skip-double-quote (id action context)sp-latex-skip-double-quote72,2230
(defun sp-latex-point-after-backslash (id action context)sp-latex-point-after-backslash80,2441
(defun sp-latex-point-before-word-p (id action context)sp-latex-point-before-word-p88,2785

elpa/smartparens-1.11.0/smartparens-javascript.el,0

elpa/smartparens-1.11.0/smartparens.el,32011
(defvar evil-this-register)evil-this-register72,2796
(defun sp-cheat-sheet (&optional arg)sp-cheat-sheet89,3383
(defun sp-describe-system ()sp-describe-system179,7629
(defvar-local sp-forward-bound-fn nilsp-forward-bound-fn202,8373
(defvar-local sp-backward-bound-fn nilsp-backward-bound-fn205,8457
(defun sp--get-forward-bound ()sp--get-forward-bound208,8543
(defun sp--get-backward-bound ()sp--get-backward-bound215,8793
(defvar smartparens-mode-map (make-sparse-keymap)smartparens-mode-map224,9063
(defvaralias 'sp-keymap 'smartparens-mode-map)sp-keymap226,9154
(defvar sp-paredit-bindings '(sp-paredit-bindings229,9273
(defun sp--populate-keymap (bindings)sp--populate-keymap255,10722
(defun sp-use-paredit-bindings ()sp-use-paredit-bindings261,10936
(defvar sp-smartparens-bindings '(sp-smartparens-bindings266,11096
(defun sp-use-smartparens-bindings ()sp-use-smartparens-bindings298,13060
(defun sp--set-base-key-bindings (&optional symbol value)sp--set-base-key-bindings303,13232
(defun sp--update-override-key-bindings (&optional symbol value)sp--update-override-key-bindings320,13718
(defcustom sp-base-key-bindings nilsp-base-key-bindings331,14162
(defcustom sp-override-key-bindings nilsp-override-key-bindings352,15013
(defvar sp-escape-char nilsp-escape-char373,15637
(defvar sp-comment-char nilsp-comment-char377,15763
(defvar sp-pair-list nilsp-pair-list381,15877
(defvar sp-local-pairs nilsp-local-pairs388,16075
(defvar sp-last-operation nilsp-last-operation392,16203
(defvar sp-state (make-sp-state)sp-state421,17290
(defvar sp-previous-point -1sp-previous-point426,17435
(defvar sp-wrap-point nilsp-wrap-point434,17696
(defvar sp-wrap-mark nilsp-wrap-mark442,17922
(defvar sp-last-inserted-characters ""sp-last-inserted-characters449,18120
(defvar sp-last-inserted-pair nilsp-last-inserted-pair456,18377
(defvar sp-delayed-pair nilsp-delayed-pair460,18489
(defvar sp-last-wrapped-region nilsp-last-wrapped-region468,18764
(defvar sp-point-inside-string nilsp-point-inside-string473,18954
(defvar sp-buffer-modified-p nilsp-buffer-modified-p479,19102
(defvar sp-pre-command-point nilsp-pre-command-point482,19199
(defconst sp-max-pair-length 10sp-max-pair-length485,19295
(defconst sp-max-prefix-length 100sp-max-prefix-length491,19470
(defvar sp-pairssp-pairs499,19783
(defvar sp-tags nilsp-tags523,20987
(defvar sp-prefix-tag-object nilsp-prefix-tag-object526,21080
(defvar sp-prefix-pair-object nilsp-prefix-pair-object529,21182
(defvar sp-prefix-symbol-object nilsp-prefix-symbol-object535,21360
(define-obsolete-variable-alias 'sp--lisp-modes 'sp-lisp-modes "2015-11-08")sp--lisp-modes541,21541
(defcustom sp-lisp-modes '(sp-lisp-modes543,21619
(defcustom sp-clojure-modes '(sp-clojure-modes571,22709
(defcustom sp-no-reindent-after-kill-modes '(sp-no-reindent-after-kill-modes583,23129
(defvar sp--html-modes '(sp--html-modes593,23559
(defvar sp-message-alistsp-message-alist605,23926
(defgroup smartparens ()smartparens660,26307
(define-minor-mode smartparens-modesmartparens-mode666,26411
(defvar smartparens-strict-mode-mapsmartparens-strict-mode-map686,27085
(define-minor-mode smartparens-strict-modesmartparens-strict-mode702,27888
(define-globalized-minor-mode smartparens-global-strict-modesmartparens-global-strict-mode738,29913
(defcustom sp-ignore-modes-list '(sp-ignore-modes-list743,30058
(defun turn-on-smartparens-strict-mode ()turn-on-smartparens-strict-mode751,30318
(defun turn-off-smartparens-strict-mode ()turn-off-smartparens-strict-mode760,30639
(defun sp--init ()sp--init765,30771
(defun sp--maybe-init ()sp--maybe-init782,31315
(defun sp--update-sp-pair-list ()sp--update-sp-pair-list789,31458
(defun sp--update-local-pairs ()sp--update-local-pairs796,31764
(defun sp-update-local-pairs (configuration)sp-update-local-pairs810,32373
(defun sp--update-local-pairs-everywhere (&rest modes)sp--update-local-pairs-everywhere840,33625
(defcustom smartparens-enabled-hook nilsmartparens-enabled-hook854,34115
(defcustom smartparens-disabled-hook nilsmartparens-disabled-hook859,34243
(define-globalized-minor-mode smartparens-global-modesmartparens-global-mode865,34388
(defun turn-on-smartparens-mode ()turn-on-smartparens-mode870,34505
(defun turn-off-smartparens-mode ()turn-off-smartparens-mode890,35184
(defcustom sp-autoinsert-pair tsp-autoinsert-pair896,35312
(defcustom sp-autoinsert-quote-if-followed-by-closing-pair nilsp-autoinsert-quote-if-followed-by-closing-pair902,35471
(defcustom sp-autoskip-closing-pair 'always-endsp-autoskip-closing-pair929,36506
(defcustom sp-autoskip-opening-pair nilsp-autoskip-opening-pair959,37726
(defcustom sp-cancel-autoskip-on-backward-movement tsp-cancel-autoskip-on-backward-movement969,38068
(defcustom sp-autodelete-pair tsp-autodelete-pair980,38411
(defcustom sp-autodelete-closing-pair tsp-autodelete-closing-pair985,38542
(defcustom sp-autodelete-opening-pair tsp-autodelete-opening-pair990,38698
(defcustom sp-undo-pairs-separately nilsp-undo-pairs-separately995,38854
(defcustom sp-successive-kill-preserve-whitespace 1sp-successive-kill-preserve-whitespace1010,39438
(defcustom sp-autowrap-region tsp-autowrap-region1022,39918
(defcustom sp-wrap-show-possible-pairs tsp-wrap-show-possible-pairs1027,40041
(defcustom sp-autodelete-wrap tsp-autodelete-wrap1032,40192
(defcustom sp-wrap-repeat-last 1sp-wrap-repeat-last1040,40451
(defcustom sp-wrap-entire-symbol nilsp-wrap-entire-symbol1052,40992
(defcustom sp-wrap-from-point nilsp-wrap-from-point1075,41686
(defcustom sp-wrap-respect-direction nilsp-wrap-respect-direction1084,41994
(defcustom sp-escape-wrapped-region tsp-escape-wrapped-region1108,42649
(defcustom sp-escape-quotes-after-insert tsp-escape-quotes-after-insert1113,42797
(defcustom sp-navigate-consider-sgml-tags '(sp-navigate-consider-sgml-tags1119,42971
(defcustom sp-navigate-use-textmode-stringlike-parser '((derived . text-mode))sp-navigate-use-textmode-stringlike-parser1127,43228
(defcustom sp-navigate-consider-symbols tsp-navigate-consider-symbols1142,43830
(defcustom sp-navigate-comments-as-sexps tsp-navigate-comments-as-sexps1158,44426
(defcustom sp-navigate-skip-match `(sp-navigate-skip-match1167,44743
(defcustom sp-navigate-reindent-after-up `(sp-navigate-reindent-after-up1188,45653
(defcustom sp-navigate-reindent-after-up-in-string tsp-navigate-reindent-after-up-in-string1216,46774
(defcustom sp-navigate-close-if-unbalanced nilsp-navigate-close-if-unbalanced1225,47097
(defcustom sp-navigate-interactive-always-progress-point nilsp-navigate-interactive-always-progress-point1233,47354
(defcustom sp-sexp-prefix nilsp-sexp-prefix1246,47834
(defcustom sp-sexp-suffix nilsp-sexp-suffix1272,48650
(defcustom sp-split-sexp-always-split-as-string tsp-split-sexp-always-split-as-string1298,49463
(defcustom sp-hybrid-kill-excessive-whitespace nilsp-hybrid-kill-excessive-whitespace1345,50511
(defcustom sp-hybrid-kill-entire-symbol nilsp-hybrid-kill-entire-symbol1360,50997
(defcustom sp-comment-string nilsp-comment-string1376,51615
(defcustom sp-highlight-pair-overlay tsp-highlight-pair-overlay1388,51945
(defcustom sp-highlight-wrap-overlay tsp-highlight-wrap-overlay1393,52108
(defcustom sp-highlight-wrap-tag-overlay tsp-highlight-wrap-tag-overlay1398,52271
(defcustom sp-echo-match-when-invisible tsp-echo-match-when-invisible1403,52446
(defcustom sp-message-width 'framesp-message-width1409,52648
(defcustom sp-use-subword nilsp-use-subword1423,53246
(defun sp--delete-selection-p ()sp--delete-selection-p1435,53569
(defun sp--delete-selection-supersede-p ()sp--delete-selection-supersede-p1440,53822
(defun sp--self-insert-uses-region-strict-p ()sp--self-insert-uses-region-strict-p1455,54394
(defadvice cua-replace-region (around fix-sp-wrap activate)cua-replace-region1473,55063
(defadvice cua-delete-region (around fix-sp-delete-region activate)cua-delete-region1479,55232
(defun sp--indent-region (start end &optional column)sp--indent-region1494,55725
(defmacro sp-with-modes (arg &rest forms)sp-with-modes1503,56105
(defmacro sp--with-case-sensitive (&rest body)sp--with-case-sensitive1522,56946
(defun sp--evil-normal-state-p ()sp--evil-normal-state-p1536,57420
(defun sp--evil-motion-state-p ()sp--evil-motion-state-p1540,57581
(defun sp--evil-visual-state-p ()sp--evil-visual-state-p1544,57742
(defun sp-point-in-blank-line (&optional p)sp-point-in-blank-line1548,57903
(defun sp-point-in-blank-sexp (&optional p)sp-point-in-blank-sexp1557,58173
(defun sp-char-is-escaped-p (&optional point)sp-char-is-escaped-p1571,58687
(defun sp--syntax-ppss (&optional p)sp--syntax-ppss1582,59050
(defun sp-point-in-string (&optional p)sp-point-in-string1595,59632
(defun sp-point-in-comment (&optional p)sp-point-in-comment1608,60070
(defun sp-point-in-string-or-comment (&optional p)sp-point-in-string-or-comment1637,61426
(defun sp-point-in-symbol (&optional p)sp-point-in-symbol1645,61707
(defun sp--single-key-description (event)sp--single-key-description1659,62173
(defun sp--current-indentation ()sp--current-indentation1672,62592
(defun sp--calculate-indentation-offset (old-column old-indentation)sp--calculate-indentation-offset1678,62746
(defun sp--back-to-indentation (old-column old-indentation)sp--back-to-indentation1695,63435
(defmacro sp--keep-indentation (&rest body)sp--keep-indentation1707,63824
(defvar sp--self-insert-commandssp--self-insert-commands1728,64518
(defvar sp--special-self-insert-commandssp--special-self-insert-commands1741,65028
(defun sp--self-insert-command-p ()sp--self-insert-command-p1764,65842
(defun sp--special-self-insert-command-p ()sp--special-self-insert-command-p1768,66003
(defun sp--signum (x)sp--signum1775,66286
(defmacro sp-get (struct &rest forms)sp-get1901,72405
(defmacro sp-compare-sexps (a b &optional fun what-a what-b)sp-compare-sexps1958,74747
(defun sp-message (key &optional return)sp-message1977,75438
(defun sp--merge-prop (prop new-pair old-pair)sp--merge-prop2007,76543
(defun sp--merge-pairs (old-pair new-pair)sp--merge-pairs2036,77916
(defun sp--update-pair (new-pair old-pair)sp--update-pair2046,78189
(defun sp--update-pair-list (pair mode)sp--update-pair-list2062,78783
(defun sp--get-pair (open list)sp--get-pair2082,79654
(defun sp--get-pair-definition (open list &optional prop)sp--get-pair-definition2086,79785
(defun sp-get-pair-definition (open mode &optional prop)sp-get-pair-definition2110,80735
(defun sp-get-pair (open &optional prop)sp-get-pair2119,81064
(defun sp--merge-pair-configurations (specific &optional current)sp--merge-pair-configurations2127,81342
(defun sp-wrap-with-pair (pair)sp-wrap-with-pair2161,82847
(defface sp-pair-overlay-facesp-pair-overlay-face2571,100168
(defface sp-wrap-overlay-facesp-wrap-overlay-face2576,100298
(defface sp-wrap-overlay-opening-pairsp-wrap-overlay-opening-pair2589,100732
(defface sp-wrap-overlay-closing-pairsp-wrap-overlay-closing-pair2597,100951
(defface sp-wrap-tag-overlay-facesp-wrap-tag-overlay-face2605,101168
(defvar sp-pair-overlay-list '()sp-pair-overlay-list2610,101317
(defvar sp-wrap-overlays nilsp-wrap-overlays2619,101673
(defvar sp-wrap-tag-overlays nilsp-wrap-tag-overlays2623,101783
(defvar sp-pair-overlay-keymap (make-sparse-keymap)sp-pair-overlay-keymap2627,101905
(define-key sp-pair-overlay-keymap (kbd "C-g") 'sp-remove-active-pair-overlay)sp-pair-overlay-keymap2629,101992
(defvar sp-wrap-overlay-keymap (make-sparse-keymap)sp-wrap-overlay-keymap2631,102072
(define-key sp-wrap-overlay-keymap (kbd "C-g") 'sp-wrap-cancel)sp-wrap-overlay-keymap2633,102159
(defun sp--overlays-at (&optional pos)sp--overlays-at2635,102224
(defun sp--point-in-overlay-p (overlay)sp--point-in-overlay-p2645,102574
(defun sp--get-overlay-length (overlay)sp--get-overlay-length2650,102738
(defun sp--get-active-overlay (&optional type)sp--get-active-overlay2654,102867
(defun sp--pair-overlay-create (start end id)sp--pair-overlay-create2668,103381
(defun sp-wrap-cancel ()sp-wrap-cancel2685,104115
(defun sp-wrap--clean-overlays ()sp-wrap--clean-overlays2700,104724
(defun sp--pair-overlay-fix-highlight ()sp--pair-overlay-fix-highlight2707,104912
(defun sp--pair-overlay-post-command-handler ()sp--pair-overlay-post-command-handler2727,105744
(defun sp--reset-memoization (&rest ignored)sp--reset-memoization2748,106605
(defun sp-remove-active-pair-overlay ()sp-remove-active-pair-overlay2756,106909
(defun sp--remove-overlay (overlay)sp--remove-overlay2762,107135
(defun sp--replace-overlay-text (o string)sp--replace-overlay-text2777,107873
(defun sp--get-overlay-text (o)sp--get-overlay-text2784,108082
(defun sp-in-string-p (_id _action context)sp-in-string-p2792,108287
(defun sp-in-string-quotes-p (_id action context)sp-in-string-quotes-p2796,108422
(defun sp-in-docstring-p (_id _action context)sp-in-docstring-p2810,108817
(defun sp-in-code-p (_id _action context)sp-in-code-p2822,109355
(defun sp-in-comment-p (_id _action context)sp-in-comment-p2826,109473
(defun sp-in-math-p (_id _action _context)sp-in-math-p2830,109600
(defun sp-point-before-eol-p (_id action _context)sp-point-before-eol-p2835,109744
(defun sp-point-after-bol-p (id action _context)sp-point-after-bol-p2841,110001
(defun sp-point-at-bol-p (id action _context)sp-point-at-bol-p2847,110284
(defun sp-point-before-symbol-p (_id action _context)sp-point-before-symbol-p2853,110535
(defun sp-point-before-word-p (_id action _context)sp-point-before-word-p2859,110764
(defun sp-point-after-word-p (id action _context)sp-point-after-word-p2865,110996
(defun sp-point-before-same-p (id action _context)sp-point-before-same-p2872,111310
(defun sp-point-in-empty-line-p (id _action _context)sp-point-in-empty-line-p2878,111541
(defun sp--do-action-p (id action &optional use-inside-string)sp--do-action-p2887,111855
(defun sp--get-handler-context (type)sp--get-handler-context2919,113055
(defun sp--get-context (&optional point in-string in-comment)sp--get-context2930,113510
(defun sp--parse-insertion-spec (fun)sp--parse-insertion-spec2942,113891
(defun sp--run-function-or-insertion (fun id action context)sp--run-function-or-insertion2988,116221
(defvar sp-handler-context nilsp-handler-context3003,116630
(defun sp--run-hook-with-args (id type action &optional context-values)sp--run-hook-with-args3009,116892
(defun sp--post-command-hook-handler ()sp--post-command-hook-handler3033,118080
(defmacro sp--setaction (action &rest forms)sp--setaction3122,122367
(defun sp--post-self-insert-hook-handler ()sp--post-self-insert-hook-handler3134,122816
(defun sp--save-pre-command-state ()sp--save-pre-command-state3186,125258
(defun sp--get-pair-list ()sp--get-pair-list3194,125557
(defun sp--get-stringlike-list ()sp--get-stringlike-list3202,125832
(defun sp--get-allowed-pair-list ()sp--get-allowed-pair-list3209,126058
(defun sp--get-allowed-stringlike-list ()sp--get-allowed-stringlike-list3218,126435
(defun sp--get-pair-list-context (&optional action)sp--get-pair-list-context3227,126774
(defun sp--get-pair-list-wrap ()sp--get-pair-list-wrap3233,127026
(defun sp--wrap-regexp (string start end)sp--wrap-regexp3237,127184
(defun sp--regexp-for-group (parens &rest strings)sp--regexp-for-group3242,127390
(defun sp--strict-regexp-opt (strings &optional ignored)sp--strict-regexp-opt3249,127668
(defun sp--strict-regexp-quote (string)sp--strict-regexp-quote3269,128551
(defun sp--get-last-wraped-region (beg end open close)sp--get-last-wraped-region3298,129740
(defun sp-wrap--can-wrap-p ()sp-wrap--can-wrap-p3323,130697
(defun sp--pair-to-wrap-comparator (prop a b)sp--pair-to-wrap-comparator3332,131104
(defun sp--pair-to-wrap (&optional prefix)sp--pair-to-wrap3338,131323
(defun sp-wrap--initialize ()sp-wrap--initialize3372,133298
(defun sp-wrap--finalize (wrapping-end open close)sp-wrap--finalize3442,137098
(defun sp-wrap ()sp-wrap3475,138342
(defun sp--escape-region (chars-to-escape beg end)sp--escape-region3510,139835
(defun sp-escape-wrapped-region (id action _context)sp-escape-wrapped-region3529,140521
(defun sp-escape-quotes-after-insert (id action context)sp-escape-quotes-after-insert3551,141509
(defun sp--buffer-is-string-balanced-p ()sp--buffer-is-string-balanced-p3567,142282
(defun sp-escape-open-delimiter ()sp-escape-open-delimiter3581,142690
(defun sp-match-sgml-tags (tag)sp-match-sgml-tags3597,143449
(defun sp--is-number-cons (c)sp--is-number-cons3604,143743
(defun sp--undo-pop-to-last-insertion-node ()sp--undo-pop-to-last-insertion-node3609,143934
(defun sp--split-last-insertion-undo (len)sp--split-last-insertion-undo3620,144446
(defun sp--all-pairs-to-insert (&optional looking-fn action)sp--all-pairs-to-insert3647,145659
(defun sp--pair-to-insert-comparator (prop a b)sp--pair-to-insert-comparator3674,146921
(defun sp--pair-to-insert (&optional action)sp--pair-to-insert3689,147645
(defun sp--longest-prefix-to-insert ()sp--longest-prefix-to-insert3699,148000
(defun sp--pair-to-uninsert ()sp--pair-to-uninsert3704,148320
(defun sp--insert-pair-get-pair-info (active-pair)sp--insert-pair-get-pair-info3728,149565
(defun sp-insert-pair (&optional pair)sp-insert-pair3738,149929
(defun sp--wrap-repeat-last (active-pair)sp--wrap-repeat-last3857,156709
(defun sp--char-is-part-of-stringlike (char)sp--char-is-part-of-stringlike3899,158557
(defun sp--char-is-part-of-closing (char &optional pair-list)sp--char-is-part-of-closing3906,158821
(defun sp-skip-closing-pair (&optional last test-only)sp-skip-closing-pair3917,159290
(defun sp--inhibit-insertion-of-closing-delim (last)sp--inhibit-insertion-of-closing-delim4045,166323
(defun sp-delete-pair (&optional arg)sp-delete-pair4064,167192
(defun sp--looking-at (regexp)sp--looking-at4164,172288
(defun sp--looking-at-p (regexp)sp--looking-at-p4169,172423
(defun sp--looking-back (regexp &optional limit not-greedy)sp--looking-back4174,172564
(defun sp--looking-back-p (regexp &optional limit not-greedy)sp--looking-back-p4204,173776
(defun sp--search-backward-regexp (regexp &optional bound noerror count)sp--search-backward-regexp4209,173972
(defun sp--search-forward-regexp (regexp &optional bound noerror count)sp--search-forward-regexp4230,174776
(defun sp-get-quoted-string-bounds (&optional point)sp-get-quoted-string-bounds4236,175049
(defun sp-get-comment-bounds ()sp-get-comment-bounds4256,175734
(defun sp--get-string-or-comment-bounds ()sp--get-string-or-comment-bounds4299,177878
(defmacro sp--search-and-save-match (search-fn pattern bound res beg end str)sp--search-and-save-match4304,178047
(defmacro sp--valid-initial-delimiter-p (form)sp--valid-initial-delimiter-p4331,179130
(defun sp--elisp-skip-match (ms mb _me)sp--elisp-skip-match4350,179968
(defun sp--backslash-skip-match (ms mb _me)sp--backslash-skip-match4368,180699
(defun sp-get-paired-expression (&optional back)sp-get-paired-expression4378,181063
(defun sp--find-next-stringlike-delimiter (needle search-fn-f &optional limit skip-fn)sp--find-next-stringlike-delimiter4583,192511
(defun sp-get-stringlike-expression (&optional back)sp-get-stringlike-expression4606,193681
(defun sp--textmode-stringlike-regexp (delimiters &optional direction)sp--textmode-stringlike-regexp4645,195653
(defun sp--find-next-textmode-stringlike-delimiter (needle search-fn-f &optional limit)sp--find-next-textmode-stringlike-delimiter4667,196565
(defun sp-get-textmode-stringlike-expression (&optional back)sp-get-textmode-stringlike-expression4683,197277
(defun sp-use-textmode-stringlike-parser-p ()sp-use-textmode-stringlike-parser-p4758,201135
(defun sp-get-stringlike-or-textmode-expression (&optional back delimiter)sp-get-stringlike-or-textmode-expression4765,201499
(defun sp-get-expression (&optional back)sp-get-expression4794,202859
(defun sp-get-sexp (&optional back)sp-get-sexp4854,205906
(defun sp--get-hybrid-sexp-beg ()sp--get-hybrid-sexp-beg4924,208861
(defun sp--narrow-to-line ()sp--narrow-to-line4954,210081
(defun sp--get-hybrid-sexp-end ()sp--get-hybrid-sexp-end4958,210211
(defun sp--get-hybrid-suffix (p)sp--get-hybrid-suffix5000,211909
(defun sp-get-hybrid-sexp ()sp-get-hybrid-sexp5015,212318
(defun sp-get-enclosing-sexp (&optional arg)sp-get-enclosing-sexp5030,212847
(defun sp-get-list-items (&optional lst)sp-get-list-items5084,214840
(defun sp-get-symbol (&optional back)sp-get-symbol5193,219222
(defun sp--get-string (bounds)sp--get-string5222,220253
(defun sp-get-string (&optional back)sp-get-string5239,220888
(defun sp-get-whitespace ()sp-get-whitespace5261,221684
(defun sp--sgml-get-tag-name (match)sp--sgml-get-tag-name5273,222033
(defun sp--sgml-opening-p (tag)sp--sgml-opening-p5279,222242
(defun sp--sgml-ignore-tag (tag)sp--sgml-ignore-tag5282,222316
(defun sp-get-sgml-tag (&optional back)sp-get-sgml-tag5286,222456
(defun sp--end-delimiter-closure (pairs pair-list)sp--end-delimiter-closure5343,225077
(defun sp-restrict-to-pairs (pairs function)sp-restrict-to-pairs5365,225907
(defun sp-restrict-to-object (object function)sp-restrict-to-object5381,226457
(defun sp-restrict-to-pairs-interactive (pairs function)sp-restrict-to-pairs-interactive5404,227121
(defun sp-restrict-to-object-interactive (object function)sp-restrict-to-object-interactive5426,227862
(defun sp-prefix-tag-object (&optional arg)sp-prefix-tag-object5450,228708
(defun sp-prefix-pair-object (&optional arg)sp-prefix-pair-object5468,229358
(defun sp-prefix-symbol-object (&optional arg)sp-prefix-symbol-object5485,230011
(defun sp-prefix-save-excursion (&optional arg)sp-prefix-save-excursion5503,230654
(defun sp-get-thing (&optional back)sp-get-thing5517,231085
(defun sp-narrow-to-sexp (arg)sp-narrow-to-sexp5648,238062
(defun sp-forward-sexp (&optional arg)sp-forward-sexp5657,238397
(defun sp-backward-sexp (&optional arg)sp-backward-sexp5691,239293
(defun sp-next-sexp (&optional arg)sp-next-sexp5725,240209
(defun sp-previous-sexp (&optional arg)sp-previous-sexp5777,241930
(defun sp-forward-parallel-sexp (&optional arg)sp-forward-parallel-sexp5830,243672
(defun sp-backward-parallel-sexp (&optional arg)sp-backward-parallel-sexp5863,244747
(defun sp--raw-argument-p (arg)sp--raw-argument-p5896,245824
(defun sp--negate-argument (arg)sp--negate-argument5900,245959
(defun sp-down-sexp (&optional arg)sp-down-sexp5913,246361
(defun sp-backward-down-sexp (&optional arg)sp-backward-down-sexp5971,248279
(defun sp-beginning-of-sexp (&optional arg)sp-beginning-of-sexp6003,249310
(defun sp-end-of-sexp (&optional arg)sp-end-of-sexp6055,251051
(defun sp-beginning-of-next-sexp (&optional arg)sp-beginning-of-next-sexp6107,252806
(defun sp-beginning-of-previous-sexp (&optional arg)sp-beginning-of-previous-sexp6131,253459
(defun sp-end-of-next-sexp (&optional arg)sp-end-of-next-sexp6155,254166
(defun sp-end-of-previous-sexp (&optional arg)sp-end-of-previous-sexp6179,254777
(defun sp-up-sexp (&optional arg interactive)sp-up-sexp6208,255742
(defun sp-backward-up-sexp (&optional arg interactive)sp-backward-up-sexp6304,260127
(defvar sp-last-kill-whitespace nilsp-last-kill-whitespace6331,260914
(defun sp--kill-or-copy-region (beg end &optional dont-kill)sp--kill-or-copy-region6337,261097
(defun sp-kill-sexp (&optional arg dont-kill)sp-kill-sexp6355,261799
(defun sp--cleanup-after-kill ()sp--cleanup-after-kill6479,266439
(defun sp-backward-kill-sexp (&optional arg dont-kill)sp-backward-kill-sexp6514,267996
(defun sp-copy-sexp (&optional arg)sp-copy-sexp6531,268524
(defun sp-backward-copy-sexp (&optional arg)sp-backward-copy-sexp6540,268805
(defun sp-clone-sexp ()sp-clone-sexp6549,269125
(defun sp-kill-hybrid-sexp (arg)sp-kill-hybrid-sexp6585,270530
(defun sp-kill-whole-line ()sp-kill-whole-line6658,273354
(defun sp--transpose-objects (first second)sp--transpose-objects6680,273928
(defun sp-transpose-sexp (&optional arg)sp-transpose-sexp6690,274339
(defun sp-transpose-hybrid-sexp (&optional arg)sp-transpose-hybrid-sexp6732,275717
(defun sp-push-hybrid-sexp ()sp-push-hybrid-sexp6773,276899
(defun sp-indent-adjust-sexp ()sp-indent-adjust-sexp6798,277771
(defun sp-dedent-adjust-sexp ()sp-dedent-adjust-sexp6824,278841
(defun sp-slurp-hybrid-sexp ()sp-slurp-hybrid-sexp6871,280812
(defun sp-forward-slurp-sexp (&optional arg)sp-forward-slurp-sexp6939,283671
(defun sp-backward-slurp-sexp (&optional arg)sp-backward-slurp-sexp7053,289200
(defun sp-add-to-previous-sexp (&optional arg)sp-add-to-previous-sexp7162,294473
(defun sp-add-to-next-sexp (&optional arg)sp-add-to-next-sexp7195,295490
(defun sp-forward-barf-sexp (&optional arg)sp-forward-barf-sexp7227,296458
(defun sp-backward-barf-sexp (&optional arg)sp-backward-barf-sexp7282,298560
(defmacro sp--skip-to-symbol-1 (forward)sp--skip-to-symbol-17329,300396
(defun sp-skip-forward-to-symbol (&optional stop-at-string stop-after-string stop-inside-string)sp-skip-forward-to-symbol7391,304076
(defun sp-skip-backward-to-symbol (&optional stop-at-string stop-after-string stop-inside-string)sp-skip-backward-to-symbol7411,304614
(defun sp-skip-into-string (&optional back)sp-skip-into-string7430,305156
(defun sp-forward-symbol (&optional arg)sp-forward-symbol7443,305594
(defun sp-backward-symbol (&optional arg)sp-backward-symbol7499,307866
(defun sp-rewrap-sexp (pair &optional keep-old)sp-rewrap-sexp7552,309969
(defun sp-swap-enclosing-sexp (&optional arg)sp-swap-enclosing-sexp7605,311988
(defun sp--unwrap-sexp (sexp &optional no-cleanup)sp--unwrap-sexp7637,313047
(defun sp-change-inner ()sp-change-inner7669,314428
(defun sp-unwrap-sexp (&optional arg)sp-unwrap-sexp7686,314820
(defun sp-backward-unwrap-sexp (&optional arg)sp-backward-unwrap-sexp7711,315522
(defun sp-splice-sexp (&optional arg)sp-splice-sexp7728,315954
(defun sp--splice-sexp-do-killing (beg end expr &optional jump-end)sp--splice-sexp-do-killing7752,316623
(defun sp-splice-sexp-killing-backward (&optional arg)sp-splice-sexp-killing-backward7767,317202
(defun sp-splice-sexp-killing-forward (&optional arg)sp-splice-sexp-killing-forward7795,318170
(defun sp-splice-sexp-killing-around (&optional arg)sp-splice-sexp-killing-around7825,319084
(defalias 'sp-raise-sexp 'sp-splice-sexp-killing-around)sp-raise-sexp7935,324022
(defun sp-convolute-sexp (&optional arg)sp-convolute-sexp7937,324080
(defun sp-absorb-sexp (&optional arg)sp-absorb-sexp7996,326463
(defun sp-emit-sexp (&optional arg)sp-emit-sexp8027,327333
(defun sp-extract-before-sexp (&optional arg)sp-extract-before-sexp8062,328436
(defun sp-extract-after-sexp (&optional arg)sp-extract-after-sexp8107,330220
(defun sp-forward-whitespace (&optional arg)sp-forward-whitespace8165,332613
(defun sp-backward-whitespace (&optional arg)sp-backward-whitespace8174,332905
(defun sp-split-sexp (arg)sp-split-sexp8183,333201
(defun sp--join-sexp (prev next)sp--join-sexp8245,335419
(defun sp-join-sexp (&optional arg)sp-join-sexp8271,336478
(defun sp--next-thing-selection (&optional arg point)sp--next-thing-selection8317,338029
(defun sp-select-next-thing (&optional arg point)sp-select-next-thing8448,342869
(defun sp-select-previous-thing (&optional arg point)sp-select-previous-thing8516,345539
(defun sp-select-next-thing-exchange (&optional arg point)sp-select-next-thing-exchange8526,345913
(defun sp-select-previous-thing-exchange (&optional arg point)sp-select-previous-thing-exchange8533,346156
(defun sp-mark-sexp (&optional arg allow-extend)sp-mark-sexp8540,346411
(defun sp-delete-char (&optional arg)sp-delete-char8569,347544
(defun sp-backward-delete-char (&optional arg)sp-backward-delete-char8654,350678
(defun sp-point-in-empty-sexp (&optional pos)sp-point-in-empty-sexp8745,354172
(defun sp-point-in-empty-string (&optional pos)sp-point-in-empty-string8759,354710
(defun sp--use-subword ()sp--use-subword8775,355384
(defun sp--kill-word (&optional n)sp--kill-word8781,355612
(defun sp--forward-word (&optional n)sp--forward-word8788,355774
(defun sp--backward-word (&optional n)sp--backward-word8795,355953
(defun sp-kill-symbol (&optional arg word)sp-kill-symbol8802,356136
(defun sp-kill-word (&optional arg)sp-kill-word8835,357484
(defun sp-delete-symbol (&optional arg word)sp-delete-symbol8845,357771
(defun sp-delete-word (&optional arg)sp-delete-word8861,358267
(defun sp-backward-kill-symbol (&optional arg word)sp-backward-kill-symbol8873,358617
(defun sp-backward-kill-word (&optional arg)sp-backward-kill-word8910,360193
(defun sp-backward-delete-symbol (&optional arg word)sp-backward-delete-symbol8920,360499
(defun sp-backward-delete-word (&optional arg)sp-backward-delete-word8936,361014
(defun sp-delete-region (beg end)sp-delete-region8948,361383
(defun sp-kill-region (beg end)sp-kill-region8962,361862
(defun sp-indent-defun (&optional arg)sp-indent-defun8976,362330
(defun sp-newline ()sp-newline9017,363825
(defun sp-comment ()sp-comment9041,364522
(defgroup show-smartparens nilshow-smartparens9088,366461
(defcustom sp-show-pair-delay 0.125sp-show-pair-delay9092,366549
(defcustom sp-show-enclosing-pair-commands '(sp-show-enclosing-pair-commands9097,366708
(defcustom sp-show-pair-from-inside nilsp-show-pair-from-inside9110,367322
(defface sp-show-pair-match-facesp-show-pair-match-face9116,367529
(defface sp-show-pair-mismatch-facesp-show-pair-mismatch-face9121,367687
(defface sp-show-pair-enclosingsp-show-pair-enclosing9126,367854
(defvar sp-show-pair-idle-timer nil)sp-show-pair-idle-timer9131,367991
(defvar sp-show-pair-overlays nil)sp-show-pair-overlays9133,368029
(defvar sp-show-pair-previous-match-positions nil)sp-show-pair-previous-match-positions9135,368065
(defvar sp-show-pair-previous-point nil)sp-show-pair-previous-point9137,368117
(defvar sp-show-pair-enc-overlays nil)sp-show-pair-enc-overlays9139,368159
(define-minor-mode show-smartparens-modeshow-smartparens-mode9142,368214
(define-globalized-minor-mode show-smartparens-global-modeshow-smartparens-global-mode9159,368886
(defun turn-on-show-smartparens-mode ()turn-on-show-smartparens-mode9164,369018
(defun turn-off-show-smartparens-mode ()turn-off-show-smartparens-mode9173,369333
(defun sp-show-enclosing-pair ()sp-show-enclosing-pair9178,369459
(defun sp-highlight-current-sexp (arg)sp-highlight-current-sexp9182,369557
(defun sp-show--pair-function ()sp-show--pair-function9193,369950
(defun sp-show--pair-enc-function (&optional thing)sp-show--pair-enc-function9252,373458
(defun sp-show--pair-create-overlays (start end olen clen)sp-show--pair-create-overlays9258,373738
(defun sp-show--pair-echo-match (start end olen clen)sp-show--pair-echo-match9271,374310
(defun sp-show--pair-create-enc-overlays (start end olen clen)sp-show--pair-create-enc-overlays9307,376202
(defun sp-show--pair-create-mismatch-overlay (start len)sp-show--pair-create-mismatch-overlay9320,376801
(defun sp-show--pair-delete-overlays ()sp-show--pair-delete-overlays9330,377196
(defun sp-show--pair-delete-enc-overlays ()sp-show--pair-delete-enc-overlays9339,377522
(defadvice delete-backward-char (before sp-delete-pair-advice activate)delete-backward-char9350,377913
(defadvice haskell-indentation-delete-backward-char (before sp-delete-pair-advice activate)haskell-indentation-delete-backward-char9353,378042
(defadvice company--insert-candidate (after sp-company--insert-candidate activate)company--insert-candidate9360,378316
(defadvice hippie-expand (after sp-auto-complete-advice activate)hippie-expand9367,378595
(defvar sp--mc/cursor-specific-varssp--mc/cursor-specific-vars9371,378710
(defvar mc/cursor-specific-vars)mc/cursor-specific-vars9384,379002

elpa/smartparens-1.11.0/smartparens-haskell.el,531
(defun sp-haskell-skip-apostrophe (ms mb me)sp-haskell-skip-apostrophe49,1566
(defun sp-haskell-strict-ignore-apostrophe-after-word (_id action _context)sp-haskell-strict-ignore-apostrophe-after-word59,2015
(defun sp--inferior-haskell-mode-backward-bound-fn ()sp--inferior-haskell-mode-backward-bound-fn81,2884
(defun sp--inferior-haskell-mode-forward-bound-fn ()sp--inferior-haskell-mode-forward-bound-fn90,3356
(defun sp--setup-inferior-haskell-mode-search-bounds ()sp--setup-inferior-haskell-mode-search-bounds99,3840

elpa/smartparens-1.11.0/smartparens-text.el,165
(defun sp-text-mode-emoticon-p (_id action _context)sp-text-mode-emoticon-p50,1532
(defun sp-text-mode-skip-emoticon (ms mb me)sp-text-mode-skip-emoticon54,1666

elpa/smartparens-1.11.0/smartparens-org.el,70
(defun sp--org-skip-asterisk (ms mb me)sp--org-skip-asterisk44,1403

elpa/smartparens-1.11.0/smartparens-racket.el,0

elpa/smartparens-1.11.0/smartparens-ess.el,222
(defun sp-ess-pre-handler (id action context)sp-ess-pre-handler55,1730
(defun sp-ess-open-sexp-indent (&rest args)sp-ess-open-sexp-indent132,4946
(defun sp-ess-roxy-str-p (id action context)sp-ess-roxy-str-p145,5353

elpa/calfw-1.6/calfw-autoloads.el,0

elpa/calfw-1.6/calfw-pkg.el,327
(define-package "calfw" "1.6" "Calendar view framework on Emacs" 'nil :commit "c538d3746449b4f0e16b16aad3073d4f7379d805" :keywords '("calendar") :authors '(("SAKURAI Masashi <m.sakurai at kiwanami.net>")) :maintainer '("SAKURAI Masashi <m.sakurai at kiwanami.net>") :url "https://github.com/kiwanami/emacs-calfw")"calfw"2,31

elpa/calfw-1.6/calfw.el,20362
(defconst cfw:week-sunday    0)cfw:week-sunday66,2011
(defconst cfw:week-monday    1)cfw:week-monday67,2043
(defconst cfw:week-tuesday   2)cfw:week-tuesday68,2075
(defconst cfw:week-wednesday 3)cfw:week-wednesday69,2107
(defconst cfw:week-thursday  4)cfw:week-thursday70,2139
(defconst cfw:week-friday    5)cfw:week-friday71,2171
(defconst cfw:week-saturday  6)cfw:week-saturday72,2203
(defconst cfw:week-days      7)cfw:week-days73,2235
(defcustom cfw:fchar-vertical-line ?|cfw:fchar-vertical-line77,2281
(defcustom cfw:fchar-horizontal-line ?-cfw:fchar-horizontal-line82,2405
(defcustom cfw:fchar-junction ?+cfw:fchar-junction87,2533
(defcustom cfw:fchar-top-right-corner ?+cfw:fchar-top-right-corner92,2652
(defcustom cfw:fchar-top-left-corner ?+cfw:fchar-top-left-corner97,2785
(defcustom cfw:fchar-left-junction ?+cfw:fchar-left-junction102,2916
(defcustom cfw:fchar-right-junction ?+cfw:fchar-right-junction107,3057
(defcustom cfw:fchar-top-junction ?+cfw:fchar-top-junction112,3200
(defcustom cfw:fstring-period-start "("cfw:fstring-period-start117,3339
(defcustom cfw:fstring-period-end ")"cfw:fstring-period-end122,3470
(defcustom cfw:read-date-command 'cfw:read-date-command-simplecfw:read-date-command127,3593
(defcustom cfw:event-format-overview "%t"cfw:event-format-overview133,3836
(defcustom cfw:event-format-days-overview "%s%e%t"cfw:event-format-days-overview139,4033
(defcustom cfw:event-format-period-overview "%t%l"cfw:event-format-period-overview145,4215
(defcustom cfw:event-format-detail "%s%e%t%l%d"cfw:event-format-detail151,4399
(defcustom cfw:event-format-title "%s"cfw:event-format-title157,4599
(defcustom cfw:event-format-start-date "%Y-%m-%d"cfw:event-format-start-date163,4737
(defcustom cfw:event-format-start-time "%H:%M "cfw:event-format-start-time171,4903
(defcustom cfw:event-format-end-date "%Y-%m-%d"cfw:event-format-end-date178,5061
(defcustom cfw:event-format-end-time "- %H:%M "cfw:event-format-end-time186,5223
(defcustom cfw:event-format-location "\n  Location:    %s"cfw:event-format-location193,5379
(defcustom cfw:event-format-description "\n\n%s\n--------------------\n"cfw:event-format-description199,5543
(defcustom cfw:display-calendar-holidays tcfw:display-calendar-holidays205,5724
(defface cfw:face-titlecfw:face-title212,5852
(defface cfw:face-headercfw:face-header220,6210
(defface cfw:face-sundaycfw:face-sunday227,6458
(defface cfw:face-saturdaycfw:face-saturday234,6696
(defface cfw:face-holidaycfw:face-holiday241,6940
(defface cfw:face-gridcfw:face-grid248,7173
(defface cfw:face-default-contentcfw:face-default-content256,7372
(defface cfw:face-periodscfw:face-periods264,7589
(defface cfw:face-day-titlecfw:face-day-title271,7818
(defface cfw:face-default-daycfw:face-default-day279,8022
(defface cfw:face-annotationcfw:face-annotation286,8267
(defface cfw:face-disablecfw:face-disable291,8414
(defface cfw:face-today-titlecfw:face-today-title296,8572
(defface cfw:face-todaycfw:face-today303,8783
(defface cfw:face-selectcfw:face-select310,8988
(defvar cfw:face-item-separator-color "SlateBlue"cfw:face-item-separator-color317,9186
(defun cfw:k (key alist)cfw:k324,9308
(defun cfw:sym (&rest strings)cfw:sym328,9418
(defun cfw:rt (text face)cfw:rt332,9550
(defun cfw:tp (text prop value)cfw:tp339,9813
(defun cfw:extract-text-props (text &rest excludes)cfw:extract-text-props346,10058
(defun cfw:define-keymap (keymap-list)cfw:define-keymap359,10479
(defun cfw:trim (str)cfw:trim372,10831
(defun cfw:flatten (lst &optional revp)cfw:flatten378,10993
(defun cfw:date (month day year)cfw:date390,11293
(defun cfw:time (hours minutes)cfw:time395,11432
(defun cfw:emacs-to-calendar (time)cfw:emacs-to-calendar400,11568
(defun cfw:calendar-to-emacs (date)cfw:calendar-to-emacs405,11738
(defun cfw:month-year-equal-p (date1 date2)cfw:month-year-equal-p412,11984
(defun cfw:date-less-equal-p (d1 d2)cfw:date-less-equal-p421,12287
(defun cfw:date-between (begin end date)cfw:date-between428,12538
(defun cfw:month-year-contain-p (month year date2)cfw:month-year-contain-p433,12728
(defun cfw:date-after (date num)cfw:date-after439,12941
(defun cfw:strtime-emacs (time)cfw:strtime-emacs444,13110
(defun cfw:strtime (date)cfw:strtime448,13247
(defun cfw:parsetime-emacs (str)cfw:parsetime-emacs452,13393
(defun cfw:parse-str-time (str)cfw:parse-str-time461,13743
(defun cfw:parsetime (str)cfw:parsetime467,14035
(defun cfw:read-date-command-simple (string-date)cfw:read-date-command-simple471,14185
(defun cfw:days-diff (begin end)cfw:days-diff476,14355
(defun cfw:enumerate-days (begin end)cfw:enumerate-days481,14547
(defun cfw:week-begin-date (date)cfw:week-begin-date493,14968
(defun cfw:week-end-date (date)cfw:week-end-date499,15218
(defstruct cfw:component dest model selected viewcfw:component526,16347
(defstruct cfw:source name data update color period-bgcolor period-fgcolor opt-face opt-period-face)cfw:source547,17303
(defun cfw:source-period-bgcolor-get (source)cfw:source-period-bgcolor-get549,17405
(defun cfw:source-period-fgcolor-get (source)cfw:source-period-fgcolor-get559,17759
(defstruct cfw:eventcfw:event574,18409
(defun cfw:event-overview (event)cfw:event-overview585,18825
(defun cfw:event-days-overview (event)cfw:event-days-overview589,18980
(defun cfw:event-period-overview (event)cfw:event-period-overview593,19150
(defun cfw:event-detail (event)cfw:event-detail597,19326
(defun cfw:event-format-field-string (string)cfw:event-format-field-string601,19476
(defun cfw:event-format-field-time (time)cfw:event-format-field-time605,19617
(defun cfw:event-format-field-date (date)cfw:event-format-field-date610,19848
(defun cfw:event-format-field-number (num width)cfw:event-format-field-number616,20138
(defun cfw:event-format-field (event field args-fun)cfw:event-format-field620,20332
(defun cfw:event-format (event format-string)cfw:event-format630,20795
(defstruct cfw:destcfw:dest676,22647
(defun cfw:dest-point-min (c)cfw:dest-point-min693,23198
(defun cfw:dest-point-max (c)cfw:dest-point-max696,23264
(defun cfw:dest-clear (c)cfw:dest-clear699,23330
(defun cfw:dest-before-update (c)cfw:dest-before-update702,23394
(defun cfw:dest-after-update (c)cfw:dest-after-update706,23517
(defun cfw:dest-ol-selection-clear (dest)cfw:dest-ol-selection-clear712,23659
(defun cfw:dest-ol-selection-set (dest date)cfw:dest-ol-selection-set718,23890
(defun cfw:dest-ol-today-clear (dest)cfw:dest-ol-today-clear736,24958
(defun cfw:dest-ol-today-set (dest)cfw:dest-ol-today-set742,25151
(defconst cfw:calendar-buffer-name "*cfw-calendar*" "[internal] Default buffer name for the calendar view.")cfw:calendar-buffer-name764,26115
(defun cfw:dest-init-buffer (&optional buf width height custom-map)cfw:dest-init-buffer766,26225
(defun cfw:dest-init-region (buf mark-begin mark-end &optional width height)cfw:dest-init-region800,27601
(defun cfw:dest-region-clear (begin end)cfw:dest-region-clear824,28661
(defconst cfw:dest-background-buffer " *cfw:dest-background*")cfw:dest-background-buffer832,28843
(defun cfw:dest-init-inline (width height)cfw:dest-init-inline834,28907
(defun cfw:cp-new (dest model view &optional selected-date)cfw:cp-new858,29572
(defun cfw:cp-get-component ()cfw:cp-get-component877,30266
(defun cfw:cp-get-selected-date (component)cfw:cp-get-selected-date892,30901
(defun cfw:cp-get-contents-sources (component)cfw:cp-get-contents-sources896,31031
(defun cfw:cp-get-annotation-sources (component)cfw:cp-get-annotation-sources900,31189
(defun cfw:cp-get-view (component)cfw:cp-get-view904,31354
(defun cfw:cp-get-buffer (component)cfw:cp-get-buffer908,31470
(defun cfw:cp-displayed-date-p (component date)cfw:cp-displayed-date-p912,31629
(defun cfw:cp-move-cursor (dest date)cfw:cp-move-cursor922,32009
(defun cfw:cp-set-selected-date (component date)cfw:cp-set-selected-date931,32381
(defun cfw:cp-set-contents-sources (component sources)cfw:cp-set-contents-sources955,33387
(defun cfw:cp-set-annotation-sources (component sources)cfw:cp-set-annotation-sources961,33603
(defun cfw:cp-set-view (component view)cfw:cp-set-view967,33829
(defun cfw:cp-resize (component width height)cfw:cp-resize973,34046
(defun cfw:cp-add-update-hook (component hook)cfw:cp-add-update-hook984,34482
(defun cfw:cp-add-selection-change-hook (component hook)cfw:cp-add-selection-change-hook989,34676
(defun cfw:cp-add-click-hook (component hook)cfw:cp-add-click-hook994,34900
(defun cfw:cp-dispatch-view-impl (view)cfw:cp-dispatch-view-impl1003,35115
(defun cfw:cp-update (component)cfw:cp-update1013,35502
(defun cfw:cp-fire-click-hooks (component)cfw:cp-fire-click-hooks1033,36342
(defun cfw:cp-fire-selection-change-hooks (component)cfw:cp-fire-selection-change-hooks1040,36650
(defun cfw:cp-fire-update-hooks (component)cfw:cp-fire-update-hooks1047,37002
(defun cfw:model-abstract-new (date contents-sources annotation-sources &optional sorter)cfw:model-abstract-new1058,37329
(defun cfw:model-abstract-derived (date org-model)cfw:model-abstract-derived1069,37853
(defun cfw:model-create-updated-view-data (model view-data)cfw:model-create-updated-view-data1079,38290
(defvar cfw:default-text-sorter 'string-lessp "[internal] Default sorting criteria in a calendar cell.")cfw:default-text-sorter1086,38539
(defun cfw:model-get-holiday-by-date (date model)cfw:model-get-holiday-by-date1090,38666
(defun cfw:model-get-contents-by-date (date model)cfw:model-get-contents-by-date1094,38808
(defun cfw:model-get-annotation-by-date (date model)cfw:model-get-annotation-by-date1098,38954
(defun cfw:model-get-periods-by-date (date model)cfw:model-get-periods-by-date1102,39100
(defun cfw:model-get-sorter (model)cfw:model-get-sorter1111,39464
(defun cfw:model-get-contents-sources (model)cfw:model-get-contents-sources1117,39578
(defun cfw:model-get-annotation-sources (model)cfw:model-get-annotation-sources1121,39722
(defun cfw:model-set-init-date (date model)cfw:model-set-init-date1125,39873
(defun cfw:model-set-contents-sources (sources model)cfw:model-set-contents-sources1134,40149
(defun cfw:model-set-annotation-sources (sources model)cfw:model-set-annotation-sources1142,40416
(defun cfw:contents-get (date contents)cfw:contents-get1150,40692
(defun cfw:contents-get-internal (date contents)cfw:contents-get-internal1154,40838
(defun cfw:contents-add (date content contents)cfw:contents-add1164,41170
(defun cfw:contents-merge (begin end sources)cfw:contents-merge1176,41668
(defun cfw:periods-put-source (periods source)cfw:periods-put-source1193,42236
(defun cfw:contents-put-source (contents source)cfw:contents-put-source1210,42851
(defun cfw:annotations-merge (begin end sources)cfw:annotations-merge1231,43615
(defun cfw:render-title-month (date)cfw:render-title-month1258,44475
(defun cfw:render-title-period (begin-date end-date)cfw:render-title-period1265,44721
(defun cfw:render-title-day (date)cfw:render-title-day1282,45553
(defun cfw:render-center (width string &optional padding)cfw:render-center1290,45842
(defun cfw:render-left (width string &optional padding)cfw:render-left1303,46323
(defun cfw:render-separator (string)cfw:render-separator1313,46724
(defun cfw:render-right (width string &optional padding)cfw:render-right1335,47858
(defun cfw:render-add-right (width left right &optional padding)cfw:render-add-right1345,48259
(defun cfw:render-sort-contents (lst sorter)cfw:render-sort-contents1360,48895
(defun cfw:render-get-face-period (text default-face)cfw:render-get-face-period1364,49061
(defun cfw:render-get-face-content (text default-face)cfw:render-get-face-content1374,49557
(defun cfw:render-default-content-face (str &optional default-face)cfw:render-default-content-face1382,49931
(defun cfw:render-get-week-face (daynum &optional default-face)cfw:render-get-week-face1396,50517
(defun cfw:render-truncate (org limit-width &optional ellipsis)cfw:render-truncate1405,50764
(defface cfw:face-toolbarcfw:face-toolbar1417,51279
(defface cfw:face-toolbar-button-offcfw:face-toolbar-button-off1424,51526
(defface cfw:face-toolbar-button-oncfw:face-toolbar-button-on1431,51784
(defun cfw:render-button (title command &optional state)cfw:render-button1438,52040
(defun cfw:render-toolbar (width current-view prev-cmd next-cmd)cfw:render-toolbar1453,52683
(defun cfw:render-footer (width sources)cfw:render-footer1480,54015
(defun cfw:render-periods (date week-day periods-stack cell-width)cfw:render-periods1499,54828
(defun cfw:render-periods-title (date week-day begin end content cell-width)cfw:render-periods-title1523,56017
(defun cfw:render-periods-get-min (periods-each-days begin end)cfw:render-periods-get-min1547,57182
(defun cfw:render-periods-place (periods-each-days row period)cfw:render-periods-place1558,57708
(defun cfw:render-periods-stacks (model)cfw:render-periods-stacks1570,58298
(defun cfw:render-columns (day-columns param)cfw:render-columns1587,59069
(defvar cfw:render-line-breaker 'cfw:render-line-breaker-simplecfw:render-line-breaker1628,60795
(defun cfw:render-break-lines (lines cell-width cell-height)cfw:render-break-lines1637,61268
(defun cfw:render-add-item-separator-sign (rows)cfw:render-add-item-separator-sign1654,61952
(defun cfw:render-line-breaker-none (line w n)cfw:render-line-breaker-none1662,62257
(defun cfw:render-line-breaker-simple (string line-width max-line-num)cfw:render-line-breaker-simple1666,62361
(defun cfw:render-line-breaker-wordwrap (string line-width max-line-num)cfw:render-line-breaker-wordwrap1698,63603
(defun cfw:render-append-parts (param)cfw:render-append-parts1722,64540
(defun cfw:render-day-of-week-names (model param)cfw:render-day-of-week-names1748,65805
(defun cfw:render-calendar-cells-weeks (model param title-func)cfw:render-calendar-cells-weeks1756,66205
(defun cfw:render-rows-prop (rows)cfw:render-rows-prop1763,66561
(defun cfw:render-map-event-content (lst event-fun)cfw:render-map-event-content1772,66829
(defun cfw:render-event-overview-content (lst)cfw:render-event-overview-content1781,67163
(defun cfw:render-event-days-overview-content (lst)cfw:render-event-days-overview-content1785,67337
(defun cfw:render-event-details-content (lst)cfw:render-event-details-content1789,67526
(defun cfw:view-model-make-weeks (begin-date end-date)cfw:view-model-make-weeks1800,67786
(defun cfw:view-model-make-days (begin-date end-date)cfw:view-model-make-days1819,68479
(defun cfw:view-model-make-day-names-for-week ()cfw:view-model-make-day-names-for-week1829,68798
(defun cfw:view-model-make-day-names-for-days (begin-date end-date)cfw:view-model-make-day-names-for-days1834,69013
(defun cfw:view-model-make-holidays (date)cfw:view-model-make-holidays1846,69482
(defun cfw:view-model-make-common-data (model begin-date end-date &optional lst)cfw:view-model-make-common-data1853,69772
(defun cfw:view-model-make-common-data-for-weeks (model begin-date end-date)cfw:view-model-make-common-data-for-weeks1871,70770
(defun cfw:view-model-make-common-data-for-days (model begin-date end-date)cfw:view-model-make-common-data-for-days1882,71336
(defun cfw:view-month-model (model)cfw:view-month-model1896,71862
(defun cfw:round-cell-width (width)cfw:round-cell-width1910,72507
(defun cfw:view-month-calc-param (dest total-weeks)cfw:view-month-calc-param1917,72808
(defun cfw:view-month (component)cfw:view-month1934,73625
(defun cfw:view-week-model (model)cfw:view-week-model1976,75203
(defun cfw:view-week-calc-param (dest)cfw:view-week-calc-param1987,75732
(defun cfw:view-week (component)cfw:view-week2004,76480
(defun cfw:view-two-weeks-model-adjust (model)cfw:view-two-weeks-model-adjust2043,77895
(defun cfw:view-two-weeks-model (model)cfw:view-two-weeks-model2061,78606
(defun cfw:view-two-weeks-calc-param (dest)cfw:view-two-weeks-calc-param2075,79240
(defun cfw:view-two-weeks (component)cfw:view-two-weeks2092,79999
(defun cfw:view-day-calc-param (dest &optional num)cfw:view-day-calc-param2131,81431
(defun cfw:view-day (component)cfw:view-day2149,82197
(defun cfw:render-calendar-cells-days (model param title-func &optionalcfw:render-calendar-cells-days2185,83623
(defun cfw:render-periods-days (date periods-stack cell-width)cfw:render-periods-days2232,86160
(defun cfw:cursor-to-date (&optional pos)cfw:cursor-to-date2263,87258
(defun cfw:cursor-to-nearest-date ()cfw:cursor-to-nearest-date2268,87465
(defun cfw:find-first-date (dest)cfw:find-first-date2295,88736
(defun cfw:find-last-date (dest)cfw:find-last-date2301,88967
(defun cfw:find-by-date (dest date)cfw:find-by-date2307,89205
(defun cfw:find-all-by-date (dest date func)cfw:find-all-by-date2320,89775
(defun cfw:find-item (dest date row-count)cfw:find-item2336,90556
(defun cfw:navi-goto-date (date)cfw:navi-goto-date2351,91267
(defvar cfw:calendar-mode-mapcfw:calendar-mode-map2362,91617
(defun cfw:calendar-mode-map (&optional custom-map)cfw:calendar-mode-map2422,93495
(defvar cfw:calendar-mode-hook nilcfw:calendar-mode-hook2430,93738
(defun cfw:calendar-mode (&optional custom-map)cfw:calendar-mode2433,93852
(defun cfw:change-view-month ()cfw:change-view-month2448,94259
(defun cfw:change-view-week ()cfw:change-view-week2454,94415
(defun cfw:change-view-two-weeks ()cfw:change-view-two-weeks2460,94568
(defun cfw:change-view-day ()cfw:change-view-day2466,94736
(defun cfw:navi-next-item-command ()cfw:navi-next-item-command2472,94886
(defun cfw:navi-on-click ()cfw:navi-on-click2483,95293
(defun cfw:refresh-calendar-buffer (no-resize)cfw:refresh-calendar-buffer2492,95524
(defun cfw:navi-goto-week-begin-command ()cfw:navi-goto-week-begin-command2508,96116
(defun cfw:navi-goto-week-end-command ()cfw:navi-goto-week-end-command2516,96375
(defun cfw:navi-goto-date-command ()cfw:navi-goto-date-command2524,96629
(defun cfw:navi-goto-today-command ()cfw:navi-goto-today-command2529,96793
(defun cfw:navi-next-day-command (&optional num)cfw:navi-next-day-command2534,96941
(defun cfw:navi-previous-day-command (&optional num)cfw:navi-previous-day-command2544,97355
(defun cfw:navi-goto-first-date-command ()cfw:navi-goto-first-date-command2550,97570
(defun cfw:navi-goto-last-date-command ()cfw:navi-goto-last-date-command2557,97794
(defun cfw:navi-next-week-command (&optional num)cfw:navi-next-week-command2564,98015
(defun cfw:navi-previous-week-command (&optional num)cfw:navi-previous-week-command2570,98246
(defun cfw:navi-next-month-command (&optional num)cfw:navi-next-month-command2576,98481
(defun cfw:navi-previous-month-command (&optional num)cfw:navi-previous-month-command2593,99244
(defun cfw:show-details-command ()cfw:show-details-command2601,99489
(defvar cfw:details-buffer-name "*cfw:details*" "[internal]")cfw:details-buffer-name2611,99813
(defvar cfw:details-window-size 20 "Default detail buffer window size.")cfw:details-window-size2612,99875
(defun cfw:details-popup (text)cfw:details-popup2614,99949
(defun cfw:details-layout (date model)cfw:details-layout2634,100705
(defvar cfw:details-mode-mapcfw:details-mode-map2676,102639
(defvar cfw:details-mode-hook nil "")cfw:details-mode-hook2690,103193
(defun cfw:details-mode ()cfw:details-mode2692,103232
(defun cfw:details-kill-buffer-command ()cfw:details-kill-buffer-command2705,103595
(defun cfw:details-navi-next-command (&optional num)cfw:details-navi-next-command2716,103978
(defun cfw:details-navi-prev-command (&optional num)cfw:details-navi-prev-command2723,104185
(defun cfw:details-navi-next-item-command ()cfw:details-navi-next-item-command2730,104396
(defun cfw:details-find-item (row-count)cfw:details-find-item2736,104618
(defun* cfw:open-calendar-buffercfw:open-calendar-buffer2753,105190
(defun* cfw:create-calendar-component-buffercfw:create-calendar-component-buffer2767,105830
(defun* cfw:create-calendar-component-regioncfw:create-calendar-component-region2788,106813
(defun cfw:fill-keymap-property (begin end keymap)cfw:fill-keymap-property2819,108452
(defun* cfw:get-calendar-textcfw:get-calendar-text2835,109092
(defun cfw:open-debug-calendar ()cfw:open-debug-calendar2861,110017

elpa/groovy-mode-2.0/groovy-mode-autoloads.el,0

elpa/groovy-mode-2.0/groovy-mode-pkg.el,91
(define-package "groovy-mode" "2.0" "Major mode for Groovy source files""groovy-mode"1,0

elpa/groovy-mode-2.0/groovy-mode.el,2697
(defvar groovy-mode-syntax-tablegroovy-mode-syntax-table45,1707
(defconst groovy-type-regexpgroovy-type-regexp71,2635
(defconst groovy-declaration-keyword-regexgroovy-declaration-keyword-regex90,3071
(defconst groovy-declaration-regexpgroovy-declaration-regexp101,3372
(defconst groovy-symbol-regexpgroovy-symbol-regexp129,4073
(defconst groovy-variable-assignment-regexpgroovy-variable-assignment-regexp136,4229
(defconst groovy-class-regexpgroovy-class-regexp145,4441
(defconst groovy-interface-regexpgroovy-interface-regexp149,4631
(defconst groovy-annotation-regexpgroovy-annotation-regexp158,4881
(defvar groovy-imenu-regexpgroovy-imenu-regexp163,5028
(defalias 'groovy-parent-modegroovy-parent-mode173,5444
(defsubst groovy--in-string-p ()groovy--in-string-p176,5533
(defsubst groovy--in-string-at-p (pos)groovy--in-string-at-p179,5631
(defvar groovy-font-lock-keywordsgroovy-font-lock-keywords184,5757
(defun groovy-special-variable-search (limit)groovy-special-variable-search332,11171
(defun groovy-function-name-search (limit)groovy-function-name-search336,11349
(defun groovy-special-prop-search (limit prop-name)groovy-special-prop-search340,11521
(defun groovy--travel-parameritized-types ()groovy--travel-parameritized-types350,11918
(defun groovy-variable-assignment-search (limit)groovy-variable-assignment-search361,12314
(defun groovy-declaration-search (limit)groovy-declaration-search379,13075
(defun groovy-stringify-triple-quote ()groovy-stringify-triple-quote462,17382
(defun groovy--comment-p (pos)groovy--comment-p482,18309
(defun groovy-stringify-slashy-string ()groovy-stringify-slashy-string487,18428
(defun groovy-stringify-dollar-slashy-open ()groovy-stringify-dollar-slashy-open533,20761
(defun groovy-stringify-dollar-slashy-close ()groovy-stringify-dollar-slashy-close545,21339
(defconst groovy-syntax-propertize-functiongroovy-syntax-propertize-function562,22192
(defgroup groovy nilgroovy582,23031
(defcustom groovy-indent-offset 4groovy-indent-offset586,23099
(defcustom groovy-highlight-assignments nilgroovy-highlight-assignments591,23206
(defvar groovy-annotation-face 'groovy-annotation-face)groovy-annotation-face596,23340
(defface groovy-annotation-facegroovy-annotation-face597,23396
(defun groovy--ends-with-infix-p (str)groovy--ends-with-infix-p602,23549
(defun groovy--current-line ()groovy--current-line621,24082
(defun groovy--enclosing-blocks ()groovy--enclosing-blocks626,24237
(defconst groovy--case-regexpgroovy--case-regexp652,24934
(defun groovy-indent-line ()groovy-indent-line658,25061
(define-derived-mode groovy-mode groovy-parent-mode "Groovy"groovy-mode774,29811

elpa/groovy-mode-2.0/groovy-electric.el,1123
(defgroup groovy-electric nilgroovy-electric80,3123
(defvar groovy-electric-matching-delimeter-alistgroovy-electric-matching-delimeter-alist84,3240
(defcustom groovy-electric-expand-delimiters-list '(all)groovy-electric-expand-delimiters-list90,3356
(defcustom groovy-electric-newline-before-closing-bracket nilgroovy-electric-newline-before-closing-bracket103,3853
(define-minor-mode groovy-electric-modegroovy-electric-mode109,4059
(defun groovy-electric-setup-keymap()groovy-electric-setup-keymap127,4652
(defun groovy-electric-code-at-point-p()groovy-electric-code-at-point-p136,5080
(defun groovy-electric-string-at-point-p()groovy-electric-string-at-point-p142,5321
(defun groovy-electric-gstring-at-point-p()groovy-electric-gstring-at-point-p147,5532
(defun groovy-electric-is-last-command-event-expandable-punct-p()groovy-electric-is-last-command-event-expandable-punct-p153,5760
(defun groovy-electric-curlies(arg)groovy-electric-curlies157,5957
(defun groovy-electric-matching-char(arg)groovy-electric-matching-char168,6295
(defun groovy-electric-pound(arg)groovy-electric-pound177,6636

elpa/groovy-mode-2.0/inf-groovy.el,2072
(defcustom groovyshgroovysh92,3366
(defcustom groovysh-argsgroovysh-args102,3696
(defvar inferior-groovy-first-prompt-pattern "^groovy:.*> *"inferior-groovy-first-prompt-pattern107,3831
(defvar inferior-groovy-prompt-pattern "^groovy:.*> *"inferior-groovy-prompt-pattern110,3948
(defvar inferior-groovy-mode-hook nilinferior-groovy-mode-hook116,4077
(defvar inferior-groovy-mode-map nilinferior-groovy-mode-map119,4165
(defconst inferior-groovy-error-regexp-alistinferior-groovy-error-regexp-alist122,4243
(defun inf-groovy-keys ()inf-groovy-keys133,4736
(defvar groovy-buffer nil "current groovy (actually groovysh) process buffer.")groovy-buffer145,5391
(defun inferior-groovy-mode ()inferior-groovy-mode148,5487
(defvar inferior-groovy-filter-regexp "\\`\\s *\\S ?\\S ?\\s *\\'"inferior-groovy-filter-regexp201,7850
(defun inferior-groovy-newline ()inferior-groovy-newline205,8050
(defun groovy-input-filter (str)groovy-input-filter211,8190
(defun remove-in-string (str regexp)remove-in-string216,8399
(defun groovy-get-old-input ()groovy-get-old-input225,8789
(defun groovy-args-to-list (string)groovy-args-to-list233,9077
(defun run-groovy (cmd)run-groovy247,9668
(defun groovy-proc ()groovy-proc274,10843
(defun groovy-send-region (start end)groovy-send-region282,11176
(defun groovy-send-string (str)groovy-send-string302,11897
(defun groovy-send-definition ()groovy-send-definition321,12545
(defun groovy-send-last-sexp ()groovy-send-last-sexp330,12794
(defun switch-to-groovy (eob-p)switch-to-groovy335,12975
(defun groovy-send-string-and-go (str)groovy-send-string-and-go346,13330
(defun groovy-send-region-and-go (start end)groovy-send-region-and-go354,13533
(defun groovy-send-definition-and-go ()groovy-send-definition-and-go362,13752
(defvar groovy-source-modes '(groovy-mode)groovy-source-modes369,13951
(defvar groovy-prev-l/c-dir/file nilgroovy-prev-l/c-dir/file375,14230
(defun groovy-load-file (file-name)groovy-load-file381,14428
(defvar inf-groovy-load-hook nilinf-groovy-load-hook395,15171

elpa/with-editor-2.8.3/with-editor-autoloads.el,84
(defvar shell-command-with-editor-mode nil "\shell-command-with-editor-mode33,991

elpa/with-editor-2.8.3/with-editor.el,4546
(defvar eshell-preoutput-filter-functions)eshell-preoutput-filter-functions100,4073
(defgroup with-editor nilwith-editor104,4130
(defun with-editor-locate-emacsclient ()with-editor-locate-emacsclient109,4230
(defun with-editor-locate-emacsclient-1 (path depth)with-editor-locate-emacsclient-1121,4716
(defun with-editor-emacsclient-version (exec)with-editor-emacsclient-version145,5852
(defun with-editor-emacsclient-path ()with-editor-emacsclient-path150,6044
(defcustom with-editor-emacsclient-executable (with-editor-locate-emacsclient)with-editor-emacsclient-executable168,6889
(defcustom with-editor-sleeping-editor "\with-editor-sleeping-editor174,7160
(defcustom with-editor-finish-query-functions nilwith-editor-finish-query-functions221,8999
(defcustom with-editor-cancel-query-functions nilwith-editor-cancel-query-functions235,9645
(defcustom with-editor-mode-lighter " WE"with-editor-mode-lighter249,10291
(defvar with-editor-server-window-alist nilwith-editor-server-window-alist254,10462
(defvar with-editor-file-name-history-exclude nilwith-editor-file-name-history-exclude265,10875
(defcustom with-editor-shell-command-use-emacsclient twith-editor-shell-command-use-emacsclient271,11171
(defvar with-editor-pre-finish-hook nil)with-editor-pre-finish-hook305,12458
(defvar with-editor-pre-cancel-hook nil)with-editor-pre-cancel-hook306,12499
(defvar with-editor-post-finish-hook nil)with-editor-post-finish-hook307,12540
(defvar with-editor-post-finish-hook-1 nil)with-editor-post-finish-hook-1308,12582
(defvar with-editor-post-cancel-hook nil)with-editor-post-cancel-hook309,12626
(defvar with-editor-post-cancel-hook-1 nil)with-editor-post-cancel-hook-1310,12668
(defvar with-editor-cancel-alist nil)with-editor-cancel-alist311,12712
(defvar with-editor-show-usage t)with-editor-show-usage317,12969
(defvar with-editor-cancel-message nil)with-editor-cancel-message318,13003
(defvar with-editor-previous-winconf nil)with-editor-previous-winconf319,13043
(defvar-local with-editor--pid nil "For internal use.")with-editor--pid326,13363
(defun with-editor-finish (force)with-editor-finish329,13463
(defun with-editor-cancel (force)with-editor-cancel347,14246
(defun with-editor-return (cancel)with-editor-return367,15053
(defvar with-editor-mode-mapwith-editor-mode-map404,16503
(define-minor-mode with-editor-modewith-editor-mode417,17281
(defun with-editor-kill-buffer-noop ()with-editor-kill-buffer-noop434,17960
(defun with-editor-usage-message ()with-editor-usage-message443,18323
(defvar with-editor--envvar nil "For internal use.")with-editor--envvar455,18699
(defmacro with-editor (&rest body)with-editor457,18753
(defmacro with-editor* (envvar &rest body)with-editor*472,19378
(defun with-editor--setup ()with-editor--setup485,19892
(defun with-editor-server-window ()with-editor-server-window518,21427
(defun server-switch-buffer--with-editor-server-window-alistserver-switch-buffer--with-editor-server-window-alist525,21696
(defun start-file-process--with-editor-process-filterstart-file-process--with-editor-process-filter539,22363
(defun with-editor-set-process-filter (process filter)with-editor-set-process-filter566,23578
(defvar with-editor-filter-visit-hook nil)with-editor-filter-visit-hook583,24310
(defun with-editor-output-filter (string)with-editor-output-filter585,24354
(defun with-editor-process-filterwith-editor-process-filter607,25247
(defun server-visit-files--with-editor-file-name-history-excludeserver-visit-files--with-editor-file-name-history-exclude618,25679
(defun with-editor-export-git-editor ()with-editor-export-git-editor659,27394
(defun with-editor-export-hg-editor ()with-editor-export-hg-editor665,27577
(defun with-editor-emulate-terminal (process string)with-editor-emulate-terminal670,27742
(defvar with-editor-envvars '("EDITOR" "GIT_EDITOR" "HG_EDITOR"))with-editor-envvars675,27948
(define-minor-mode shell-command-with-editor-modeshell-command-with-editor-mode687,28471
(defun with-editor-async-shell-commandwith-editor-async-shell-command706,29251
(defun with-editor-shell-commandwith-editor-shell-command729,30261
(defun with-editor-shell-command-read-args (prompt &optional async)with-editor-shell-command-read-args740,30749
(defun shell-command--shell-command-with-editor-modeshell-command--shell-command-with-editor-mode754,31460
(defun with-editor-debug ()with-editor-debug791,33274
(defconst with-editor-font-lock-keywordswith-editor-font-lock-keywords849,36257

elpa/with-editor-2.8.3/with-editor-pkg.el,89
(define-package "with-editor" "2.8.3" "Use the Emacsclient as $EDITOR""with-editor"1,0

elpa/guess-language-20190325.1436/guess-language.el,1999
(defgroup guess-language nilguess-language55,2231
(defcustom guess-language-languages '(en de fr)guess-language-languages61,2433
(defcustom guess-language-min-paragraph-length 40guess-language-min-paragraph-length71,2869
(defvar guess-language--regexps nilguess-language--regexps79,3158
(defcustom guess-language-langcodesguess-language-langcodes82,3257
(defcustom guess-language-after-detection-functions (list #'guess-language-switch-flyspell-functionguess-language-after-detection-functions112,4383
(defcustom guess-language-trigrams-directory (file-name-directory (find-library-name "guess-language"))guess-language-trigrams-directory122,4842
(defvar guess-language-current-language nilguess-language-current-language128,5087
(defun guess-language-load-trigrams ()guess-language-load-trigrams134,5301
(defun guess-language-compile-regexps ()guess-language-compile-regexps146,5885
(defun guess-language-backward-paragraph ()guess-language-backward-paragraph154,6194
(defun guess-language-forward-paragraph ()guess-language-forward-paragraph166,6639
(defun guess-language-region (beginning end)guess-language-region175,6935
(defun guess-language-buffer ()guess-language-buffer190,7562
(defun guess-language-paragraph ()guess-language-paragraph194,7684
(defun guess-language-line ()guess-language-line200,7975
(defun guess-language ()guess-language206,8226
(defun guess-language-function (_beginning _end _doublon)guess-language-function222,9055
(defun guess-language-switch-flyspell-function (lang beginning end)guess-language-switch-flyspell-function230,9335
(defun guess-language-switch-typo-mode-function (lang _beginning _end)guess-language-switch-typo-mode-function255,10591
(defun guess-language-flyspell-buffer-wrapper (orig-fun &rest args)guess-language-flyspell-buffer-wrapper265,11008
(define-minor-mode guess-language-modeguess-language-mode272,11247
(defun guess-language-mark-lines (&optional highlight)guess-language-mark-lines300,12525

elpa/guess-language-20190325.1436/guess-language-autoloads.el,0

elpa/guess-language-20190325.1436/guess-language-pkg.el,108
(define-package "guess-language" "20190325.1436" "Robust automatic language detection""guess-language"1,0

elpa/ripgrep-0.4.0/ripgrep-pkg.el,401
(define-package "ripgrep" "0.4.0" "Front-end for ripgrep, a command line search tool" 'nil :commit "73595f1364f2117db49e1e4a49290bd6d430e345" :keywords '("ripgrep" "ack" "pt" "ag" "sift" "grep" "search") :authors '(("Nicolas Lamirault" . "nicolas.lamirault@gmail.com")) :maintainer '("Nicolas Lamirault" . "nicolas.lamirault@gmail.com") :url "https://github.com/nlamirault/ripgrep.el")"ripgrep"2,31

elpa/ripgrep-0.4.0/ripgrep.el,829
(defgroup ripgrep nilripgrep58,1632
(defcustom ripgrep-executableripgrep-executable64,1704
(defcustom ripgrep-argumentsripgrep-arguments71,1821
(defcustom ripgrep-highlight-search tripgrep-highlight-search78,1951
(defface ripgrep-hit-face '((t :inherit compilation-info))ripgrep-hit-face89,2219
(defface ripgrep-match-face '((t :inherit match))ripgrep-match-face94,2341
(defvar ripgrep-search-finished-hook nilripgrep-search-finished-hook104,2495
(defun ripgrep/run-finished-hook (buffer how-finished)ripgrep/run-finished-hook107,2596
(defvar ripgrep-search-mode-mapripgrep-search-mode-map112,2796
(define-compilation-mode ripgrep-search-mode "Ripgrep"ripgrep-search-mode128,3406
(defun ripgrep-filter ()ripgrep-filter142,4153
(defun ripgrep-regexp (regexp directory &optional args)ripgrep-regexp173,5285

elpa/ripgrep-0.4.0/ripgrep-autoloads.el,0

elpa/discover-my-major-1.0/discover-my-major-autoloads.el,0

elpa/discover-my-major-1.0/discover-my-major-pkg.el,381
(define-package "discover-my-major" "1.0" "Discover key bindings and their meaning for the current Emacs major mode" '((makey "0.2")) :commit "57d76fd21ec54706289cf9396fc871250569951e" :keywords '("discover" "help" "major-mode" "keys") :authors '(("steckerhalter")) :maintainer '("steckerhalter") :url "https://github.com/steckerhalter/discover-my-major")"discover-my-major"2,31

elpa/discover-my-major-1.0/discover-my-major.el,485
(defun dmm/major-mode-actions ()dmm/major-mode-actions34,1136
(defun dmm/major-mode-bindings (&optional buffer)dmm/major-mode-bindings38,1321
(defun dmm/doc-summary (sym)dmm/doc-summary44,1612
(defun dmm/format-binding (item)dmm/format-binding58,2246
(defun dmm/descbinds-all-sections (buffer &optional prefix menus)dmm/descbinds-all-sections67,2521
(defun dmm/get-makey-func (group-name)dmm/get-makey-func110,4252
(defun discover-my-major (arg)discover-my-major115,4465

elpa/evil-mc-0.0.3/evil-mc-scratch.el,334
(defun evil-mc-clear-buffer-undo-list ()evil-mc-clear-buffer-undo-list13,190
(defun evil-mc-clear-buffer-undo-tree ()evil-mc-clear-buffer-undo-tree18,313
(defun evil-mc-remove-all-overlays ()evil-mc-remove-all-overlays23,436
(defun evil-mc-insert-current-date-at-each-cursor ()evil-mc-insert-current-date-at-each-cursor29,570

elpa/evil-mc-0.0.3/evil-mc-cursor-make.el,3357
(defun evil-mc-cursor-is-of-type (type)evil-mc-cursor-is-of-type15,293
(defun evil-mc-cursor-is-bar ()evil-mc-cursor-is-bar20,465
(defun evil-mc-cursor-is-hbar ()evil-mc-cursor-is-hbar24,588
(defun evil-mc-get-cursor-face ()evil-mc-get-cursor-face28,715
(defun evil-mc-get-hbar-cursor-face ()evil-mc-get-hbar-cursor-face32,850
(defun evil-mc-get-bar-cursor-face ()evil-mc-get-bar-cursor-face36,994
(defun evil-mc-set-cursor-face (face)evil-mc-set-cursor-face40,1134
(defun evil-mc-print-cursors-info (&optional msg)evil-mc-print-cursors-info44,1249
(defun evil-mc-cursor-overlay (start end)evil-mc-cursor-overlay52,1599
(defun evil-mc-setup-cursor-overlay (overlay default-setup)evil-mc-setup-cursor-overlay59,1880
(defun evil-mc-setup-cursor-overlay-at-eol (overlay face)evil-mc-setup-cursor-overlay-at-eol67,2282
(defun evil-mc-setup-cursor-overlay-inline (overlay face)evil-mc-setup-cursor-overlay-inline71,2474
(defun evil-mc-cursor-overlay-at-eol (pos)evil-mc-cursor-overlay-at-eol75,2630
(defun evil-mc-cursor-overlay-inline (pos)evil-mc-cursor-overlay-inline81,2889
(defun evil-mc-cursor-overlay-at-pos (&optional pos)evil-mc-cursor-overlay-at-pos87,3157
(defun evil-mc-sort-cursors ()evil-mc-sort-cursors96,3430
(defun evil-mc-copy-cursor-state (from &optional to)evil-mc-copy-cursor-state104,3692
(defun evil-mc-read-cursor-state (&optional state)evil-mc-read-cursor-state114,4028
(defun evil-mc-write-cursor-state (state)evil-mc-write-cursor-state124,4423
(defun evil-mc-insert-cursor-into-list (cursor cursor-list)evil-mc-insert-cursor-into-list131,4692
(defun evil-mc-insert-cursor (cursor)evil-mc-insert-cursor147,5428
(defun evil-mc-delete-cursor (cursor)evil-mc-delete-cursor154,5755
(defun evil-mc-delete-all-regions ()evil-mc-delete-all-regions159,5953
(defun evil-mc-undo-cursor (cursor)evil-mc-undo-cursor166,6219
(defun evil-mc-get-default-cursor ()evil-mc-get-default-cursor174,6534
(defun evil-mc-make-cursor-at-pos (pos &optional source-cursor)evil-mc-make-cursor-at-pos186,6925
(defun evil-mc-undo-cursor-at-pos (pos)evil-mc-undo-cursor-at-pos199,7520
(defun evil-mc-find-prev-cursor (&optional pos)evil-mc-find-prev-cursor214,8108
(defun evil-mc-find-next-cursor (&optional pos)evil-mc-find-next-cursor224,8496
(defun evil-mc-find-first-cursor ()evil-mc-find-first-cursor234,8884
(defun evil-mc-find-last-cursor ()evil-mc-find-last-cursor238,8998
(defun evil-mc-make-pattern (text whole-word)evil-mc-make-pattern242,9119
(defun evil-mc-set-pattern-for-range (range whole-word)evil-mc-set-pattern-for-range248,9379
(defun evil-mc-set-pattern ()evil-mc-set-pattern260,9913
(defun evil-mc-make-cursors-for-all ()evil-mc-make-cursors-for-all272,10451
(defun evil-mc-goto-cursor (cursor create)evil-mc-goto-cursor285,10936
(defun evil-mc-goto-match (direction create)evil-mc-goto-match298,11467
(defun evil-mc-find-and-goto-cursor (find create)evil-mc-find-and-goto-cursor329,13034
(defun evil-mc-find-and-goto-match (direction create)evil-mc-find-and-goto-match344,13690
(defun evil-mc-run-cursors-before ()evil-mc-run-cursors-before351,13983
(defun evil-mc-run-cursors-after (had-cursors)evil-mc-run-cursors-after356,14161
(defun evil-mc-cursors-before ()evil-mc-cursors-before361,14374
(defun evil-mc-cursors-after ()evil-mc-cursors-after368,14682

elpa/evil-mc-0.0.3/evil-mc-common.el,632
(defun evil-mc-get-object-property (obj prop)evil-mc-get-object-property9,116
(defun evil-mc-put-object-property (obj prop val &rest properties)evil-mc-put-object-property14,260
(defun evil-mc-put-object-properties (obj &rest properties)evil-mc-put-object-properties24,702
(defun evil-mc-column-number (pos)evil-mc-column-number31,920
(defun evil-mc-message (format-string &rest args)evil-mc-message37,1054
(defun evil-mc-ends-with-newline-p (text)evil-mc-ends-with-newline-p44,1364
(defun evil-mc-goto-char (pos)evil-mc-goto-char48,1486
(defun evil-mc-starts-with-digit-p (vector)evil-mc-starts-with-digit-p55,1775

elpa/evil-mc-0.0.3/evil-mc-known-commands.el,61
(defvar evil-mc-known-commandsevil-mc-known-commands10,209

elpa/evil-mc-0.0.3/evil-mc-cursor-state.el,2949
(defun evil-mc-get-cursor-variables (&optional categories)evil-mc-get-cursor-variables11,198
(defun evil-mc-get-cursor-property (cursor name)evil-mc-get-cursor-property24,844
(defun evil-mc-put-cursor-property (cursor &rest properties)evil-mc-put-cursor-property28,1008
(defun evil-mc-get-cursor-properties (cursor properties)evil-mc-get-cursor-properties32,1220
(defun evil-mc-get-cursor-overlay (cursor)evil-mc-get-cursor-overlay38,1447
(defun evil-mc-put-cursor-overlay (cursor overlay)evil-mc-put-cursor-overlay42,1572
(defun evil-mc-get-cursor-last-position (cursor)evil-mc-get-cursor-last-position46,1724
(defun evil-mc-put-cursor-last-position (cursor last-position)evil-mc-put-cursor-last-position50,1867
(defun evil-mc-get-cursor-undo-stack (cursor)evil-mc-get-cursor-undo-stack54,2055
(defun evil-mc-put-cursor-undo-stack (cursor undo-stack)evil-mc-put-cursor-undo-stack58,2189
(defun evil-mc-get-cursor-undo-stack-pointer (cursor)evil-mc-get-cursor-undo-stack-pointer62,2359
(defun evil-mc-put-cursor-undo-stack-pointer (cursor undo-stack-pointer)evil-mc-put-cursor-undo-stack-pointer66,2517
(defun evil-mc-get-cursor-region (cursor)evil-mc-get-cursor-region70,2735
(defun evil-mc-put-cursor-region (cursor region)evil-mc-put-cursor-region74,2857
(defun evil-mc-get-cursor-kill-ring (cursor)evil-mc-get-cursor-kill-ring78,3003
(defun evil-mc-put-cursor-kill-ring (cursor kill-ring)evil-mc-put-cursor-kill-ring82,3136
(defun evil-mc-get-cursor-kill-ring-yank-pointer (cursor)evil-mc-get-cursor-kill-ring-yank-pointer86,3302
(defun evil-mc-put-cursor-kill-ring-yank-pointer (cursor kill-ring-yank-pointer)evil-mc-put-cursor-kill-ring-yank-pointer91,3477
(defun evil-mc-get-cursor-temporary-goal-column (cursor)evil-mc-get-cursor-temporary-goal-column96,3724
(defun evil-mc-put-cursor-temporary-goal-column (cursor temporary-goal-column)evil-mc-put-cursor-temporary-goal-column100,3891
(defun evil-mc-get-cursor-evil-markers-alist (cursor)evil-mc-get-cursor-evil-markers-alist104,4127
(defun evil-mc-put-cursor-evil-markers-alist (cursor evil-markers-alist)evil-mc-put-cursor-evil-markers-alist108,4285
(defun evil-mc-get-cursor-evil-jump-list (cursor)evil-mc-get-cursor-evil-jump-list112,4503
(defun evil-mc-put-cursor-evil-jump-list (cursor evil-jump-list)evil-mc-put-cursor-evil-jump-list116,4649
(defun evil-mc-get-cursor-mark-ring (cursor)evil-mc-get-cursor-mark-ring120,4843
(defun evil-mc-put-cursor-mark-ring (cursor mark-ring)evil-mc-put-cursor-mark-ring124,4976
(defun evil-mc-get-cursor-mark-active (cursor)evil-mc-get-cursor-mark-active128,5142
(defun evil-mc-put-cursor-mark-active (cursor mark-active)evil-mc-put-cursor-mark-active132,5281
(defun evil-mc-get-cursor-start (cursor)evil-mc-get-cursor-start136,5459
(defun evil-mc-get-cursor-end (cursor)evil-mc-get-cursor-end141,5608
(defun evil-mc-delete-cursor-overlay (cursor)evil-mc-delete-cursor-overlay146,5751

elpa/evil-mc-0.0.3/evil-mc-region.el,2165
(defun evil-mc-put-region-property (region &rest properties)evil-mc-put-region-property11,176
(defun evil-mc-get-region-property (region name)evil-mc-get-region-property16,388
(defun evil-mc-get-region-overlay (region)evil-mc-get-region-overlay20,557
(defun evil-mc-get-region-mark (region)evil-mc-get-region-mark24,686
(defun evil-mc-get-region-point (region)evil-mc-get-region-point28,806
(defun evil-mc-get-region-start (region)evil-mc-get-region-start32,929
(defun evil-mc-get-region-end (region)evil-mc-get-region-end37,1115
(defun evil-mc-get-region-type (region)evil-mc-get-region-type42,1295
(defun evil-mc-line-region-p (region)evil-mc-line-region-p46,1415
(defun evil-mc-char-region-p (region)evil-mc-char-region-p50,1537
(defun evil-mc-put-region-overlay (region overlay)evil-mc-put-region-overlay54,1659
(defun evil-mc-put-region-mark (region mark)evil-mc-put-region-mark58,1825
(defun evil-mc-put-region-point (region point)evil-mc-put-region-point62,1973
(defun evil-mc-put-region-type (region type)evil-mc-put-region-type66,2127
(defun evil-mc-get-pos-at-bol (pos)evil-mc-get-pos-at-bol70,2275
(defun evil-mc-get-pos-at-eol (pos)evil-mc-get-pos-at-eol74,2423
(defun evil-mc-calculate-region-bounds (prev-mark prev-point point)evil-mc-calculate-region-bounds78,2565
(defun evil-mc-region-overlay (start end)evil-mc-region-overlay87,3048
(defun evil-mc-char-region-overlay (mark point)evil-mc-char-region-overlay94,3334
(defun evil-mc-line-region-overlay (mark point)evil-mc-line-region-overlay103,3695
(defun evil-mc-create-region-overlay (region)evil-mc-create-region-overlay116,4320
(defun evil-mc-update-region-overlay (region)evil-mc-update-region-overlay125,4694
(defun evil-mc-create-region (mark point type)evil-mc-create-region129,4885
(defun evil-mc-update-region (region &optional point)evil-mc-update-region136,5230
(defun evil-mc-change-region-type (region new-type)evil-mc-change-region-type149,5917
(defun evil-mc-exchange-region-point-and-mark (region)evil-mc-exchange-region-point-and-mark154,6139
(defun evil-mc-delete-region-overlay (region)evil-mc-delete-region-overlay163,6599

elpa/evil-mc-0.0.3/evil-mc.el,1009
(defcustom evil-mc-mode-lineevil-mc-mode-line45,1045
(defvar evil-mc-key-mapevil-mc-key-map56,1455
(define-minor-mode evil-mc-modeevil-mc-mode82,2744
(define-globalized-minor-mode global-evil-mc-modeglobal-evil-mc-mode99,3176
(defun evil-mc-initialize ()evil-mc-initialize103,3277
(defun turn-on-evil-mc-mode ()turn-on-evil-mc-mode108,3391
(defun turn-off-evil-mc-mode ()turn-off-evil-mc-mode114,3522
(defun evil-mc-define-vars ()evil-mc-define-vars119,3641
(defun evil-mc-initialize-vars ()evil-mc-initialize-vars136,4328
(defun evil-mc-pause-incompatible-modes ()evil-mc-pause-incompatible-modes147,4661
(defun evil-mc-resume-incompatible-modes ()evil-mc-resume-incompatible-modes154,4913
(defun evil-mc-initialize-hooks ()evil-mc-initialize-hooks159,5086
(defun evil-mc-teardown-hooks ()evil-mc-teardown-hooks166,5494
(defun evil-mc-initialize-active-state ()evil-mc-initialize-active-state173,5902
(defun evil-mc-teardown-active-state ()evil-mc-teardown-active-state187,6554

elpa/evil-mc-0.0.3/evil-mc-vars.el,3256
(defgroup evil-mc nilevil-mc12,182
(defun evil-mc-cursor-color (state-cursor)evil-mc-cursor-color17,293
(defface evil-mc-cursor-default-faceevil-mc-cursor-default-face24,498
(defface evil-mc-region-faceevil-mc-region-face29,637
(defface evil-mc-cursor-bar-faceevil-mc-cursor-bar-face34,746
(defface evil-mc-cursor-hbar-faceevil-mc-cursor-hbar-face39,942
(defcustom evil-mc-cursor-overlay-priority 201evil-mc-cursor-overlay-priority44,1149
(defcustom evil-mc-region-overlay-priority 99evil-mc-region-overlay-priority49,1279
(defvar evil-mc-cursor-variablesevil-mc-cursor-variables54,1408
(defun evil-mc-known-command-p (cmd)evil-mc-known-command-p133,4200
(defun evil-mc-has-cursors-p ()evil-mc-has-cursors-p139,4452
(defun evil-mc-has-command-p ()evil-mc-has-command-p143,4561
(defun evil-mc-has-pattern-p ()evil-mc-has-pattern-p147,4683
(defun evil-mc-executing-command-p ()evil-mc-executing-command-p151,4786
(defun evil-mc-recording-command-p ()evil-mc-recording-command-p155,4917
(defun evil-mc-executing-debug-p ()evil-mc-executing-debug-p159,5027
(defun evil-mc-recording-debug-p ()evil-mc-recording-debug-p163,5166
(defun evil-mc-debug (state executing recording)evil-mc-debug167,5305
(defun evil-mc-executing-debug-on ()evil-mc-executing-debug-on172,5552
(defun evil-mc-executing-debug-off ()evil-mc-executing-debug-off177,5678
(defun evil-mc-recording-debug-on ()evil-mc-recording-debug-on182,5808
(defun evil-mc-recording-debug-off ()evil-mc-recording-debug-off187,5934
(defun evil-mc-all-debug-on ()evil-mc-all-debug-on192,6064
(defun evil-mc-all-debug-off ()evil-mc-all-debug-off197,6160
(defun evil-mc-print-pattern ()evil-mc-print-pattern202,6260
(defun evil-mc-print-cursor-list ()evil-mc-print-cursor-list207,6381
(defun evil-mc-print-command ()evil-mc-print-command214,6613
(defun evil-mc-frozen-p ()evil-mc-frozen-p219,6761
(defun evil-mc-pause-cursors ()evil-mc-pause-cursors223,6855
(defun evil-mc-resume-cursors ()evil-mc-resume-cursors228,6960
(defun evil-mc-clear-pattern ()evil-mc-clear-pattern233,7070
(defun evil-mc-clear-command ()evil-mc-clear-command237,7172
(defun evil-mc-clear-command-count ()evil-mc-clear-command-count241,7266
(defun evil-mc-clear-cursor-list ()evil-mc-clear-cursor-list245,7378
(defun evil-mc-update-cursor-list (cursors)evil-mc-update-cursor-list249,7476
(defun evil-mc-clear-executing-command ()evil-mc-clear-executing-command253,7609
(defun evil-mc-clear-recording-command ()evil-mc-clear-recording-command257,7744
(defun evil-mc-clear-executing-debug ()evil-mc-clear-executing-debug261,7879
(defun evil-mc-clear-recording-debug ()evil-mc-clear-recording-debug265,8008
(defun evil-mc-clear-paused-modes ()evil-mc-clear-paused-modes269,8137
(defun evil-mc-clear-cursor-state ()evil-mc-clear-cursor-state273,8257
(defun evil-mc-get-pattern ()evil-mc-get-pattern277,8377
(defun evil-mc-get-pattern-text ()evil-mc-get-pattern-text281,8488
(defun evil-mc-get-pattern-start ()evil-mc-get-pattern-start285,8615
(defun evil-mc-get-pattern-end ()evil-mc-get-pattern-end289,8749
(defun evil-mc-get-pattern-length ()evil-mc-get-pattern-length293,8879
(defun evil-mc-get-cursor-count ()evil-mc-get-cursor-count298,9044

elpa/evil-mc-0.0.3/evil-mc-pkg.el,81
(define-package "evil-mc" "0.0.3" "Multiple cursors for evil-mode""evil-mc"1,0

elpa/evil-mc-0.0.3/evil-mc-command-record.el,1829
(defun evil-mc-command-p (cmd)evil-mc-command-p14,268
(defun evil-mc-command-reset ()evil-mc-command-reset18,398
(defun evil-mc-get-command-property (name)evil-mc-get-command-property23,538
(defun evil-mc-set-command-property (&rest properties)evil-mc-set-command-property27,687
(defun evil-mc-add-command-property (&rest properties)evil-mc-add-command-property32,951
(defun evil-mc-get-command-keys-vector (&optional name)evil-mc-get-command-keys-vector47,1633
(defun evil-mc-get-command-keys-count ()evil-mc-get-command-keys-count51,1812
(defun evil-mc-get-command-keys-string (&optional name)evil-mc-get-command-keys-string55,1958
(defun evil-mc-get-command-undo-list-pointer-pre ()evil-mc-get-command-undo-list-pointer-pre64,2389
(defun evil-mc-get-command-undo-list-pointer-post ()evil-mc-get-command-undo-list-pointer-post69,2615
(defun evil-mc-command-undoable-p ()evil-mc-command-undoable-p74,2842
(defun evil-mc-undo-command-p ()evil-mc-undo-command-p79,3084
(defun evil-mc-get-command-name ()evil-mc-get-command-name83,3250
(defun evil-mc-get-command-state ()evil-mc-get-command-state88,3390
(defun evil-mc-get-command-last-input ()evil-mc-get-command-last-input93,3551
(defun evil-mc-save-keys (flag pre-name post-name keys)evil-mc-save-keys98,3717
(defun evil-mc-update-command-count (keys-vector)evil-mc-update-command-count104,3963
(defun evil-mc-add-current-count (keys-vector)evil-mc-add-current-count111,4319
(defun evil-mc-begin-command-save ()evil-mc-begin-command-save120,4699
(defun evil-mc-save-keys-motion (flag)evil-mc-save-keys-motion144,6054
(defun evil-mc-save-keys-operator (flag)evil-mc-save-keys-operator155,6518
(defun evil-mc-finish-command-save ()evil-mc-finish-command-save167,7041
(defun evil-mc-finalize-command ()evil-mc-finalize-command187,8015

elpa/evil-mc-0.0.3/evil-mc-autoloads.el,62
(defvar global-evil-mc-mode nil "\global-evil-mc-mode17,411

elpa/evil-mc-0.0.3/evil-mc-command-execute.el,3347
(defmacro evil-mc-define-handler (command &rest body)evil-mc-define-handler19,414
(defmacro evil-mc-save-window-scroll (&rest forms)evil-mc-save-window-scroll54,1686
(defmacro evil-mc-define-visual-handler (command &rest body)evil-mc-define-visual-handler69,2196
(defmacro evil-mc-with-region (region form &rest body)evil-mc-with-region79,2523
(defmacro evil-mc-with-region-or-execute-macro (region add-register &rest body)evil-mc-with-region-or-execute-macro89,2907
(defun evil-mc-execute-hippie-expand ()evil-mc-execute-hippie-expand97,3217
(defun evil-mc-execute-evil-find-char ()evil-mc-execute-evil-find-char101,3313
(defun evil-mc-execute-evil-snipe ()evil-mc-execute-evil-snipe105,3456
(defun evil-mc-execute-evil-snipe-reverse ()evil-mc-execute-evil-snipe-reverse109,3563
(defun evil-mc-execute-evil-commentary ()evil-mc-execute-evil-commentary113,3696
(defun evil-mc-execute-evil-join ()evil-mc-execute-evil-join119,3948
(defun evil-mc-execute-evil-shift (cmd)evil-mc-execute-evil-shift125,4143
(defun evil-mc-execute-evil-surround-region ()evil-mc-execute-evil-surround-region133,4407
(defun evil-mc-execute-change-case (cmd)evil-mc-execute-change-case143,4741
(defun evil-mc-execute-evil-replace ()evil-mc-execute-evil-replace150,5015
(defun evil-mc-execute-evil-exchange ()evil-mc-execute-evil-exchange158,5289
(defun evil-mc-execute-with-region-or-macro (cmd)evil-mc-execute-with-region-or-macro164,5517
(defun evil-mc-execute-with-region-or-pos (cmd)evil-mc-execute-with-region-or-pos171,5837
(defun evil-mc-execute-evil-change-line ()evil-mc-execute-evil-change-line182,6204
(defun evil-mc-execute-evil-yank ()evil-mc-execute-evil-yank186,6348
(defun evil-mc-execute-evil-substitute ()evil-mc-execute-evil-substitute193,6651
(defun evil-mc-execute-evil-change ()evil-mc-execute-evil-change201,6942
(defun evil-mc-execute-evil-paste ()evil-mc-execute-evil-paste211,7349
(defun evil-mc-execute-macro (&optional add-register)evil-mc-execute-macro241,8753
(defun evil-mc-execute-evil-goto-line ()evil-mc-execute-evil-goto-line250,9080
(defun evil-mc-execute-call ()evil-mc-execute-call257,9294
(defun evil-mc-execute-call-with-last-input ()evil-mc-execute-call-with-last-input261,9435
(defun evil-mc-execute-call-with-count ()evil-mc-execute-call-with-count265,9637
(defun evil-mc-execute-not-supported ()evil-mc-execute-not-supported269,9814
(defun evil-mc-clear-current-region ()evil-mc-clear-current-region274,10001
(defun evil-mc-update-current-region ()evil-mc-update-current-region278,10093
(defun evil-mc-execute-visual-region (type)evil-mc-execute-visual-region282,10213
(defun evil-mc-get-command-keys-vector-with-register ()evil-mc-get-command-keys-vector-with-register291,10572
(defun evil-mc-get-command-handler (cmd state)evil-mc-get-command-handler511,17901
(defun evil-mc-get-state-variables (handler)evil-mc-get-state-variables528,18724
(defun evil-mc-get-clear-variables (handler)evil-mc-get-clear-variables535,19091
(defun evil-mc-get-var-name-value (var)evil-mc-get-var-name-value540,19314
(defun evil-mc-execute-for (cursor state-variables clear-variables)evil-mc-execute-for544,19506
(defun evil-mc-execute-for-all ()evil-mc-execute-for-all588,21282
(defun evil-mc-execute-for-all-cursors (cmd)evil-mc-execute-for-all-cursors623,23119

elpa/evil-mc-0.0.3/evil-mc-undo.el,335
(defmacro evil-mc-with-single-undo (&rest body)evil-mc-with-single-undo14,256
(defun evil-mc-has-undo-boundary-p (&optional undo-list)evil-mc-has-undo-boundary-p36,1117
(defun evil-mc-ensure-one-undo-step ()evil-mc-ensure-one-undo-step41,1362
(defun evil-mc-remove-last-undo-boundary ()evil-mc-remove-last-undo-boundary48,1670

elpa/evil-mc-0.0.3/evil-mc-setup.el,332
(defun evil-mc-pause-smartchr-for-mode (mode)evil-mc-pause-smartchr-for-mode15,343
(defun evil-mc-before-cursors-setup-hook ()evil-mc-before-cursors-setup-hook25,811
(defun evil-mc-after-cursors-teardown-hook ()evil-mc-after-cursors-teardown-hook35,1284
(defvar evil-mc-mode-line-prefix "ⓜ"evil-mc-mode-line-prefix43,1623

elpa/docker-1.3.0/docker-process.el,232
(defcustom docker-command "docker"docker-command30,988
(defcustom docker-arguments '()docker-arguments35,1093
(defcustom docker-run-as-root nildocker-run-as-root40,1223
(defun docker-run (action &rest args)docker-run45,1317

elpa/docker-1.3.0/docker-compose.el,2334
(defgroup docker-compose nildocker-compose34,1063
(defcustom docker-compose-arguments '()docker-compose-arguments38,1151
(defcustom docker-compose-run-arguments '("--rm")docker-compose-run-arguments43,1315
(defcustom docker-compose-run-buffer-name-function 'docker-compose-make-buffer-namedocker-compose-run-buffer-name-function48,1489
(defun docker-compose--run (action &rest args)docker-compose--run53,1685
(defun docker-compose--run-async (action &rest args)docker-compose--run-async62,2059
(defun docker-compose-parse (line)docker-compose-parse71,2508
(defun docker-compose-entries ()docker-compose-entries76,2716
(defun docker-compose-refresh ()docker-compose-refresh82,2951
(defun docker-compose-services ()docker-compose-services86,3083
(defun docker-compose-read-services-names ()docker-compose-read-services-names90,3215
(defun docker-compose-read-service-name ()docker-compose-read-service-name94,3380
(defun docker-compose-read-log-level (&rest _ignore)docker-compose-read-log-level98,3510
(defun docker-compose-read-directory (&rest _ignore)docker-compose-read-directory102,3671
(defun docker-compose-read-compose-file (&rest _ignore)docker-compose-read-compose-file106,3806
(defun docker-compose-make-buffer-name (action args)docker-compose-make-buffer-name110,3994
(defun docker-compose-build (services args)docker-compose-build115,4185
(defun docker-compose-create (services args)docker-compose-create121,4439
(defun docker-compose-down (services args)docker-compose-down127,4697
(defun docker-compose-exec (service command args)docker-compose-exec133,4947
(defun docker-compose-logs (services args)docker-compose-logs139,5242
(defun docker-compose-pull (services args)docker-compose-pull145,5492
(defun docker-compose-push (services args)docker-compose-push151,5736
(defun docker-compose-restart (services args)docker-compose-restart157,5980
(defun docker-compose-rm (services args)docker-compose-rm163,6236
(defun docker-compose-run (service command args)docker-compose-run169,6472
(defun docker-compose-start (services args)docker-compose-start175,6763
(defun docker-compose-stop (services args)docker-compose-stop181,7011
(defun docker-compose-up (services args)docker-compose-up187,7255
(defmacro docker-compose--all (command)docker-compose--all192,7482

elpa/docker-1.3.0/docker-utils.el,802
(defun docker-utils-get-marked-items ()docker-utils-get-marked-items31,999
(defun docker-utils-get-marked-items-ids ()docker-utils-get-marked-items-ids42,1398
(defun docker-utils-setup-popup (val def)docker-utils-setup-popup46,1547
(defun docker-utils-select-if-empty (&optional arg)docker-utils-select-if-empty51,1779
(defun docker-utils-set-then-call (variable func)docker-utils-set-then-call58,2028
(defun docker-utils-pop-to-buffer (name)docker-utils-pop-to-buffer65,2239
(defmacro docker-utils-with-buffer (name &rest body)docker-utils-with-buffer72,2513
(defun docker-utils-unit-multiplier (str)docker-utils-unit-multiplier84,2934
(defun docker-utils-human-size-to-bytes (str)docker-utils-human-size-to-bytes88,3090
(defun docker-utils-podman-p ()docker-utils-podman-p95,3399

elpa/docker-1.3.0/docker-autoloads.el,0

elpa/docker-1.3.0/docker-pkg.el,74
(define-package "docker" "1.3.0" "Emacs interface to Docker""docker"1,0

elpa/docker-1.3.0/docker-volume.el,884
(defgroup docker-volume nildocker-volume36,1103
(defcustom docker-volume-default-sort-key '("Driver" . nil)docker-volume-default-sort-key40,1189
(defun docker-volume-parse (line)docker-volume-parse52,1639
(defun docker-volume-entries ()docker-volume-entries60,1956
(defun docker-volume-refresh ()docker-volume-refresh67,2321
(defun docker-volume-read-name ()docker-volume-read-name71,2441
(defun docker-volume-dired (name)docker-volume-dired76,2584
(defun docker-volume-rm (name)docker-volume-rm83,2840
(defun docker-volume-dired-selection ()docker-volume-dired-selection88,2989
(defun docker-volume-rm-selection ()docker-volume-rm-selection95,3212
(defvar docker-volume-mode-mapdocker-volume-mode-map124,4218
(defun docker-volumes ()docker-volumes134,4553
(define-derived-mode docker-volume-mode tabulated-list-mode "Volumes Menu"docker-volume-mode141,4713

elpa/docker-1.3.0/docker-container.el,3688
(defgroup docker-container nildocker-container37,1159
(defcustom docker-container-ls-arguments '("--all")docker-container-ls-arguments41,1251
(defcustom docker-container-shell-file-name shell-file-namedocker-container-shell-file-name46,1430
(defcustom docker-container-default-sort-key '("Image" . nil)docker-container-default-sort-key52,1635
(defun docker-container--read-shell (&optional read-shell-name)docker-container--read-shell69,2290
(defun docker-container-parse (line)docker-container-parse73,2498
(defun docker-container-entries ()docker-container-entries82,2908
(defun docker-container-refresh ()docker-container-refresh89,3371
(defun docker-container-read-name ()docker-container-read-name93,3500
(defun docker-container-attach (container args)docker-container-attach98,3656
(defun docker-container-eshell (container)docker-container-eshell104,3888
(defun docker-container-find-directory (container directory)docker-container-find-directory117,4492
(defalias 'docker-container-dired 'docker-container-find-directory)docker-container-dired126,4906
(defun docker-container-find-file (container file)docker-container-find-file129,4990
(defun docker-container-shell (container &optional read-shell)docker-container-shell139,5393
(defun docker-diff (name)docker-diff154,6099
(defun docker-inspect (name)docker-inspect161,6319
(defun docker-kill (name &optional signal)docker-kill169,6568
(defun docker-logs (name &optional follow)docker-logs175,6793
(defun docker-pause (name)docker-pause188,7246
(defun docker-rename (container name)docker-rename194,7406
(defun docker-restart (name &optional timeout)docker-restart200,7608
(defun docker-rm (name &optional force link volumes)docker-rm208,7938
(defun docker-start (name)docker-start220,8457
(defun docker-stop (name &optional timeout)docker-stop226,8617
(defun docker-unpause (name)docker-unpause234,8938
(defun docker-container-attach-selection ()docker-container-attach-selection239,9089
(defun docker-container-cp-from-selection (container-path host-path)docker-container-cp-from-selection251,9665
(defun docker-container-cp-to-selection (host-path container-path)docker-container-cp-to-selection257,9975
(defun docker-container-diff-selection ()docker-container-diff-selection263,10284
(defun docker-container-eshell-selection ()docker-container-eshell-selection270,10567
(defun docker-container-find-file-selection (path)docker-container-find-file-selection276,10772
(defun docker-container-inspect-selection ()docker-container-inspect-selection282,11014
(defun docker-container-kill-selection ()docker-container-kill-selection290,11330
(defun docker-container-logs-selection ()docker-container-logs-selection297,11568
(defun docker-container-pause-selection ()docker-container-pause-selection305,11909
(defun docker-container-rename-selection ()docker-container-rename-selection312,12151
(defun docker-container-restart-selection ()docker-container-restart-selection320,12404
(defun docker-container-rm-selection ()docker-container-rm-selection327,12654
(defun docker-container-shell-selection (prefix)docker-container-shell-selection334,12884
(defun docker-container-start-selection ()docker-container-start-selection340,13103
(defun docker-container-stop-selection ()docker-container-stop-selection347,13345
(defun docker-container-unpause-selection ()docker-container-unpause-selection354,13583
(defvar docker-container-mode-mapdocker-container-mode-map492,18972
(defun docker-containers ()docker-containers514,19988
(define-derived-mode docker-container-mode tabulated-list-mode "Containers Menu"docker-container-mode521,20160

elpa/docker-1.3.0/docker-network.el,765
(defgroup docker-network nildocker-network36,1105
(defcustom docker-network-default-sort-key '("Name" . nil)docker-network-default-sort-key40,1193
(defun docker-network-parse (line)docker-network-parse53,1688
(defun docker-network-entries ()docker-network-entries61,2007
(defun docker-network-refresh ()docker-network-refresh68,2399
(defun docker-network-read-name ()docker-network-read-name72,2522
(defun docker-network-rm (name)docker-network-rm77,2669
(defun docker-network-rm-selection ()docker-network-rm-selection82,2822
(defvar docker-network-mode-mapdocker-network-mode-map111,3829
(defun docker-networks ()docker-networks120,4113
(define-derived-mode docker-network-mode tabulated-list-mode "Networks Menu"docker-network-mode127,4277

elpa/docker-1.3.0/docker-machine.el,1976
(defgroup docker-machine nildocker-machine34,1045
(defcustom docker-machine-default-sort-key '("Name" . nil)docker-machine-default-sort-key38,1133
(defun docker-machine-parse (line)docker-machine-parse56,1819
(defun docker-machine-entries ()docker-machine-entries61,2020
(defun docker-machine-refresh ()docker-machine-refresh68,2433
(defun docker-machine-read-name ()docker-machine-read-name72,2556
(defun docker-machine-run (action &rest args)docker-machine-run76,2688
(defun docker-machine-config (name)docker-machine-config83,2960
(defun docker-machine-create (name driver)docker-machine-create89,3154
(defun docker-machine-env (name)docker-machine-env95,3340
(defun docker-machine-env-export (line)docker-machine-env-export103,3636
(defun docker-machine-inspect (name)docker-machine-inspect111,3926
(defun docker-machine-ip (name)docker-machine-ip117,4116
(defun docker-machine-kill (name)docker-machine-kill123,4292
(defun docker-machine-restart (name)docker-machine-restart129,4455
(defun docker-machine-rm (name &optional force)docker-machine-rm135,4646
(defun docker-machine-start (name)docker-machine-start141,4914
(defun docker-machine-status (name)docker-machine-status147,5080
(defun docker-machine-stop (name)docker-machine-stop153,5260
(defun docker-machine-upgrade (name)docker-machine-upgrade159,5442
(defun docker-machine-env-selection ()docker-machine-env-selection164,5631
(defun docker-machine-restart-selection ()docker-machine-restart-selection173,5960
(defun docker-machine-rm-selection ()docker-machine-rm-selection180,6220
(defun docker-machine-start-selection ()docker-machine-start-selection187,6460
(defun docker-machine-stop-selection ()docker-machine-stop-selection194,6712
(defvar docker-machine-mode-mapdocker-machine-mode-map259,9106
(defun docker-machines ()docker-machines273,9649
(define-derived-mode docker-machine-mode tabulated-list-mode "Machines Menu"docker-machine-mode280,9813

elpa/docker-1.3.0/docker.el,0

elpa/docker-1.3.0/docker-image.el,1465
(defgroup docker-image nildocker-image36,1101
(defcustom docker-image-default-sort-key '("Repository" . nil)docker-image-default-sort-key40,1186
(defcustom docker-image-run-arguments '("-i" "-t" "--rm")docker-image-run-arguments55,1755
(defun docker-image-parse (line)docker-image-parse60,1933
(defun docker-image-entries ()docker-image-entries70,2439
(defun docker-image-refresh ()docker-image-refresh77,2850
(defun docker-image-read-name ()docker-image-read-name81,2967
(defun docker-image-human-size-predicate (a b)docker-image-human-size-predicate85,3092
(defun docker-pull (name &optional all)docker-pull92,3352
(defun docker-push (name)docker-push98,3579
(defun docker-rmi (name &optional force no-prune)docker-rmi104,3728
(defun docker-tag (image name)docker-tag113,4078
(defun docker-image-inspect-selection ()docker-image-inspect-selection118,4240
(defun docker-image-pull-selection ()docker-image-pull-selection126,4546
(defun docker-image-push-selection ()docker-image-push-selection133,4774
(defun docker-image-rm-selection ()docker-image-rm-selection139,4983
(defun docker-image-run-selection (command)docker-image-run-selection146,5205
(defun docker-image-tag-selection ()docker-image-tag-selection158,5796
(defvar docker-image-mode-mapdocker-image-mode-map242,8872
(defun docker-images ()docker-images256,9401
(define-derived-mode docker-image-mode tabulated-list-mode "Images Menu"docker-image-mode263,9557

elpa/docker-1.3.0/docker-group.el,35
(defgroup docker nildocker26,932

elpa/alert-1.3/alert-pkg.el,378
(define-package "alert" "1.3" "Growl-style notification system for Emacs" '((gntp "0.1") (log4e "0.3.0") (cl-lib "0.5")) :commit "9f329be87820474925f29b52a1131084c8ea95b9" :keywords '("notification" "emacs" "message") :authors '(("John Wiegley" . "jwiegley@gmail.com")) :maintainer '("John Wiegley" . "jwiegley@gmail.com") :url "https://github.com/jwiegley/alert")"alert"2,31

elpa/alert-1.3/alert-autoloads.el,0

elpa/alert-1.3/alert.el,4260
(defgroup alert nilalert204,8642
(defcustom alert-severity-facesalert-severity-faces208,8732
(defcustom alert-severity-colorsalert-severity-colors219,9098
(defcustom alert-log-severity-functionsalert-log-severity-functions231,9478
(defcustom alert-log-levelalert-log-level242,9820
(defcustom alert-reveal-idle-time 15alert-reveal-idle-time248,9929
(defcustom alert-persist-idle-time 900alert-persist-idle-time253,10070
(defcustom alert-fade-time 5alert-fade-time259,10275
(defcustom alert-hide-all-notifications nilalert-hide-all-notifications265,10464
(defcustom alert-log-messages talert-log-messages270,10597
(defcustom alert-default-iconalert-default-icon275,10726
(defvar alert-styles nil)alert-styles282,10932
(defun alert-styles-radio-type (widget-name)alert-styles-radio-type284,10959
(defcustom alert-default-style 'messagealert-default-style298,11488
(defun alert-configuration-type ()alert-configuration-type305,11749
(defcustom alert-user-configuration nilalert-user-configuration375,14880
(defvar alert-internal-configuration nilalert-internal-configuration380,15033
(defface alert-urgent-facealert-urgent-face384,15170
(defface alert-high-facealert-high-face389,15275
(defface alert-moderate-facealert-moderate-face394,15384
(defface alert-normal-facealert-normal-face399,15494
(defface alert-low-facealert-low-face404,15571
(defface alert-trivial-facealert-trivial-face409,15668
(defun alert-define-style (name &rest plist)alert-define-style414,15776
(defun alert-log-notify (info)alert-log-notify545,21302
(defun alert-legacy-log-notify (mes sev len)alert-legacy-log-notify563,22006
(defun alert-log-clear (info)alert-log-clear574,22398
(defun alert-message-notify (info)alert-message-notify590,22946
(defun alert-message-remove (_info)alert-message-remove598,23211
(defun alert-momentary-notify (info)alert-momentary-notify605,23440
(defun alert-fringe-notify (info)alert-fringe-notify626,24269
(defun alert-fringe-restore (_info)alert-fringe-restore630,24441
(defun alert-mode-line-notify (info)alert-mode-line-notify638,24695
(defun alert-mode-line-restore (_info)alert-mode-line-restore644,24972
(defcustom alert-growl-command (executable-find "growlnotify")alert-growl-command653,25248
(defcustom alert-growl-prioritiesalert-growl-priorities659,25445
(defsubst alert-encode-string (str)alert-encode-string670,25730
(defun alert-growl-notify (info)alert-growl-notify673,25822
(defcustom alert-libnotify-command (executable-find "notify-send")alert-libnotify-command693,26691
(defcustom alert-libnotify-additional-argsalert-libnotify-additional-args700,26895
(defcustom alert-libnotify-prioritiesalert-libnotify-priorities707,27058
(defun alert-libnotify-notify (info)alert-libnotify-notify718,27376
(defcustom alert-gntp-iconalert-gntp-icon768,29753
(defcustom alert-notifications-prioritiesalert-notifications-priorities792,30616
(defvar alert-notifications-ids (make-hash-table :test #'equal)alert-notifications-ids803,30934
(defcustom alert-notifier-command (executable-find "terminal-notifier")alert-notifier-command836,32638
(defcustom alert-notifier-default-iconalert-notifier-default-icon842,32837
(defun alert-notifier-notify (info)alert-notifier-notify849,33059
(defun alert-osx-notifier-notify (info)alert-osx-notifier-notify861,33618
(defun alert-frame-notify (info)alert-frame-notify870,34069
(defun alert-frame-remove (info)alert-frame-remove892,35143
(defun x-urgency-hint (frame arg &optional source)x-urgency-hint898,35384
(defun x-urgent (&optional arg)x-urgent916,36065
(defun alert-x11-notify (_info)alert-x11-notify925,36405
(defcustom alert-toaster-default-iconalert-toaster-default-icon933,36587
(defcustom alert-toaster-command (executable-find "toast")alert-toaster-command943,36881
(defun alert-toaster-notify (info)alert-toaster-notify950,37058
(defun alert-buffer-status (&optional buffer)alert-buffer-status968,37841
(defvar alert-active-alerts nil)alert-active-alerts981,38281
(defun alert-remove-when-active (remover info)alert-remove-when-active983,38315
(defun alert-remove-on-command ()alert-remove-on-command994,38744
(defun alert-send-notificationalert-send-notification1004,39096

elpa/docker-tramp-0.1/docker-tramp-compat.el,187
(defconst tramp-device-escape-sequence-regexp "\e[[0-9]+n"tramp-device-escape-sequence-regexp39,1413
(defun tramp-wait-for-output (proc &optional timeout)tramp-wait-for-output42,1531

elpa/docker-tramp-0.1/docker-tramp-pkg.el,98
(define-package "docker-tramp" "0.1" "TRAMP integration for docker containers""docker-tramp"1,0

elpa/docker-tramp-0.1/docker-tramp-autoloads.el,292
(defvar docker-tramp-docker-options nil "\docker-tramp-docker-options12,315
(defconst docker-tramp-completion-function-alist '((docker-tramp--parse-running-containers "")) "\docker-tramp-completion-function-alist17,450
(defconst docker-tramp-method "docker" "\docker-tramp-method20,624

elpa/docker-tramp-0.1/docker-tramp.el,776
(defgroup docker-tramp nildocker-tramp69,2466
(defcustom docker-tramp-docker-executable "docker"docker-tramp-docker-executable76,2735
(defcustom docker-tramp-docker-options nildocker-tramp-docker-options82,2873
(defcustom docker-tramp-use-names nildocker-tramp-use-names87,2994
(defconst docker-tramp-completion-function-alistdocker-tramp-completion-function-alist93,3126
(defconst docker-tramp-method "docker"docker-tramp-method98,3318
(defun docker-tramp--running-containers ()docker-tramp--running-containers101,3400
(defun docker-tramp--parse-running-containers (&optional ignored)docker-tramp--parse-running-containers109,3796
(defun docker-tramp-cleanup ()docker-tramp-cleanup119,4224
(defun docker-tramp-add-method ()docker-tramp-add-method135,4899

elpa/elisp-refs-1.3/elisp-refs.el,4345
(defun elisp-refs--format-int (integer)elisp-refs--format-int42,1388
(defsubst elisp-refs--start-pos (end-pos)elisp-refs--start-pos55,1780
(defun elisp-refs--sexp-positions (buffer start-pos end-pos)elisp-refs--sexp-positions60,1927
(defun elisp-refs--read-buffer-form ()elisp-refs--read-buffer-form87,3129
(defvar elisp-refs--path nilelisp-refs--path100,3647
(defun elisp-refs--read-all-buffer-forms (buffer)elisp-refs--read-all-buffer-forms104,3777
(defun elisp-refs--walk (buffer form start-pos end-pos symbol match-p &optional path)elisp-refs--walk123,4585
(defun elisp-refs--function-p (symbol form path)elisp-refs--function-p176,6984
(defun elisp-refs--macro-p (symbol form path)elisp-refs--macro-p216,8104
(defalias 'elisp-refs--special-p 'elisp-refs--macro-p)elisp-refs--special-p246,8938
(defun elisp-refs--variable-p (symbol form path)elisp-refs--variable-p248,8994
(defun elisp-refs--read-and-find (buffer symbol match-p)elisp-refs--read-and-find282,10048
(defun elisp-refs--read-and-find-symbol (buffer symbol)elisp-refs--read-and-find-symbol297,10697
(defun elisp-refs--filter-obarray (pred)elisp-refs--filter-obarray313,11241
(defun elisp-refs--loaded-paths ()elisp-refs--loaded-paths322,11573
(defun elisp-refs--contents-buffer (path)elisp-refs--contents-buffer336,12187
(defvar elisp-refs--highlighting-bufferelisp-refs--highlighting-buffer354,13128
(defun elisp-refs--syntax-highlight (str)elisp-refs--syntax-highlight360,13329
(defun elisp-refs--replace-tabs (string)elisp-refs--replace-tabs379,14046
(defun elisp-refs--lines (string)elisp-refs--lines385,14272
(defun elisp-refs--map-lines (string fn)elisp-refs--map-lines399,14713
(defun elisp-refs--unindent-rigidly (string)elisp-refs--unindent-rigidly406,14973
(defun elisp-refs--containing-lines (buffer start-pos end-pos)elisp-refs--containing-lines423,15633
(defun elisp-refs--find-file (button)elisp-refs--find-file457,17154
(define-button-type 'elisp-refs-path-buttonelisp-refs-path-button462,17300
(defun elisp-refs--path-button (path)elisp-refs--path-button467,17421
(defun elisp-refs--describe (button)elisp-refs--describe476,17655
(define-button-type 'elisp-refs-describe-buttonelisp-refs-describe-button489,18124
(defun elisp-refs--describe-button (symbol kind)elisp-refs--describe-button494,18247
(defun elisp-refs--pluralize (number thing)elisp-refs--pluralize506,18617
(defun elisp-refs--format-count (symbol ref-count file-countelisp-refs--format-count513,18844
(defun elisp-refs--show-results (symbol description resultselisp-refs--show-results532,19927
(defun elisp-refs--loaded-bufs ()elisp-refs--loaded-bufs568,21191
(defun elisp-refs--search-1 (bufs match-fn)elisp-refs--search-1572,21364
(defun elisp-refs--search (symbol description match-fn &optional path-prefix)elisp-refs--search602,22581
(defun elisp-refs--completing-read-symbol (prompt &optional filter)elisp-refs--completing-read-symbol626,23755
(defun elisp-refs-function (symbol &optional path-prefix)elisp-refs-function643,24370
(defun elisp-refs-macro (symbol &optional path-prefix)elisp-refs-macro668,25374
(defun elisp-refs-special (symbol &optional path-prefix)elisp-refs-special693,26369
(defun elisp-refs-variable (symbol &optional path-prefix)elisp-refs-variable709,27057
(defun elisp-refs-symbol (symbol &optional path-prefix)elisp-refs-symbol729,27974
(define-derived-mode elisp-refs-mode special-mode "Refs"elisp-refs-mode744,28587
(defun elisp-refs-visit-match ()elisp-refs-visit-match747,28687
(defun elisp-refs--move-to-match (direction)elisp-refs--move-to-match779,29775
(defun elisp-refs-prev-match ()elisp-refs-prev-match812,31135
(defun elisp-refs-next-match ()elisp-refs-next-match817,31277
(define-key elisp-refs-mode-map (kbd "<tab>") #'elisp-refs-next-match)elisp-refs-mode-map824,31502
(define-key elisp-refs-mode-map (kbd "<backtab>") #'elisp-refs-prev-match)elisp-refs-mode-map825,31573
(define-key elisp-refs-mode-map (kbd "n") #'elisp-refs-next-match)elisp-refs-mode-map826,31648
(define-key elisp-refs-mode-map (kbd "p") #'elisp-refs-prev-match)elisp-refs-mode-map827,31715
(define-key elisp-refs-mode-map (kbd "q") #'kill-this-buffer)elisp-refs-mode-map828,31782
(define-key elisp-refs-mode-map (kbd "RET") #'elisp-refs-visit-match)elisp-refs-mode-map829,31844

elpa/elisp-refs-1.3/elisp-refs-autoloads.el,0

elpa/elisp-refs-1.3/elisp-refs-pkg.el,319
(define-package "elisp-refs" "1.3" "find callers of elisp functions or macros" '((dash "2.12.0") (loop "1.2") (s "1.11.0")) :commit "0b6fcdee29d8156ef37477f4e128a148e295c62b" :keywords '("lisp") :authors '(("Wilfred Hughes" . "me@wilfred.me.uk")) :maintainer '("Wilfred Hughes" . "me@wilfred.me.uk"))"elisp-refs"2,31

elpa/wgrep-2.3.0/wgrep.el,5814
(defgroup wgrep nilwgrep92,3080
(defcustom wgrep-change-readonly-file nilwgrep-change-readonly-file105,3209
(defcustom wgrep-enable-key "\C-c\C-p"wgrep-enable-key110,3338
(defcustom wgrep-auto-save-buffer nilwgrep-auto-save-buffer116,3498
(defcustom wgrep-too-many-file-length 10wgrep-too-many-file-length121,3653
(defvar wgrep-setup-hook nilwgrep-setup-hook126,3768
(defvar wgrep-mode-map nil)wgrep-mode-map129,3839
(defvar wgrep-readonly-state nil)wgrep-readonly-state135,3896
(defvar wgrep-prepared nil)wgrep-prepared138,3982
(defvar wgrep-sibling-buffer nil)wgrep-sibling-buffer141,4056
(defvar wgrep-original-mode-map nil)wgrep-original-mode-map144,4142
(defvar wgrep-inhibit-modification-hook nil)wgrep-inhibit-modification-hook147,4234
(defvar wgrep-auto-apply-disk nilwgrep-auto-apply-disk149,4280
(defvar wgrep-acceptable-modes nil)wgrep-acceptable-modes152,4387
(defvar auto-coding-regexp-alist)auto-coding-regexp-alist157,4563
(defconst wgrep-default-line-header-regexpwgrep-default-line-header-regexp173,5020
(define-error 'wgrep-error "wgrep error")wgrep-error189,5310
(defvar wgrep-line-file-regexp wgrep-default-line-header-regexpwgrep-line-file-regexp195,5394
(defvar wgrep-results-parser 'wgrep-parse-command-resultswgrep-results-parser202,5604
(defvar wgrep-header/footer-parser 'wgrep-prepare-header/footerwgrep-header/footer-parser210,6072
(defun wgrep-string-replace-bom (string cs)wgrep-string-replace-bom223,6298
(defun wgrep-delete-whole-line ()wgrep-delete-whole-line239,7064
(defun wgrep-goto-line (line)wgrep-goto-line242,7150
(defun wgrep-process-exited-p ()wgrep-process-exited-p246,7235
(defun wgrep-check-file (file)wgrep-check-file255,7403
(defun wgrep-cleanup-overlays (beg end)wgrep-cleanup-overlays265,7633
(defun wgrep-make-overlay (beg end)wgrep-make-overlay270,7774
(defun wgrep-file-overlays ()wgrep-file-overlays275,7894
(defun wgrep-edit-field-overlays ()wgrep-edit-field-overlays284,8128
(defun wgrep-construct-filename-property (filename)wgrep-construct-filename-property295,8417
(defun wgrep-goto-grep-line (file number)wgrep-goto-grep-line298,8514
(defun wgrep-get-old-text (file number)wgrep-get-old-text329,9689
(defun wgrep-to-original-mode ()wgrep-to-original-mode341,10031
(defun wgrep-goto-first-found ()wgrep-goto-first-found351,10408
(defun wgrep-goto-end-of-found ()wgrep-goto-end-of-found361,10638
(defun wgrep-cleanup-temp-buffer ()wgrep-cleanup-temp-buffer371,10869
(defun wgrep-clone-to-temp-buffer ()wgrep-clone-to-temp-buffer380,11174
(defun wgrep-set-readonly-area (state)wgrep-set-readonly-area391,11581
(defun wgrep-prepare-context ()wgrep-prepare-context426,13139
(defun wgrep-prepare-context-while (filename line direction fprop flen)wgrep-prepare-context-while440,13593
(defun wgrep-parse-command-results ()wgrep-parse-command-results456,14300
(defun wgrep-current-file-and-linum ()wgrep-current-file-and-linum496,16084
(defun wgrep-restore-from-temp-buffer ()wgrep-restore-from-temp-buffer504,16348
(defun wgrep-prepare-to-edit ()wgrep-prepare-to-edit530,17231
(defun wgrep-prepare-header/footer ()wgrep-prepare-header/footer540,17534
(defun wgrep-set-header/footer-read-only (state)wgrep-set-header/footer-read-only560,18160
(defun wgrep-editing-overlay (&optional start end)wgrep-editing-overlay577,18756
(defun wgrep-after-change-function (beg end leng-before)wgrep-after-change-function628,20654
(defun wgrep-put-change-face (beg end)wgrep-put-change-face637,20928
(defun wgrep-display-physical-data ()wgrep-display-physical-data657,21527
(defun wgrep-set-result (ov face &optional message)wgrep-set-result666,21794
(defun wgrep-put-done-result (ov)wgrep-put-done-result671,21958
(defun wgrep-put-reject-result (ov error-data)wgrep-put-reject-result674,22035
(defun wgrep-put-reject-result-all (editor error-data)wgrep-put-reject-result-all678,22213
(defun wgrep-after-save-hook ()wgrep-after-save-hook683,22385
(defun wgrep-put-overlay-to-file-buffer (beg end)wgrep-put-overlay-to-file-buffer688,22539
(defun wgrep-let-destructive-overlay (ov)wgrep-let-destructive-overlay702,23013
(defun wgrep-replace-to-new-line (new-text)wgrep-replace-to-new-line710,23268
(defun wgrep-flush-whole-line ()wgrep-flush-whole-line722,23675
(defun wgrep-gather-editor ()wgrep-gather-editor730,23955
(defun wgrep-compute-transaction ()wgrep-compute-transaction764,25496
(defun wgrep-compute-linum-to-marker (edits)wgrep-compute-linum-to-marker790,26386
(defun wgrep-commit-edits (editor)wgrep-commit-edits799,26663
(defun wgrep-commit-file (editor)wgrep-commit-file832,27823
(defun wgrep-apply-change (marker old new)wgrep-apply-change868,29096
(defface wgrep-facewgrep-face896,29996
(defface wgrep-delete-facewgrep-delete-face908,30305
(defface wgrep-file-facewgrep-file-face920,30625
(defface wgrep-reject-facewgrep-reject-face932,30935
(defface wgrep-done-facewgrep-done-face945,31252
(defun wgrep-maybe-echo-error-at-point ()wgrep-maybe-echo-error-at-point957,31543
(defun wgrep-finish-edit ()wgrep-finish-edit972,31988
(defun wgrep-exit ()wgrep-exit1019,33671
(defun wgrep-abort-changes ()wgrep-abort-changes1028,33938
(defun wgrep-remove-change (beg end)wgrep-remove-change1036,34184
(defun wgrep-remove-all-change ()wgrep-remove-all-change1042,34357
(defun wgrep-toggle-readonly-area ()wgrep-toggle-readonly-area1047,34500
(defun wgrep-change-to-wgrep-mode ()wgrep-change-to-wgrep-mode1071,35377
(defun wgrep-save-all-buffers ()wgrep-save-all-buffers1097,36281
(defun wgrep-mark-deletion ()wgrep-mark-deletion1115,36808
(defun wgrep-setup-internal ()wgrep-setup-internal1154,38109
(defun wgrep-setup ()wgrep-setup1164,38487
(defun wgrep-unload-function ()wgrep-unload-function1191,39424

elpa/wgrep-2.3.0/wgrep-autoloads.el,0

elpa/wgrep-2.3.0/wgrep-pkg.el,387
(define-package "wgrep" "2.3.0" "Writable grep buffer and apply the changes to files" 'nil :commit "36c5e8d0e03bc16b19d30a603730065f74b5b767" :keywords '("grep" "edit" "extensions") :authors '(("Masahiro Hayashi" . "mhayashi1120@gmail.com")) :maintainer '("Masahiro Hayashi" . "mhayashi1120@gmail.com") :url "http://github.com/mhayashi1120/Emacs-wgrep/raw/master/wgrep.el")"wgrep"2,31

elpa/epl-0.9/epl-autoloads.el,0

elpa/epl-0.9/epl.el,3901
(defsubst epl--package-desc-p (package)epl--package-desc-p145,4941
(define-error 'epl-error "EPL error")epl-error154,5195
(define-error 'epl-invalid-package "Invalid EPL package" 'epl-error)epl-invalid-package156,5234
(define-error 'epl-invalid-package-file "Invalid EPL package file"epl-invalid-package-file158,5304
(defun epl-package-dir ()epl-package-dir163,5420
(defun epl-default-package-dir ()epl-default-package-dir167,5502
(defun epl-change-package-dir (directory)epl-change-package-dir171,5636
(defvar epl--load-path-before-initialize nilepl--load-path-before-initialize178,5818
(defun epl-initialize (&optional no-activate)epl-initialize181,5909
(defalias 'epl-refresh 'package-refresh-contents)epl-refresh188,6145
(defun epl-add-archive (name url)epl-add-archive190,6196
(defun epl-reset ()epl-reset194,6327
(defun epl-requirement-version-string (requirement)epl-requirement-version-string221,7086
(defmacro epl-package-as-description (var &rest body)epl-package-as-description244,7757
(defsubst epl-package--package-desc-p (package)epl-package--package-desc-p258,8277
(defun epl-package-version (package)epl-package-version262,8445
(defun epl-package-version-string (package)epl-package-version-string273,8877
(defun epl-package-summary (package)epl-package-summary277,9025
(defsubst epl-requirement--from-req (req)epl-requirement--from-req285,9356
(defun epl-package-requirements (package)epl-package-requirements292,9666
(defun epl-package-directory (package)epl-package-directory299,9914
(defun epl-package-->= (pkg1 pkg2)epl-package-->=312,10416
(defun epl-package--from-package-desc (package-desc)epl-package--from-package-desc317,10609
(defun epl-package--parse-info (info)epl-package--parse-info328,11069
(defun epl-package-from-buffer (&optional buffer)epl-package-from-buffer340,11633
(defun epl-package-from-lisp-file (file-name)epl-package-from-lisp-file353,12104
(defun epl-package-from-tar-file (file-name)epl-package-from-tar-file367,12620
(defun epl-package-from-file (file-name)epl-package-from-file392,13877
(defun epl-package--parse-descriptor-requirement (requirement)epl-package--parse-descriptor-requirement401,14180
(defun epl-package-from-descriptor-file (descriptor-file)epl-package-from-descriptor-file408,14529
(defun epl-package-installed-p (package &optional min-version)epl-package-installed-p442,16059
(defun epl--parse-built-in-entry (entry)epl--parse-built-in-entry454,16650
(defun epl-built-in-packages ()epl-built-in-packages464,17105
(defun epl-find-built-in-package (name)epl-find-built-in-package474,17471
(defun epl-package-outdated-p (package)epl-package-outdated-p487,17939
(defun epl--parse-package-list-entry (entry)epl--parse-package-list-entry508,18841
(defun epl-installed-packages ()epl-installed-packages529,19701
(defsubst epl--filter-outdated-packages (packages)epl--filter-outdated-packages535,19877
(defun epl-outdated-packages ()epl-outdated-packages543,20112
(defsubst epl--find-package-in-list (name list)epl--find-package-in-list549,20303
(defun epl-find-installed-package (name)epl-find-installed-package557,20550
(defun epl-find-installed-packages (name)epl-find-installed-packages568,20931
(defun epl-available-packages ()epl-available-packages578,21248
(defun epl-find-available-packages (name)epl-find-available-packages585,21478
(defun epl-find-upgrades (&optional packages)epl-find-upgrades606,22043
(defalias 'epl-built-in-p 'package-built-in-p)epl-built-in-p629,22987
(defun epl-install-file (file)epl-install-file634,23061
(defun epl--kill-autoload-buffer (package)epl--kill-autoload-buffer643,23469
(defun epl-package-install (package &optional force)epl-package-install650,23841
(defun epl-package-delete (package)epl-package-delete663,24390
(defun epl-upgrade (&optional packages preserve-obsolete)epl-upgrade691,25840

elpa/epl-0.9/epl-pkg.el,315
(define-package "epl" "0.9" "Emacs Package Library" '((cl-lib "0.3")) :commit "fd906d3f92d58ecf24169055744409886ceb06ce" :keywords '("convenience") :authors '(("Sebastian Wiesner" . "swiesner@lunaryorn.com")) :maintainer '("Johan Andersson" . "johan.rejeep@gmail.com") :url "http://github.com/cask/epl")"epl"2,31

elpa/diff-hl-1.8.7/diff-hl-autoloads.el,267
(defvar global-diff-hl-mode nil "\global-diff-hl-mode22,527
(defvar global-diff-hl-amend-mode nil "\global-diff-hl-amend-mode59,1834
(defvar diff-hl-flydiff-mode nil "\diff-hl-flydiff-mode106,3429
(defvar diff-hl-margin-mode nil "\diff-hl-margin-mode130,4244

elpa/diff-hl-1.8.7/diff-hl-margin.el,1184
(defvar diff-hl-margin-old-highlight-function nil)diff-hl-margin-old-highlight-function41,1493
(defgroup diff-hl-margin nildiff-hl-margin43,1545
(defface diff-hl-margin-insertdiff-hl-margin-insert47,1633
(defface diff-hl-margin-deletediff-hl-margin-delete51,1762
(defface diff-hl-margin-changediff-hl-margin-change55,1890
(defface diff-hl-margin-ignoreddiff-hl-margin-ignored59,2018
(defface diff-hl-margin-unknowndiff-hl-margin-unknown63,2146
(defcustom diff-hl-margin-symbols-alistdiff-hl-margin-symbols-alist67,2274
(define-minor-mode diff-hl-margin-modediff-hl-margin-mode80,2753
(define-minor-mode diff-hl-margin-minor-modediff-hl-margin-minor-mode103,3818
(define-obsolete-variable-alias 'diff-hl-margin-side 'diff-hl-side "1.7.1")diff-hl-margin-side121,4623
(defun diff-hl-margin-minor-mode-off ()diff-hl-margin-minor-mode-off123,4700
(defvar diff-hl-margin-spec-cache nil)diff-hl-margin-spec-cache126,4775
(defun diff-hl-margin-spec-cache ()diff-hl-margin-spec-cache128,4815
(defun diff-hl-margin-build-spec-cache ()diff-hl-margin-build-spec-cache133,4971
(defun diff-hl-highlight-on-margin (ovl type _shape)diff-hl-highlight-on-margin146,5502

elpa/diff-hl-1.8.7/diff-hl-pkg.el,89
(define-package "diff-hl" "1.8.7" "Highlight uncommitted changes using VC""diff-hl"1,0

elpa/diff-hl-1.8.7/diff-hl.el,3650
(defgroup diff-hl nildiff-hl65,1958
(defface diff-hl-insertdiff-hl-insert69,2044
(defface diff-hl-deletediff-hl-delete75,2209
(defface diff-hl-changediff-hl-change81,2373
(defcustom diff-hl-command-prefix (kbd "C-x v")diff-hl-command-prefix90,2661
(defcustom diff-hl-draw-borders tdiff-hl-draw-borders95,2788
(defcustom diff-hl-highlight-function 'diff-hl-highlight-on-fringediff-hl-highlight-function100,2913
(defcustom diff-hl-fringe-bmp-function 'diff-hl-fringe-bmp-from-posdiff-hl-fringe-bmp-function106,3131
(defcustom diff-hl-fringe-face-function 'diff-hl-fringe-face-from-typediff-hl-fringe-face-function114,3478
(defcustom diff-hl-side 'leftdiff-hl-side120,3710
(defcustom diff-hl-highlight-revert-hunk-functiondiff-hl-highlight-revert-hunk-function130,4057
(defvar diff-hl-reference-revision nildiff-hl-reference-revision139,4494
(defun diff-hl-define-bitmaps ()diff-hl-define-bitmaps142,4597
(defun diff-hl-maybe-define-bitmaps ()diff-hl-maybe-define-bitmaps184,6540
(defun diff-hl-maybe-redefine-bitmaps ()diff-hl-maybe-redefine-bitmaps190,6781
(defvar diff-hl-spec-cache (make-hash-table :test 'equal))diff-hl-spec-cache194,6878
(defun diff-hl-fringe-spec (type pos side)diff-hl-fringe-spec196,6938
(defun diff-hl-fringe-face-from-type (type _pos)diff-hl-fringe-face-from-type209,7531
(defun diff-hl-fringe-bmp-from-pos (_type pos)diff-hl-fringe-bmp-from-pos212,7620
(defun diff-hl-fringe-bmp-from-type (type _pos)diff-hl-fringe-bmp-from-type215,7710
(defvar vc-svn-diff-switches)vc-svn-diff-switches222,7914
(defmacro diff-hl-with-diff-switches (body)diff-hl-with-diff-switches224,7945
(defun diff-hl-modified-p (state)diff-hl-modified-p242,8680
(defun diff-hl-changes-buffer (file backend)diff-hl-changes-buffer250,8970
(defun diff-hl-changes ()diff-hl-changes268,9725
(defun diff-hl-update ()diff-hl-update302,11253
(defun diff-hl-add-highlighting (type shape)diff-hl-add-highlighting335,12515
(defun diff-hl-highlight-on-fringe (ovl type shape)diff-hl-highlight-on-fringe341,12698
(defun diff-hl-remove-overlays (&optional beg end)diff-hl-remove-overlays345,12888
(defun diff-hl-overlay-modified (ov after-p _beg _end &optional _length)diff-hl-overlay-modified351,13104
(defvar diff-hl-timer nil)diff-hl-timer358,13388
(defun diff-hl-edit (_beg _end _len)diff-hl-edit360,13416
(defun diff-hl-after-undo (buffer)diff-hl-after-undo368,13709
(defun diff-hl-diff-goto-hunk ()diff-hl-diff-goto-hunk373,13833
(defun diff-hl-diff-skip-to (line)diff-hl-diff-skip-to385,14383
(defface diff-hl-reverted-hunk-highlightdiff-hl-reverted-hunk-highlight406,15219
(defun diff-hl-revert-highlight-first-column (end)diff-hl-revert-highlight-first-column410,15366
(defun diff-hl-revert-hunk ()diff-hl-revert-hunk418,15680
(defun diff-hl-hunk-overlay-at (pos)diff-hl-hunk-overlay-at470,18016
(defun diff-hl-next-hunk (&optional backward)diff-hl-next-hunk475,18169
(defun diff-hl-previous-hunk ()diff-hl-previous-hunk491,18862
(defun diff-hl-mark-hunk ()diff-hl-mark-hunk496,19004
(defvar diff-hl-command-mapdiff-hl-command-map504,19235
(defvar diff-hl-lighter ""diff-hl-lighter512,19496
(define-minor-mode diff-hl-modediff-hl-mode519,19653
(defun diff-hl-magit-post-refresh ()diff-hl-magit-post-refresh576,22424
(defun diff-hl-dir-update ()diff-hl-dir-update604,23693
(define-minor-mode diff-hl-dir-modediff-hl-dir-mode614,24072
(defun turn-on-diff-hl-mode ()turn-on-diff-hl-mode622,24343
(define-globalized-minor-mode global-diff-hl-mode diff-hl-modeglobal-diff-hl-mode631,24579
(defun diff-hl-global-mode-change ()diff-hl-global-mode-change634,24708

elpa/diff-hl-1.8.7/diff-hl-dired.el,1171
(defvar diff-hl-dired-process-buffer nil)diff-hl-dired-process-buffer38,1140
(defgroup diff-hl-dired nildiff-hl-dired40,1183
(defface diff-hl-dired-insertdiff-hl-dired-insert44,1287
(defface diff-hl-dired-deletediff-hl-dired-delete48,1398
(defface diff-hl-dired-changediff-hl-dired-change52,1528
(defface diff-hl-dired-unknowndiff-hl-dired-unknown56,1641
(defface diff-hl-dired-ignoreddiff-hl-dired-ignored60,1759
(defcustom diff-hl-dired-extra-indicators tdiff-hl-dired-extra-indicators64,1877
(defcustom diff-hl-dired-ignored-backends '(RCS)diff-hl-dired-ignored-backends68,1979
(define-minor-mode diff-hl-dired-modediff-hl-dired-mode78,2354
(defun diff-hl-dired-update ()diff-hl-dired-update89,2785
(defun diff-hl-dired-status-files (backend dir files update-function)diff-hl-dired-status-files140,5304
(defun diff-hl-dired-highlight-items (alist)diff-hl-dired-highlight-items157,6145
(defun diff-hl-dired-face-from-type (type _pos)diff-hl-dired-face-from-type172,6795
(defalias 'diff-hl-dired-clear 'diff-hl-remove-overlays)diff-hl-dired-clear175,6889
(defun diff-hl-dired-mode-unless-remote ()diff-hl-dired-mode-unless-remote178,6962

elpa/diff-hl-1.8.7/diff-hl-amend.el,304
(define-minor-mode diff-hl-amend-modediff-hl-amend-mode31,1013
(defun diff-hl-amend-setup ()diff-hl-amend-setup46,1597
(define-globalized-minor-mode global-diff-hl-amend-mode diff-hl-amend-modeglobal-diff-hl-amend-mode59,1959
(defun turn-on-diff-hl-amend-mode ()turn-on-diff-hl-amend-mode62,2065

elpa/diff-hl-1.8.7/diff-hl-flydiff.el,1186
(defgroup diff-hl-flydiff nildiff-hl-flydiff33,1125
(defcustom diff-hl-flydiff-delay 0.3diff-hl-flydiff-delay37,1208
(defvar diff-hl-flydiff-modified-tick nil)diff-hl-flydiff-modified-tick41,1325
(defvar diff-hl-flydiff-timer nil)diff-hl-flydiff-timer42,1368
(defun diff-hl-flydiff/vc-git--symbolic-ref (file)diff-hl-flydiff/vc-git--symbolic-ref45,1464
(defun diff-hl-flydiff/vc-git-working-revision (_file)diff-hl-flydiff/vc-git-working-revision56,1924
(defun diff-hl-flydiff/vc-git-mode-line-string (file)diff-hl-flydiff/vc-git-mode-line-string61,2099
(defun diff-hl-flydiff/working-revision (file)diff-hl-flydiff/working-revision81,3112
(defun diff-hl-flydiff-make-temp-file-name (file rev &optional manual)diff-hl-flydiff-make-temp-file-name86,3337
(defun diff-hl-flydiff-create-revision (file revision)diff-hl-flydiff-create-revision99,3867
(defun diff-hl-flydiff-buffer-with-head (file &optional backend)diff-hl-flydiff-buffer-with-head122,4947
(defun diff-hl-flydiff-update ()diff-hl-flydiff-update140,5762
(defun diff-hl-flydiff/modified-p (state)diff-hl-flydiff/modified-p149,6068
(define-minor-mode diff-hl-flydiff-modediff-hl-flydiff-mode153,6149

elpa/csv-mode-1.9/csv-mode-autoloads.el,0

elpa/csv-mode-1.9/csv-mode.el,4469
(defgroup CSV nilCSV122,5317
(defvar csv-separator-chars nilcsv-separator-chars126,5423
(defvar csv-separator-regexp nilcsv-separator-regexp130,5562
(defvar csv--skip-chars nilcsv--skip-chars134,5696
(defvar csv-font-lock-keywords nilcsv-font-lock-keywords138,5849
(defcustom csv-separators '("," "\t")csv-separators142,6016
(defcustom csv-field-quotes '("\"")csv-field-quotes168,7277
(defun csv-set-quote-syntax (field-quotes)csv-set-quote-syntax198,8458
(defvar csv-comment-start nilcsv-comment-start208,8813
(defcustom csv-comment-start-default "#"csv-comment-start-default217,9183
(defcustom csv-align-style 'leftcsv-align-style227,9637
(defcustom csv-align-padding 1csv-align-padding234,9923
(defcustom csv-header-lines 0csv-header-lines239,10090
(defcustom csv-invisibility-default tcsv-invisibility-default243,10199
(defface csv-separator-facecsv-separator-face247,10318
(defconst csv-mode-line-formatcsv-mode-line-format256,10616
(defvar csv-mode-mapcsv-mode-map260,10747
(define-derived-mode csv-mode text-mode "CSV"csv-mode277,11661
(defun csv-set-comment-start (string)csv-set-comment-start335,14647
(defvar csv-descending nilcsv-descending365,15898
(defun csv-toggle-descending ()csv-toggle-descending369,16055
(defun csv-toggle-invisibility ()csv-toggle-invisibility375,16247
(defsubst csv-not-looking-at-record ()csv-not-looking-at-record457,20234
(defun csv-interactive-args (&optional type)csv-interactive-args462,20413
(defun csv-nextrecfun ()csv-nextrecfun554,24139
(defun csv-sort-fields-1 (field beg end startkeyfun endkeyfun)csv-sort-fields-1562,24455
(defun csv-sort-fields (field beg end)csv-sort-fields590,25519
(defun csv-sort-numeric-fields (field beg end)csv-sort-numeric-fields607,26406
(defun csv-reverse-region (beg end)csv-reverse-region643,27834
(defsubst csv-end-of-field ()csv-end-of-field657,28415
(defsubst csv-beginning-of-field ()csv-beginning-of-field664,28634
(defun csv-forward-field (arg)csv-forward-field671,28864
(defun csv-backward-field (arg)csv-backward-field686,29405
(defun csv-sort-skip-fields (n &optional yank)csv-sort-skip-fields704,29977
(defcustom csv-field-index-delay 0.125csv-field-index-delay746,31406
(defvar csv-field-index-idle-timer nil)csv-field-index-idle-timer750,31546
(defvar csv-field-index-string nil)csv-field-index-string752,31587
(defvar csv-field-index-old nil)csv-field-index-old755,31677
(define-minor-mode csv-field-index-modecsv-field-index-mode758,31761
(defun csv-field-index ()csv-field-index798,33448
(defvar csv-killed-fields nilcsv-killed-fields818,34244
(defun csv-kill-fields (fields beg end)csv-kill-fields821,34350
(defun csv-kill-one-field (field)csv-kill-one-field851,35659
(defun csv-kill-one-column (field)csv-kill-one-column864,36186
(defun csv-kill-many-columns (fields)csv-kill-many-columns874,36560
(defun csv-yank-fields (field beg end)csv-yank-fields921,38300
(defun csv-yank-as-new-table ()csv-yank-as-new-table962,39991
(defun csv--make-overlay (beg end &optional buffer front-advance rear-advance props)csv--make-overlay975,40443
(defun csv--delete-overlay (o)csv--delete-overlay982,40698
(defun csv--column-widths (beg end)csv--column-widths985,40779
(defun csv-align-fields (hard beg end)csv-align-fields1012,41878
(defun csv-unalign-fields (hard beg end)csv-unalign-fields1151,48845
(defun csv-transpose (beg end)csv-transpose1195,50658
(defun csv-split-stringcsv-split-string1269,53408
(defvar-local csv--header-line nil)csv--header-line1306,54927
(defvar-local csv--header-hscroll nil)csv--header-hscroll1307,54963
(defvar-local csv--header-string nil)csv--header-string1308,55002
(defun csv-header-line (&optional use-current-line)csv-header-line1310,55041
(defun csv--compute-header-string ()csv--compute-header-string1335,56059
(defvar-local csv--jit-columns nil)csv--jit-columns1359,57096
(defun csv--jit-merge-columns (column-widths)csv--jit-merge-columns1361,57133
(defun csv--jit-unalign (beg end)csv--jit-unalign1379,57907
(defun csv--jit-flush (beg end)csv--jit-flush1383,58046
(defun csv--jit-align (beg end)csv--jit-align1404,58957
(define-minor-mode csv-align-fields-modecsv-align-fields-mode1511,63812
(defvar tsv-mode-syntax-tabletsv-mode-syntax-table1533,64672
(defvar tsv-mode-maptsv-mode-map1540,64917
(defun tsv--mode-p ()tsv--mode-p1550,65241
(define-derived-mode tsv-mode csv-mode "TSV"tsv-mode1554,65317

elpa/csv-mode-1.9/csv-mode-pkg.el,320
(define-package "csv-mode" "1.9" "Major mode for editing comma/char separated values" '((emacs "24.1") (cl-lib "0.5")) :url "http://elpa.gnu.org/packages/csv-mode.html" :keywords '("convenience") :authors '(("\"Francis J. Wright\"" . "F.J.Wright@qmul.ac.uk")) :maintainer '(nil . "emacs-devel@gnu.org"))"csv-mode"2,31

elpa/etags-select-1.13/etags-select.el,2860
(defgroup etags-select-mode niletags-select-mode87,3130
(defcustom etags-select-no-select-for-one-match tetags-select-no-select-for-one-match92,3219
(defcustom etags-select-mode-hook niletags-select-mode-hook99,3415
(defcustom etags-select-highlight-tag-after-jump tetags-select-highlight-tag-after-jump105,3579
(defcustom etags-select-highlight-delay 1.0etags-select-highlight-delay111,3761
(defface etags-select-highlight-tag-faceetags-select-highlight-tag-face117,3902
(defcustom etags-select-use-short-name-completion niletags-select-use-short-name-completion123,4100
(defcustom etags-select-go-if-unambiguous niletags-select-go-if-unambiguous136,4622
(defvar etags-select-buffer-name "*etags-select*"etags-select-buffer-name143,4789
(defvar etags-select-mode-font-lock-keywords niletags-select-mode-font-lock-keywords146,4871
(defvar etags-select-source-buffer niletags-select-source-buffer149,4959
(defvar etags-select-opened-window niletags-select-opened-window152,5051
(defconst etags-select-non-tag-regexp "\\(\\s-*$\\|In:\\|Finding tag:\\)"etags-select-non-tag-regexp155,5133
(defvar etags-select-use-xemacs-etags-p (fboundp 'get-tag-table-buffer)etags-select-use-xemacs-etags-p166,5499
(defun etags-select-case-fold-search ()etags-select-case-fold-search169,5595
(defun etags-select-insert-matches (tagname tag-file tag-count)etags-select-insert-matches176,5804
(defun etags-select-get-tag-table-buffer (tag-file)etags-select-get-tag-table-buffer213,7509
(defun etags-select-find-tag-at-point ()etags-select-find-tag-at-point221,7766
(defun etags-select-find-tag ()etags-select-find-tag229,8047
(defun etags-select-complete-tag (string predicate what)etags-select-complete-tag241,8559
(defun etags-select-build-completion-table ()etags-select-build-completion-table248,8848
(defun etags-select-get-tag-files ()etags-select-get-tag-files255,9134
(defun etags-select-get-completion-table ()etags-select-get-completion-table261,9314
(defun etags-select-tags-completion-table-function ()etags-select-tags-completion-table-function267,9488
(defun etags-select-find (tagname)etags-select-find290,10509
(defun etags-select-goto-tag (&optional arg other-window)etags-select-goto-tag323,11836
(defun etags-select-highlight (beg end)etags-select-highlight372,14036
(defun etags-select-goto-tag-other-window (&optional arg)etags-select-goto-tag-other-window384,14512
(defun etags-select-next-tag ()etags-select-next-tag390,14760
(defun etags-select-previous-tag ()etags-select-previous-tag401,15021
(defun etags-select-quit ()etags-select-quit412,15296
(defun etags-select-by-tag-number (first-digit)etags-select-by-tag-number418,15410
(defvar etags-select-mode-map nil "'etags-select-mode' keymap.")etags-select-mode-map433,15975
(defun etags-select-mode (tagname)etags-select-mode457,17417

elpa/etags-select-1.13/etags-select-autoloads.el,671
(defvar etags-select-no-select-for-one-match t "\etags-select-no-select-for-one-match14,479
(defvar etags-select-mode-hook nil "\etags-select-mode-hook20,686
(defvar etags-select-highlight-tag-after-jump t "\etags-select-highlight-tag-after-jump25,850
(defvar etags-select-highlight-delay 1.0 "\etags-select-highlight-delay30,1044
(defface etags-select-highlight-tag-face '((t (:foreground "white" :background "cadetblue4" :bold t))) "\etags-select-highlight-tag-face35,1189
(defvar etags-select-use-short-name-completion nil "\etags-select-use-short-name-completion38,1375
(defvar etags-select-go-if-unambiguous nil "\etags-select-go-if-unambiguous50,1910

elpa/etags-select-1.13/etags-select-pkg.el,92
(define-package "etags-select" "1.13" "Select from multiple tags" 'nil)"etags-select"2,31

elpa/lsp-ui-6.0/lsp-ui-sideline.el,3723
(defgroup lsp-ui-sideline nillsp-ui-sideline36,1123
(defcustom lsp-ui-sideline-enable tlsp-ui-sideline-enable44,1358
(defcustom lsp-ui-sideline-ignore-duplicate nillsp-ui-sideline-ignore-duplicate49,1482
(defcustom lsp-ui-sideline-show-symbol tlsp-ui-sideline-show-symbol54,1660
(defcustom lsp-ui-sideline-show-hover tlsp-ui-sideline-show-hover59,1812
(defcustom lsp-ui-sideline-show-diagnostics tlsp-ui-sideline-show-diagnostics64,1945
(defcustom lsp-ui-sideline-show-code-actions tlsp-ui-sideline-show-code-actions69,2090
(defcustom lsp-ui-sideline-update-mode 'linelsp-ui-sideline-update-mode74,2228
(defcustom lsp-ui-sideline-delay 0.2lsp-ui-sideline-delay84,2576
(defvar lsp-ui-sideline-code-actions-prefix ""lsp-ui-sideline-code-actions-prefix89,2712
(defvar-local lsp-ui-sideline--ovs nillsp-ui-sideline--ovs93,2880
(defvar-local lsp-ui-sideline--occupied-lines nillsp-ui-sideline--occupied-lines96,2961
(defvar-local lsp-ui-sideline--tag nillsp-ui-sideline--tag99,3076
(defvar-local lsp-ui-sideline--last-width nillsp-ui-sideline--last-width103,3234
(defvar-local lsp-ui-sideline--timer nil)lsp-ui-sideline--timer107,3390
(defface lsp-ui-sideline-symbollsp-ui-sideline-symbol109,3433
(defface lsp-ui-sideline-current-symbollsp-ui-sideline-current-symbol116,3620
(defface lsp-ui-sideline-code-actionlsp-ui-sideline-code-action124,3855
(defface lsp-ui-sideline-symbol-infolsp-ui-sideline-symbol-info129,3995
(defface lsp-ui-sideline-globallsp-ui-sideline-global134,4161
(defun lsp-ui-sideline--calc-space (win-width str-len index)lsp-ui-sideline--calc-space140,4315
(defun lsp-ui-sideline--find-line (str-len &optional up)lsp-ui-sideline--find-line155,4847
(defun lsp-ui-sideline--delete-ov ()lsp-ui-sideline--delete-ov174,5598
(defun lsp-ui-sideline--extract-info (contents)lsp-ui-sideline--extract-info179,5740
(defun lsp-ui-sideline--format-info (marked-string)lsp-ui-sideline--format-info197,6534
(defun lsp-ui-sideline--align (&rest lengths)lsp-ui-sideline--align214,7402
(defun lsp-ui-sideline--make-display-string (info symbol current)lsp-ui-sideline--make-display-string218,7509
(defun lsp-ui-sideline--check-duplicate (symbol info)lsp-ui-sideline--check-duplicate234,8265
(defun lsp-ui-sideline--margin-width ()lsp-ui-sideline--margin-width240,8530
(defun lsp-ui-sideline--window-width ()lsp-ui-sideline--window-width257,9059
(defun lsp-ui-sideline--push-info (symbol tag bounds info)lsp-ui-sideline--push-info261,9190
(defun lsp-ui-sideline--toggle-current (ov current)lsp-ui-sideline--toggle-current282,10300
(defun lsp-ui-sideline--highlight-current (point)lsp-ui-sideline--highlight-current290,10640
(defun lsp-ui-sideline--diagnostics ()lsp-ui-sideline--diagnostics302,11131
(defvar-local lsp-ui-sideline--code-actions nil)lsp-ui-sideline--code-actions326,12429
(defun lsp-ui-sideline-apply-code-actions nillsp-ui-sideline-apply-code-actions328,12479
(defun lsp-ui-sideline--code-actions (actions)lsp-ui-sideline--code-actions341,13033
(defun lsp-ui-sideline--calculate-tag()lsp-ui-sideline--calculate-tag367,14500
(defun lsp-ui-sideline--run ()lsp-ui-sideline--run373,14711
(defun lsp-ui-sideline--stop-p ()lsp-ui-sideline--stop-p428,17941
(defun lsp-ui-sideline--hide-before-company (command)lsp-ui-sideline--hide-before-company434,18162
(defun lsp-ui-sideline ()lsp-ui-sideline441,18449
(defun lsp-ui-sideline-toggle-symbols-info ()lsp-ui-sideline-toggle-symbols-info461,19398
(defun lsp-ui-sideline--diagnostics-changed ()lsp-ui-sideline--diagnostics-changed470,19733
(define-minor-mode lsp-ui-sideline-modelsp-ui-sideline-mode475,19876
(defun lsp-ui-sideline-enable (enable)lsp-ui-sideline-enable495,20805

elpa/lsp-ui-6.0/lsp-ui-autoloads.el,0

elpa/lsp-ui-6.0/lsp-ui-flycheck.el,1476
(defgroup lsp-ui-flycheck nillsp-ui-flycheck34,1145
(defcustom lsp-ui-flycheck-enable tlsp-ui-flycheck-enable42,1384
(defcustom lsp-ui-flycheck-live-reporting tlsp-ui-flycheck-live-reporting47,1508
(defcustom lsp-ui-flycheck-list-position 'bottomlsp-ui-flycheck-list-position54,1793
(defvar-local lsp-ui-flycheck-list--buffer nil)lsp-ui-flycheck-list--buffer60,2050
(defun lsp-ui-flycheck-list--post-command ()lsp-ui-flycheck-list--post-command62,2099
(defun lsp-ui-flycheck-list--update (window workspace)lsp-ui-flycheck-list--update66,2184
(defun lsp-ui-flycheck-list ()lsp-ui-flycheck-list99,3783
(defun lsp-ui-flycheck-list--refresh ()lsp-ui-flycheck-list--refresh115,4484
(defun lsp-ui-flycheck-list--open ()lsp-ui-flycheck-list--open125,4945
(defun lsp-ui-flycheck-list--view ()lsp-ui-flycheck-list--view148,5951
(defun lsp-ui-flycheck-list--visit ()lsp-ui-flycheck-list--visit152,6037
(defun lsp-ui-flycheck-list--quit ()lsp-ui-flycheck-list--quit156,6140
(defvar lsp-ui-flycheck-list-mode-map nillsp-ui-flycheck-list-mode-map160,6211
(define-derived-mode lsp-ui-flycheck-list-mode special-mode "lsp-ui-flycheck-list"lsp-ui-flycheck-list-mode169,6618
(defun lsp-ui-flycheck--start (checker callback)lsp-ui-flycheck--start175,6896
(defun lsp-ui-flycheck-add-mode (mode)lsp-ui-flycheck-add-mode212,8380
(defun lsp-ui-flycheck--report nillsp-ui-flycheck--report217,8579
(defun lsp-ui-flycheck-enable (_)lsp-ui-flycheck-enable223,8752

elpa/lsp-ui-6.0/lsp-ui-doc.el,4799
(defgroup lsp-ui-doc nillsp-ui-doc38,1163
(defcustom lsp-ui-doc-enable tlsp-ui-doc-enable46,1383
(defcustom lsp-ui-doc-header nillsp-ui-doc-header51,1491
(defcustom lsp-ui-doc-include-signature nillsp-ui-doc-include-signature56,1637
(defcustom lsp-ui-doc-position 'toplsp-ui-doc-position61,1791
(defcustom lsp-ui-doc-border "white"lsp-ui-doc-border68,2017
(defcustom lsp-ui-doc-max-width 150lsp-ui-doc-max-width73,2123
(defcustom lsp-ui-doc-max-height 30lsp-ui-doc-max-height78,2243
(defcustom lsp-ui-doc-use-childframe tlsp-ui-doc-use-childframe83,2361
(defface lsp-ui-doc-backgroundlsp-ui-doc-background89,2584
(defface lsp-ui-doc-headerlsp-ui-doc-header96,2805
(defface lsp-ui-doc-urllsp-ui-doc-url102,2948
(defvar lsp-ui-doc-frame-parameterslsp-ui-doc-frame-parameters107,3042
(defvar lsp-ui-doc-render-function nillsp-ui-doc-render-function135,3754
(defvar lsp-ui-doc-custom-markup-modeslsp-ui-doc-custom-markup-modes141,4000
(defvar lsp-ui-doc-frame-hook nillsp-ui-doc-frame-hook146,4204
(defvar-local lsp-ui-doc--parent-vars nillsp-ui-doc--parent-vars153,4436
(defvar-local lsp-ui-doc--inline-ov nillsp-ui-doc--inline-ov157,4595
(defmacro lsp-ui-doc--with-buffer (&rest body)lsp-ui-doc--with-buffer160,4698
(defmacro lsp-ui-doc--get-parent (var)lsp-ui-doc--get-parent171,5200
(defmacro lsp-ui-doc--set-frame (frame)lsp-ui-doc--set-frame175,5330
(defun lsp-ui-doc--get-frame (&optional include-deleted-frame)lsp-ui-doc--get-frame179,5487
(defun lsp-ui-doc--make-buffer-name ()lsp-ui-doc--make-buffer-name184,5675
(defvar markdown-fontify-code-block-default-mode)markdown-fontify-code-block-default-mode193,6007
(defun lsp-ui-doc--setup-markdown (mode)lsp-ui-doc--setup-markdown195,6058
(defun lsp-ui-doc--inline-wrapped-line (string)lsp-ui-doc--inline-wrapped-line205,6523
(defun lsp-ui-doc--inline-formatted-string (string)lsp-ui-doc--inline-formatted-string213,6908
(defun lsp-ui-doc--extract-marked-string (marked-string)lsp-ui-doc--extract-marked-string220,7165
(defun lsp-ui-doc--filter-marked-string (list-marked-string)lsp-ui-doc--filter-marked-string250,8417
(defun lsp-ui-doc--extract (contents)lsp-ui-doc--extract258,8757
(defun lsp-ui-doc--hide-frame ()lsp-ui-doc--hide-frame277,9674
(defun lsp-ui-doc--buffer-width ()lsp-ui-doc--buffer-width286,9948
(defun lsp-ui-doc--line-height (&optional line)lsp-ui-doc--line-height299,10322
(defun lsp-ui-doc--sideline-pos-y ()lsp-ui-doc--sideline-pos-y305,10544
(defun lsp-ui-doc--resize-buffer ()lsp-ui-doc--resize-buffer311,10754
(defun lsp-ui-doc--next-to-side-window-p nillsp-ui-doc--next-to-side-window-p319,11128
(defun lsp-ui-doc--mv-at-point (frame height start-x start-y)lsp-ui-doc--mv-at-point327,11457
(defun lsp-ui-doc--move-frame (frame)lsp-ui-doc--move-frame343,12194
(defun lsp-ui-doc--visit-file (filename)lsp-ui-doc--visit-file367,13433
(defun lsp-ui-doc--put-click (start end fn)lsp-ui-doc--put-click372,13624
(defun lsp-ui-doc--make-clickable-link ()lsp-ui-doc--make-clickable-link385,14208
(defun lsp-ui-doc--render-buffer (string symbol)lsp-ui-doc--render-buffer396,14638
(defun lsp-ui-doc--inline-height ()lsp-ui-doc--inline-height412,15369
(defun lsp-ui-doc--remove-invisibles (string)lsp-ui-doc--remove-invisibles416,15483
(defvar-local lsp-ui-doc--inline-width nil)lsp-ui-doc--inline-width426,15973
(defun lsp-ui-doc--inline-window-width nillsp-ui-doc--inline-window-width428,16018
(defun lsp-ui-doc--inline-zip (s1 s2)lsp-ui-doc--inline-zip436,16239
(defun lsp-ui-doc--inline-padding (string len)lsp-ui-doc--inline-padding443,16499
(defun lsp-ui-doc--inline-faking-frame (doc-strings)lsp-ui-doc--inline-faking-frame448,16772
(defun lsp-ui-doc--inline-untab (string)lsp-ui-doc--inline-untab453,17002
(defun lsp-ui-doc--inline-merge (strings)lsp-ui-doc--inline-merge456,17120
(defun lsp-ui-doc--inline-pos-at (start lines)lsp-ui-doc--inline-pos-at471,17874
(defun lsp-ui-doc--inline-pos (height)lsp-ui-doc--inline-pos477,18077
(defun lsp-ui-doc--inline ()lsp-ui-doc--inline498,19014
(defun lsp-ui-doc--inline-p ()lsp-ui-doc--inline-p510,19579
(defun lsp-ui-doc--display (symbol string)lsp-ui-doc--display516,19819
(defun lsp-ui-doc--make-frame ()lsp-ui-doc--make-frame529,20344
(defun lsp-ui-doc--delete-frame ()lsp-ui-doc--delete-frame552,21437
(defadvice select-window (after lsp-ui-doc--select-window activate)select-window558,21618
(defun lsp-ui-doc--on-delete (frame)lsp-ui-doc--on-delete566,21965
(defun lsp-ui-doc--on-hover (hover)lsp-ui-doc--on-hover573,22202
(define-minor-mode lsp-ui-doc-modelsp-ui-doc-mode582,22533
(defun lsp-ui-doc-enable (enable)lsp-ui-doc-enable605,23578
(defun lsp-ui-doc-show ()lsp-ui-doc-show610,23743
(defun lsp-ui-doc-hide ()lsp-ui-doc-hide615,23929

elpa/lsp-ui-6.0/lsp-ui-imenu.el,2513
(defgroup lsp-ui-imenu nillsp-ui-imenu39,1156
(defcustom lsp-ui-imenu-enable tlsp-ui-imenu-enable47,1363
(defcustom lsp-ui-imenu-kind-position 'toplsp-ui-imenu-kind-position52,1481
(defcustom lsp-ui-imenu-colors '("deep sky blue" "green3")lsp-ui-imenu-colors58,1668
(defconst lsp-ui-imenu--max-bars 8)lsp-ui-imenu--max-bars63,1825
(defvar imenu--index-alist)imenu--index-alist67,1956
(defun lsp-ui-imenu--pad (s len bars depth color-index for-title is-last)lsp-ui-imenu--pad69,1985
(defun lsp-ui-imenu--get-bar (bars index depth for-title is-last)lsp-ui-imenu--get-bar83,2595
(defun lsp-ui-imenu--get-color (index)lsp-ui-imenu--get-color109,3398
(defun lsp-ui-imenu--make-line (title index entry padding bars depth color-index is-last)lsp-ui-imenu--make-line112,3508
(defvar-local lsp-ui-imenu-ov nil)lsp-ui-imenu-ov123,4095
(defun lsp-ui-imenu--make-ov nillsp-ui-imenu--make-ov125,4131
(defun lsp-ui-imenu--post-command nillsp-ui-imenu--post-command129,4270
(defun lsp-ui-imenu--move-to-name-beginning ()lsp-ui-imenu--move-to-name-beginning151,5353
(defvar lsp-ui-imenu--origin nil)lsp-ui-imenu--origin156,5590
(defun lsp-ui-imenu--put-separator nillsp-ui-imenu--put-separator158,5625
(defun lsp-ui-imenu--put-toplevel-title (title color-index)lsp-ui-imenu--put-toplevel-title162,5786
(defun lsp-ui-imenu--put-subtitle (title padding bars depth color-index is-last)lsp-ui-imenu--put-subtitle175,6369
(defun lsp-ui-imenu--insert-items (title items padding bars depth color-index)lsp-ui-imenu--insert-items184,6803
(defun lsp-ui-imenu--get-padding (items)lsp-ui-imenu--get-padding224,8594
(defun lsp-ui-imenu--put-bit (bits offset)lsp-ui-imenu--put-bit230,8795
(defun lsp-ui-imenu--clear-bit (bits offset)lsp-ui-imenu--clear-bit233,8871
(defun lsp-ui-imenu nillsp-ui-imenu236,8958
(defun lsp-ui-imenu--win-separator ()lsp-ui-imenu--win-separator270,10460
(defun lsp-ui-imenu--kill nillsp-ui-imenu--kill276,10699
(defun lsp-ui-imenu--jump (direction)lsp-ui-imenu--jump280,10774
(defun lsp-ui-imenu--next-kind nillsp-ui-imenu--next-kind288,11071
(defun lsp-ui-imenu--prev-kind nillsp-ui-imenu--prev-kind292,11149
(defun lsp-ui-imenu--visit nillsp-ui-imenu--visit298,11307
(defun lsp-ui-imenu--view nillsp-ui-imenu--view305,11556
(defvar lsp-ui-imenu-mode-map nillsp-ui-imenu-mode-map313,11832
(define-derived-mode lsp-ui-imenu-mode special-mode "lsp-ui-imenu"lsp-ui-imenu-mode324,12305
(defun lsp-ui-imenu-enable (enable)lsp-ui-imenu-enable327,12406

elpa/lsp-ui-6.0/lsp-ui-peek.el,5873
(defgroup lsp-ui-peek nillsp-ui-peek41,1236
(defcustom lsp-ui-peek-enable tlsp-ui-peek-enable49,1460
(defcustom lsp-ui-peek-peek-height 20lsp-ui-peek-peek-height54,1576
(defcustom lsp-ui-peek-list-width 50lsp-ui-peek-list-width59,1684
(defcustom lsp-ui-peek-fontify 'on-demandlsp-ui-peek-fontify64,1792
(defcustom lsp-ui-peek-always-show nillsp-ui-peek-always-show74,2283
(defface lsp-ui-peek-peeklsp-ui-peek-peek80,2485
(defface lsp-ui-peek-listlsp-ui-peek-list86,2646
(defface lsp-ui-peek-filenamelsp-ui-peek-filename92,2813
(defface lsp-ui-peek-line-numberlsp-ui-peek-line-number98,3003
(defface lsp-ui-peek-highlightlsp-ui-peek-highlight103,3112
(defface lsp-ui-peek-headerlsp-ui-peek-header117,3612
(defface lsp-ui-peek-footerlsp-ui-peek-footer123,3812
(defface lsp-ui-peek-selectionlsp-ui-peek-selection128,3975
(defvar lsp-ui-peek-expand-function 'lsp-ui-peek--expand-bufferlsp-ui-peek-expand-function137,4337
(defvar-local lsp-ui-peek--overlay nil)lsp-ui-peek--overlay146,4849
(defvar-local lsp-ui-peek--list nil)lsp-ui-peek--list147,4889
(defvar-local lsp-ui-peek--last-xref nil)lsp-ui-peek--last-xref148,4926
(defvar-local lsp-ui-peek--selection 0)lsp-ui-peek--selection149,4968
(defvar-local lsp-ui-peek--offset 0)lsp-ui-peek--offset150,5008
(defvar-local lsp-ui-peek--size-list 0)lsp-ui-peek--size-list151,5045
(defvar-local lsp-ui-peek--win-start nil)lsp-ui-peek--win-start152,5085
(defvar-local lsp-ui-peek--method nil)lsp-ui-peek--method153,5127
(defvar-local lsp-ui-peek--deactivate-keymap-fn nil)lsp-ui-peek--deactivate-keymap-fn154,5166
(defvar lsp-ui-peek--jumps (make-hash-table)lsp-ui-peek--jumps156,5220
(defvar evil--jumps-window-jumps)  ; defined in evil-jumps.elevil--jumps-window-jumps159,5327
(defmacro lsp-ui-peek--with-evil-jumps (&rest body)lsp-ui-peek--with-evil-jumps161,5390
(defmacro lsp-ui-peek--prop (prop &optional string)lsp-ui-peek--prop182,6229
(defmacro lsp-ui-peek--add-prop (prop &optional string)lsp-ui-peek--add-prop185,6364
(defun lsp-ui-peek--truncate (len s)lsp-ui-peek--truncate190,6547
(defun lsp-ui-peek--get-text-selection (&optional n)lsp-ui-peek--get-text-selection195,6672
(defun lsp-ui-peek--get-selection ()lsp-ui-peek--get-selection199,6846
(defun lsp-ui-peek--visual-index ()lsp-ui-peek--visual-index202,6964
(defun lsp-ui-peek--make-line (index src)lsp-ui-peek--make-line205,7051
(defun lsp-ui-peek--adjust (width strings)lsp-ui-peek--adjust231,8238
(defun lsp-ui-peek--make-footer ()lsp-ui-peek--make-footer236,8457
(defun lsp-ui-peek--peek-new (src1 src2)lsp-ui-peek--peek-new252,9231
(defun lsp-ui-peek--expand-buffer (files)lsp-ui-peek--expand-buffer266,9972
(defun lsp-ui-peek--expand (xrefs)lsp-ui-peek--expand271,10126
(defun lsp-ui-peek--show (xrefs)lsp-ui-peek--show285,10751
(defun lsp-ui-peek--recenter ()lsp-ui-peek--recenter314,12119
(defun lsp-ui-peek--fill (min-len list)lsp-ui-peek--fill319,12334
(defun lsp-ui-peek--render (major string)lsp-ui-peek--render325,12493
(defun lsp-ui-peek--peek ()lsp-ui-peek--peek335,12728
(defun lsp-ui-peek--toggle-text-prop (s)lsp-ui-peek--toggle-text-prop358,14001
(defun lsp-ui-peek--toggle-hidden (file)lsp-ui-peek--toggle-hidden362,14169
(defun lsp-ui-peek--remove-hidden (file)lsp-ui-peek--remove-hidden368,14433
(defun lsp-ui-peek--make-ref-line (xref)lsp-ui-peek--make-ref-line374,14715
(defun lsp-ui-peek--insert-xrefs (xrefs filename index)lsp-ui-peek--insert-xrefs382,15115
(defun lsp-ui-peek--toggle-file (&optional no-update)lsp-ui-peek--toggle-file389,15490
(defun lsp-ui-peek--select (index)lsp-ui-peek--select403,16077
(defun lsp-ui-peek--select-next (&optional no-update)lsp-ui-peek--select-next406,16179
(defun lsp-ui-peek--select-prev (&optional no-update)lsp-ui-peek--select-prev415,16531
(defun lsp-ui-peek--skip-refs (fn)lsp-ui-peek--skip-refs424,16819
(defun lsp-ui-peek--select-prev-file ()lsp-ui-peek--select-prev-file433,17177
(defun lsp-ui-peek--select-next-file ()lsp-ui-peek--select-next-file449,17748
(defun lsp-ui-peek--peek-hide ()lsp-ui-peek--peek-hide459,18064
(defun lsp-ui-peek--deactivate-keymap ()lsp-ui-peek--deactivate-keymap467,18370
(defun lsp-ui-peek--goto-xref (&optional x other-window)lsp-ui-peek--goto-xref473,18555
(defun lsp-ui-peek--goto-xref-other-window ()lsp-ui-peek--goto-xref-other-window512,20469
(defvar lsp-ui-peek-mode-map nillsp-ui-peek-mode-map516,20566
(defun lsp-ui-peek--disable ()lsp-ui-peek--disable539,21725
(defun lsp-ui-peek--abort ()lsp-ui-peek--abort545,21924
(define-minor-mode lsp-ui-peek-modelsp-ui-peek-mode550,22090
(defun lsp-ui-peek--find-xrefs (input method param)lsp-ui-peek--find-xrefs558,22372
(defun lsp-ui-peek-find-references (&optional include-declaration extra)lsp-ui-peek-find-references580,23534
(defun lsp-ui-peek-find-definitions (&optional extra)lsp-ui-peek-find-definitions586,23840
(defun lsp-ui-peek-find-implementation (&optional extra)lsp-ui-peek-find-implementation592,24112
(defun lsp-ui-peek-find-workspace-symbol (pattern &optional extra)lsp-ui-peek-find-workspace-symbol598,24400
(defun lsp-ui-peek-find-custom (method &optional extra)lsp-ui-peek-find-custom606,24787
(defun lsp-ui-peek--extract-chunk-from-buffer (pos start end)lsp-ui-peek--extract-chunk-from-buffer614,25174
(defun lsp-ui-peek--xref-make-item (filename loc)lsp-ui-peek--xref-make-item632,26140
(defun lsp-ui-peek--fontify-buffer (filename)lsp-ui-peek--fontify-buffer650,27124
(defun lsp-ui-peek--get-xrefs-in-file (file)lsp-ui-peek--get-xrefs-in-file661,27485
(defun lsp-ui-peek--get-xrefs-list (file)lsp-ui-peek--get-xrefs-list682,28372
(defun lsp-ui-peek--get-references (method params)lsp-ui-peek--get-references687,28550
(defvar lsp-ui-mode-map)lsp-ui-mode-map699,29093
(defun lsp-ui-peek-enable (_enable)lsp-ui-peek-enable701,29119

elpa/lsp-ui-6.0/lsp-ui-pkg.el,70
(define-package "lsp-ui" "6.0" "UI modules for lsp-mode""lsp-ui"1,0

elpa/lsp-ui-6.0/lsp-ui.el,742
(defgroup lsp-ui nillsp-ui36,1327
(defun lsp-ui-peek--render (major string)lsp-ui-peek--render48,1650
(defun lsp-ui--workspace-path (path)lsp-ui--workspace-path58,1885
(defun lsp-ui--toggle (enable)lsp-ui--toggle68,2254
(defvar lsp-ui-mode-map (make-sparse-keymap))lsp-ui-mode-map77,2616
(define-minor-mode lsp-ui-modelsp-ui-mode80,2678
(defun lsp-ui-find-workspace-symbol (pattern)lsp-ui-find-workspace-symbol96,3416
(defun lsp-ui--location< (x y)lsp-ui--location<103,3713
(defun lsp-ui--reference-triples (extra)lsp-ui--reference-triples112,3998
(defun lsp-ui-find-next-reference (&optional extra)lsp-ui-find-next-reference127,4602
(defun lsp-ui-find-prev-reference (&optional extra)lsp-ui-find-prev-reference144,5180

elpa/company-0.9.10/company-tng.el,517
(defvar-local company-tng--overlay nil)company-tng--overlay92,3878
(defun company-tng-frontend (command)company-tng-frontend95,3934
(defun company-tng-configure-default ()company-tng-configure-default129,5537
(defun company-tng--allow-unselected (&optional arg)company-tng--allow-unselected143,6190
(defun company-tng--adjust-tooltip-highlight (args)company-tng--adjust-tooltip-highlight175,7351
(defun company-tng--supress-post-completion (command &rest args)company-tng--supress-post-completion183,7673

elpa/company-0.9.10/company-capf.el,690
(defvar company--capf-cache nil)company--capf-cache35,1191
(defvar-local company-capf--current-completion-data nilcompany-capf--current-completion-data39,1350
(defun company--capf-data ()company--capf-data44,1617
(defun company--capf-data-real ()company--capf-data-real55,2075
(defun company--capf-workaround ()company--capf-workaround70,2916
(defun company-capf--save-current-data (data)company-capf--save-current-data78,3310
(defun company-capf--clear-current-data (_ignored)company-capf--clear-current-data83,3507
(defun company-capf (command &optional arg &rest _args)company-capf86,3611
(defun company--capf-post-completion (arg)company--capf-post-completion180,7823

elpa/company-0.9.10/company-cmake.el,1275
(defgroup company-cmake nilcompany-cmake31,1039
(defcustom company-cmake-executablecompany-cmake-executable35,1121
(defvar company-cmake-executable-argumentscompany-cmake-executable-arguments40,1235
(defvar company-cmake--completion-patterncompany-cmake--completion-pattern47,1476
(defvar company-cmake-modes '(cmake-mode)company-cmake-modes51,1587
(defvar company-cmake--candidates-cache nilcompany-cmake--candidates-cache54,1676
(defvar company-cmake--meta-command-cache nilcompany-cmake--meta-command-cache57,1756
(defun company-cmake--replace-tags (rlt)company-cmake--replace-tags60,1881
(defun company-cmake--fill-candidates-cache (arg)company-cmake--fill-candidates-cache78,2599
(defun company-cmake--parse (prefix content cmd)company-cmake--parse95,3262
(defun company-cmake--candidates (prefix)company-cmake--candidates111,3812
(defun company-cmake--unexpand-candidate (candidate)company-cmake--unexpand-candidate129,4403
(defun company-cmake--meta (candidate)company-cmake--meta148,5205
(defun company-cmake--doc-buffer (candidate)company-cmake--doc-buffer166,6004
(defun company-cmake-prefix-dollar-brace-p ()company-cmake-prefix-dollar-brace-p180,6589
(defun company-cmake (command &optional arg &rest ignored)company-cmake187,6816

elpa/company-0.9.10/company-gtags.el,690
(defgroup company-gtags nilcompany-gtags32,938
(defcustom company-gtags-executablecompany-gtags-executable40,1138
(defcustom company-gtags-insert-arguments tcompany-gtags-insert-arguments45,1260
(defvar-local company-gtags--tags-available-p 'unknown)company-gtags--tags-available-p50,1439
(defcustom company-gtags-modes '(prog-mode jde-mode)company-gtags-modes52,1496
(defun company-gtags--tags-available-p ()company-gtags--tags-available-p59,1756
(defun company-gtags--fetch-tags (prefix)company-gtags--fetch-tags65,1996
(defun company-gtags--annotation (arg)company-gtags--annotation88,3143
(defun company-gtags (command &optional arg &rest ignored)company-gtags94,3335

elpa/company-0.9.10/company-oddmuse.el,237
(defvar company-oddmuse-link-regexpcompany-oddmuse-link-regexp33,1006
(defun company-oddmuse-get-page-table ()company-oddmuse-get-page-table36,1111
(defun company-oddmuse (command &optional arg &rest ignored)company-oddmuse44,1407

elpa/company-0.9.10/company-semantic.el,1412
(defvar semantic-idle-summary-function)semantic-idle-summary-function32,946
(defgroup company-semantic nilcompany-semantic44,1607
(defcustom company-semantic-metadata-function 'company-semantic-summary-and-doccompany-semantic-metadata-function48,1697
(defcustom company-semantic-begin-after-member-access tcompany-semantic-begin-after-member-access52,1859
(defcustom company-semantic-insert-arguments tcompany-semantic-insert-arguments62,2249
(defvar company-semantic-modes '(c-mode c++-mode jde-mode java-mode))company-semantic-modes67,2431
(defvar-local company-semantic--current-tags nilcompany-semantic--current-tags69,2502
(defun company-semantic-documentation-for-tag (tag)company-semantic-documentation-for-tag72,2587
(defun company-semantic-doc-or-summary (tag)company-semantic-doc-or-summary77,2790
(defun company-semantic-summary-and-doc (tag)company-semantic-summary-and-doc83,3036
(defun company-semantic-doc-buffer (tag)company-semantic-doc-buffer96,3514
(defsubst company-semantic-completions (prefix)company-semantic-completions104,3766
(defun company-semantic-completions-raw (prefix)company-semantic-completions-raw112,4107
(defun company-semantic-annotation (argument tags)company-semantic-annotation119,4438
(defun company-semantic--prefix ()company-semantic--prefix127,4794
(defun company-semantic (command &optional arg &rest ignored)company-semantic133,4973

elpa/company-0.9.10/company-tempo.el,392
(defgroup company-tempo nilcompany-tempo32,922
(defcustom company-tempo-expand nilcompany-tempo-expand36,1000
(defsubst company-tempo-lookup (match)company-tempo-lookup41,1168
(defun company-tempo-insert (match)company-tempo-insert44,1256
(defsubst company-tempo-meta (match)company-tempo-meta51,1479
(defun company-tempo (command &optional arg &rest ignored)company-tempo59,1693

elpa/company-0.9.10/company-keywords.el,235
(defun company-keywords-upper-lower (&rest lst)company-keywords-upper-lower31,918
(defvar company-keywords-alistcompany-keywords-alist35,1057
(defun company-keywords (command &optional arg &rest ignored)company-keywords289,17490

elpa/company-0.9.10/company-files.el,941
(defgroup company-files nilcompany-files31,915
(defcustom company-files-exclusions nilcompany-files-exclusions35,1002
(defun company-files--directory-files (dir prefix)company-files--directory-files41,1238
(defun company-files--exclusions-filtered (completions)company-files--exclusions-filtered53,1758
(defvar company-files--regexpscompany-files--regexps66,2438
(defun company-files--grab-existing-name ()company-files--grab-existing-name75,2801
(defun company-files--connected-p (file)company-files--connected-p88,3263
(defun company-files--trailing-slash-p (file)company-files--trailing-slash-p92,3373
(defvar company-files--completion-cache nil)company-files--completion-cache98,3652
(defun company-files--complete (prefix)company-files--complete100,3698
(defun company-file--keys-match-p (new old)company-file--keys-match-p126,5172
(defun company-files (command &optional arg &rest ignored)company-files131,5314

elpa/company-0.9.10/company-bbdb.el,270
(defgroup company-bbdb nilcompany-bbdb30,1079
(defcustom company-bbdb-modes '(message-mode)company-bbdb-modes34,1159
(defun company-bbdb--candidates (arg)company-bbdb--candidates39,1346
(defun company-bbdb (command &optional arg &rest ignore)company-bbdb46,1624

elpa/company-0.9.10/company-xcode.el,705
(defgroup company-xcode nilcompany-xcode31,914
(defcustom company-xcode-xcodeindex-executable (executable-find "xcodeindex")company-xcode-xcodeindex-executable35,1005
(defvar company-xcode-tags nil)company-xcode-tags39,1138
(defun company-xcode-reset ()company-xcode-reset41,1171
(defcustom company-xcode-typescompany-xcode-types46,1278
(defvar-local company-xcode-project 'unknown)company-xcode-project65,2249
(defun company-xcode-fetch (project-bundle)company-xcode-fetch69,2378
(defun company-xcode-find-project ()company-xcode-find-project87,3246
(defun company-xcode-tags ()company-xcode-tags99,3680
(defun company-xcode (command &optional arg &rest ignored)company-xcode108,4099

elpa/company-0.9.10/company-nxml.el,1027
(defvar rng-open-elements)rng-open-elements32,963
(defvar rng-validate-mode)rng-validate-mode33,990
(defvar rng-in-attribute-regex)rng-in-attribute-regex34,1017
(defvar rng-in-attribute-value-regex)rng-in-attribute-value-regex35,1049
(defconst company-nxml-token-regexpcompany-nxml-token-regexp43,1462
(defvar company-nxml-in-attribute-value-regexpcompany-nxml-in-attribute-value-regexp46,1544
(defvar company-nxml-in-tag-name-regexpcompany-nxml-in-tag-name-regexp55,1859
(defun company-nxml-all-completions (prefix alist)company-nxml-all-completions59,2021
(defmacro company-nxml-prepared (&rest body)company-nxml-prepared72,2503
(defun company-nxml-tag (command &optional arg &rest ignored)company-nxml-tag79,2747
(defun company-nxml-attribute (command &optional arg &rest ignored)company-nxml-attribute89,3142
(defun company-nxml-attribute-value (command &optional arg &rest ignored)company-nxml-attribute-value102,3723
(defun company-nxml (command &optional arg &rest ignored)company-nxml124,4855

elpa/company-0.9.10/company-css.el,1020
(defconst company-css-property-alistcompany-css-property-alist33,1061
(defconst company-css-value-classescompany-css-value-classes295,13358
(defconst company-css-html-tagscompany-css-html-tags318,14464
(defconst company-css-pseudo-classescompany-css-pseudo-classes333,15348
(defconst company-css-property-cache (make-hash-table :size 115 :test 'equal))company-css-property-cache338,15587
(defun company-css-property-values (attribute)company-css-property-values340,15667
(defconst company-css-braces-syntax-tablecompany-css-braces-syntax-table361,16545
(defun company-css-inside-braces-p ()company-css-inside-braces-p368,16761
(defconst company-css-tag-regexpcompany-css-tag-regexp376,17019
(defconst company-css-pseudo-regexpcompany-css-pseudo-regexp390,17505
(defun company-css-grab-property ()company-css-grab-property405,18022
(defconst company-css-property-value-regexpcompany-css-property-value-regexp412,18252
(defun company-css (command &optional arg &rest ignored)company-css417,18437

elpa/company-0.9.10/company-elisp.el,1676
(defgroup company-elisp nilcompany-elisp34,1046
(defcustom company-elisp-detect-function-context tcompany-elisp-detect-function-context38,1133
(defcustom company-elisp-show-locals-first tcompany-elisp-show-locals-first44,1389
(defun company-elisp--prefix ()company-elisp--prefix50,1612
(defun company-elisp--predicate (symbol)company-elisp--predicate59,1899
(defun company-elisp--fns-regexp (&rest names)company-elisp--fns-regexp65,2033
(defvar company-elisp-parse-limit 30)company-elisp-parse-limit68,2142
(defvar company-elisp-parse-depth 100)company-elisp-parse-depth69,2180
(defvar company-elisp-defun-names '("defun" "defmacro" "defsubst"))company-elisp-defun-names71,2220
(defvar company-elisp-var-binding-regexpcompany-elisp-var-binding-regexp73,2289
(defvar company-elisp-var-binding-regexp-1company-elisp-var-binding-regexp-178,2509
(defvar company-elisp-fun-binding-regexpcompany-elisp-fun-binding-regexp82,2677
(defvar company-elisp-defuns-regexpcompany-elisp-defuns-regexp86,2832
(defun company-elisp--should-complete ()company-elisp--should-complete90,2965
(defun company-elisp--locals (prefix functions-p)company-elisp--locals108,3527
(defun company-elisp-candidates (prefix)company-elisp-candidates146,5169
(defun company-elisp--globals (prefix predicate)company-elisp--globals158,5713
(defun company-elisp--candidates-predicate (prefix)company-elisp--candidates-predicate161,5809
(defun company-elisp--before-binding-varlist-p ()company-elisp--before-binding-varlist-p180,6534
(defun company-elisp--doc (symbol)company-elisp--doc186,6728
(defun company-elisp (command &optional arg &rest ignored)company-elisp196,7058

elpa/company-0.9.10/company-ispell.el,430
(defgroup company-ispell nilcompany-ispell32,932
(defcustom company-ispell-dictionary nilcompany-ispell-dictionary36,1018
(defvar company-ispell-available 'unknown)company-ispell-available42,1241
(defalias 'company-ispell--lookup-wordscompany-ispell--lookup-words44,1285
(defun company-ispell-available ()company-ispell-available49,1410
(defun company-ispell (command &optional arg &rest ignored)company-ispell61,1796

elpa/company-0.9.10/company-clang.el,2617
(defgroup company-clang nilcompany-clang32,967
(defcustom company-clang-executablecompany-clang-executable36,1049
(defcustom company-clang-begin-after-member-access tcompany-clang-begin-after-member-access41,1163
(defcustom company-clang-arguments nilcompany-clang-arguments51,1550
(defcustom company-clang-prefix-guesser 'company-clang-guess-prefixcompany-clang-prefix-guesser57,1835
(defvar company-clang-modes '(c-mode c++-mode objc-mode)company-clang-modes61,2021
(defcustom company-clang-insert-arguments tcompany-clang-insert-arguments64,2122
(defvar company-clang--prefix nil)company-clang--prefix71,2383
(defsubst company-clang--guess-pch-file (file)company-clang--guess-pch-file73,2419
(defsubst company-clang--file-substring (file beg end)company-clang--file-substring79,2698
(defun company-clang-guess-prefix ()company-clang-guess-prefix84,2850
(defun company-clang-set-prefix (&optional prefix)company-clang-set-prefix93,3275
(defconst company-clang--completion-patterncompany-clang--completion-pattern113,4148
(defconst company-clang--error-buffer-name "*clang-error*")company-clang--error-buffer-name116,4278
(defun company-clang--lang-option ()company-clang--lang-option118,4339
(defun company-clang--parse-output (prefix _objc)company-clang--parse-output124,4574
(defun company-clang--meta (candidate)company-clang--meta144,5376
(defun company-clang--annotation (candidate)company-clang--annotation147,5457
(defun company-clang--annotation-1 (candidate)company-clang--annotation-1159,5840
(defun company-clang--strip-formatting (text)company-clang--strip-formatting175,6421
(defun company-clang--handle-error (res args)company-clang--handle-error181,6572
(defun company-clang--start-process (prefix callback &rest args)company-clang--start-process204,7572
(defsubst company-clang--build-location (pos)company-clang--build-location235,8853
(defsubst company-clang--build-complete-args (pos)company-clang--build-complete-args248,9245
(defun company-clang--candidates (prefix callback)company-clang--candidates259,9822
(defun company-clang--prefix ()company-clang--prefix274,10355
(defconst company-clang-required-version 1.1)company-clang-required-version281,10595
(defvar company-clang--version nil)company-clang--version283,10642
(defun company-clang--auto-save-p ()company-clang--auto-save-p285,10679
(defun company-clang--check-version (min apple-min)company-clang--check-version289,10768
(defsubst company-clang-version ()company-clang-version295,10989
(defun company-clang (command &optional arg &rest ignored)company-clang308,11466

elpa/company-0.9.10/company-etags.el,773
(defgroup company-etags nilcompany-etags32,922
(defcustom company-etags-use-main-table-list tcompany-etags-use-main-table-list36,1004
(defcustom company-etags-ignore-case nilcompany-etags-ignore-case43,1274
(defcustom company-etags-everywhere nilcompany-etags-everywhere48,1427
(defvar company-etags-modes '(prog-mode c-mode objc-mode c++-mode java-modecompany-etags-modes57,1804
(defvar-local company-etags-buffer-table 'unknown)company-etags-buffer-table60,1956
(defun company-etags-find-table ()company-etags-find-table62,2008
(defun company-etags-buffer-table ()company-etags-buffer-table71,2334
(defun company-etags--candidates (prefix)company-etags--candidates77,2594
(defun company-etags (command &optional arg &rest ignored)company-etags88,3020

elpa/company-0.9.10/company-abbrev.el,149
(defun company-abbrev-insert (match)company-abbrev-insert32,925
(defun company-abbrev (command &optional arg &rest ignored)company-abbrev37,1041

elpa/company-0.9.10/company-dabbrev.el,1381
(defgroup company-dabbrev nilcompany-dabbrev31,951
(defcustom company-dabbrev-other-buffers 'allcompany-dabbrev-other-buffers35,1038
(defcustom company-dabbrev-ignore-buffers "\\`[ *]"company-dabbrev-ignore-buffers43,1436
(defcustom company-dabbrev-time-limit .1company-dabbrev-time-limit50,1721
(defcustom company-dabbrev-char-regexp "\\sw"company-dabbrev-char-regexp55,1921
(defcustom company-dabbrev-ignore-case 'keep-prefixcompany-dabbrev-ignore-case59,2063
(defcustom company-dabbrev-downcase 'case-replacecompany-dabbrev-downcase68,2494
(defcustom company-dabbrev-minimum-length 4company-dabbrev-minimum-length82,2996
(defcustom company-dabbrev-ignore-invisible nilcompany-dabbrev-ignore-invisible88,3240
(defmacro company-dabbrev--time-limit-while (test start limit freq &rest body)company-dabbrev--time-limit-while93,3383
(defun company-dabbrev--make-regexp ()company-dabbrev--make-regexp105,3850
(defun company-dabbrev--search-buffer (regexp pos symbols start limitcompany-dabbrev--search-buffer108,3945
(defun company-dabbrev--search (regexp &optional limit other-buffer-modescompany-dabbrev--search147,5890
(defun company-dabbrev--prefix ()company-dabbrev--prefix169,6998
(defun company-dabbrev--filter (prefix candidates)company-dabbrev--filter177,7322
(defun company-dabbrev (command &optional arg &rest ignored)company-dabbrev182,7493

elpa/company-0.9.10/company-eclim.el,1239
(defgroup company-eclim nilcompany-eclim37,1253
(defun company-eclim-executable-find ()company-eclim-executable-find41,1335
(defcustom company-eclim-executablecompany-eclim-executable50,1782
(defcustom company-eclim-auto-save tcompany-eclim-auto-save57,1981
(defvar-local company-eclim--project-dir 'unknown)company-eclim--project-dir65,2317
(defvar-local company-eclim--project-name nil)company-eclim--project-name67,2369
(defvar json-array-type)json-array-type70,2453
(defun company-eclim--call-process (&rest args)company-eclim--call-process72,2479
(defun company-eclim--project-list ()company-eclim--project-list87,3035
(defun company-eclim--project-dir ()company-eclim--project-dir90,3122
(defun company-eclim--project-name ()company-eclim--project-name99,3454
(defun company-eclim--candidates (prefix)company-eclim--candidates108,3843
(defun company-eclim--search-point (prefix)company-eclim--search-point137,5234
(defun company-eclim--meta (candidate)company-eclim--meta142,5372
(defun company-eclim--annotation (candidate)company-eclim--annotation145,5453
(defun company-eclim--prefix ()company-eclim--prefix150,5654
(defun company-eclim (command &optional arg &rest ignored)company-eclim158,5914

elpa/company-0.9.10/company.el,21300
(defgroup company nilcompany81,3073
(defface company-tooltipcompany-tooltip87,3203
(defface company-tooltip-selectioncompany-tooltip-selection95,3467
(defface company-tooltip-searchcompany-tooltip-search103,3757
(defface company-tooltip-search-selectioncompany-tooltip-search-selection107,3877
(defface company-tooltip-mousecompany-tooltip-mouse111,4028
(defface company-tooltip-commoncompany-tooltip-common115,4147
(defface company-tooltip-common-selectioncompany-tooltip-common-selection122,4341
(defface company-tooltip-annotationcompany-tooltip-annotation126,4497
(defface company-tooltip-annotation-selectioncompany-tooltip-annotation-selection133,4703
(defface company-scrollbar-fgcompany-scrollbar-fg137,4871
(defface company-scrollbar-bgcompany-scrollbar-bg144,5054
(defface company-previewcompany-preview151,5241
(defface company-preview-commoncompany-preview-common159,5472
(defface company-preview-searchcompany-preview-search167,5721
(defface company-echo nilcompany-echo175,5974
(defface company-echo-commoncompany-echo-common178,6050
(defun company-frontends-set (variable value)company-frontends-set183,6256
(defcustom company-frontends '(company-pseudo-tooltip-unless-just-one-frontendcompany-frontends210,7791
(defcustom company-tooltip-limit 10company-tooltip-limit251,9808
(defcustom company-tooltip-minimum 6company-tooltip-minimum255,9916
(defcustom company-tooltip-minimum-width 0company-tooltip-minimum-width260,10086
(defcustom company-tooltip-maximum-width most-positive-fixnumcompany-tooltip-maximum-width266,10292
(defcustom company-tooltip-margin 1company-tooltip-margin272,10517
(defcustom company-tooltip-offset-display 'scrollbarcompany-tooltip-offset-display276,10627
(defcustom company-tooltip-align-annotations nilcompany-tooltip-align-annotations283,10983
(defcustom company-tooltip-flip-when-above nilcompany-tooltip-flip-when-above288,11156
(defvar company-safe-backendscompany-safe-backends293,11328
(defun company-safe-backends-p (backends)company-safe-backends-p316,12150
(defcustom company-backends `(,@(unless (version< "24.3.51" emacs-version)company-backends324,12458
(defcustom company-transformers nilcompany-transformers479,19804
(defcustom company-completion-started-hook nilcompany-completion-started-hook494,20463
(defcustom company-completion-cancelled-hook nilcompany-completion-cancelled-hook500,20664
(defcustom company-completion-finished-hook nilcompany-completion-finished-hook506,20868
(defcustom company-after-completion-hook nilcompany-after-completion-hook514,21176
(defcustom company-minimum-prefix-length 3company-minimum-prefix-length519,21370
(defcustom company-abort-manual-when-too-short nilcompany-abort-manual-when-too-short523,21506
(defcustom company-require-match 'company-explicit-action-pcompany-require-match530,21790
(defcustom company-auto-complete nilcompany-auto-complete542,22352
(defcustom company-auto-complete-chars '(?\  ?\) ?.)company-auto-complete-chars553,22834
(defcustom company-idle-delay .5company-idle-delay581,24325
(defcustom company-tooltip-idle-delay .5company-tooltip-idle-delay590,24750
(defcustom company-begin-commands '(self-insert-commandcompany-begin-commands597,25057
(defcustom company-continue-commands '(not save-buffer save-some-bufferscompany-continue-commands615,25954
(defcustom company-show-numbers nilcompany-show-numbers631,26871
(defcustom company-show-numbers-function #'company--show-numberscompany-show-numbers-function636,27059
(defcustom company-selection-wrap-around nilcompany-selection-wrap-around644,27434
(defvar company-async-wait 0.03company-async-wait649,27631
(defvar company-async-timeout 2company-async-timeout653,27773
(defvar company-mode-map (make-sparse-keymap)company-mode-map658,27959
(defvar company-active-mapcompany-active-map661,28042
(defvar company--disabled-backends nil)company--disabled-backends691,29617
(defun company-init-backend (backend)company-init-backend693,29658
(defun company--maybe-init-backend (backend)company--maybe-init-backend717,30434
(defcustom company-lighter-base "company"company-lighter-base723,30635
(defvar company-lighter '(" "company-lighter728,30791
(define-minor-mode company-modecompany-mode745,31485
(defcustom company-global-modes tcompany-global-modes783,33032
(define-globalized-minor-mode global-company-mode company-mode company-mode-on)global-company-mode801,33908
(defun company-mode-on ()company-mode-on803,33989
(defsubst company-assert-enabled ()company-assert-enabled812,34379
(defvar-local company-my-keymap nil)company-my-keymap819,34590
(defvar company-emulation-alist '((t . nil)))company-emulation-alist821,34628
(defsubst company-enable-overriding-keymap (keymap)company-enable-overriding-keymap823,34675
(defun company-ensure-emulation-alist ()company-ensure-emulation-alist827,34789
(defun company-install-map ()company-install-map833,35058
(defun company-uninstall-map ()company-uninstall-map838,35236
(defun company--company-command-p (keys)company--company-command-p841,35314
(defun company-ignore ()company-ignore850,35739
(defun company-input-noop ()company-input-noop856,35874
(defun company--posn-col-row (posn)company--posn-col-row862,36050
(defun company--col-row (&optional pos)company--col-row876,36722
(defun company--row (&optional pos)company--row879,36810
(defvar-local company-backend nil)company-backend884,36961
(defun company-grab (regexp &optional expression limit)company-grab886,36997
(defun company-grab-line (regexp &optional expression)company-grab-line890,37151
(defun company-grab-symbol ()company-grab-symbol898,37516
(defun company-grab-word ()company-grab-word907,37912
(defun company-grab-symbol-cons (idle-begin-after-re &optional max-len)company-grab-symbol-cons916,38294
(defun company-in-string-or-comment ()company-in-string-or-comment930,38926
(defun company-call-backend (&rest args)company-call-backend937,39158
(defun company--force-sync (fun args backend)company--force-sync940,39273
(defun company-call-backend-raw (&rest args)company-call-backend-raw961,40262
(defun company--multi-backend-adapter (backends command &rest args)company--multi-backend-adapter972,40771
(defun company--multi-backend-adapter-candidates (backends prefix separate)company--multi-backend-adapter-candidates1002,41945
(defun company--multi-candidates-mapper (backend separate tag)company--multi-candidates-mapper1018,42932
(defun company--merge-async (pairs merger)company--merge-async1032,43349
(defun company--prefix-str (prefix)company--prefix-str1063,44668
(defvar-local company-prefix nil)company-prefix1068,44820
(defvar-local company-candidates nil)company-candidates1070,44855
(defvar-local company-candidates-length nil)company-candidates-length1072,44894
(defvar-local company-candidates-cache nil)company-candidates-cache1074,44940
(defvar-local company-candidates-predicate nil)company-candidates-predicate1076,44985
(defvar-local company-common nil)company-common1078,45034
(defvar-local company-selection 0)company-selection1080,45069
(defvar-local company-selection-changed nil)company-selection-changed1082,45105
(defvar-local company--manual-action nilcompany--manual-action1084,45151
(defvar-local company--manual-prefix nil)company--manual-prefix1087,45240
(defvar company--auto-completion nilcompany--auto-completion1089,45283
(defvar-local company--point-max nil)company--point-max1093,45429
(defvar-local company-point nil)company-point1095,45468
(defvar company-timer nil)company-timer1097,45502
(defvar company-tooltip-timer nil)company-tooltip-timer1098,45529
(defsubst company-strip-prefix (str)company-strip-prefix1100,45565
(defun company--insert-candidate (candidate)company--insert-candidate1103,45646
(defmacro company-with-candidate-inserted (candidate &rest body)company-with-candidate-inserted1113,46101
(defun company-explicit-action-p ()company-explicit-action-p1127,46650
(defun company-reformat (candidate)company-reformat1132,46819
(defun company--should-complete ()company--should-complete1140,47208
(defun company--should-continue ()company--should-continue1149,47587
(defun company-call-frontends (command)company-call-frontends1159,48051
(defun company-set-selection (selection &optional force-update)company-set-selection1166,48342
(defun company--group-lighter (candidate base)company--group-lighter1176,48772
(defun company-update-candidates (candidates)company-update-candidates1185,49231
(defun company-calculate-candidates (prefix ignore-case)company-calculate-candidates1219,50820
(defun company--unique-match-p (candidates prefix ignore-case)company--unique-match-p1240,51785
(defun company--fetch-candidates (prefix)company--fetch-candidates1246,52013
(defun company--flyspell-workaround-p ()company--flyspell-workaround-p1277,53250
(defun company--preprocess-candidates (candidates)company--preprocess-candidates1282,53406
(defun company--postprocess-candidates (candidates)company--postprocess-candidates1290,53696
(defun company--strip-duplicates (candidates)company--strip-duplicates1297,54027
(defun company--transform-candidates (candidates)company--transform-candidates1320,54945
(defcustom company-occurrence-weight-functioncompany-occurrence-weight-function1326,55097
(defun company-occurrence-prefer-closest-above (pos match-beg match-end)company-occurrence-prefer-closest-above1337,55591
(defun company-occurrence-prefer-any-closest (pos _match-beg match-end)company-occurrence-prefer-any-closest1343,55818
(defun company-sort-by-occurrence (candidates)company-sort-by-occurrence1347,55973
(defun company--occurrence-predicate ()company--occurrence-predicate1381,57360
(defun company-sort-by-backend-importance (candidates)company-sort-by-backend-importance1402,58314
(defun company-sort-prefer-same-case-prefix (candidates)company-sort-prefer-same-case-prefix1420,59138
(defun company-idle-begin (buf win tick pos)company-idle-begin1430,59616
(defun company-auto-begin ()company-auto-begin1440,59952
(defun company-manual-begin ()company-manual-begin1455,60489
(defun company-other-backend (&optional backward)company-other-backend1466,60803
(defun company-require-match-p ()company-require-match-p1483,61474
(defun company-auto-complete-p (input)company-auto-complete-p1491,61795
(defun company--incremental-p ()company--incremental-p1504,62395
(defun company--continue-failed (new-prefix)company--continue-failed1512,62719
(defun company--good-prefix-p (prefix)company--good-prefix-p1532,63493
(defun company--continue ()company--continue1543,64062
(defun company--begin-new ()company--begin-new1578,65564
(defun company--perform ()company--perform1618,67429
(defun company-cancel (&optional result)company-cancel1629,67841
(defun company-abort ()company-abort1661,68993
(defun company-finish (result)company-finish1665,69061
(defsubst company-keep (command)company-keep1669,69157
(defun company-pre-command ()company-pre-command1672,69246
(defun company-post-command ()company-post-command1689,69852
(defun company--idle-delay ()company--idle-delay1720,71221
(defvar company--begin-inhibit-commands '(company-abortcompany--begin-inhibit-commands1729,71450
(defun company--should-begin ()company--should-begin1738,71939
(defcustom company-search-regexp-function #'regexp-quotecompany-search-regexp-function1747,72281
(defvar-local company-search-string "")company-search-string1760,72983
(defvar company-search-lighter '(" "company-search-lighter1762,73024
(defvar-local company-search-filtering nilcompany-search-filtering1768,73275
(defvar-local company--search-old-selection 0)company--search-old-selection1771,73389
(defvar-local company--search-old-changed nil)company--search-old-changed1773,73437
(defun company-search-words-regexp (input)company-search-words-regexp1775,73485
(defun company-search-words-in-any-order-regexp (input)company-search-words-in-any-order-regexp1779,73646
(defun company-search-flex-regexp (input)company-search-flex-regexp1788,74027
(defun company--permutations (lst)company--permutations1797,74359
(defun company--search (text lines)company--search1806,74581
(defun company-search-keypad ()company-search-keypad1814,74825
(defun company-search-printing-char ()company-search-printing-char1820,75022
(defun company--search-update-predicate (ss)company--search-update-predicate1828,75307
(defun company--search-update-string (new)company--search-update-string1839,75810
(defun company--search-assert-input ()company--search-assert-input1846,76072
(defun company-search-repeat-forward ()company-search-repeat-forward1851,76231
(defun company-search-repeat-backward ()company-search-repeat-backward1862,76666
(defun company-search-toggle-filtering ()company-search-toggle-filtering1874,77174
(defun company-search-abort ()company-search-abort1883,77491
(defun company-search-other-char ()company-search-other-char1891,77769
(defun company-search-delete-char ()company-search-delete-char1897,77922
(defvar company-search-mapcompany-search-map1907,78248
(define-minor-mode company-search-modecompany-search-mode1950,80310
(defun company--search-assert-enabled ()company--search-assert-enabled1972,81267
(defun company-search-candidates ()company-search-candidates1978,81442
(defvar company-filter-mapcompany-filter-map1997,82207
(defun company-filter-candidates ()company-filter-candidates2005,82498
(defun company-select-next (&optional arg)company-select-next2015,82871
(defun company-select-previous (&optional arg)company-select-previous2023,83111
(defun company-select-next-or-abort (&optional arg)company-select-next-or-abort2030,83310
(defun company-select-previous-or-abort (&optional arg)company-select-previous-or-abort2041,83644
(defun company-next-page ()company-next-page2052,83990
(defun company-previous-page ()company-previous-page2063,84410
(defvar company-pseudo-tooltip-overlay)company-pseudo-tooltip-overlay2074,84836
(defvar company-tooltip-offset)company-tooltip-offset2076,84877
(defun company--inside-tooltip-p (event-col-row row height)company--inside-tooltip-p2078,84910
(defun company--event-col-row (event)company--event-col-row2092,85454
(defun company-select-mouse (event)company-select-mouse2095,85540
(defun company-complete-mouse (event)company-complete-mouse2121,86727
(defun company-complete-selection ()company-complete-selection2127,86904
(defun company-complete-common ()company-complete-common2134,87120
(defun company-complete-common-or-cycle (&optional arg)company-complete-common-or-cycle2143,87443
(defun company-indent-or-complete-common ()company-indent-or-complete-common2156,87955
(defun company-select-next-if-tooltip-visible-or-complete-selection ()company-select-next-if-tooltip-visible-or-complete-selection2173,88583
(defun company-complete ()company-complete2183,89032
(defun company-complete-number (n)company-complete-number2198,89686
(defconst company-space-strings-limit 100)company-space-strings-limit2222,90781
(defconst company-space-stringscompany-space-strings2224,90825
(defun company-space-string (len)company-space-string2230,91015
(defun company-safe-substring (str from &optional to)company-safe-substring2235,91159
(defvar-local company-last-metadata nil)company-last-metadata2255,91887
(defun company-fetch-metadata ()company-fetch-metadata2257,91929
(defun company-doc-buffer (&optional string)company-doc-buffer2264,92216
(defvar company--electric-saved-window-configuration nil)company--electric-saved-window-configuration2272,92438
(defvar company--electric-commandscompany--electric-commands2274,92497
(defun company--electric-restore-window-configuration ()company--electric-restore-window-configuration2278,92662
(defmacro company--electric-do (&rest body)company--electric-do2285,93043
(defun company--unread-this-command-keys ()company--unread-this-command-keys2297,93549
(defun company-show-doc-buffer ()company-show-doc-buffer2304,93843
(defun company-show-location ()company-show-location2321,94603
(defvar-local company-callback nil)company-callback2344,95626
(defun company-remove-callback (&optional ignored)company-remove-callback2346,95663
(defun company-begin-backend (backend &optional callback)company-begin-backend2351,95940
(defun company-begin-with (candidatescompany-begin-with2367,96713
(defun company-version (&optional show-version)company-version2394,97714
(defun company-diag ()company-diag2407,98113
(defvar-local company-pseudo-tooltip-overlay nil)company-pseudo-tooltip-overlay2456,100011
(defvar-local company-tooltip-offset 0)company-tooltip-offset2458,100062
(defun company-tooltip--lines-update-offset (selection num-lines limit)company-tooltip--lines-update-offset2460,100103
(defun company-tooltip--simple-update-offset (selection _num-lines limit)company-tooltip--simple-update-offset2480,100689
(defsubst company-round-tab (arg)company-round-tab2489,100962
(defun company-plainify (str)company-plainify2492,101046
(defun company-fill-propertize (value annotation width selected left right)company-fill-propertize2505,101575
(defun company--search-chunks ()company--search-chunks2581,105369
(defun company--pre-render (str &optional annotation-p)company--pre-render2591,105639
(defun company--clean-string (str)company--clean-string2602,106141
(defun company-buffer-lines (beg end)company-buffer-lines2623,106693
(defun company-modify-line (old new offset)company-modify-line2647,107694
(defun company--show-numbers (numbered)company--show-numbers2652,107866
(defsubst company--window-height ()company--window-height2655,107943
(defun company--window-width ()company--window-width2660,108080
(defun company--replacement-string (lines old column nl &optional align-top)company--replacement-string2685,109025
(defun company--offset-line (line offset)company--offset-line2724,110379
(defun company--create-lines (selection limit)company--create-lines2729,110487
(defun company--scrollbar-bounds (offset limit length)company--scrollbar-bounds2823,114190
(defun company--scrollbar (i bounds)company--scrollbar2830,114455
(defun company--scrollpos-line (text width)company--scrollpos-line2836,114662
(defun company--pseudo-tooltip-height ()company--pseudo-tooltip-height2844,114952
(defun company-pseudo-tooltip-show (row column selection)company-pseudo-tooltip-show2854,115415
(defun company-pseudo-tooltip-show-at-point (pos column-offset)company-pseudo-tooltip-show-at-point2887,116610
(defun company-pseudo-tooltip-edit (selection)company-pseudo-tooltip-edit2893,116876
(defun company-pseudo-tooltip-hide ()company-pseudo-tooltip-hide2904,117461
(defun company-pseudo-tooltip-hide-temporarily ()company-pseudo-tooltip-hide-temporarily2909,117639
(defun company-pseudo-tooltip-unhide ()company-pseudo-tooltip-unhide2916,118001
(defun company-pseudo-tooltip-guard ()company-pseudo-tooltip-guard2933,118731
(defun company-pseudo-tooltip-frontend (command)company-pseudo-tooltip-frontend2945,119192
(defun company-pseudo-tooltip-unless-just-one-frontend (command)company-pseudo-tooltip-unless-just-one-frontend2969,120375
(defun company-pseudo-tooltip-unless-just-one-frontend-with-delay (command)company-pseudo-tooltip-unless-just-one-frontend-with-delay2975,120648
(defvar-local company-preview-overlay nil)company-preview-overlay3001,121823
(defun company-preview-show-at-point (pos completion)company-preview-show-at-point3003,121867
(defun company-preview-hide ()company-preview-hide3048,123712
(defun company-preview-frontend (command)company-preview-frontend3053,123862
(defun company-preview-if-just-one-frontend (command)company-preview-if-just-one-frontend3061,124232
(defun company--show-inline-p ()company--show-inline-p3067,124481
(defun company-tooltip-visible-p ()company-tooltip-visible-p3076,124868
(defun company-preview-common--show-p ()company-preview-common--show-p3081,125067
(defun company-preview-common-frontend (command)company-preview-common-frontend3087,125321
(defvar-local company-echo-last-msg nil)company-echo-last-msg3098,125791
(defvar company-echo-timer nil)company-echo-timer3100,125833
(defvar company-echo-delay .01)company-echo-delay3102,125866
(defcustom company-echo-truncate-lines tcompany-echo-truncate-lines3104,125899
(defun company-echo-show (&optional getter)company-echo-show3109,126075
(defun company-echo-show-soon (&optional getter)company-echo-show-soon3118,126375
(defun company-echo-cancel (&optional unset)company-echo-cancel3122,126527
(defun company-echo-show-when-idle (&optional getter)company-echo-show-when-idle3128,126689
(defun company-echo-format ()company-echo-format3133,126876
(defun company-echo-strip-common-format ()company-echo-strip-common-format3163,127946
(defun company-echo-hide ()company-echo-hide3188,128785
(defun company-echo-frontend (command)company-echo-frontend3193,128919
(defun company-echo-strip-common-frontend (command)company-echo-strip-common-frontend3199,129145
(defun company-echo-metadata-frontend (command)company-echo-metadata-frontend3205,129397

elpa/company-0.9.10/company-dabbrev-code.el,676
(defgroup company-dabbrev-code nilcompany-dabbrev-code32,969
(defcustom company-dabbrev-code-modescompany-dabbrev-code-modes36,1070
(defcustom company-dabbrev-code-other-buffers tcompany-dabbrev-code-other-buffers48,1652
(defcustom company-dabbrev-code-time-limit .1company-dabbrev-code-time-limit59,2226
(defcustom company-dabbrev-code-everywhere nilcompany-dabbrev-code-everywhere64,2428
(defcustom company-dabbrev-code-ignore-case nilcompany-dabbrev-code-ignore-case68,2552
(defun company-dabbrev-code--make-regexp (prefix)company-dabbrev-code--make-regexp72,2685
(defun company-dabbrev-code (command &optional arg &rest ignored)company-dabbrev-code79,2914

elpa/company-0.9.10/company-template.el,1831
(defface company-template-fieldcompany-template-field26,870
(defvar company-template-nav-mapcompany-template-nav-map32,1114
(defvar company-template-field-mapcompany-template-field-map38,1330
(defvar-local company-template--buffer-templates nil)company-template--buffer-templates44,1540
(defun company-template-templates-at (pos)company-template-templates-at48,1677
(defun company-template-move-to-first (templ)company-template-move-to-first57,1976
(defun company-template-forward-field ()company-template-forward-field62,2111
(defun company-template-clear-field ()company-template-clear-field70,2377
(defun company-template--after-clear-c-like-field ()company-template--after-clear-c-like-field81,2744
(defun company-template-find-next-field ()company-template-find-next-field99,3695
(defun company-template-field-at (&optional point)company-template-field-at111,4175
(defun company-template-declare-template (beg end)company-template-declare-template118,4447
(defun company-template-remove-template (templ)company-template-remove-template128,4829
(defun company-template-add-field (templ beg end &optional display after-clear-fn)company-template-add-field135,5097
(defun company-template-remove-field (ovl &optional clear)company-template-remove-field160,6266
(defun company-template-clean-up (&optional pos)company-template-clean-up171,6724
(defun company-template-insert-hook (ovl after-p &rest _ignore)company-template-insert-hook180,7104
(defun company-template-post-command ()company-template-post-command185,7283
(defun company-template-c-like-templatify (call)company-template-c-like-templatify192,7553
(defun company-template--c-like-args (templ end)company-template--c-like-args223,8767
(defun company-template-objc-templatify (selector)company-template-objc-templatify234,9266

elpa/company-0.9.10/company-autoloads.el,63
(defvar global-company-mode nil "\global-company-mode42,1432

elpa/company-0.9.10/company-pkg.el,85
(define-package "company" "0.9.10" "Modular text completion framework""company"1,0

elpa/company-0.9.10/company-yasnippet.el,381
(defun company-yasnippet--key-prefixes ()company-yasnippet--key-prefixes38,1208
(defun company-yasnippet--candidates (prefix)company-yasnippet--candidates65,2205
(defun company-yasnippet--completions-for-prefix (prefix key-prefix tables)company-yasnippet--completions-for-prefix76,2866
(defun company-yasnippet (command &optional arg &rest ignore)company-yasnippet101,3672

elpa/bui-1.2.1/bui.el,182
(defmacro bui-define-entry-type (entry-type &rest args)bui-define-entry-type53,1812
(defmacro bui-define-interface (entry-type buffer-type &rest args)bui-define-interface85,3104

elpa/bui-1.2.1/bui-button.el,874
(defface bui-timebui-time29,984
(defface bui-file-namebui-file-name34,1096
(defface bui-urlbui-url39,1201
(defface bui-action-buttonbui-action-button44,1294
(defface bui-action-button-mousebui-action-button-mouse49,1409
(defvar bui-button-mapbui-button-map54,1542
(define-button-type 'buibui61,1733
(define-button-type 'bui-actionbui-action65,1802
(define-button-type 'bui-filebui-file70,1920
(define-button-type 'bui-urlbui-url78,2149
(defun bui-button-copy-label (&optional position)bui-button-copy-label86,2365
(defun bui-button-type? (symbol)bui-button-type?93,2634
(defun bui-insert-button (label &optional type &rest properties)bui-insert-button98,2776
(defun bui-insert-action-button (label action &optional messagebui-insert-action-button105,3048
(defun bui-buttonize (value button-type separator &rest properties)bui-buttonize118,3541

elpa/bui-1.2.1/bui-list.el,4276
(defvar bui-list-format nilbui-list-format38,1118
(defcustom bui-list-sort-key nilbui-list-sort-key55,1676
(defvar bui-list-additional-marks nilbui-list-additional-marks68,2055
(defcustom bui-list-show-single nilbui-list-show-single73,2263
(defcustom bui-list-describe-warning-count 10bui-list-describe-warning-count80,2512
(defvar bui-list-describe-function nilbui-list-describe-function89,2854
(defconst bui-list-symbol-specificationsbui-list-symbol-specifications96,3141
(defun bui-list-describe (&rest mark-names)bui-list-describe109,3560
(defun bui-list-symbol (entry-type symbol)bui-list-symbol134,4600
(defun bui-list-symbol-value (entry-type symbol)bui-list-symbol-value138,4741
(defun bui-list-param-title (entry-type param)bui-list-param-title142,4902
(defun bui-list-format (entry-type)bui-list-format146,5052
(defun bui-list-displayed-params (entry-type)bui-list-displayed-params150,5176
(defun bui-list-show-single-entry? (entry-type)bui-list-show-single-entry?154,5339
(defun bui-list-sort-numerically (column a b)bui-list-sort-numerically162,5573
(defmacro bui-list-define-numerical-sorter (column)bui-list-define-numerical-sorter170,5904
(defmacro bui-list-define-numerical-sorters (n)bui-list-define-numerical-sorters182,6369
(defun bui-list-tabulated-sort-key ()bui-list-tabulated-sort-key192,6705
(defun bui-list-tabulated-vector (fun)bui-list-tabulated-vector198,6923
(defun bui-list-tabulated-format ()bui-list-tabulated-format210,7261
(defun bui-list-tabulated-entries (entries entry-type)bui-list-tabulated-entries217,7491
(defun bui-list-tabulated-entry (entry entry-type)bui-list-tabulated-entry224,7765
(defun bui-list-get-display-entries (entry-type &rest args)bui-list-get-display-entries243,8484
(defun bui-list-insert-entries (entries entry-type)bui-list-insert-entries256,9195
(defun bui-list-get-one-line (value &optional _)bui-list-get-one-line262,9414
(defun bui-list-get-time (time &optional _)bui-list-get-time268,9597
(defun bui-list-get-file-name (file-name &optional _)bui-list-get-file-name275,9859
(defun bui-list-get-url (url &optional _)bui-list-get-url283,10112
(defun bui-list-current-id ()bui-list-current-id294,10341
(defun bui-list-current-entry ()bui-list-current-entry299,10476
(defun bui-list-for-each-line (fun &rest args)bui-list-for-each-line304,10621
(defun bui-list-fold-lines (fun init)bui-list-fold-lines314,10930
(defvar-local bui-list-marked nilbui-list-marked326,11272
(defvar-local bui-list-marks nilbui-list-marks336,11504
(defvar bui-list-default-marksbui-list-default-marks339,11594
(defun bui-list-get-mark (name)bui-list-get-mark344,11720
(defun bui-list-get-mark-string (name)bui-list-get-mark-string349,11878
(defun bui-list-current-mark ()bui-list-current-mark353,11991
(defun bui-list-current-mark-name ()bui-list-current-mark-name357,12113
(defun bui-list-get-marked (&rest mark-names)bui-list-get-marked362,12282
(defun bui-list-get-marked-args (mark-name)bui-list-get-marked-args374,12751
(defun bui-list-get-marked-id-list (&rest mark-names)bui-list-get-marked-id-list381,13028
(defun bui-list-marked-or-current (&rest mark-names)bui-list-marked-or-current386,13253
(defun bui-list-map-marked (function &rest mark-names)bui-list-map-marked393,13570
(defun bui-list--mark (mark-name &optional advance &rest args)bui-list--mark400,13878
(defun bui-list-mark (&optional arg)bui-list-mark416,14577
(defun bui-list-mark-all (&optional mark-name)bui-list-mark-all424,14784
(defun bui-list-unmark (&optional arg)bui-list-unmark439,15350
(defun bui-list-unmark-backward ()bui-list-unmark-backward447,15563
(defun bui-list-unmark-all ()bui-list-unmark-all453,15698
(defun bui-list-restore-marks ()bui-list-restore-marks458,15797
(defun bui-list-sort (&optional n)bui-list-sort467,16093
(defvar bui-list-mode-mapbui-list-mode-map478,16391
(defvar bui-list-mark-hintbui-list-mark-hint496,17150
(defvar bui-list-sort-hintbui-list-sort-hint503,17388
(defvar bui-list-info-hintbui-list-info-hint508,17538
(defun bui-list-hint ()bui-list-hint513,17722
(define-derived-mode bui-list-mode tabulated-list-mode "BUI-List"bui-list-mode521,17962
(defun bui-list-initialize ()bui-list-initialize525,18106

elpa/bui-1.2.1/bui-entry.el,589
(defvar bui-void-value 'VOIDbui-void-value28,978
(defun bui-void-value? (value)bui-void-value?31,1080
(defun bui-entry-value (entry param)bui-entry-value35,1191
(defun bui-entry-non-void-value (entry param)bui-entry-non-void-value42,1395
(defun bui-entry-id (entry)bui-entry-id47,1588
(defun bui-entry-by-id (entries id)bui-entry-by-id51,1669
(defun bui-entries-by-ids (entries ids)bui-entries-by-ids56,1809
(defun bui-entry-by-param (entries param value &optional compare)bui-entry-by-param61,1981
(defun bui-replace-entry (entries id new-entry)bui-replace-entry68,2301

elpa/bui-1.2.1/bui-history.el,1016
(defvar-local bui-history-stack-item nilbui-history-stack-item34,1156
(defvar-local bui-history-back-stack nilbui-history-back-stack40,1374
(defvar-local bui-history-forward-stack nilbui-history-forward-stack45,1566
(defcustom bui-history-size 16bui-history-size50,1788
(defun bui-history-add (item)bui-history-add58,2089
(defun bui-history-replace (item)bui-history-replace72,2599
(defun bui-history-goto (item)bui-history-goto76,2719
(defun bui-history-back ()bui-history-back84,2974
(defun bui-history-forward ()bui-history-forward92,3279
(defface bui-history-buttonbui-history-button103,3608
(defcustom bui-history-back-label help-back-labelbui-history-back-label108,3741
(defcustom bui-history-forward-label help-forward-labelbui-history-forward-label113,3887
(define-button-type 'bui-historybui-history118,4038
(defun bui-history-insert-button (label action &optional messagebui-history-insert-button122,4119
(defun bui-history-insert-buttons ()bui-history-insert-buttons134,4613

elpa/bui-1.2.1/bui-info.el,2593
(defface bui-info-headingbui-info-heading34,1107
(defface bui-info-param-titlebui-info-param-title40,1290
(defvar bui-info-format nilbui-info-format48,1457
(defcustom bui-info-ignore-empty-values nilbui-info-ignore-empty-values82,2683
(defcustom bui-info-ignore-void-values tbui-info-ignore-void-values88,2891
(defcustom bui-info-fill tbui-info-fill94,3080
(defcustom bui-info-param-title-format "%-18s: "bui-info-param-title-format101,3289
(defcustom bui-info-multiline-prefixbui-info-multiline-prefix110,3655
(defcustom bui-info-delimiter "\n\f\n"bui-info-delimiter121,4091
(defconst bui-info-symbol-specificationsbui-info-symbol-specifications127,4249
(defun bui-info-symbol (entry-type symbol)bui-info-symbol141,4683
(defun bui-info-symbol-value (entry-type symbol)bui-info-symbol-value145,4824
(defun bui-info-param-title (entry-type param)bui-info-param-title149,4985
(defun bui-info-format (entry-type)bui-info-format153,5130
(defun bui-info-displayed-params (entry-type)bui-info-displayed-params157,5254
(defvar bui-info-title-aliasesbui-info-title-aliases167,5505
(defvar bui-info-value-aliasesbui-info-value-aliases172,5680
(defun bui-info-title-function (fun-or-alias)bui-info-title-function179,5935
(defun bui-info-value-function (fun-or-alias)bui-info-value-function184,6122
(defun bui-info-title-method->function (method)bui-info-title-method->function189,6309
(defun bui-info-value-method->function (method)bui-info-value-method->function200,6710
(defun bui-info-insert-entries (entries entry-type)bui-info-insert-entries211,7089
(defun bui-info-insert-entry (entry entry-type &optional indent-level)bui-info-insert-entry219,7389
(defun bui-info-insert-entry-unit (format-spec entry entry-type)bui-info-insert-entry-unit228,7792
(defun bui-info-insert-title-simple (title &optional face)bui-info-insert-title-simple256,9044
(defun bui-info-insert-title-format (title &optional face)bui-info-insert-title-format263,9298
(defun bui-info-insert-value-simple (value &optional button-or-face indent)bui-info-insert-value-simple270,9596
(defun bui-info-insert-value-indent (value &optional button-or-face)bui-info-insert-value-indent293,10643
(defun bui-info-insert-value-format (value &optional button-or-facebui-info-insert-value-format307,11176
(defun bui-info-insert-time (time &optional face)bui-info-insert-time340,12612
(defvar bui-info-mode-mapbui-info-mode-map349,12877
(define-derived-mode bui-info-mode special-mode "BUI-Info"bui-info-mode357,13127
(defun bui-info-initialize ()bui-info-initialize361,13264

elpa/bui-1.2.1/bui-pkg.el,67
(define-package "bui" "1.2.1" "Buffer interface library""bui"1,0

elpa/bui-1.2.1/bui-utils.el,2226
(defcustom bui-true-string "Yes"bui-true-string27,910
(defcustom bui-false-string "No"bui-false-string33,1067
(defcustom bui-empty-string "—"bui-empty-string39,1235
(defcustom bui-list-separator ", "bui-list-separator45,1408
(defcustom bui-time-format "%F %T"bui-time-format51,1560
(defun bui-propertize-maybe (string &optional face)bui-propertize-maybe61,1776
(defun bui-get-string (value &optional face)bui-get-string67,1973
(defmacro bui-get-non-nil (&optional value &rest body)bui-get-non-nil93,2840
(defmacro bui-insert-non-nil (&optional value &rest body)bui-insert-non-nil100,3060
(defun bui-get-time-string (time)bui-get-time-string107,3292
(defun bui-get-one-line (str)bui-get-one-line117,3745
(defun bui-get-filled-string (str column)bui-get-filled-string121,3869
(defun bui-split-string (str &optional column)bui-split-string129,4092
(defcustom bui-indent 2bui-indent140,4415
(defun bui-get-indent (&optional level)bui-get-indent145,4545
(defun bui-insert-indent (&optional level)bui-insert-indent149,4706
(defun bui-newline (&optional n)bui-newline154,4901
(defmacro bui-with-indent (indent &rest body)bui-with-indent159,5034
(defun bui-format-insert (value &optional face format)bui-format-insert170,5476
(defun bui-split-insert (value &optional face column separator)bui-split-insert207,6928
(defcustom bui-find-file-function #'find-filebui-find-file-function226,7541
(defun bui-find-file (file)bui-find-file235,7859
(defun bui-keyword->symbol (keyword)bui-keyword->symbol244,8102
(defun bui-symbol-if-bound (symbol)bui-symbol-if-bound248,8245
(defun bui-make-symbol (&rest symbols)bui-make-symbol252,8380
(defun bui-symbol-title (symbol)bui-symbol-title256,8535
(defmacro bui-plist-let (args varlist &rest body)bui-plist-let265,8835
(defun bui-map-plist (function plist)bui-map-plist314,10372
(defmacro bui-define-alist-accessor (name assoc-fun)bui-define-alist-accessor333,10973
(defun bui-fill-column ()bui-fill-column352,11564
(defun bui-filter (list &rest predicates)bui-filter356,11674
(defun bui-copy-as-kill (string &optional no-message?)bui-copy-as-kill365,11971
(defmacro bui-define-groups (name &rest args)bui-define-groups372,12227

elpa/bui-1.2.1/bui-autoloads.el,0

elpa/bui-1.2.1/bui-core.el,5598
(defvar bui-mapbui-map35,1145
(defvar bui-history-hintbui-history-hint49,1708
(defvar bui-common-hintbui-common-hint56,1899
(defvar-local bui-item nilbui-item73,2410
(defmacro bui-with-item (item &rest body)bui-with-item94,2974
(defmacro bui-with-current-item (&rest body)bui-with-current-item108,3560
(defmacro bui-define-current-item-accessor (name)bui-define-current-item-accessor115,3749
(defmacro bui-define-current-item-accessors (&rest names)bui-define-current-item-accessors131,4304
(defmacro bui-define-current-args-accessor (n prefix name)bui-define-current-args-accessor142,4664
(defmacro bui-define-current-args-accessors (prefix &rest names)bui-define-current-args-accessors157,5260
(defvar bui-filter-mapbui-filter-map170,5643
(defvar bui-filter-hintbui-filter-hint178,5900
(defcustom bui-filter-predicates nilbui-filter-predicates184,6104
(defcustom bui-filter-mode-line-string "(f)"bui-filter-mode-line-string193,6415
(defvar-local bui-active-filter-predicates nilbui-active-filter-predicates199,6636
(defun bui-filter-current-entries (&rest predicates)bui-filter-current-entries209,7129
(defun bui-enable-filter (predicate &optional single?)bui-enable-filter217,7490
(defun bui-disable-filters ()bui-disable-filters247,8767
(defface bui-hint-keybui-hint-key257,8983
(defcustom bui-hint-format "[%s]"bui-hint-format262,9118
(defvar bui-hint-key-separator ", "bui-hint-key-separator269,9324
(defvar bui-hint #'bui-default-hintbui-hint272,9410
(defun bui-format-hint-keys (key-strings)bui-format-hint-keys296,10058
(defun bui-format-hint (hint)bui-format-hint306,10424
(defun bui-format-hints (&rest hints)bui-format-hints320,10882
(defun bui-default-hint ()bui-default-hint324,11028
(defun bui-show-hint ()bui-show-hint338,11632
(defcustom bui-titles nilbui-titles346,11776
(defvar bui-boolean-params nilbui-boolean-params352,11943
(defvar bui-get-entries-function nilbui-get-entries-function359,12196
(defvar bui-show-entries-function nilbui-show-entries-function363,12324
(defvar bui-mode-initialize-function nilbui-mode-initialize-function370,12611
(defvar bui-message-function nilbui-message-function377,12882
(defcustom bui-buffer-name nilbui-buffer-name382,13059
(defcustom bui-revert-confirm tbui-revert-confirm391,13431
(defconst bui-entry-symbol-specificationsbui-entry-symbol-specifications400,13626
(defconst bui-symbol-specificationsbui-symbol-specifications411,14080
(defalias 'bui-symbol-specification-keyword #'cl-firstbui-symbol-specification-keyword437,15094
(defalias 'bui-symbol-specification-suffix #'cl-secondbui-symbol-specification-suffix440,15197
(defalias 'bui-symbol-specification-generate #'cl-thirdbui-symbol-specification-generate443,15306
(defun bui-symbol-generate? (generate &optional reduced?)bui-symbol-generate?446,15419
(defun bui-map-symbol-specifications (function specifications)bui-map-symbol-specifications453,15729
(defun bui-set-local-variable-maybe (symbol value)bui-set-local-variable-maybe463,16173
(defun bui-set-local-variables (entry-type buffer-type)bui-set-local-variables468,16381
(defalias 'bui-entry-symbol #'bui-make-symbol)bui-entry-symbol490,17328
(defalias 'bui-symbol #'bui-make-symbol)bui-symbol491,17375
(defun bui-entry-symbol-value (entry-type symbol)bui-entry-symbol-value493,17417
(defun bui-symbol-value (entry-type buffer-type symbol)bui-symbol-value498,17590
(defun bui-get-entries (entry-type buffer-type &optional args)bui-get-entries504,17859
(defun bui-mode-enable (entry-type buffer-type)bui-mode-enable510,18115
(define-obsolete-function-alias 'bui-mode-initialize-defaultbui-mode-initialize-default514,18295
(defun bui-mode-initialize (_entry-type _buffer-type)bui-mode-initialize517,18376
(defun bui-insert-entries (entries entry-type buffer-type)bui-insert-entries523,18598
(defun bui-show-entries-default (entries entry-type buffer-type)bui-show-entries-default528,18815
(defun bui-show-entries (entries entry-type buffer-type)bui-show-entries543,19474
(defun bui-message (entries entry-type buffer-type &optional args)bui-message550,19793
(defun bui-buffer-name (entry-type buffer-type &optional args)bui-buffer-name556,20058
(defun bui-param-title (entry-type buffer-type param)bui-param-title571,20524
(defun bui-current-param-title (param)bui-current-param-title579,20859
(defun bui-boolean-param? (entry-type buffer-type param)bui-boolean-param?585,21078
(defun bui-display (buffer)bui-display592,21303
(defun bui-history-item (buffer-item)bui-history-item598,21483
(defun bui-set (buffer-item &optional history)bui-set602,21621
(defun bui-display-entries-current (entries entry-type buffer-typebui-display-entries-current628,22667
(defun bui-get-display-entries-current (entry-type buffer-typebui-get-display-entries-current636,23033
(defun bui-display-entries (entries entry-type buffer-typebui-display-entries644,23393
(defun bui-get-display-entries (entry-type buffer-typebui-get-display-entries657,23935
(defun bui-revert (_ignore-auto noconfirm)bui-revert665,24269
(defvar bui-after-redisplay-hook nilbui-after-redisplay-hook677,24763
(defun bui-redisplay ()bui-redisplay681,24891
(defun bui-redisplay-goto-button ()bui-redisplay-goto-button700,25602
(defvar bui-interfaces nilbui-interfaces712,25937
(defalias 'bui-interface-id #'bui-make-symbolbui-interface-id715,25998
(defun bui-interface-defined? (entry-type buffer-type)bui-interface-defined?718,26119
(defun bui-register-interface (entry-type buffer-type)bui-register-interface723,26321

elpa/ranger-0.9.8.5/ranger-pkg.el,335
(define-package "ranger" "0.9.8.5" "Make dired more like ranger" '((emacs "24.4")) :commit "584e4ae8cce1c54a44b40dd4c77fbb2f06d73ecb" :keywords '("files" "convenience") :authors '(("Rich Alesi <https://github.com/ralesi>")) :maintainer '("Rich Alesi <https://github.com/ralesi>") :url "https://github.com/ralesi/ranger")"ranger"2,31

elpa/ranger-0.9.8.5/ranger.el,14581
(defgroup ranger ()ranger90,3292
(defcustom ranger-cleanup-on-disable tranger-cleanup-on-disable96,3409
(defcustom ranger-cleanup-eagerly nilranger-cleanup-eagerly101,3542
(defcustom ranger-show-hidden tranger-show-hidden106,3689
(defcustom ranger-hidden-filterranger-hidden-filter111,3808
(defcustom ranger-history-length 30ranger-history-length117,3970
(defcustom ranger-copy-ring-length 10ranger-copy-ring-length122,4083
(defcustom ranger-parent-depth 1ranger-parent-depth127,4211
(defcustom ranger-excluded-extensionsranger-excluded-extensions133,4341
(defcustom ranger-modify-header tranger-modify-header144,4509
(defcustom ranger-max-preview-size 2ranger-max-preview-size149,4623
(defcustom ranger-show-literal tranger-show-literal154,4745
(defcustom ranger-listing-switches "-alGh"ranger-listing-switches159,4860
(defcustom ranger-listing-dir-first tranger-listing-dir-first164,4984
(defcustom ranger-persistent-sort nilranger-persistent-sort169,5119
(defcustom ranger-preview-file tranger-preview-file174,5256
(defcustom ranger-deer-show-details tranger-deer-show-details179,5363
(defcustom ranger-width-preview 0.65ranger-width-preview184,5485
(defcustom ranger-width-parents 0.12ranger-width-parents190,5627
(defcustom ranger-max-parent-width 0.42ranger-max-parent-width195,5750
(defcustom ranger-key [?\C-p]ranger-key201,5894
(defcustom ranger-max-tabs 9ranger-max-tabs206,6007
(defcustom ranger-footer-delay 0.01ranger-footer-delay211,6128
(defcustom ranger-preview-delay 0.05ranger-preview-delay216,6253
(defcustom ranger-header-func 'ranger-header-lineranger-header-func222,6405
(defcustom ranger-map-style 'rangerranger-map-style228,6608
(defcustom ranger-tabs-style 'normalranger-tabs-style235,6861
(defcustom ranger-override-dired nilranger-override-dired243,7148
(defcustom ranger-dont-show-binary tranger-dont-show-binary250,7415
(defcustom ranger-hide-cursor tranger-hide-cursor256,7569
(defvar ranger-was-ranger)ranger-was-ranger263,7713
(defvar ranger-mode)ranger-mode264,7740
(defvar dired-omit-verbose)dired-omit-verbose265,7761
(defvar dired-omit-mode)dired-omit-mode266,7789
(defvar image-dired-temp-image-file)image-dired-temp-image-file267,7814
(defvar image-dired-cmd-create-temp-image-program)image-dired-cmd-create-temp-image-program268,7851
(defvar image-dired-cmd-create-temp-image-options)image-dired-cmd-create-temp-image-options269,7902
(defvar image-dired-display-image-buffer)image-dired-display-image-buffer270,7953
(defvar ranger-wdired nil)ranger-wdired274,8017
(defvar ranger-sorting-switches nil)ranger-sorting-switches276,8045
(defvar ranger-window nil)ranger-window278,8083
(defvar ranger-buffer nil)ranger-buffer279,8110
(defvar ranger-frame nil)ranger-frame280,8137
(defvar ranger-w-alist ()ranger-w-alist282,8164
(defvar ranger-f-alist ()ranger-f-alist285,8225
(defvar ranger-t-alist ()ranger-t-alist288,8285
(defvar ranger-undo-tab ()ranger-undo-tab291,8358
(defvar ranger-history-index 0)ranger-history-index294,8418
(defvar ranger-history-ring (make-ring ranger-history-length))ranger-history-ring296,8451
(defvar ranger-copy-ring (make-ring ranger-copy-ring-length))ranger-copy-ring298,8515
(defvar ranger-image-scale-ratio 1.3)ranger-image-scale-ratio300,8578
(defvar ranger-image-fit-window nil)ranger-image-fit-window301,8616
(defvar ranger-pre-alist)ranger-pre-alist303,8654
(defvar ranger-pre-saved nil)ranger-pre-saved304,8680
(defvar ranger-pre-hl-mode nil)ranger-pre-hl-mode305,8710
(defvar ranger-pre-arev-mode nil)ranger-pre-arev-mode306,8742
(defvar ranger-pre-omit-mode nil)ranger-pre-omit-mode307,8776
(defvar ranger-pre-dired-listing nil)ranger-pre-dired-listing308,8810
(defvar ranger-preview-window nil)ranger-preview-window310,8849
(defvar ranger-preview-buffers ()ranger-preview-buffers311,8884
(defvar ranger-parent-windows nil)ranger-parent-windows314,8962
(defvar ranger-parent-buffers ()ranger-parent-buffers315,8997
(defvar ranger-parent-dirs nil)ranger-parent-dirs317,9072
(defvar ranger-visited-buffers ()ranger-visited-buffers319,9105
(defvar ranger-minimal nil)ranger-minimal323,9207
(defvar ranger-subdir-p nil)ranger-subdir-p325,9236
(defvar ranger-current-tab 1)ranger-current-tab329,9293
(defvar ranger-current-file nil)ranger-current-file331,9324
(defvar ranger-child-name nil)ranger-child-name334,9411
(defvar ranger-mode-load-hook nil)ranger-mode-load-hook338,9500
(defvar ranger-preview-dir-hook '(;; ranger-to-diredranger-preview-dir-hook339,9535
(defun ranger-show-details ()ranger-show-details347,9879
(defun ranger-truncate ()ranger-truncate351,9960
(defvar ranger-parent-dir-hook '(;; ranger-to-diredranger-parent-dir-hook355,10034
(defvar ranger-normal-mode-mapranger-normal-mode-map363,10383
(defvar ranger-mode-mapranger-mode-map502,16234
(defmacro r--fget (var &optional frame)r--fget519,16785
(defmacro r--fset (var val &optional frame buffer-local)r--fset528,17139
(defmacro r--fclear (parameter)r--fclear538,17560
(defun r--aget (alist key)r--aget544,17643
(defun r--akeys (alist)r--akeys549,17790
(defmacro r--aput (alist key value &optional no-overwrite)r--aput554,17925
(defmacro r--aremove (alist key)r--aremove563,18263
(defun ranger-track-window (window &optional prev curr tab)ranger-track-window572,18525
(defun ranger-make-tab (index name path)ranger-make-tab585,18912
(defun ranger-define-additional-maps (&optional mode)ranger-define-additional-maps603,19399
(defun ranger-show-copy-ring (copy-index)ranger-show-copy-ring649,20994
(defun ranger-update-copy-ring (move append)ranger-update-copy-ring656,21305
(defun ranger-toggle-mark ()ranger-toggle-mark679,22356
(defun ranger-mark (arg &optional interactive)ranger-mark691,22729
(defun ranger-copy-append ()ranger-copy-append712,23545
(defun ranger-copy (&optional append)ranger-copy718,23756
(defun ranger-cut-append ()ranger-cut-append724,23985
(defun ranger-cut (&optional append)ranger-cut728,24063
(defun ranger-paste (&optional overwrite)ranger-paste734,24288
(defun ranger-paste-over ()ranger-paste-over773,25992
(defun ranger-show-copy-contents ()ranger-show-copy-contents778,26122
(defun ranger-pop-eshell (&optional arg)ranger-pop-eshell790,26604
(defmacro ranger-define-delayed (func-sym delay)ranger-define-delayed807,27164
(defun ranger--available-tabs ()ranger--available-tabs835,28262
(defun ranger-new-tab (&optional index no-refresh)ranger-new-tab845,28567
(defun ranger-close-tab (&optional index)ranger-close-tab860,29142
(defun ranger-restore-tab ()ranger-restore-tab869,29410
(defun ranger-other-tab (dir &optional index)ranger-other-tab885,29940
(defun ranger-next-tab (&optional index)ranger-next-tab903,30447
(defun ranger-prev-tab (&optional index)ranger-prev-tab907,30539
(defun ranger-update-tab (index)ranger-update-tab911,30632
(defun ranger-goto-tab (index)ranger-goto-tab919,30866
(defun ranger-search ()ranger-search929,31066
(defun ranger-search-next ()ranger-search-next936,31235
(defun ranger-search-previous ()ranger-search-previous943,31413
(defun ranger-show-bookmarks ()ranger-show-bookmarks953,31612
(defun ranger--directory-bookmarks ()ranger--directory-bookmarks961,31898
(defun ranger-create-mark (mark)ranger-create-mark970,32273
(defun ranger-remove-mark ()ranger-remove-mark979,32618
(defun ranger-goto-mark ()ranger-goto-mark989,32982
(defun ranger--marks ()ranger--marks1000,33402
(defun ranger--ring-elements (ring)ranger--ring-elements1012,33715
(defun ranger--ring-index-elements (ring)ranger--ring-index-elements1020,33936
(defun ranger-show-history (history)ranger-show-history1029,34193
(defun ranger-jump-history (jump)ranger-jump-history1037,34460
(defun ranger-next-history ()ranger-next-history1050,35026
(defun ranger-prev-history ()ranger-prev-history1055,35129
(defun ranger-refresh ()ranger-refresh1063,35263
(defun ranger-help ()ranger-help1076,35568
(defun ranger-toggle-dotfiles ()ranger-toggle-dotfiles1081,35768
(defun ranger-toggle-dir-first ()ranger-toggle-dir-first1088,35975
(defun ranger-toggle-details ()ranger-toggle-details1095,36222
(defun ranger-omit-files ()ranger-omit-files1102,36450
(defun ranger-sort-criteria (criteria)ranger-sort-criteria1111,36808
(defun ranger-sort (&optional force)ranger-sort1135,37641
(defun ranger-preview-toggle ()ranger-preview-toggle1149,38072
(defun ranger-toggle-scale-images ()ranger-toggle-scale-images1171,38967
(defun ranger-toggle-literal ()ranger-toggle-literal1181,39299
(defun ranger-scroll-page-down ()ranger-scroll-page-down1191,39610
(defun ranger-scroll-page-up ()ranger-scroll-page-up1196,39716
(defun ranger-travel ()ranger-travel1205,39898
(defun ranger-up-directory ()ranger-up-directory1214,40132
(defun ranger-save-window-settings (&optional overwrite)ranger-save-window-settings1226,40511
(defun ranger-find-file (&optional entry ignore-history)ranger-find-file1241,40981
(defun ranger-open-file (&optional mode)ranger-open-file1278,42507
(defun ranger-open-in-external-app ()ranger-open-in-external-app1305,43757
(defun ranger-open-file-horizontally ()ranger-open-file-horizontally1323,44523
(defun ranger-open-file-vertically ()ranger-open-file-vertically1328,44677
(defun ranger-open-file-frame ()ranger-open-file-frame1333,44827
(defun ranger-insert-subdir ()ranger-insert-subdir1338,44969
(defun ranger-prev-subdir ()ranger-prev-subdir1351,45382
(defun ranger-next-subdir ()ranger-next-subdir1357,45521
(defun ranger-update-history (name)ranger-update-history1363,45656
(defun ranger-goto-top ()ranger-goto-top1371,45961
(defun ranger-page-down ()ranger-page-down1377,46083
(defun ranger-half-page-down ()ranger-half-page-down1382,46194
(defun ranger-goto-bottom ()ranger-goto-bottom1387,46316
(defun ranger-page-up ()ranger-page-up1393,46441
(defun ranger-half-page-up ()ranger-half-page-up1398,46550
(defun ranger-go (path)ranger-go1403,46670
(defun ranger-next-file (arg)ranger-next-file1460,48197
(defun ranger-prev-file (arg)ranger-prev-file1479,48847
(defun ranger--footer-spec ())ranger--footer-spec1483,48931
(defun ranger-show-size ()ranger-show-size1485,48963
(defun ranger-show-file-details ()ranger-show-file-details1490,49062
(defun ranger-details-message (&optional sizes)ranger-details-message1494,49165
(defun ranger-update-current-file ()ranger-update-current-file1566,52165
(defun ranger-sub-window-setup ()ranger-sub-window-setup1575,52355
(defun ranger-parent-child-select ()ranger-parent-child-select1585,52726
(defun ranger-less-parents ()ranger-less-parents1590,52891
(defun ranger-more-parents ()ranger-more-parents1596,53056
(defun ranger-setup-parents ()ranger-setup-parents1602,53215
(defun ranger-make-parent (parent)ranger-make-parent1652,54952
(defun ranger-next-parent ()ranger-next-parent1677,56198
(defun ranger-prev-parent ()ranger-prev-parent1687,56506
(defun ranger-dir-buffer (entry preview)ranger-dir-buffer1699,56847
(defun ranger-dir-contents (entry)ranger-dir-contents1711,57275
(defun ranger-preview-buffer (entry-name)ranger-preview-buffer1736,58375
(defun ranger-setup-image-preview (entry-name)ranger-setup-image-preview1769,59733
(defun ranger-setup-preview ()ranger-setup-preview1807,61351
(defun ranger-parent-directory (entry)ranger-parent-directory1873,64982
(defun ranger-show-drives ()ranger-show-drives1882,65288
(defun ranger--get-windows-drives ()ranger--get-windows-drives1891,65563
(defun ranger--get-file-sizes (fileset)ranger--get-file-sizes1896,65756
(defun ranger--get-mount-partitions (mode)ranger--get-mount-partitions1908,66163
(defun ranger--get-file-listing (dir)ranger--get-file-listing1927,66883
(defun ranger-display-buffer-at-side (buffer alist)ranger-display-buffer-at-side1943,67397
(defun ranger-show-flags ()ranger-show-flags1985,69138
(defun ranger-clear-flags (mark)ranger-clear-flags2000,69664
(defun ranger--prev-binary-p ()ranger--prev-binary-p2014,70228
(defun ranger-kill-buffer (buffer)ranger-kill-buffer2024,70473
(defun ranger-revert (&optional buffer)ranger-revert2036,70770
(defun ranger-revert-appearance (buffer)ranger-revert-appearance2114,73517
(defun ranger-still-dired ()ranger-still-dired2139,74510
(defun ranger-window-check ()ranger-window-check2173,75743
(defun ranger-windows-exists-p ()ranger-windows-exists-p2213,77457
(defun ranger-frame-exists-p ()ranger-frame-exists-p2218,77596
(defun ranger-kill-buffers-without-window ()ranger-kill-buffers-without-window2223,77731
(defun ranger--dir-relative ()ranger--dir-relative2235,78190
(defun ranger--header-new-tab ()ranger--header-new-tab2245,78572
(defun ranger--header-tabs ()ranger--header-tabs2256,79063
(defun ranger-make-header-keymap (index)ranger-make-header-keymap2281,80048
(defun ranger--ar2ro (AN)ranger--ar2ro2291,80525
(defun ranger--header-rhs ()ranger--header-rhs2302,80977
(defun ranger--header-lhs ()ranger--header-lhs2314,81346
(defun ranger--header-string ()ranger--header-string2326,81841
(defun ranger-parse-coords ()ranger-parse-coords2339,82427
(defun ranger-get-window-coords ()ranger-get-window-coords2353,83028
(defun ranger-header-line ()ranger-header-line2366,83419
(defun ranger-set-modeline ()ranger-set-modeline2381,83972
(defun ranger-setup-dired-buffer ()ranger-setup-dired-buffer2411,85124
(defun deer (&optional path)deer2433,86102
(defun deer-jump-other-window (&optional path)deer-jump-other-window2442,86388
(defun deer-dual-pane (&optional left right)deer-dual-pane2448,86579
(define-minor-mode ranger-override-dired-moderanger-override-dired-mode2457,86802
(defun deer-from-dired ()deer-from-dired2464,87102
(defun ranger-minimal-toggle ()ranger-minimal-toggle2469,87188
(defun ranger (&optional path)ranger2478,87365
(defun ranger-enable ()ranger-enable2487,87643
(defun ranger-close ()ranger-close2492,87739
(defun ranger-disable ()ranger-disable2499,87895
(defun ranger-to-dired ()ranger-to-dired2504,87995
(defun ranger-setup ()ranger-setup2516,88385
(defun ranger-hide-the-cursor ()ranger-hide-the-cursor2610,91066
(defvar ranger--debug nil)ranger--debug2615,91204
(defvar ranger--debug-period 0.5)ranger--debug-period2616,91231
(defun ranger--message (format &rest args)ranger--message2618,91266
(defun ranger-override-dired-fn ()ranger-override-dired-fn2633,91640
(define-derived-mode ranger-mode dired-mode "Ranger"ranger-mode2646,92098

elpa/ranger-0.9.8.5/ranger-autoloads.el,187
(defvar ranger-key [16] "\ranger-key12,291
(defvar ranger-override-dired nil "\ranger-override-dired17,409
(defvar ranger-override-dired-mode nil "\ranger-override-dired-mode29,790

elpa/calfw-org-1.6/calfw-org-autoloads.el,0

elpa/calfw-org-1.6/calfw-org-pkg.el,290
(define-package "calfw-org" "1.6" "calendar view for org-agenda" 'nil :commit "c538d3746449b4f0e16b16aad3073d4f7379d805" :keywords '("calendar" "org") :authors '(("SAKURAI Masashi <m.sakurai at kiwanami.net>")) :maintainer '("SAKURAI Masashi <m.sakurai at kiwanami.net>"))"calfw-org"2,31

elpa/calfw-org-1.6/calfw-org.el,2667
(defgroup cfw-org nilcfw-org44,1334
(defcustom cfw:org-capture-template nilcfw:org-capture-template50,1434
(defsubst cfw:org-tp (text prop)cfw:org-tp58,1757
(defvar cfw:org-agenda-schedule-args nilcfw:org-agenda-schedule-args62,1877
(defvar cfw:org-icalendars nilcfw:org-icalendars66,2024
(defvar cfw:org-overwrite-default-keybinding nilcfw:org-overwrite-default-keybinding71,2211
(defvar cfw:org-face-agenda-item-foreground-color "Seagreen4"cfw:org-face-agenda-item-foreground-color88,2762
(defun cfw:org-collect-schedules-period (begin end)cfw:org-collect-schedules-period91,2877
(defun cfw:org-onclick ()cfw:org-onclick108,3576
(defun cfw:org-jump-map ()cfw:org-jump-map131,4306
(defun cfw:org-clean-exit ()cfw:org-clean-exit138,4484
(defvar cfw:org-text-keymapcfw:org-text-keymap145,4703
(defun cfw:org-extract-summary (org-item)cfw:org-extract-summary154,5018
(defun cfw:org-summary-format (item)cfw:org-summary-format170,5779
(defvar cfw:org-schedule-summary-transformer 'cfw:org-summary-formatcfw:org-schedule-summary-transformer219,8268
(defun cfw:org-normalize-date (date)cfw:org-normalize-date223,8518
(defun cfw:org-get-timerange (text)cfw:org-get-timerange230,8686
(defun cfw:org-schedule-period-to-calendar (begin end)cfw:org-schedule-period-to-calendar252,9622
(defun cfw:org-schedule-sorter (text1 text2)cfw:org-schedule-sorter273,10480
(defun cfw:org-schedule-sorter2 (text1 text2)cfw:org-schedule-sorter2286,10943
(defun cfw:org-format-title (file h-obj t-obj h-beg loc)cfw:org-format-title299,11466
(defun cfw:org-format-date (t-obj lst)cfw:org-format-date313,11887
(defun cfw:org-filter-datetime (t-obj lst)cfw:org-filter-datetime318,11995
(defun cfw:org-convert-event (file h-obj t-obj h-beg)cfw:org-convert-event323,12131
(defun cfw:org-convert-org-to-calfw (file)cfw:org-convert-org-to-calfw343,13152
(defun cfw:org-to-calendar (file begin end)cfw:org-to-calendar378,14921
(defun cfw:org-create-file-source (name file color)cfw:org-create-file-source393,15485
(defun cfw:org-capture-day ()cfw:org-capture-day402,15761
(defun cfw:org-capture ()cfw:org-capture417,16411
(defun cfw:org-open-agenda-day ()cfw:org-open-agenda-day424,16648
(defvar cfw:org-schedule-mapcfw:org-schedule-map434,16943
(defvar cfw:org-custom-mapcfw:org-custom-map442,17112
(defun cfw:org-create-source (&optional color)cfw:org-create-source458,17559
(defun cfw:open-org-calendar ()cfw:open-org-calendar465,17789
(defun cfw:org-from-calendar ()cfw:org-from-calendar480,18440
(defun cfw:org-read-date-command ()cfw:org-read-date-command490,18771
(defun cfw:org-goto-date ()cfw:org-goto-date495,18923

elpa/all-the-icons-20191025.43/data/data-material.el,92
(defvar all-the-icons-data/material-icons-alistall-the-icons-data/material-icons-alist1,0

elpa/all-the-icons-20191025.43/data/data-alltheicons.el,86
(defvar all-the-icons-data/alltheicons-alistall-the-icons-data/alltheicons-alist1,0

elpa/all-the-icons-20191025.43/data/data-faicons.el,78
(defvar all-the-icons-data/fa-icon-alistall-the-icons-data/fa-icon-alist1,0

elpa/all-the-icons-20191025.43/data/data-octicons.el,80
(defvar all-the-icons-data/octicons-alistall-the-icons-data/octicons-alist1,0

elpa/all-the-icons-20191025.43/data/data-weathericons.el,90
(defvar all-the-icons-data/weather-icons-alistall-the-icons-data/weather-icons-alist1,0

elpa/all-the-icons-20191025.43/data/data-fileicons.el,82
(defvar all-the-icons-data/file-icon-alistall-the-icons-data/file-icon-alist1,0

elpa/all-the-icons-20191025.43/all-the-icons.el,3902
(defgroup all-the-icons nilall-the-icons101,4113
(defcustom all-the-icons-color-icons tall-the-icons-color-icons107,4257
(defcustom all-the-icons-scale-factor 1.2all-the-icons-scale-factor112,4415
(defcustom all-the-icons-default-adjust -0.2all-the-icons-default-adjust117,4568
(defvar all-the-icons-font-families '() "List of defined icon font families.")all-the-icons-font-families122,4737
(defvar all-the-icons-font-names '() "List of defined font file names this package was built with.")all-the-icons-font-names123,4816
(defvar all-the-icons-icon-alistall-the-icons-icon-alist125,4918
(defvar all-the-icons-dir-icon-alistall-the-icons-dir-icon-alist420,27250
(defvar all-the-icons-weather-icon-alistall-the-icons-weather-icon-alist440,28742
(defvar all-the-icons-mode-icon-alistall-the-icons-mode-icon-alist474,30665
(defvar all-the-icons-url-alistall-the-icons-url-alist604,44626
(defun all-the-icons-auto-mode-match? (&optional file)all-the-icons-auto-mode-match?708,51702
(defun all-the-icons-match-to-alist (file alist)all-the-icons-match-to-alist714,51999
(defun all-the-icons-dir-is-submodule (dir)all-the-icons-dir-is-submodule718,52183
(defun all-the-icons-icon-for-dir (dir &optional chevron padding)all-the-icons-icon-for-dir730,52728
(defun all-the-icons-icon-for-buffer ()all-the-icons-icon-for-buffer753,53936
(defun all-the-icons-icon-family-for-buffer ()all-the-icons-icon-family-for-buffer762,54266
(defun all-the-icons--web-mode-icon (&rest arg-overrides) "Get icon for a `web-mode' buffer with ARG-OVERRIDES." (all-the-icons--web-mode nil arg-overrides))all-the-icons--web-mode-icon766,54417
(defun all-the-icons--web-mode-icon-family () "Get icon family for a `web-mode' buffer." (all-the-icons--web-mode t))all-the-icons--web-mode-icon-family767,54575
(defun all-the-icons--web-mode (&optional family arg-overrides)all-the-icons--web-mode768,54693
(defun all-the-icons-icon-for-file (file &rest arg-overrides)all-the-icons-icon-for-file789,56007
(defun all-the-icons-icon-for-mode (mode &rest arg-overrides)all-the-icons-icon-for-mode800,56478
(defun all-the-icons-icon-for-url (url &rest arg-overrides)all-the-icons-icon-for-url812,57051
(defun all-the-icons-icon-family-for-file (file)all-the-icons-icon-family-for-file831,57819
(defun all-the-icons-icon-family-for-mode (mode)all-the-icons-icon-family-for-mode836,58043
(defun all-the-icons-icon-family (icon)all-the-icons-icon-family841,58269
(defun all-the-icons--icon-info-for-buffer (&optional f)all-the-icons--icon-info-for-buffer850,58562
(defun all-the-icons-icon-for-weather (weather)all-the-icons-icon-for-weather864,59188
(defun all-the-icons--read-candidates ()all-the-icons--read-candidates890,60241
(defun all-the-icons--read-candidates-for-family (family &optional show-family)all-the-icons--read-candidates-for-family894,60465
(defun all-the-icons-install-fonts (&optional pfx)all-the-icons-install-fonts915,61423
(defun all-the-icons-insert (&optional arg family)all-the-icons-insert944,63063
(defun all-the-icons-insert-icons-for (family &optional height duration)all-the-icons-insert-icons-for964,63862
(defmacro define-icon (name alist family &optional font-name)define-icon981,64605
(define-icon alltheicon all-the-icons-data/alltheicons-alist    "all-the-icons")alltheicon1020,66675
(define-icon fileicon   all-the-icons-data/file-icon-alist      "file-icons")fileicon1021,66756
(define-icon faicon     all-the-icons-data/fa-icon-alist        "FontAwesome")faicon1022,66834
(define-icon octicon    all-the-icons-data/octicons-alist       "github-octicons" "octicons")octicon1023,66913
(define-icon wicon      all-the-icons-data/weather-icons-alist  "Weather Icons"   "weathericons")wicon1024,67007
(define-icon material   all-the-icons-data/material-icons-alist "Material Icons"  "material-design-icons")material1025,67105

elpa/all-the-icons-20191025.43/all-the-icons-autoloads.el,0

elpa/all-the-icons-20191025.43/all-the-icons-pkg.el,108
(define-package "all-the-icons" "20191025.43" "A library for inserting Developer icons""all-the-icons"1,0

elpa/all-the-icons-20191025.43/all-the-icons-faces.el,2089
(defgroup all-the-icons-faces nilall-the-icons-faces31,1076
(defface all-the-icons-redall-the-icons-red39,1247
(defface all-the-icons-lredall-the-icons-lred44,1426
(defface all-the-icons-dredall-the-icons-dred49,1607
(defface all-the-icons-red-altall-the-icons-red-alt54,1788
(defface all-the-icons-greenall-the-icons-green61,1982
(defface all-the-icons-lgreenall-the-icons-lgreen66,2165
(defface all-the-icons-dgreenall-the-icons-dgreen71,2350
(defface all-the-icons-yellowall-the-icons-yellow78,2546
(defface all-the-icons-lyellowall-the-icons-lyellow83,2731
(defface all-the-icons-dyellowall-the-icons-dyellow88,2918
(defface all-the-icons-blueall-the-icons-blue95,3114
(defface all-the-icons-blue-altall-the-icons-blue-alt100,3295
(defface all-the-icons-lblueall-the-icons-lblue105,3480
(defface all-the-icons-dblueall-the-icons-dblue110,3663
(defface all-the-icons-maroonall-the-icons-maroon117,3857
(defface all-the-icons-lmaroonall-the-icons-lmaroon122,4042
(defface all-the-icons-dmaroonall-the-icons-dmaroon127,4229
(defface all-the-icons-purpleall-the-icons-purple134,4427
(defface all-the-icons-purple-altall-the-icons-purple-alt139,4612
(defface all-the-icons-lpurpleall-the-icons-lpurple144,4801
(defface all-the-icons-dpurpleall-the-icons-dpurple149,4988
(defface all-the-icons-orangeall-the-icons-orange156,5186
(defface all-the-icons-lorangeall-the-icons-lorange161,5371
(defface all-the-icons-dorangeall-the-icons-dorange166,5558
(defface all-the-icons-cyanall-the-icons-cyan173,5754
(defface all-the-icons-cyan-altall-the-icons-cyan-alt178,5935
(defface all-the-icons-lcyanall-the-icons-lcyan183,6120
(defface all-the-icons-dcyanall-the-icons-dcyan188,6303
(defface all-the-icons-pinkall-the-icons-pink195,6495
(defface all-the-icons-lpinkall-the-icons-lpink200,6676
(defface all-the-icons-dpinkall-the-icons-dpink205,6859
(defface all-the-icons-silverall-the-icons-silver212,7053
(defface all-the-icons-lsilverall-the-icons-lsilver217,7238
(defface all-the-icons-dsilverall-the-icons-dsilver222,7425

elpa/graphql-0.1.1/graphql-autoloads.el,0

elpa/graphql-0.1.1/graphql-pkg.el,331
(define-package "graphql" "0.1.1" "GraphQL utilities" '((emacs "25")) :commit "672dd9ebd7e67d8089388b0c484cd650e76565f3" :keywords '("hypermedia" "tools" "lisp") :authors '(("Sean Allred" . "code@seanallred.com")) :maintainer '("Sean Allred" . "code@seanallred.com") :url "https://github.com/vermiculus/graphql.el")"graphql"2,31

elpa/graphql-0.1.1/graphql.el,903
(defun graphql--encode-object (obj)graphql--encode-object35,1200
(defun graphql--encode-argument-spec (spec)graphql--encode-argument-spec48,1481
(defun graphql--encode-argument (key value)graphql--encode-argument53,1635
(defun graphql--encode-argument-value (value)graphql--encode-argument-value57,1788
(defun graphql--encode-parameter-spec (spec)graphql--encode-parameter-spec84,2522
(defun graphql--encode-parameter (name type &optional required default)graphql--encode-parameter114,3622
(defun graphql--get-keys (g)graphql--get-keys126,4086
(defun graphql-encode (g)graphql-encode141,4588
(defun graphql-simplify-response-edges (data)graphql-simplify-response-edges165,5457
(defun graphql--genform-operation (args kind)graphql--genform-operation183,6248
(defmacro graphql-query (&rest args)graphql-query205,6922
(defmacro graphql-mutation (&rest args)graphql-mutation212,7145

elpa/makey-0.3/makey-pkg.el,269
(define-package "makey" "0.3" "interactive commandline mode" '((cl-lib "0.2")) :commit "a61781e69d3b451551e269446e1c5f624ab81137" :authors '(("Mickey Petersen" . "mickey@masteringemacs.org")) :maintainer '("Mickey Petersen" . "mickey@masteringemacs.org"))"makey"2,31

elpa/makey-0.3/makey-autoloads.el,0

elpa/makey-0.3/makey.el,4334
(defvar makey-key-mode-keymaps)makey-key-mode-keymaps33,1005
(defvar makey-key-mode-last-buffer)makey-key-mode-last-buffer34,1037
(defvar makey-pre-key-mode-window-conf)makey-pre-key-mode-window-conf35,1073
(defcustom makey-key-mode-show-usage tmakey-key-mode-show-usage39,1127
(defface makey-key-mode-header-facemakey-key-mode-header-face46,1273
(defface makey-key-mode-button-facemakey-key-mode-button-face51,1410
(defface makey-key-mode-switch-facemakey-key-mode-switch-face56,1542
(defface makey-key-mode-args-facemakey-key-mode-args-face61,1675
(defun makey-key-mode-delete-group (group master-group)makey-key-mode-delete-group66,1804
(defun makey-key-mode-add-group (group master-group)makey-key-mode-add-group79,2206
(defun makey-key-mode-key-defined-p (for-group key)makey-key-mode-key-defined-p90,2625
(defun makey-key-mode-update-group (for-group thing &rest args)makey-key-mode-update-group101,3110
(defun makey-key-mode-insert-argument (for-group key desc arg read-func)makey-key-mode-insert-argument114,3668
(defun makey-key-mode-insert-switch (for-group key desc switch)makey-key-mode-insert-switch120,3985
(defun makey-key-mode-insert-action (for-group key desc func)makey-key-mode-insert-action126,4266
(defun makey-key-mode-options-for-group (for-group)makey-key-mode-options-for-group131,4514
(defun makey-key-mode-help (for-group)makey-key-mode-help136,4750
(defun makey-key-mode-exec-at-point ()makey-key-mode-exec-at-point158,5694
(defun makey-key-mode-jump-to-next-exec ()makey-key-mode-jump-to-next-exec165,5970
(defvar makey-key-mode-keymaps nilmakey-key-mode-keymaps179,6478
(defun makey-key-mode-build-keymap (for-group)makey-key-mode-build-keymap183,6634
(defvar makey-key-mode-prefix nilmakey-key-mode-prefix242,9292
(defvar makey-key-mode-current-args nilmakey-key-mode-current-args246,9466
(defvar makey-key-mode-current-lisp-arguments nilmakey-key-mode-current-lisp-arguments249,9550
(defvar makey-key-mode-current-lisp-options nilmakey-key-mode-current-lisp-options253,9700
(defvar makey-key-mode-current-options nilmakey-key-mode-current-options256,9779
(defvar makey-custom-options nilmakey-custom-options259,9848
(defun makey-key-mode-command (func)makey-key-mode-command263,10008
(defun makey-key-mode-add-lisp-variable (for-group lisp-variable-name input-func)makey-key-mode-add-lisp-variable290,11293
(defun makey-key-mode-add-argument (for-group arg-name input-func)makey-key-mode-add-argument295,11564
(defun makey-key-mode-toggle-option (for-group option-name)makey-key-mode-toggle-option300,11790
(defun makey-key-mode-toggle-lisp-option (for-group option-name option-value-on option-value-off)makey-key-mode-toggle-lisp-option309,12197
(defvar makey-key-mode-buf-name "*makey-key: %s*"makey-key-mode-buf-name323,12880
(defvar makey-key-mode-last-buffer nilmakey-key-mode-last-buffer326,12994
(defvar makey-pre-key-mode-window-conf nilmakey-pre-key-mode-window-conf329,13077
(defun makey-key-mode (for-group &optional original-opts)makey-key-mode332,13173
(defun makey-key-mode-get-key-map (for-group)makey-key-mode-get-key-map369,14653
(defun makey-key-mode-redraw (for-group)makey-key-mode-redraw374,14844
(defun makey-key-mode-build-exec-point-alist ()makey-key-mode-build-exec-point-alist403,15884
(defun makey-key-mode-draw-header (header)makey-key-mode-draw-header416,16404
(defvar makey-key-mode-args-in-cols nilmakey-key-mode-args-in-cols420,16560
(defun makey-key-mode-draw-args (args hash-table)makey-key-mode-draw-args423,16673
(defun makey-key-mode-draw-switches (switches switch-variable)makey-key-mode-draw-switches436,17108
(defun makey-key-mode-draw-actions (header actions)makey-key-mode-draw-actions448,17567
(defun makey-key-mode-draw-buttons (section xs makermakey-key-mode-draw-buttons452,17733
(defun makey-key-mode-draw-in-cols (strings one-col-each)makey-key-mode-draw-in-cols467,18379
(defun makey-get-actions (for-group)makey-get-actions487,19162
(defun makey-key-mode-draw (for-group)makey-key-mode-draw493,19381
(defun makey-key-mode-de-generate (group)makey-key-mode-de-generate518,20489
(defun makey-key-mode-generate (group-name group-details)makey-key-mode-generate523,20649
(defun makey-initialize-key-groups (key-group)makey-initialize-key-groups543,21499

elpa/pfuture-1.7/pfuture.el,831
(defvar pfuture--dummy-buffer nilpfuture--dummy-buffer31,1026
(define-inline pfuture--delete-process (process)pfuture--delete-process34,1097
(defun pfuture--sentinel (process _)pfuture--sentinel41,1310
(defun pfuture-new (&rest cmd)pfuture-new53,1860
(defmacro pfuture--decompose-fn-form (fn &rest args)pfuture--decompose-fn-form97,3923
(defmacro pfuture-callback-output ()pfuture-callback-output209,9152
(defun pfuture-await-to-finish (process)pfuture-await-to-finish240,10393
(defun pfuture--append-output-to-buffer (process msg)pfuture--append-output-to-buffer257,11076
(defun pfuture--append-stdout (process msg)pfuture--append-stdout263,11277
(defun pfuture--append-stderr (process msg)pfuture--append-stderr272,11661
(define-inline pfuture-output-from-buffer (buffer)pfuture-output-from-buffer281,12045

elpa/pfuture-1.7/pfuture-pkg.el,328
(define-package "pfuture" "1.7" "a simple wrapper around asynchronous processes" '((emacs "25.2")) :commit "263227534e8bb98aedce18698c34db9fd4d6500b" :authors '(("Alexander Miller" . "alexanderm@web.de")) :maintainer '("Alexander Miller" . "alexanderm@web.de") :url "https://github.com/Alexander-Miller/pfuture")"pfuture"2,31

elpa/pfuture-1.7/pfuture-autoloads.el,0

elpa/lsp-mode-6.1/lsp-xml.el,1755
(defgroup lsp-xml nillsp-xml29,880
(defcustom lsp-xml-trace-server "off"lsp-xml-trace-server35,1006
(defcustom lsp-xml-catalogs nillsp-xml-catalogs44,1276
(defcustom lsp-xml-logs-client tlsp-xml-logs-client50,1418
(defcustom lsp-xml-format-split-attributes nillsp-xml-format-split-attributes56,1570
(defcustom lsp-xml-format-join-cdata-lines nillsp-xml-format-join-cdata-lines62,1744
(defcustom lsp-xml-format-join-comment-lines nillsp-xml-format-join-comment-lines68,1907
(defcustom lsp-xml-format-space-before-empty-close-tag tlsp-xml-format-space-before-empty-close-tag74,2067
(defcustom lsp-xml-format-join-content-lines nillsp-xml-format-join-content-lines81,2276
(defcustom lsp-xml-format-preserve-empty-content nillsp-xml-format-preserve-empty-content88,2504
(defcustom lsp-xml-format-enabled tlsp-xml-format-enabled94,2681
(defcustom lsp-xml-format-quotations "doubleQuotes"lsp-xml-format-quotations100,2839
(defcustom lsp-xml-file-associations nillsp-xml-file-associations109,3106
(defcustom lsp-xml-completion-auto-close-tags tlsp-xml-completion-auto-close-tags119,3463
(defcustom lsp-xml-server-vmargs "-noverify -Xmx64Mlsp-xml-server-vmargs126,3693
(defcustom lsp-xml-server-work-dir "~/.lsp4xml"lsp-xml-server-work-dir136,4142
(defcustom lsp-xml-validation-no-grammar "hint"lsp-xml-validation-no-grammar144,4418
(defcustom lsp-xml-validation-enabled tlsp-xml-validation-enabled151,4661
(defcustom lsp-xml-validation-schema tlsp-xml-validation-schema157,4812
(defcustom lsp-xml-jar-file (expand-file-namelsp-xml-jar-file184,6116
(defcustom lsp-xml-server-command `("java" "-jar" ,lsp-xml-jar-file)lsp-xml-server-command193,6401
(defun lsp-xml--create-connection ()lsp-xml--create-connection199,6578

elpa/lsp-mode-6.1/lsp-elm.el,690
(defgroup lsp-elm nillsp-elm29,866
(defcustom lsp-elm-elm-language-server-pathlsp-elm-elm-language-server-path34,1105
(defcustom lsp-elm-trace-serverlsp-elm-trace-server43,1402
(defcustom lsp-elm-elm-pathlsp-elm-elm-path49,1546
(defcustom lsp-elm-elm-format-pathlsp-elm-elm-format-path55,1649
(defcustom lsp-elm-elm-test-pathlsp-elm-elm-test-path61,1766
(defcustom lsp-elm-diagnostics-on-save-onlylsp-elm-diagnostics-on-save-only67,1879
(defcustom lsp-elm-server-argslsp-elm-server-args73,2043
(defun lsp-elm--elm-language-server-command ()lsp-elm--elm-language-server-command79,2171
(defun lsp-clients-elm--make-init-options ()lsp-clients-elm--make-init-options85,2350

elpa/lsp-mode-6.1/lsp-html.el,1595
(defgroup lsp-html nillsp-html23,839
(defcustom lsp-html-experimental-custom-data nillsp-html-experimental-custom-data29,1069
(defcustom lsp-html-format-enable tlsp-html-format-enable36,1359
(defcustom lsp-html-format-wrap-line-length 120lsp-html-format-wrap-line-length42,1515
(defcustom lsp-html-format-unformatted "wbr"lsp-html-format-unformatted48,1696
(defcustom lsp-html-format-content-unformatted "pre,code,textarea"lsp-html-format-content-unformatted54,1844
(defcustom lsp-html-format-indent-inner-html nillsp-html-format-indent-inner-html60,2014
(defcustom lsp-html-format-preserve-new-lines tlsp-html-format-preserve-new-lines66,2146
(defcustom lsp-html-format-max-preserve-new-lines nillsp-html-format-max-preserve-new-lines73,2407
(defcustom lsp-html-format-indent-handlebars nil nillsp-html-format-indent-handlebars79,2565
(defcustom lsp-html-format-end-with-newline nillsp-html-format-end-with-newline84,2695
(defcustom lsp-html-format-extra-liners "head, body, /html"lsp-html-format-extra-liners90,2844
(defcustom lsp-html-format-wrap-attributes "auto"lsp-html-format-wrap-attributes96,3007
(defcustom lsp-html-suggest-html5 tlsp-html-suggest-html5109,3387
(defcustom lsp-html-validate-scripts tlsp-html-validate-scripts116,3600
(defcustom lsp-html-validate-styles tlsp-html-validate-styles123,3800
(defcustom lsp-html-auto-closing-tags tlsp-html-auto-closing-tags130,3998
(defcustom lsp-html-trace-server "off"lsp-html-trace-server136,4160
(defcustom lsp-html-server-command '("html-languageserver" "--stdio")lsp-html-server-command164,5543

elpa/lsp-mode-6.1/lsp-clients.el,3776
(defgroup lsp-groovy nillsp-groovy53,1527
(defcustom lsp-groovy-server-install-dirlsp-groovy-server-install-dir58,1697
(defun lsp-groovy--lsp-command ()lsp-groovy--lsp-command67,2000
(defgroup lsp-typescript-javascript nillsp-typescript-javascript80,2452
(defcustom lsp-clients-javascript-typescript-server "javascript-typescript-stdio"lsp-clients-javascript-typescript-server85,2685
(defcustom lsp-clients-typescript-javascript-server-args '()lsp-clients-typescript-javascript-server-args93,3000
(defun lsp-typescript-javascript-tsx-jsx-activate-p (filename &optional _)lsp-typescript-javascript-tsx-jsx-activate-p99,3207
(defgroup lsp-typescript nillsp-typescript114,4045
(defcustom lsp-clients-typescript-server "typescript-language-server"lsp-clients-typescript-server119,4243
(defcustom lsp-clients-typescript-server-args '("--stdio")lsp-clients-typescript-server-args127,4534
(defgroup lsp-flow nillsp-flow145,5287
(defcustom lsp-clients-flow-server "flow"lsp-clients-flow-server150,5425
(defcustom lsp-clients-flow-server-args '("lsp")lsp-clients-flow-server-args158,5660
(defun lsp-clients-flow-tag-file-present-p (file-name)lsp-clients-flow-tag-file-present-p164,5825
(defun lsp-clients-flow-tag-string-present-p (file-contents)lsp-clients-flow-tag-string-present-p171,6090
(defun lsp-clients-flow-project-p (file-name)lsp-clients-flow-project-p202,7187
(defun lsp-clients-flow-activate-p (file-name _mode)lsp-clients-flow-activate-p207,7401
(defgroup lsp-php nillsp-php224,8145
(defcustom lsp-clients-php-server-commandlsp-clients-php-server-command229,8314
(defgroup lsp-ocaml nillsp-ocaml244,8819
(defcustom lsp-ocaml-lang-server-commandlsp-ocaml-lang-server-command254,9119
(defgroup lsp-clangd nillsp-clangd273,9750
(defcustom lsp-clients-clangd-executable "clangd"lsp-clients-clangd-executable278,9946
(defcustom lsp-clients-clangd-args '()lsp-clients-clangd-args286,10184
(defun lsp-clients--clangd-command ()lsp-clients--clangd-command292,10329
(defun lsp-clients-register-clangd ()lsp-clients-register-clangd303,10754
(defgroup lsp-elixir nillsp-elixir311,11115
(defcustom lsp-clients-elixir-server-executablelsp-clients-elixir-server-executable316,11268
(defgroup lsp-fortran nillsp-fortran340,12269
(defcustom lsp-clients-fortls-executable "fortls"lsp-clients-fortls-executable345,12452
(defcustom lsp-clients-fortls-args '()lsp-clients-fortls-args353,12691
(defun lsp-clients--fortls-command ()lsp-clients--fortls-command359,12836
(defgroup lsp-kotlin nillsp-kotlin372,13234
(defcustom lsp-kotlin-language-server-path ""lsp-kotlin-language-server-path377,13403
(defcustom lsp-kotlin-trace-server "off"lsp-kotlin-trace-server383,13591
(defcustom lsp-kotlin-compiler-jvm-target "default"lsp-kotlin-compiler-jvm-target389,13822
(defcustom lsp-kotlin-linting-debounce-time 250lsp-kotlin-linting-debounce-time395,14006
(defcustom lsp-kotlin-completion-snippets-enabled tlsp-kotlin-completion-snippets-enabled402,14255
(defcustom lsp-kotlin-debug-adapter-enabled tlsp-kotlin-debug-adapter-enabled408,14484
(defcustom lsp-kotlin-debug-adapter-path ""lsp-kotlin-debug-adapter-path412,14673
(defcustom lsp-kotlin-external-sources-use-kls-scheme tlsp-kotlin-external-sources-use-kls-scheme418,14857
(defcustom lsp-kotlin-external-sources-auto-convert-to-kotlin tlsp-kotlin-external-sources-auto-convert-to-kotlin424,15091
(defgroup lsp-hack nillsp-hack453,16373
(defcustom lsp-clients-hack-command '("hh_client" "lsp" "--from" "emacs")lsp-clients-hack-command458,16505
(defcustom lsp-dockerfile-language-server-commandlsp-dockerfile-language-server-command476,17210
(defcustom lsp-clients-angular-language-server-commandlsp-clients-angular-language-server-command494,17818

elpa/lsp-mode-6.1/lsp-mode.el,36037
(defconst lsp--message-type-facelsp--message-type-face65,1880
(defconst lsp--errorslsp--errors71,2055
(defconst lsp--completion-item-kindlsp--completion-item-kind84,2456
(define-obsolete-variable-alias 'lsp-print-io 'lsp-log-io "lsp-mode 6.1")lsp-print-io112,2823
(defcustom lsp-log-io nillsp-log-io114,2898
(defcustom lsp-print-performance nillsp-print-performance119,3050
(defcustom lsp-use-native-json tlsp-use-native-json125,3216
(defcustom lsp-json-use-lists nillsp-json-use-lists131,3380
(defcustom lsp-log-max message-log-maxlsp-log-max137,3569
(defcustom lsp-io-messages-max tlsp-io-messages-max147,3960
(defcustom lsp-report-if-no-buffer tlsp-report-if-no-buffer154,4213
(defcustom lsp-keep-workspace-alive tlsp-keep-workspace-alive159,4363
(defcustom lsp-enable-snippet tlsp-enable-snippet164,4517
(defcustom lsp-enable-folding tlsp-enable-folding169,4634
(defcustom lsp-folding-range-limit nillsp-folding-range-limit175,4784
(defcustom lsp-folding-line-folding-only nillsp-folding-line-folding-only182,5059
(defcustom lsp-auto-require-clients tlsp-auto-require-clients188,5223
(defvar-local lsp--cur-workspace nil)lsp--cur-workspace193,5329
(defvar-local lsp--cur-version nil)lsp--cur-version195,5368
(defvar lsp--uri-file-prefix (pcase system-typelsp--uri-file-prefix197,5405
(defvar-local lsp-buffer-uri nillsp-buffer-uri202,5584
(define-error 'lsp-error "Unknown lsp-mode error")lsp-error205,5693
(define-error 'lsp-empty-response-errorlsp-empty-response-error206,5744
(define-error 'lsp-timed-out-errorlsp-timed-out-error208,5840
(define-error 'lsp-capability-not-supportedlsp-capability-not-supported210,5955
(define-error 'lsp-file-scheme-not-supportedlsp-file-scheme-not-supported212,6063
(define-error 'lsp-client-already-exists-errorlsp-client-already-exists-error214,6148
(defcustom lsp-auto-guess-root nillsp-auto-guess-root217,6256
(defcustom lsp-restart 'interactivelsp-restart222,6396
(defcustom lsp-session-file (expand-file-name (locate-user-emacs-file ".lsp-session-v1"))lsp-session-file229,6614
(defcustom lsp-auto-configure tlsp-auto-configure234,6785
(defcustom lsp-disabled-clients nillsp-disabled-clients240,6959
(defvar lsp-clients (make-hash-table :test 'eql)lsp-clients255,7494
(defvar lsp-enabled-clients nillsp-enabled-clients259,7643
(defvar lsp-last-id 0lsp-last-id263,7790
(defcustom lsp-before-initialize-hook nillsp-before-initialize-hook266,7835
(defcustom lsp-after-initialize-hook nillsp-after-initialize-hook271,8014
(defcustom lsp-before-open-hook nillsp-before-open-hook276,8191
(defcustom lsp-after-open-hook nillsp-after-open-hook281,8343
(defcustom lsp-enable-file-watchers tlsp-enable-file-watchers286,8493
(defcustom lsp-file-watch-ignored '(; SCM toolslsp-file-watch-ignored293,8704
(defcustom lsp-after-uninitialized-hook nillsp-after-uninitialized-hook324,10296
(defvar lsp--sync-methodslsp--sync-methods330,10497
(defcustom lsp-debounce-full-sync-notifications tlsp-debounce-full-sync-notifications335,10578
(defcustom lsp-debounce-full-sync-notifications-interval 1.0lsp-debounce-full-sync-notifications-interval342,10818
(defvar lsp--stderr-index 0)lsp--stderr-index348,11037
(defvar lsp--delayed-requests nil)lsp--delayed-requests350,11067
(defvar lsp--delay-timer nil)lsp--delay-timer351,11102
(defvar-local lsp--server-sync-method nillsp--server-sync-method353,11133
(defgroup lsp-mode nillsp-mode356,11220
(defgroup lsp-faces nillsp-faces361,11323
(defcustom lsp-document-sync-method nillsp-document-sync-method366,11394
(defcustom lsp-auto-execute-action tlsp-auto-execute-action374,11907
(defcustom lsp-enable-links tlsp-enable-links379,12014
(defcustom lsp-links-check-internal 0.1lsp-links-check-internal385,12232
(defcustom lsp-eldoc-enable-hover tlsp-eldoc-enable-hover390,12354
(defcustom lsp-eldoc-enable-signature-help tlsp-eldoc-enable-signature-help395,12494
(defcustom lsp-eldoc-prefer-signature-help tlsp-eldoc-prefer-signature-help400,12647
(defcustom lsp-eldoc-render-all nillsp-eldoc-render-all405,12828
(defcustom lsp-signature-render-all tlsp-signature-render-all411,13030
(defcustom lsp-enable-completion-at-point tlsp-enable-completion-at-point418,13281
(defcustom lsp-enable-symbol-highlighting tlsp-enable-symbol-highlighting423,13409
(defcustom lsp-enable-xref tlsp-enable-xref428,13540
(defcustom lsp-enable-indentation tlsp-enable-indentation433,13636
(defcustom lsp-enable-on-type-formatting tlsp-enable-on-type-formatting438,13802
(defcustom lsp-before-save-edits tlsp-before-save-edits443,13939
(defcustom lsp-after-diagnostics-hook nillsp-after-diagnostics-hook448,14115
(defcustom lsp-diagnostics-updated-hook nillsp-diagnostics-updated-hook456,14385
(defcustom lsp-workspace-folders-changed-hook nillsp-workspace-folders-changed-hook461,14513
(defcustom lsp-on-hover-hook nillsp-on-hover-hook467,14718
(defcustom lsp-eldoc-hook '(lsp-hover)lsp-eldoc-hook473,14945
(defcustom lsp-before-apply-edits-hook nillsp-before-apply-edits-hook478,15047
(defgroup lsp-imenu nillsp-imenu483,15165
(defcustom lsp-imenu-show-container-name tlsp-imenu-show-container-name488,15236
(defcustom lsp-imenu-container-name-separator "/"lsp-imenu-container-name-separator493,15377
(defcustom lsp-imenu-sort-methods '(kind name)lsp-imenu-sort-methods498,15572
(defcustom lsp-response-timeout 10lsp-response-timeout508,15927
(defconst lsp--imenu-compare-function-alistlsp--imenu-compare-function-alist513,16088
(defcustom lsp-prefer-flymake tlsp-prefer-flymake526,16604
(defvar-local lsp--flymake-report-fn nil)lsp--flymake-report-fn535,16989
(defvar lsp-language-id-configuration '((".*\.vue$" . "vue")lsp-language-id-configuration537,17032
(defvar lsp-method-requirementslsp-method-requirements591,20414
(defconst lsp--file-change-typelsp--file-change-type614,21611
(defvar lsp-window-body-width 40lsp-window-body-width619,21700
(defface lsp-face-highlight-textuallsp-face-highlight-textual622,21777
(defface lsp-face-highlight-readlsp-face-highlight-read627,21912
(defface lsp-face-highlight-writelsp-face-highlight-write632,22059
(defcustom lsp-lens-check-interval 0.1lsp-lens-check-interval637,22210
(defcustom lsp-lens-debounce-interval 0.7lsp-lens-debounce-interval642,22350
(defcustom lsp-symbol-highlighting-skip-current nillsp-symbol-highlighting-skip-current647,22471
(defcustom lsp-document-highlight-delay 0.2lsp-document-highlight-delay652,22628
(defvar lsp-custom-markup-modeslsp-custom-markup-modes657,22775
(defface lsp-lens-mouse-facelsp-lens-mouse-face662,22972
(defface lsp-lens-facelsp-lens-face667,23100
(defvar-local lsp--lens-overlays nillsp--lens-overlays672,23224
(defvar-local lsp--lens-page nillsp--lens-page675,23283
(defvar-local lsp--lens-last-count nillsp--lens-last-count678,23398
(defvar lsp-lens-backends '(lsp-lens-backend)lsp-lens-backends681,23498
(defvar-local lsp--lens-refresh-timer nillsp--lens-refresh-timer684,23577
(defvar-local lsp--lens-idle-timer  nillsp--lens-idle-timer687,23655
(defvar-local lsp--lens-data nillsp--lens-data690,23718
(defvar-local lsp--lens-backend-cache nil)lsp--lens-backend-cache693,23833
(defvar-local lsp--buffer-workspaces ()lsp--buffer-workspaces695,23877
(defvar-local lsp--link-overlays nillsp--link-overlays698,23954
(defvar-local lsp--links-idle-timer nil)lsp--links-idle-timer701,24045
(defvar lsp--session nillsp--session703,24087
(defvar lsp--tcp-port 10000)lsp--tcp-port706,24176
(defvar-local lsp--document-symbols nillsp--document-symbols708,24206
(defvar-local lsp--document-selection-range-cache nillsp--document-selection-range-cache711,24281
(defvar-local lsp--document-symbols-request-async nillsp--document-symbols-request-async714,24371
(defvar-local lsp--document-symbols-tick -1lsp--document-symbols-tick717,24484
(defvar lsp--log-lines)lsp--log-lines722,24675
(defun lsp-elt (sequence n)lsp-elt727,24814
(defun seq-first (sequence)seq-first733,25049
(defun seq-rest (sequence)seq-rest737,25144
(defun lsp--string-listp (sequence)lsp--string-listp741,25269
(defun lsp--info (format &rest args)lsp--info745,25430
(defun lsp--warn (format &rest args)lsp--warn749,25607
(defun lsp--error (format &rest args)lsp--error753,25784
(defun lsp--eldoc-message (&optional msg)lsp--eldoc-message757,25961
(defun lsp-log (format &rest args)lsp-log761,26090
(defalias 'lsp-message 'lsp-log)lsp-message803,27810
(defalias 'lsp-ht 'ht)lsp-ht805,27844
(defalias 'lsp-file-local-namelsp-file-local-name808,27914
(defun lsp--merge-results (results method)lsp--merge-results815,28121
(defun lsp--spinner-start ()lsp--spinner-start861,30495
(defun lsp--propertize (str type)lsp--propertize865,30625
(defun lsp-workspaces ()lsp-workspaces869,30758
(defun lsp--completing-read (prompt collection transform-fn &optional predicatelsp--completing-read873,30927
(defun lsp--line-character-to-point (line character)lsp--line-character-to-point1016,38524
(define-inline lsp--position-to-point (params)lsp--position-to-point1029,38895
(define-inline lsp--range-to-region (range)lsp--range-to-region1036,39168
(defun lsp--find-wrapping-range (current-selection-range)lsp--find-wrapping-range1052,39862
(defun lsp--get-selection-range ()lsp--get-selection-range1068,40415
(defun lsp-extend-selection ()lsp-extend-selection1081,40972
(defun lsp-warn (message &rest args)lsp-warn1092,41351
(defun lsp--get-uri-handler (scheme)lsp--get-uri-handler1098,41633
(defun lsp--fix-path-casing (path)lsp--fix-path-casing1103,41883
(defun lsp--uri-to-path (uri)lsp--uri-to-path1110,42109
(defun lsp--uri-to-path-1 (uri)lsp--uri-to-path-11118,42383
(defun lsp--buffer-uri ()lsp--buffer-uri1137,43329
(defun lsp-register-client-capabilities (&rest _args)lsp-register-client-capabilities1143,43527
(defun lsp--path-to-uri-1 (path)lsp--path-to-uri-11147,43671
(defun lsp--path-to-uri (path)lsp--path-to-uri1152,43883
(defun lsp--string-match-any (regex-list str)lsp--string-match-any1160,44171
(defun lsp--folder-watch-callback (event callback watch)lsp--folder-watch-callback1168,44448
(defun lsp-watch-root-folder (dir callback &optional watch)lsp-watch-root-folder1188,45224
(defun lsp-kill-watch (watch)lsp-kill-watch1217,46608
(defun lsp-json-bool (val)lsp-json-bool1222,46786
(defmacro with-lsp-workspace (workspace &rest body)with-lsp-workspace1226,46873
(defmacro with-lsp-workspaces (workspaces &rest body)with-lsp-workspaces1232,47088
(defmacro lsp-foreach-workspace (&rest body)lsp-foreach-workspace1238,47317
(defmacro when-lsp-workspace (workspace &rest body)when-lsp-workspace1243,47508
(defun lsp--window-show-message (_workspace params)lsp--window-show-message1249,47737
(defun lsp--window-log-message (workspace params)lsp--window-log-message1260,48074
(defun lsp--window-log-message-request (params)lsp--window-log-message-request1271,48546
(defun lsp-diagnostics ()lsp-diagnostics1281,49029
(defun lsp--make-diag (diag)lsp--make-diag1306,49976
(defalias 'lsp--buffer-for-file (if (eq system-type 'windows-nt)lsp--buffer-for-file1324,50772
(defun lsp--on-diagnostics (workspace params)lsp--on-diagnostics1329,50948
(defun lsp--ht-get (tbl &rest keys)lsp--ht-get1412,55093
(defvar-local lsp--cached-folding-ranges nil)lsp--cached-folding-ranges1431,55430
(defvar-local lsp--cached-nested-folding-ranges nil)lsp--cached-nested-folding-ranges1432,55476
(define-inline lsp--folding-range-width (range)lsp--folding-range-width1434,55530
(defun lsp--get-folding-ranges ()lsp--get-folding-ranges1439,55716
(defun lsp--get-nested-folding-ranges ()lsp--get-nested-folding-ranges1469,57201
(defun lsp--folding-range-insert-into-trees (trees range)lsp--folding-range-insert-into-trees1478,57618
(defun lsp--folding-range-build-trees (ranges)lsp--folding-range-build-trees1489,58039
(define-inline lsp--range-inside-p (r1 r2)lsp--range-inside-p1496,58294
(define-inline lsp--range-before-p (r1 r2)lsp--range-before-p1503,58587
(define-inline lsp--point-inside-range-p (point range)lsp--point-inside-range-p1516,59097
(defun lsp--folding-range-at-point-bounds ()lsp--folding-range-at-point-bounds1546,60253
(defun lsp--get-nearest-folding-range (&optional backward)lsp--get-nearest-folding-range1555,60637
(defun lsp--folding-range-at-point-forward-op (n)lsp--folding-range-at-point-forward-op1567,61029
(defun lsp--folding-range-at-point-beginning-op ()lsp--folding-range-at-point-beginning-op1580,61568
(defun lsp--folding-range-at-point-end-op ()lsp--folding-range-at-point-end-op1585,61766
(defun lsp--range-at-point-bounds ()lsp--range-at-point-bounds1590,61946
(defun lsp--lens-text-width (from to)lsp--lens-text-width1608,62606
(defun lsp--lens-update (ov)lsp--lens-update1615,62933
(defun lsp--lens-overlay-ensure-at (pos)lsp--lens-overlay-ensure-at1631,63604
(defun lsp--lens-show (str pos)lsp--lens-show1640,63987
(defun lsp--lens-overlay-matches-pos (ov pos)lsp--lens-overlay-matches-pos1649,64243
(defun lsp--lens-after-save ()lsp--lens-after-save1655,64433
(defun lsp--lens-idle-function (&optional buffer)lsp--lens-idle-function1659,64548
(defun lsp--lens-schedule-refresh (buffer-modified?)lsp--lens-schedule-refresh1665,64820
(defun lsp--lens-keymap (command)lsp--lens-keymap1674,65224
(defun lsp--lens-display (lenses)lsp--lens-display1689,65757
(defun lsp--lens-refresh (buffer-modified?)lsp--lens-refresh1722,67562
(defun lsp--process-lenses (backend lenses version)lsp--process-lenses1730,67893
(defun lsp-lens-show ()lsp-lens-show1746,68648
(defun lsp-lens-hide ()lsp-lens-hide1758,69071
(defun lsp--lens-backend-not-loaded? (lens)lsp--lens-backend-not-loaded?1765,69270
(defun lsp--lens-backend-present? (lens)lsp--lens-backend-present?1772,69544
(defun lsp--lens-backend-fetch-missing (lenses callback file-version)lsp--lens-backend-fetch-missing1778,69780
(defun lsp-lens-backend (modified? callback)lsp-lens-backend1801,70759
(defun lsp--lens-stop-timer ()lsp--lens-stop-timer1829,72532
(define-minor-mode lsp-lens-modelsp-lens-mode1834,72684
(defvar lsp-mode-maplsp-mode-map1857,73426
(define-minor-mode lsp-mode ""lsp-mode1864,73645
(defun lsp-mode-line ()lsp-mode-line1897,75023
(defalias 'make-lsp-client 'make-lsp--client)make-lsp-client1904,75327
(defun lsp-workspace-status (status-string &optional workspace)lsp-workspace-status2012,80096
(defun lsp-session-set-metadata (key value &optional _workspace)lsp-session-set-metadata2017,80363
(defalias 'lsp-workspace-set-metadata 'lsp-session-set-metadata)lsp-workspace-set-metadata2022,80606
(defun lsp-session-get-metadata (key &optional _workspace)lsp-session-get-metadata2024,80672
(defalias 'lsp-workspace-get-metadata 'lsp-session-get-metadata)lsp-workspace-get-metadata2029,80885
(define-inline lsp--make-notification (method &optional params)lsp--make-notification2031,80951
(defun lsp--make-request (method &optional params)lsp--make-request2037,81210
(defalias 'lsp-make-request 'lsp--make-request)lsp-make-request2041,81369
(defun lsp--make-response (request result)lsp--make-response2043,81418
(defun lsp-make-notification (method &optional params)lsp-make-notification2047,81571
(defun lsp--make-message (params)lsp--make-message2051,81739
(defun lsp--make-log-entry (method id body type &optional process-time)lsp--make-log-entry2075,82463
(defun lsp--log-entry-pp (entry)lsp--log-entry-pp2090,83068
(defvar-local lsp--log-io-ewoc nil)lsp--log-io-ewoc2122,84476
(defun lsp--generate-log-buffer-name (workspace)lsp--generate-log-buffer-name2124,84513
(defun lsp--get-create-io-ewoc (workspace)lsp--get-create-io-ewoc2129,84800
(defun lsp--ewoc-count (ewoc)lsp--ewoc-count2139,85313
(defun lsp--log-entry-new (entry workspace)lsp--log-entry-new2145,85462
(defun lsp--send-notification (body)lsp--send-notification2160,86023
(defalias 'lsp-send-notification 'lsp--send-notification)lsp-send-notification2171,86492
(defun lsp-notify (method params)lsp-notify2173,86551
(defun lsp--cur-workspace-check ()lsp--cur-workspace-check2177,86695
(defun lsp--send-request (body &optional no-wait no-merge)lsp--send-request2182,86887
(defalias 'lsp-send-request 'lsp--send-requestlsp-send-request2191,87312
(defun lsp--create-async-callback (count callback mode method no-merge)lsp--create-async-callback2225,88898
(defun lsp--create-default-error-handler (method)lsp--create-default-error-handler2267,91079
(defun lsp--send-request-async (body callback &optional mode error-callback no-merge)lsp--send-request-async2274,91324
(defalias 'lsp-send-request-async 'lsp--send-request-async)lsp-send-request-async2325,94065
(defun lsp--global-teardown ()lsp--global-teardown2331,94288
(defun lsp--shutdown-workspace ()lsp--shutdown-workspace2335,94404
(defun lsp--uninitialize-workspace ()lsp--uninitialize-workspace2345,94789
(defun lsp--client-capabilities ()lsp--client-capabilities2356,95144
(defun lsp-find-roots-for-workspace (workspace session)lsp-find-roots-for-workspace2401,98876
(defun lsp-session-watches (&optional session)lsp-session-watches2408,99214
(defun lsp--file-process-event (session root-folder event)lsp--file-process-event2415,99525
(defun lsp--server-register-capability (reg)lsp--server-register-capability2440,101145
(defun lsp--cleanup-hanging-watches ()lsp--cleanup-hanging-watches2460,102130
(defun lsp--server-unregister-capability (unreg)lsp--server-unregister-capability2474,102894
(defun lsp--server-capabilities ()lsp--server-capabilities2483,103364
(defun lsp--send-open-close-p ()lsp--send-open-close-p2490,103610
(defun lsp--send-will-save-p ()lsp--send-will-save-p2496,103862
(defun lsp--send-will-save-wait-until-p ()lsp--send-will-save-wait-until-p2502,104107
(defun lsp--send-did-save-p ()lsp--send-did-save-p2508,104383
(defun lsp--save-include-text-p ()lsp--save-include-text-p2514,104626
(defun lsp--suggest-project-root ()lsp--suggest-project-root2521,104954
(defun lsp--read-from-file (file)lsp--read-from-file2531,105296
(defun lsp--persist (file-name to-persist)lsp--persist2536,105445
(defun lsp-workspace-folders-add (project-root)lsp-workspace-folders-add2540,105590
(defun lsp-workspace-folders-remove (project-root)lsp-workspace-folders-remove2551,106083
(defun lsp-workspace-blacklist-remove (project-root)lsp-workspace-blacklist-remove2592,108058
(define-obsolete-function-alias 'lsp-workspace-folders-switchlsp-workspace-folders-switch2602,108549
(defun lsp-workspace-folders-open (project-root)lsp-workspace-folders-open2605,108658
(define-minor-mode lsp--managed-modelsp--managed-mode2612,108958
(defun lsp--text-document-did-open ()lsp--text-document-did-open2652,110907
(define-inline lsp--text-document-identifier ()lsp--text-document-identifier2682,112089
(defun lsp--versioned-text-document-identifier ()lsp--versioned-text-document-identifier2690,112274
(define-inline lsp--position (line char)lsp--position2698,112539
(define-inline lsp--cur-line ()lsp--cur-line2708,112790
(define-inline lsp--cur-column ()lsp--cur-column2711,112867
(define-inline lsp--cur-position ()lsp--cur-position2714,112958
(defun lsp--point-to-position (point)lsp--point-to-position2721,113153
(define-inline lsp--range (start end)lsp--range2727,113289
(define-inline lsp--region-to-range (start end)lsp--region-to-range2739,113570
(defun lsp--region-or-line ()lsp--region-or-line2745,113822
(defun lsp--check-document-changes-version (document-changes)lsp--check-document-changes-version2751,114037
(defun lsp--apply-workspace-edit (edit)lsp--apply-workspace-edit2766,114718
(defun lsp--apply-text-document-edit (edit)lsp--apply-text-document-edit2787,115643
(defun lsp--position-compare (left right)lsp--position-compare2826,117509
(defun lsp--position-equal (left right)lsp--position-equal2836,117908
(defun lsp--text-edit-sort-predicate (e1 e2)lsp--text-edit-sort-predicate2841,118128
(defun lsp--apply-text-edit (text-edit)lsp--apply-text-edit2849,118516
(defun lsp--apply-text-edit-replace-buffer-contents (text-edit)lsp--apply-text-edit-replace-buffer-contents2864,119217
(defun lsp--apply-text-edits (edits)lsp--apply-text-edits2895,120620
(defun lsp--capability (cap &optional capabilities)lsp--capability2923,121958
(defun lsp--registered-capability (method)lsp--registered-capability2929,122213
(defvar-local lsp--before-change-vals nillsp--before-change-vals2937,122508
(defun lsp--text-document-content-change-event (start end length)lsp--text-document-content-change-event2941,122678
(defun lsp--bracketed-change-p (start _end length)lsp--bracketed-change-p3004,125215
(defun lsp--full-change-event ()lsp--full-change-event3011,125579
(defun lsp-before-change (start end)lsp-before-change3016,125718
(defun lsp--flush-delayed-changes ()lsp--flush-delayed-changes3045,127086
(defun lsp-on-change (start end length)lsp-on-change3057,127527
(defun lsp--on-self-insert ()lsp--on-self-insert3122,130839
(defun lsp--set-document-link-timer ()lsp--set-document-link-timer3137,131713
(defun lsp--cancel-document-link-timer ()lsp--cancel-document-link-timer3145,132116
(defun lsp--update-document-links (&optional buffer)lsp--update-document-links3150,132275
(defun lsp--document-link-handle-target (url)lsp--document-link-handle-target3176,133709
(defun lsp--document-link-keymap (link)lsp--document-link-keymap3194,134599
(defun lsp-buffer-language ()lsp-buffer-language3210,135120
(defun lsp-workspace-root (&optional path)lsp-workspace-root3220,135646
(defun lsp-on-revert ()lsp-on-revert3227,135921
(defun lsp--text-document-did-close (&optional keep-workspace-alive)lsp--text-document-did-close3234,136111
(define-inline lsp--will-save-text-document-params (reason)lsp--will-save-text-document-params3257,137332
(defun lsp--before-save ()lsp--before-save3263,137524
(defun lsp--on-auto-save ()lsp--on-auto-save3275,138051
(defun lsp--text-document-did-save ()lsp--text-document-did-save3281,138289
(define-inline lsp--text-document-position-params (&optional identifier position)lsp--text-document-position-params3293,138964
(defun lsp-cur-line-diagnostics ()lsp-cur-line-diagnostics3300,139401
(defalias 'lsp--cur-line-diagnotics 'lsp-cur-line-diagnostics)lsp--cur-line-diagnotics3310,139972
(defun lsp--gethash (key table &optional dflt)lsp--gethash3312,140036
(defun lsp--make-completion-item (item)lsp--make-completion-item3326,140580
(defun lsp--annotate (item)lsp--annotate3332,140768
(defun lsp--default-prefix-function ()lsp--default-prefix-function3341,141138
(defun lsp--get-completions ()lsp--get-completions3345,141245
(defun lsp--sort-completions (completions)lsp--sort-completions3367,142326
(defun lsp--resolve-completion (item)lsp--resolve-completion3376,142670
(defun lsp--extract-line-from-buffer (pos)lsp--extract-line-from-buffer3387,143093
(defun lsp--xref-make-item (filename range)lsp--xref-make-item3396,143474
(defun lsp--locations-to-xref-items (locations)lsp--locations-to-xref-items3413,144293
(defun lsp--make-reference-params (&optional td-position include-declaration)lsp--make-reference-params3447,145988
(defun lsp--cancel-request (id)lsp--cancel-request3455,146450
(defun lsp-eldoc-function ()lsp-eldoc-function3462,146730
(defvar-local lsp--highlight-bounds nil)lsp--highlight-bounds3473,146969
(defvar-local lsp--highlight-timer nil)lsp--highlight-timer3474,147010
(defun lsp--highlight ()lsp--highlight3476,147051
(defun lsp-describe-thing-at-point ()lsp-describe-thing-at-point3502,148321
(defun lsp--point-in-bounds-p (bounds)lsp--point-in-bounds-p3521,149102
(defun lsp-get-renderer (language)lsp-get-renderer3525,149257
(defun lsp--setup-markdown (mode)lsp--setup-markdown3530,149380
(defun lsp--buffer-string-visible ()lsp--buffer-string-visible3540,149831
(defun lsp--render-markdown ()lsp--render-markdown3559,150592
(defun lsp--fontlock-with-mode (str mode)lsp--fontlock-with-mode3585,151235
(defun lsp--render-string (str language)lsp--render-string3596,151565
(defun lsp--render-element (content)lsp--render-element3606,152000
(defun lsp--render-on-hover-content (contents render-all)lsp--render-on-hover-content3626,152580
(defvar-local lsp--hover-saved-bounds nil)lsp--hover-saved-bounds3651,153689
(defvar-local lsp--eldoc-saved-message nil)lsp--eldoc-saved-message3652,153732
(defun lsp--signature->eldoc-message (signature-help)lsp--signature->eldoc-message3654,153777
(defvar-local lsp-hover-request-id 0)lsp-hover-request-id3682,155364
(defun lsp-hover ()lsp-hover3684,155403
(defun lsp--select-action (actions)lsp--select-action3728,157590
(defun lsp--find-action-handler (command)lsp--find-action-handler3740,158093
(defun lsp--text-document-code-action-params ()lsp--text-document-code-action-params3748,158369
(defun lsp-code-actions-at-point ()lsp-code-actions-at-point3756,158727
(defun lsp-execute-code-action-by-kind (command-kind)lsp-execute-code-action-by-kind3760,158920
(defalias 'lsp-get-or-calculate-code-actions 'lsp-code-actions-at-point)lsp-get-or-calculate-code-actions3769,159315
(defun lsp--execute-command (action)lsp--execute-command3771,159389
(defun lsp-execute-code-action (action)lsp-execute-code-action3778,159723
(defun lsp--make-document-formatting-params ()lsp--make-document-formatting-params3791,160215
(defun lsp-format-buffer ()lsp-format-buffer3797,160492
(defun lsp-format-region (s e)lsp-format-region3807,160956
(defun lsp-organize-imports ()lsp-organize-imports3817,161487
(defun lsp--apply-formatting (edits)lsp--apply-formatting3822,161649
(defun lsp--make-document-range-formatting-params (start end)lsp--make-document-range-formatting-params3826,161764
(defconst lsp--highlight-kind-facelsp--highlight-kind-face3836,162130
(defun lsp--remove-cur-overlays ()lsp--remove-cur-overlays3841,162274
(defun lsp--document-highlight ()lsp--document-highlight3848,162522
(defun lsp-document-highlight ()lsp-document-highlight3853,162749
(defun lsp--make-document-highlight-callback (buf)lsp--make-document-highlight-callback3860,163028
(defconst lsp--symbol-kindlsp--symbol-kind3905,165449
(defun lsp--symbol-information-to-xref (symbol)lsp--symbol-information-to-xref3933,166013
(defun lsp--get-document-symbols ()lsp--get-document-symbols3946,166646
(defun lsp--xref-backend () 'xref-lsp)lsp--xref-backend3980,168090
(defun lsp--xref-elements-index (symbols path)lsp--xref-elements-index3986,168292
(defvar-local lsp--symbols-cache nil)lsp--symbols-cache3993,168605
(defun lsp--get-symbol-to-rename ()lsp--get-symbol-to-rename4024,170222
(defun lsp-rename (newname)lsp-rename4035,170712
(defun lsp-find-definition-mouse (click)lsp-find-definition-mouse4077,172835
(defalias 'lsp-find-custom #'lsp-find-locations)lsp-find-custom4111,174315
(defalias 'lsp-goto-implementation #'lsp-find-implementation)lsp-goto-implementation4112,174364
(defalias 'lsp-goto-type-definition #'lsp-find-type-definition)lsp-goto-type-definition4113,174426
(defun lsp--find-workspaces-for (msg-or-method)lsp--find-workspaces-for4121,174766
(defun lsp--send-execute-command (command &optional args)lsp--send-execute-command4146,175883
(defalias 'lsp-point-to-position #'lsp--point-to-position)lsp-point-to-position4153,176225
(defalias 'lsp-text-document-identifier #'lsp--text-document-identifier)lsp-text-document-identifier4154,176284
(defalias 'lsp-send-execute-command #'lsp--send-execute-command)lsp-send-execute-command4155,176357
(defalias 'lsp-on-open #'lsp--text-document-did-open)lsp-on-open4156,176422
(defalias 'lsp-on-save #'lsp--text-document-did-save)lsp-on-save4157,176476
(defalias 'lsp-completion-at-point #'lsp--get-completions)lsp-completion-at-point4158,176530
(defun lsp--set-configuration (settings)lsp--set-configuration4160,176590
(defun lsp--on-set-visitied-file-name (old-func &rest args)lsp--on-set-visitied-file-name4164,176748
(defun lsp--send-no-wait (message proc)lsp--send-no-wait4177,177204
(define-error 'lsp-parse-errorlsp-parse-error4184,177525
(define-error 'lsp-unknown-message-typelsp-unknown-message-type4186,177615
(define-error 'lsp-unknown-json-rpc-versionlsp-unknown-json-rpc-version4188,177710
(define-error 'lsp-no-content-lengthlsp-no-content-length4190,177822
(define-error 'lsp-invalid-header-namelsp-invalid-header-name4192,177934
(defun lsp--get-message-type (json-data)lsp--get-message-type4199,178121
(defconst lsp--default-notification-handlerslsp--default-notification-handlers4213,178663
(defun lsp--on-notification (workspace notification)lsp--on-notification4221,179016
(defun lsp--build-workspace-configuration-response (params)lsp--build-workspace-configuration-response4234,179677
(defun lsp--on-request (workspace request)lsp--on-request4243,180028
(defun lsp--error-string (err)lsp--error-string4284,182352
(defun lsp--get-body-length (headers)lsp--get-body-length4292,182650
(defun lsp--parse-header (s)lsp--parse-header4301,182978
(defun lsp--parser-reset (p)lsp--parser-reset4316,183552
(defun lsp--read-json (str)lsp--read-json4326,183811
(defun lsp--log-request-time (server-id method id start-time before-send received-time after-parsed-time after-processed-time)lsp--log-request-time4341,184386
(defun lsp--log-notification-performance (server-id json-data received-time after-parsed-time before-notification after-processed-time)lsp--log-notification-performance4360,185139
(defun lsp--parser-on-message (p msg)lsp--parser-on-message4372,185662
(defun lsp--parser-read (p output)lsp--parser-read4417,188063
(defun lsp--json-pretty-print (msg)lsp--json-pretty-print4469,190614
(defun lsp--parser-make-filter (p ignore-regexps)lsp--parser-make-filter4474,190798
(defun lsp--symbol-to-imenu-elem (sym)lsp--symbol-to-imenu-elem4491,191732
(defun lsp--symbol-to-hierarchical-imenu-elem (sym)lsp--symbol-to-hierarchical-imenu-elem4505,192212
(defun lsp--symbol-get-start-point (sym)lsp--symbol-get-start-point4524,192996
(defun lsp--symbol-filter (sym)lsp--symbol-filter4537,193520
(defun lsp--get-symbol-type (sym)lsp--get-symbol-type4548,193921
(defun lsp--imenu-create-index ()lsp--imenu-create-index4555,194087
(defun lsp--imenu-filter-symbols (symbols)lsp--imenu-filter-symbols4565,194569
(defun lsp--imenu-hierarchical-p (symbols)lsp--imenu-hierarchical-p4569,194707
(defun lsp--imenu-create-hierarchical-index (symbols)lsp--imenu-create-hierarchical-index4573,194863
(defun lsp--imenu-symbol-lessp (sym1 sym2)lsp--imenu-symbol-lessp4591,195585
(defun lsp--imenu-compare-kind (sym1 sym2)lsp--imenu-compare-kind4602,196104
(defun lsp--imenu-compare-position (sym1 sym2)lsp--imenu-compare-position4608,196282
(defun lsp--imenu-compare-name (sym1 sym2)lsp--imenu-compare-name4614,196510
(defun lsp--imenu-refresh ()lsp--imenu-refresh4621,196787
(defun lsp-enable-imenu ()lsp-enable-imenu4625,196898
(defun lsp-resolve-final-function (command)lsp-resolve-final-function4634,197189
(defun lsp-server-present? (final-command)lsp-server-present?4644,197540
(defun lsp-stdio-connection (command)lsp-stdio-connection4657,198216
(defun lsp--open-network-stream (host port name &optional retry-count sleep-interval)lsp--open-network-stream4689,199972
(defun lsp--find-available-port (host starting-port)lsp--find-available-port4709,200792
(defun lsp-tcp-connection (command-fn)lsp-tcp-connection4721,201211
(defalias 'lsp-tcp-server 'lsp-tcp-server-command)lsp-tcp-server4746,202747
(defun lsp-tcp-server-command (command-fn)lsp-tcp-server-command4748,202799
(defun lsp-tramp-connection (local-command &optional generate-error-file-fn)lsp-tramp-connection4795,205519
(defun lsp--auto-configure ()lsp--auto-configure4820,207246
(defun lsp--make-workspace (client root)lsp--make-workspace4847,208107
(defvar-local lsp--buffer-deferred nillsp--buffer-deferred4861,208593
(defun lsp--restart-if-needed (workspace)lsp--restart-if-needed4864,208684
(defun lsp--update-key (table key fn)lsp--update-key4881,209487
(defun lsp--create-sentinel (workspace)lsp--create-sentinel4888,209744
(defun lsp--start-workspace (session client-template root &optional initialization-options)lsp--start-workspace4927,211494
(defun lsp--load-default-session ()lsp--load-default-session4995,215064
(defun lsp-session ()lsp-session5004,215506
(defun lsp--client-disabled-p (buffer-major-mode client)lsp--client-disabled-p5008,215654
(defun lsp--matching-clients? (client)lsp--matching-clients?5020,216038
(defun lsp--find-clients ()lsp--find-clients5034,216867
(defun lsp-register-client (client)lsp-register-client5066,218676
(defun lsp--create-initialization-options (_session client)lsp--create-initialization-options5077,219194
(defun lsp--plist-delete (prop plist)lsp--plist-delete5086,219649
(defvar lsp-client-settings nil)lsp-client-settings5106,220247
(defun lsp-register-custom-settings (props)lsp-register-custom-settings5108,220281
(defun lsp-region-text (region)lsp-region-text5116,220651
(defun lsp-ht-set (tbl paths value)lsp-ht-set5121,220836
(defun lsp-configuration-section (section)lsp-configuration-section5132,221339
(defun lsp--start-connection (session client project-root)lsp--start-connection5145,221867
(defun lsp-workspace-show-log (workspace)lsp-workspace-show-log5157,222450
(defalias 'lsp-switch-to-io-log-buffer 'lsp-workspace-show-log)lsp-switch-to-io-log-buffer5167,222881
(defun lsp-log-io-next (arg)lsp-log-io-next5169,222946
(defun lsp-log-io-prev (arg)lsp-log-io-prev5173,223044
(define-derived-mode lsp-log-io-mode view-mode "LspLogIo"lsp-log-io-mode5177,223142
(define-key lsp-log-io-mode-map (kbd "M-n") #'lsp-log-io-next)lsp-log-io-mode-map5180,223240
(define-key lsp-log-io-mode-map (kbd "M-p")  #'lsp-log-io-prev)lsp-log-io-mode-map5181,223303
(define-derived-mode lsp-browser-mode special-mode "LspBrowser"lsp-browser-mode5183,223368
(defun lsp--workspace-print (workspace)lsp--workspace-print5187,223558
(defun lsp--map-tree-widget (m)lsp--map-tree-widget5198,224069
(defun lsp--render-workspace (workspace)lsp--render-workspace5216,224768
(defun lsp-describe-session ()lsp-describe-session5233,225871
(defun lsp--session-workspaces (session)lsp--session-workspaces5254,226555
(defun lsp--find-multiroot-workspace (session client project-root)lsp--find-multiroot-workspace5258,226727
(defun lsp--ensure-lsp-servers (session clients project-root ignore-multi-folder)lsp--ensure-lsp-servers5278,227865
(defun lsp--spinner-stop ()lsp--spinner-stop5289,228368
(defun lsp--open-in-workspace (workspace)lsp--open-in-workspace5295,228583
(defun lsp--find-workspace (session client project-root)lsp--find-workspace5311,229305
(defun lsp--find-root-interactively (session)lsp--find-root-interactively5321,229816
(defun lsp-find-session-folder (session file-name)lsp-find-session-folder5360,231921
(defun lsp-find-workspace (server-id file-name)lsp-find-workspace5370,232338
(defun lsp--calculate-root (session file-name)lsp--calculate-root5380,232847
(defun lsp--try-open-in-library-workspace ()lsp--try-open-in-library-workspace5396,233401
(defun lsp--persist-session (session)lsp--persist-session5413,234396
(defun lsp--try-project-root-workspaces (ask-for-client ignore-multi-folder)lsp--try-project-root-workspaces5420,234793
(defun lsp-shutdown-workspace ()lsp-shutdown-workspace5445,236193
(defun lsp-workspace-shutdown (workspace)lsp-workspace-shutdown5460,236960
(defun lsp-disconnect ()lsp-disconnect5469,237457
(defun lsp-restart-workspace ()lsp-restart-workspace5479,237769
(defun lsp-workspace-restart (workspace)lsp-workspace-restart5491,238307
(defun lsp (&optional arg)lsp5501,238825
(defun lsp--init-if-visible ()lsp--init-if-visible5525,239891
(defun lsp-deferred ()lsp-deferred5534,240200

elpa/lsp-mode-6.1/lsp-solargraph.el,911
(defgroup lsp-solargraph nillsp-solargraph29,886
(defcustom lsp-solargraph-completion tlsp-solargraph-completion39,1251
(defcustom lsp-solargraph-hover tlsp-solargraph-hover45,1395
(defcustom lsp-solargraph-diagnostics tlsp-solargraph-diagnostics51,1529
(defcustom lsp-solargraph-autoformat nillsp-solargraph-autoformat57,1675
(defcustom lsp-solargraph-formatting tlsp-solargraph-formatting63,1868
(defcustom lsp-solargraph-symbols tlsp-solargraph-symbols69,2021
(defcustom lsp-solargraph-definitions tlsp-solargraph-definitions75,2159
(defcustom lsp-solargraph-rename tlsp-solargraph-rename81,2319
(defcustom lsp-solargraph-references tlsp-solargraph-references87,2464
(defcustom lsp-solargraph-folding tlsp-solargraph-folding93,2616
(defcustom lsp-solargraph-log-level "warn"lsp-solargraph-log-level99,2761
(defcustom lsp-solargraph-use-bundler nillsp-solargraph-use-bundler106,3057

elpa/lsp-mode-6.1/lsp-intelephense.el,1063
(defgroup lsp-intelephense nillsp-intelephense29,894
(defcustom lsp-intelephense-files-max-size 1000000lsp-intelephense-files-max-size35,1100
(defcustom lsp-intelephense-files-associationslsp-intelephense-files-associations41,1267
(defcustom lsp-intelephense-files-excludelsp-intelephense-files-exclude49,1513
(defcustom lsp-intelephense-stubslsp-intelephense-stubs57,1911
(defcustom lsp-intelephense-completion-insert-use-declaration tlsp-intelephense-completion-insert-use-declaration75,2882
(defcustom lsp-intelephense-completion-fully-qualify-global-constants-and-functions nillsp-intelephense-completion-fully-qualify-global-constants-and-functions82,3155
(defcustom lsp-intelephense-format-enable tlsp-intelephense-format-enable89,3428
(defcustom lsp-intelephense-trace-server "off"lsp-intelephense-trace-server95,3580
(defcustom lsp-intelephense-storage-path (expand-file-name (locate-user-emacs-file "lsp-cache"))lsp-intelephense-storage-path102,3831
(defcustom lsp-intelephense-server-commandlsp-intelephense-server-command123,4851

elpa/lsp-mode-6.1/lsp-dart.el,520
(defgroup lsp-dart nillsp-dart27,878
(defcustom lsp-clients-dart-server-commandlsp-clients-dart-server-command32,1048
(defun lsp-dart--lsp-command ()lsp-dart--lsp-command40,1357
(defgroup lsp-dart-analysis nillsp-dart-analysis60,2113
(defcustom lsp-dart-analysis-sdk-dir "~/flutter/bin/cache/dart-sdk/"lsp-dart-analysis-sdk-dir66,2346
(defcustom lsp-dart-analysis-server-command nillsp-dart-analysis-server-command73,2550
(defun lsp-dart--analysis-server-command ()lsp-dart--analysis-server-command79,2734

elpa/lsp-mode-6.1/lsp.el,0

elpa/lsp-mode-6.1/lsp-rust.el,2061
(defgroup lsp-rust nillsp-rust29,896
(defcustom lsp-rust-library-directories '("~/.cargo/registry/src" "~/.rustup/toolchains")lsp-rust-library-directories35,1088
(defcustom lsp-rust-sysroot nillsp-rust-sysroot42,1340
(defcustom lsp-rust-target nillsp-rust-target50,1651
(defcustom lsp-rust-rustflags nillsp-rust-rustflags58,1900
(defcustom lsp-rust-clear-env-rust-log tlsp-rust-clear-env-rust-log66,2110
(defcustom lsp-rust-build-lib nillsp-rust-build-lib73,2303
(defcustom lsp-rust-build-bin nillsp-rust-build-bin80,2576
(defcustom lsp-rust-cfg-test nillsp-rust-cfg-test89,2907
(defcustom lsp-rust-unstable-features nillsp-rust-unstable-features95,3158
(defcustom lsp-rust-wait-to-build nillsp-rust-wait-to-build101,3307
(defcustom lsp-rust-show-warnings tlsp-rust-show-warnings111,3646
(defcustom lsp-rust-use-crate-blacklist tlsp-rust-use-crate-blacklist117,3778
(defcustom lsp-rust-build-on-save nillsp-rust-build-on-save123,3944
(defcustom lsp-rust-features []lsp-rust-features130,4126
(defcustom lsp-rust-all-features nillsp-rust-all-features139,4513
(defcustom lsp-rust-no-default-features nillsp-rust-no-default-features145,4658
(defcustom lsp-rust-racer-completion tlsp-rust-racer-completion151,4821
(defcustom lsp-rust-clippy-preference "opt-in"lsp-rust-clippy-preference157,4978
(defcustom lsp-rust-jobs nillsp-rust-jobs171,5524
(defcustom lsp-rust-all-targets tlsp-rust-all-targets179,5746
(defcustom lsp-rust-target-dir nillsp-rust-target-dir187,5982
(defcustom lsp-rust-rustfmt-path nillsp-rust-rustfmt-path197,6310
(defcustom lsp-rust-build-command nillsp-rust-build-command206,6587
(defcustom lsp-rust-full-docs nillsp-rust-full-docs218,7034
(defcustom lsp-rust-show-hover-context tlsp-rust-show-hover-context225,7252
(defvar lsp-clients-rust-progress-string ""lsp-clients-rust-progress-string258,8674
(defun lsp-clients--rust-window-progress (_workspace params)lsp-clients--rust-window-progress264,8912
(defcustom lsp-rust-rls-server-command '("rls")lsp-rust-rls-server-command273,9330

elpa/lsp-mode-6.1/lsp-mode-pkg.el,59
(define-package "lsp-mode" "6.1" "LSP mode""lsp-mode"1,0

elpa/lsp-mode-6.1/lsp-erlang.el,200
(defgroup lsp-erlang nillsp-erlang29,882
(defcustom lsp-erlang-server-install-dirlsp-erlang-server-install-dir34,1058
(defun lsp-erlang-server-start-fun (port)lsp-erlang-server-start-fun41,1215

elpa/lsp-mode-6.1/lsp-clojure.el,1336
(defgroup lsp-clojure nillsp-clojure30,931
(defcustom lsp-clojure-server-command  '("bash" "-c" "clojure-lsp")lsp-clojure-server-command36,1090
(defun lsp-clojure--refactoring-call (refactor-name &rest additional-args)lsp-clojure--refactoring-call44,1261
(defun lsp-clojure-add-missing-libspec ()lsp-clojure-add-missing-libspec54,1916
(defun lsp-clojure-clean-ns ()lsp-clojure-clean-ns59,2084
(defun lsp-clojure-cycle-coll ()lsp-clojure-cycle-coll64,2219
(defun lsp-clojure-cycle-privacy ()lsp-clojure-cycle-privacy69,2360
(defun lsp-clojure-expand-let ()lsp-clojure-expand-let74,2510
(defun lsp-clojure-extract-function (function-name)lsp-clojure-extract-function79,2651
(defun lsp-clojure-introduce-let (binding-name)lsp-clojure-introduce-let84,2895
(defun lsp-clojure-move-to-let (binding-name)lsp-clojure-move-to-let89,3132
(defun lsp-clojure-thread-first ()lsp-clojure-thread-first94,3376
(defun lsp-clojure-thread-first-all ()lsp-clojure-thread-first-all99,3523
(defun lsp-clojure-thread-last ()lsp-clojure-thread-last104,3682
(defun lsp-clojure-thread-last-all ()lsp-clojure-thread-last-all109,3826
(defun lsp-clojure-unwind-all ()lsp-clojure-unwind-all114,3982
(defun lsp-clojure-unwind-thread ()lsp-clojure-unwind-thread119,4123
(defun lsp-clj--file-in-jar (uri)lsp-clj--file-in-jar124,4273

elpa/lsp-mode-6.1/lsp-fsharp.el,949
(defgroup lsp-fsharp nillsp-fsharp30,897
(defcustom lsp-fsharp-server-runtime 'net-corelsp-fsharp-server-runtime36,1131
(defcustom lsp-fsharp-server-install-dir (locate-user-emacs-file "fsautocomplete/")lsp-fsharp-server-install-dir44,1436
(defcustom lsp-fsharp-server-download-url "https://ci.appveyor.com/api/projects/fsautocomplete/fsautocomplete/artifacts/bin/pkgs/fsautocomplete.netcore.zip?branch=master"lsp-fsharp-server-download-url52,1695
(defcustom lsp-fsharp-server-args nillsp-fsharp-server-args60,2163
(defun lsp-fsharp--fsac-runtime-cmd ()lsp-fsharp--fsac-runtime-cmd66,2336
(defun lsp-fsharp--fsac-cmd ()lsp-fsharp--fsac-cmd73,2567
(defun lsp-fsharp--fsac-locate ()lsp-fsharp--fsac-locate80,2858
(defun lsp-fsharp--fsac-install ()lsp-fsharp--fsac-install89,3229
(defun lsp-fsharp--make-launch-cmd ()lsp-fsharp--make-launch-cmd100,4199
(defun lsp-fsharp--make-init-options ()lsp-fsharp--make-init-options105,4450

elpa/lsp-mode-6.1/lsp-vetur.el,11739
(defgroup lsp-vetur nillsp-vetur30,920
(defcustom lsp-vetur-use-workspace-dependencies nillsp-vetur-use-workspace-dependencies36,1132
(defcustom lsp-vetur-completion-auto-import tlsp-vetur-completion-auto-import43,1330
(defcustom lsp-vetur-completion-use-scaffold-snippets tlsp-vetur-completion-use-scaffold-snippets49,1516
(defcustom lsp-vetur-completion-tag-casing "kebab"lsp-vetur-completion-tag-casing55,1707
(defcustom lsp-vetur-grammar-custom-blocks '((docs . "md") (i18n . "json"))lsp-vetur-grammar-custom-blocks63,1932
(defcustom lsp-vetur-validation-template tlsp-vetur-validation-template71,2221
(defcustom lsp-vetur-validation-style tlsp-vetur-validation-style77,2402
(defcustom lsp-vetur-validation-script tlsp-vetur-validation-script83,2566
(defcustom lsp-vetur-format-enable tlsp-vetur-format-enable89,2716
(defcustom lsp-vetur-format-options-tab-size 2lsp-vetur-format-options-tab-size95,2880
(defcustom lsp-vetur-format-options-use-tabs nillsp-vetur-format-options-use-tabs101,3077
(defcustom lsp-vetur-format-default-formatter-html "prettyhtml"lsp-vetur-format-default-formatter-html107,3263
(defcustom lsp-vetur-format-default-formatter-css "prettier"lsp-vetur-format-default-formatter-css117,3572
(defcustom lsp-vetur-format-default-formatter-postcss "prettier"lsp-vetur-format-default-formatter-postcss125,3807
(defcustom lsp-vetur-format-default-formatter-scss "prettier"lsp-vetur-format-default-formatter-scss133,4061
(defcustom lsp-vetur-format-default-formatter-less "prettier"lsp-vetur-format-default-formatter-less141,4309
(defcustom lsp-vetur-format-default-formatter-stylus "stylus-supremacy"lsp-vetur-format-default-formatter-stylus149,4557
(defcustom lsp-vetur-format-default-formatter-js "prettier"lsp-vetur-format-default-formatter-js157,4825
(defcustom lsp-vetur-format-default-formatter-ts "prettier"lsp-vetur-format-default-formatter-ts167,5134
(defcustom lsp-vetur-format-default-formatter-optionslsp-vetur-format-default-formatter-options176,5407
(defcustom lsp-vetur-format-style-initial-indent nillsp-vetur-format-style-initial-indent187,5819
(defcustom lsp-vetur-format-script-initial-indent nillsp-vetur-format-script-initial-indent193,6004
(defcustom lsp-vetur-trace-server "off"lsp-vetur-trace-server199,6191
(defcustom lsp-typescript-tsdk nillsp-typescript-tsdk208,6461
(defcustom lsp-typescript-disable-automatic-type-acquisition nillsp-typescript-disable-automatic-type-acquisition215,6664
(defcustom lsp-typescript-npm nillsp-typescript-npm223,6958
(defcustom lsp-typescript-check-npm-is-installed tlsp-typescript-check-npm-is-installed231,7219
(defcustom lsp-javascript-references-code-lens-enabled nillsp-javascript-references-code-lens-enabled237,7410
(defcustom lsp-typescript-references-code-lens-enabled nillsp-typescript-references-code-lens-enabled243,7607
(defcustom lsp-typescript-implementations-code-lens-enabled nillsp-typescript-implementations-code-lens-enabled249,7804
(defcustom lsp-typescript-tsserver-log "off"lsp-typescript-tsserver-log256,8045
(defcustom lsp-typescript-tsserver-plugin-paths nillsp-typescript-tsserver-plugin-paths269,8481
(defcustom lsp-typescript-tsserver-trace "off"lsp-typescript-tsserver-trace276,8728
(defcustom lsp-javascript-suggest-complete-function-calls nillsp-javascript-suggest-complete-function-calls287,9133
(defcustom lsp-typescript-suggest-complete-function-calls nillsp-typescript-suggest-complete-function-calls292,9308
(defcustom lsp-typescript-report-style-checks-as-warnings tlsp-typescript-report-style-checks-as-warnings297,9483
(defcustom lsp-typescript-validate-enable tlsp-typescript-validate-enable302,9638
(defcustom lsp-typescript-format-enable tlsp-typescript-format-enable307,9782
(defcustom lsp-typescript-format-insert-space-after-comma-delimiter tlsp-typescript-format-insert-space-after-comma-delimiter312,9931
(defcustom lsp-typescript-format-insert-space-after-constructor nillsp-typescript-format-insert-space-after-constructor317,10111
(defcustom lsp-typescript-format-insert-space-after-semicolon-in-for-statements tlsp-typescript-format-insert-space-after-semicolon-in-for-statements323,10354
(defcustom lsp-typescript-format-insert-space-before-and-after-binary-operators tlsp-typescript-format-insert-space-before-and-after-binary-operators328,10559
(defcustom lsp-typescript-format-insert-space-after-keywords-in-control-flow-statements tlsp-typescript-format-insert-space-after-keywords-in-control-flow-statements333,10751
(defcustom lsp-typescript-format-insert-space-after-function-keyword-for-anonymous-functions tlsp-typescript-format-insert-space-after-function-keyword-for-anonymous-functions339,10970
(defcustom lsp-typescript-format-insert-space-before-function-parenthesis nillsp-typescript-format-insert-space-before-function-parenthesis345,11198
(defcustom lsp-typescript-format-insert-space-after-opening-and-before-closing-nonempty-parenthesis nillsp-typescript-format-insert-space-after-opening-and-before-closing-nonempty-parenthesis350,11399
(defcustom lsp-typescript-format-insert-space-after-opening-and-before-closing-nonempty-brackets nillsp-typescript-format-insert-space-after-opening-and-before-closing-nonempty-brackets356,11644
(defcustom lsp-typescript-format-insert-space-after-opening-and-before-closing-nonempty-braces tlsp-typescript-format-insert-space-after-opening-and-before-closing-nonempty-braces362,11883
(defcustom lsp-typescript-format-insert-space-after-opening-and-before-closing-template-string-braces nillsp-typescript-format-insert-space-after-opening-and-before-closing-template-string-braces369,12175
(defcustom lsp-typescript-format-insert-space-after-opening-and-before-closing-jsx-expression-braces nillsp-typescript-format-insert-space-after-opening-and-before-closing-jsx-expression-braces375,12423
(defcustom lsp-typescript-format-insert-space-after-type-assertion nillsp-typescript-format-insert-space-after-type-assertion381,12669
(defcustom lsp-typescript-format-place-open-brace-on-new-line-for-functions nillsp-typescript-format-place-open-brace-on-new-line-for-functions387,12919
(defcustom lsp-typescript-format-place-open-brace-on-new-line-for-control-blocks nillsp-typescript-format-place-open-brace-on-new-line-for-control-blocks393,13136
(defcustom lsp-javascript-validate-enable tlsp-javascript-validate-enable399,13363
(defcustom lsp-javascript-format-enable tlsp-javascript-format-enable404,13507
(defcustom lsp-javascript-format-insert-space-after-comma-delimiter tlsp-javascript-format-insert-space-after-comma-delimiter409,13656
(defcustom lsp-javascript-format-insert-space-after-constructor nillsp-javascript-format-insert-space-after-constructor414,13836
(defcustom lsp-javascript-format-insert-space-after-semicolon-in-for-statements tlsp-javascript-format-insert-space-after-semicolon-in-for-statements420,14079
(defcustom lsp-javascript-format-insert-space-before-and-after-binary-operators tlsp-javascript-format-insert-space-before-and-after-binary-operators425,14284
(defcustom lsp-javascript-format-insert-space-after-keywords-in-control-flow-statements tlsp-javascript-format-insert-space-after-keywords-in-control-flow-statements430,14476
(defcustom lsp-javascript-format-insert-space-after-function-keyword-for-anonymous-functions tlsp-javascript-format-insert-space-after-function-keyword-for-anonymous-functions436,14695
(defcustom lsp-javascript-format-insert-space-before-function-parenthesis nillsp-javascript-format-insert-space-before-function-parenthesis442,14923
(defcustom lsp-javascript-format-insert-space-after-opening-and-before-closing-nonempty-parenthesis nillsp-javascript-format-insert-space-after-opening-and-before-closing-nonempty-parenthesis447,15124
(defcustom lsp-javascript-format-insert-space-after-opening-and-before-closing-nonempty-brackets nillsp-javascript-format-insert-space-after-opening-and-before-closing-nonempty-brackets453,15369
(defcustom lsp-javascript-format-insert-space-after-opening-and-before-closing-nonempty-braces tlsp-javascript-format-insert-space-after-opening-and-before-closing-nonempty-braces459,15608
(defcustom lsp-javascript-format-insert-space-after-opening-and-before-closing-template-string-braces nillsp-javascript-format-insert-space-after-opening-and-before-closing-template-string-braces466,15900
(defcustom lsp-javascript-format-insert-space-after-opening-and-before-closing-jsx-expression-braces nillsp-javascript-format-insert-space-after-opening-and-before-closing-jsx-expression-braces472,16148
(defcustom lsp-javascript-format-place-open-brace-on-new-line-for-functions nillsp-javascript-format-place-open-brace-on-new-line-for-functions478,16394
(defcustom lsp-javascript-format-place-open-brace-on-new-line-for-control-blocks nillsp-javascript-format-place-open-brace-on-new-line-for-control-blocks484,16611
(defcustom lsp-javascript-implicit-project-config-check-js nillsp-javascript-implicit-project-config-check-js490,16838
(defcustom lsp-javascript-implicit-project-config-experimental-decorators nillsp-javascript-implicit-project-config-experimental-decorators497,17145
(defcustom lsp-javascript-suggest-names tlsp-javascript-suggest-names502,17287
(defcustom lsp-typescript-tsc-auto-detect "on"lsp-typescript-tsc-auto-detect508,17470
(defcustom lsp-javascript-suggest-paths tlsp-javascript-suggest-paths517,17717
(defcustom lsp-typescript-suggest-paths tlsp-typescript-suggest-paths523,17898
(defcustom lsp-javascript-suggest-auto-imports tlsp-javascript-suggest-auto-imports529,18079
(defcustom lsp-typescript-suggest-auto-imports tlsp-typescript-suggest-auto-imports535,18289
(defcustom lsp-javascript-suggest-complete-js-docs tlsp-javascript-suggest-complete-js-docs541,18499
(defcustom lsp-typescript-suggest-complete-js-docs tlsp-typescript-suggest-complete-js-docs546,18668
(defcustom lsp-typescript-locale nillsp-typescript-locale551,18837
(defcustom lsp-javascript-suggestion-actions-enabled tlsp-javascript-suggestion-actions-enabled567,19189
(defcustom lsp-typescript-suggestion-actions-enabled tlsp-typescript-suggestion-actions-enabled574,19437
(defcustom lsp-javascript-preferences-quote-style "auto" nillsp-javascript-preferences-quote-style581,19685
(defcustom lsp-typescript-preferences-quote-style "auto" nillsp-typescript-preferences-quote-style588,19884
(defcustom lsp-javascript-preferences-import-module-specifier "auto"lsp-javascript-preferences-import-module-specifier595,20083
(defcustom lsp-typescript-preferences-import-module-specifier "auto"lsp-typescript-preferences-import-module-specifier603,20341
(defcustom lsp-javascript-preferences-rename-shorthand-properties tlsp-javascript-preferences-rename-shorthand-properties611,20590
(defcustom lsp-typescript-preferences-rename-shorthand-properties tlsp-typescript-preferences-rename-shorthand-properties618,20860
(defcustom lsp-typescript-update-imports-on-file-move-enabled "prompt"lsp-typescript-update-imports-on-file-move-enabled625,21130
(defcustom lsp-javascript-update-imports-on-file-move-enabled "prompt"lsp-javascript-update-imports-on-file-move-enabled635,21494
(defcustom lsp-typescript-auto-closing-tags tlsp-typescript-auto-closing-tags643,21731
(defcustom lsp-javascript-auto-closing-tags tlsp-javascript-auto-closing-tags649,21942
(defcustom lsp-javascript-suggest-enabled tlsp-javascript-suggest-enabled655,22153
(defcustom lsp-typescript-suggest-enabled tlsp-typescript-suggest-enabled660,22301
(defcustom lsp-typescript-surveys-enabled tlsp-typescript-surveys-enabled665,22449
(defcustom lsp-vetur-server-command '("vls")lsp-vetur-server-command773,32181

elpa/lsp-mode-6.1/lsp-metals.el,1365
(defgroup lsp-metals nillsp-metals29,1005
(defcustom lsp-metals-server-command "metals-emacs"lsp-metals-server-command35,1182
(defcustom lsp-metals-server-args '()lsp-metals-server-args41,1363
(defcustom lsp-metals-java-home ""lsp-metals-java-home47,1539
(defcustom lsp-metals-scalafmt-config-path ""lsp-metals-scalafmt-config-path54,1744
(defcustom lsp-metals-sbt-script ""lsp-metals-sbt-script62,2039
(defcustom lsp-metals-gradle-script ""lsp-metals-gradle-script72,2469
(defun lsp-metals--server-command ()lsp-metals--server-command88,3094
(defun lsp-metals-build-import ()lsp-metals-build-import92,3246
(defun lsp-metals-build-connect ()lsp-metals-build-connect97,3424
(defun lsp-metals-doctor-run ()lsp-metals-doctor-run102,3601
(defun lsp-metals-sources-scan ()lsp-metals-sources-scan107,3765
(defun lsp-metals--doctor-render (html)lsp-metals--doctor-render112,3937
(defun lsp-metals--generate-doctor-buffer-name (workspace)lsp-metals--generate-doctor-buffer-name122,4246
(defun lsp-metals--doctor-run (workspace html)lsp-metals--doctor-run125,4389
(defun lsp-metals--doctor-reload (workspace html)lsp-metals--doctor-reload130,4621
(defun lsp-metals--goto-location (_workspace location)lsp-metals--goto-location137,4950
(defun lsp-metals--execute-client-command (workspace params)lsp-metals--execute-client-command147,5351

elpa/lsp-mode-6.1/lsp-mode-autoloads.el,0

elpa/lsp-mode-6.1/lsp-pyls.el,3880
(defgroup lsp-pyls nillsp-pyls29,899
(defcustom lsp-clients-python-library-directories '("/usr/")lsp-clients-python-library-directories35,1124
(defcustom lsp-pyls-server-command '("pyls")lsp-pyls-server-command47,1446
(defcustom lsp-pyls-configuration-sources ["pycodestyle"]lsp-pyls-configuration-sources54,1614
(defcustom lsp-pyls-plugins-jedi-completion-enabled tlsp-pyls-plugins-jedi-completion-enabled60,1799
(defcustom lsp-pyls-plugins-jedi-completion-include-params tlsp-pyls-plugins-jedi-completion-include-params66,1964
(defcustom lsp-pyls-plugins-jedi-definition-enabled tlsp-pyls-plugins-jedi-definition-enabled73,2175
(defcustom lsp-pyls-plugins-jedi-definition-follow-imports tlsp-pyls-plugins-jedi-definition-follow-imports79,2340
(defcustom lsp-pyls-plugins-jedi-definition-follow-builtin-imports tlsp-pyls-plugins-jedi-definition-follow-builtin-imports85,2517
(defcustom lsp-pyls-plugins-jedi-hover-enabled tlsp-pyls-plugins-jedi-hover-enabled92,2735
(defcustom lsp-pyls-plugins-jedi-references-enabled tlsp-pyls-plugins-jedi-references-enabled98,2895
(defcustom lsp-pyls-plugins-jedi-signature-help-enabled tlsp-pyls-plugins-jedi-signature-help-enabled104,3060
(defcustom lsp-pyls-plugins-jedi-symbols-enabled tlsp-pyls-plugins-jedi-symbols-enabled110,3229
(defcustom lsp-pyls-plugins-jedi-symbols-all-scopes tlsp-pyls-plugins-jedi-symbols-all-scopes116,3391
(defcustom lsp-pyls-plugins-mccabe-enabled tlsp-pyls-plugins-mccabe-enabled123,3602
(defcustom lsp-pyls-plugins-mccabe-threshold 15lsp-pyls-plugins-mccabe-threshold129,3758
(defcustom lsp-pyls-plugins-preload-enabled tlsp-pyls-plugins-preload-enabled136,3960
(defcustom lsp-pyls-plugins-preload-modules nillsp-pyls-plugins-preload-modules142,4117
(defcustom lsp-pyls-plugins-pylint-enabled tlsp-pyls-plugins-pylint-enabled148,4291
(defcustom lsp-pyls-plugins-pylint-args []lsp-pyls-plugins-pylint-args154,4447
(defcustom lsp-pyls-plugins-pycodestyle-enabled tlsp-pyls-plugins-pycodestyle-enabled161,4618
(defcustom lsp-pyls-plugins-pycodestyle-exclude nillsp-pyls-plugins-pycodestyle-exclude167,4779
(defcustom lsp-pyls-plugins-pycodestyle-filename nillsp-pyls-plugins-pycodestyle-filename173,4977
(defcustom lsp-pyls-plugins-pycodestyle-select nillsp-pyls-plugins-pycodestyle-select180,5191
(defcustom lsp-pyls-plugins-pycodestyle-ignore nillsp-pyls-plugins-pycodestyle-ignore186,5358
(defcustom lsp-pyls-plugins-pycodestyle-hang-closing nillsp-pyls-plugins-pycodestyle-hang-closing192,5525
(defcustom lsp-pyls-plugins-pycodestyle-max-line-length nillsp-pyls-plugins-pycodestyle-max-line-length199,5743
(defcustom lsp-pyls-plugins-pydocstyle-enabled nillsp-pyls-plugins-pydocstyle-enabled205,5916
(defcustom lsp-pyls-plugins-pydocstyle-convention nillsp-pyls-plugins-pydocstyle-convention211,6078
(defcustom lsp-pyls-plugins-pydocstyle-add-ignore nillsp-pyls-plugins-pydocstyle-add-ignore218,6316
(defcustom lsp-pyls-plugins-pydocstyle-add-select nillsp-pyls-plugins-pydocstyle-add-select225,6527
(defcustom lsp-pyls-plugins-pydocstyle-ignore nillsp-pyls-plugins-pydocstyle-ignore232,6738
(defcustom lsp-pyls-plugins-pydocstyle-select nillsp-pyls-plugins-pydocstyle-select238,6904
(defcustom lsp-pyls-plugins-pydocstyle-match "(?!test_).*\\.py"lsp-pyls-plugins-pydocstyle-match244,7070
(defcustom lsp-pyls-plugins-pydocstyle-match-dir "[^\\.].*"lsp-pyls-plugins-pydocstyle-match-dir252,7356
(defcustom lsp-pyls-plugins-pyflakes-enabled tlsp-pyls-plugins-pyflakes-enabled260,7618
(defcustom lsp-pyls-plugins-rope-completion-enabled nillsp-pyls-plugins-rope-completion-enabled266,7776
(defcustom lsp-pyls-plugins-yapf-enabled tlsp-pyls-plugins-yapf-enabled272,7943
(defcustom lsp-pyls-rope-extension-modules nillsp-pyls-rope-extension-modules278,8097
(defcustom lsp-pyls-rope-rope-folder nillsp-pyls-rope-rope-folder285,8311

elpa/lsp-mode-6.1/lsp-go.el,1304
(defgroup lsp-gopls nillsp-gopls29,878
(defcustom lsp-gopls-use-placeholders tlsp-gopls-use-placeholders34,1067
(defcustom lsp-gopls-server-args nillsp-gopls-server-args40,1236
(defgroup lsp-clients-go nillsp-clients-go57,1854
(defcustom lsp-clients-go-server "bingo"lsp-clients-go-server61,1953
(defcustom lsp-clients-go-server-args nillsp-clients-go-server-args67,2092
(defcustom lsp-clients-go-func-snippet-enabled tlsp-clients-go-func-snippet-enabled72,2234
(defcustom lsp-clients-go-gocode-completion-enabled tlsp-clients-go-gocode-completion-enabled78,2471
(defcustom lsp-clients-go-format-tool "goimports"lsp-clients-go-format-tool83,2620
(defcustom lsp-clients-go-imports-local-prefix ""lsp-clients-go-imports-local-prefix89,2881
(defcustom lsp-clients-go-max-parallelism nillsp-clients-go-max-parallelism94,3045
(defcustom lsp-clients-go-use-binary-pkg-cache tlsp-clients-go-use-binary-pkg-cache102,3440
(defcustom lsp-clients-go-diagnostics-enabled tlsp-clients-go-diagnostics-enabled107,3596
(defcustom lsp-clients-go-library-directories '("/usr")lsp-clients-go-library-directories112,3725
(define-inline lsp-clients-go--bool-to-json (val)lsp-clients-go--bool-to-json118,3910
(defun lsp-clients-go--make-init-options ()lsp-clients-go--make-init-options121,4003

elpa/lsp-mode-6.1/lsp-css.el,2269
(defgroup lsp-css nillsp-css29,882
(defcustom lsp-css-experimental-custom-data nillsp-css-experimental-custom-data35,1050
(defcustom lsp-css-completion-trigger-property-value-completion tlsp-css-completion-trigger-property-value-completion41,1255
(defcustom lsp-css-validate tlsp-css-validate47,1474
(defcustom lsp-css-lint-compatible-vendor-prefixes "ignore"lsp-css-lint-compatible-vendor-prefixes51,1564
(defcustom lsp-css-lint-vendor-prefix "warning"lsp-css-lint-vendor-prefix59,1829
(defcustom lsp-css-lint-duplicate-properties "ignore"lsp-css-lint-duplicate-properties67,2055
(defcustom lsp-css-lint-empty-rules "warning"lsp-css-lint-empty-rules74,2254
(defcustom lsp-css-lint-import-statement "ignore"lsp-css-lint-import-statement81,2432
(defcustom lsp-css-lint-box-model "ignore"lsp-css-lint-box-model88,2630
(defcustom lsp-css-lint-universal-selector "ignore"lsp-css-lint-universal-selector95,2780
(defcustom lsp-css-lint-zero-units "ignore"lsp-css-lint-zero-units102,2939
(defcustom lsp-css-lint-font-face-properties "warning"lsp-css-lint-font-face-properties109,3113
(defcustom lsp-css-lint-hex-color-length "error"lsp-css-lint-hex-color-length116,3275
(defcustom lsp-css-lint-arguments-in-color-function "error"lsp-css-lint-arguments-in-color-function123,3482
(defcustom lsp-css-lint-unknown-properties "warning"lsp-css-lint-unknown-properties130,3677
(defcustom lsp-css-lint-valid-properties nillsp-css-lint-valid-properties137,3853
(defcustom lsp-css-lint-ie-hack "ignore"lsp-css-lint-ie-hack142,4011
(defcustom lsp-css-lint-unknown-vendor-specific-properties "ignore"lsp-css-lint-unknown-vendor-specific-properties149,4216
(defcustom lsp-css-lint-property-ignored-due-to-display "warning"lsp-css-lint-property-ignored-due-to-display156,4423
(defcustom lsp-css-lint-important "ignore"lsp-css-lint-important163,4596
(defcustom lsp-css-lint-float "ignore"lsp-css-lint-float170,4746
(defcustom lsp-css-lint-id-selector "ignore"lsp-css-lint-id-selector177,4892
(defcustom lsp-css-lint-unknown-at-rules "warning"lsp-css-lint-unknown-at-rules185,5134
(defcustom lsp-css-trace-server "off"lsp-css-trace-server192,5307
(defun lsp-clients-css--apply-code-action (action)lsp-clients-css--apply-code-action227,7078

elpa/request-0.3.1/request.el,4479
(defgroup request nilrequest53,1823
(defconst request-version "0.3.0")request-version58,1930
(defcustom request-storage-directoryrequest-storage-directory63,1993
(defcustom request-curl "curl"request-curl68,2169
(defcustom request-curl-options nilrequest-curl-options72,2251
(defcustom request-backend (if (executable-find request-curl)request-backend79,2460
(defcustom request-timeout nilrequest-timeout87,2817
(defcustom request-temp-prefix "emacs-request"request-temp-prefix93,3021
(defcustom request-log-level -1request-log-level98,3148
(defcustom request-message-level 'warnrequest-message-level111,3703
(defun request--safe-apply (function &rest arguments)request--safe-apply126,4220
(defun request--safe-call (function &rest arguments)request--safe-call132,4419
(defmacro request--document-function (function docstring)request--document-function141,4742
(defun request--process-live-p (process)request--process-live-p147,4986
(defconst request--log-level-defrequest--log-level-def158,5342
(defun request--log-level-as-int (level)request--log-level-as-int167,5558
(defvar request-log-buffer-name " *request-log*")request-log-buffer-name173,5698
(defun request--log-buffer ()request--log-buffer175,5749
(defmacro request-log (level fmt &rest args)request-log178,5827
(defconst request--url-unreserved-charsrequest--url-unreserved-chars205,6789
(defun request--urlencode-alist (alist)request--urlencode-alist214,7211
(defun request--parse-response-at-point ()request--parse-response-at-point227,7632
(defun request--goto-next-body ()request--goto-next-body233,7910
(defmacro request--document-response (function docstring)request--document-response246,8244
(defun request-response-header (response field-name)request-response-header302,10480
(defconst request--backend-alistrequest--backend-alist330,11456
(defun request--choose-backend (method)request--choose-backend353,12379
(defun request-cookie-string (host &optional localpart secure)request-cookie-string363,12666
(defun request-cookie-alist (host &optional localpart secure)request-cookie-alist374,13008
(defun request--clean-header (response)request--clean-header593,21500
(defun request--cut-header (response)request--cut-header616,22524
(defun request-untrampify-filename (file)request-untrampify-filename629,23072
(defun request--parse-data (response parser)request--parse-data633,23200
(defun request-response--cancel-timer (response)request-response--cancel-timer743,27824
(defun request-abort (response)request-abort751,28067
(defun request--url-retrieve-get-cookies (host localpart secure)request--url-retrieve-get-cookies869,33389
(defvar request--curl-cookie-jar nilrequest--curl-cookie-jar877,33599
(defun request--curl-cookie-jar ()request--curl-cookie-jar881,33744
(defconst request--curl-write-out-templaterequest--curl-write-out-template886,33919
(defun request--curl-mkdir-for-cookie-jar ()request--curl-mkdir-for-cookie-jar891,34156
(defun request--curl-normalize-files-1 (files get-temp-file)request--curl-normalize-files-1932,35860
(defun request--make-temp-file ()request--make-temp-file960,37113
(defun request--curl-normalize-files (files)request--curl-normalize-files968,37415
(defun request--safe-delete-files (files)request--safe-delete-files987,38263
(defun request--curl-read-and-delete-tail-info ()request--curl-read-and-delete-tail-info1036,40608
(defconst request--cookie-reserved-rerequest--cookie-reserved-re1048,41049
(defun request--consume-100-continue ()request--consume-100-continue1057,41355
(defun request--consume-200-connection-established ()request--consume-200-connection-established1066,41781
(defun request--curl-preprocess ()request--curl-preprocess1071,42045
(defun request--curl-absolutify-redirects (start-url redirects)request--curl-absolutify-redirects1096,43147
(defun request--curl-absolutify-location-history (start-url history)request--curl-absolutify-location-history1105,43523
(defun request--curl-callback (proc event)request--curl-callback1118,44118
(defun request--curl-get-cookies (host localpart secure)request--curl-get-cookies1164,46356
(defun request--netscape-cookie-parse ()request--netscape-cookie-parse1171,46565
(defun request--netscape-filter-cookies (cookies host localpart secure)request--netscape-filter-cookies1197,47700
(defun request--netscape-get-cookies (filename host localpart secure)request--netscape-get-cookies1204,48032

elpa/request-0.3.1/request-autoloads.el,0

elpa/request-0.3.1/request-pkg.el,320
(define-package "request" "0.3.1" "Compatible layer for URL request in Emacs" '((emacs "24.4")) :commit "ef9f509b5579f2b529a20e43f7e0f061e641fec5" :authors '(("Takafumi Arakaki <aka.tkf at gmail.com>")) :maintainer '("Takafumi Arakaki <aka.tkf at gmail.com>") :url "https://github.com/tkf/emacs-request")"request"2,31

elpa/ensime-2.0.2/ensime-model.el,3130
(defun ensime-search-sym-name (sym)ensime-search-sym-name15,360
(defun ensime-search-sym-local-name (sym)ensime-search-sym-local-name18,422
(defun ensime-search-sym-pos (sym)ensime-search-sym-pos21,496
(defun ensime-search-sym-owner-name (sym)ensime-search-sym-owner-name24,556
(defun ensime-search-sym-decl-as (sym)ensime-search-sym-decl-as27,630
(defun ensime-symbol-decl-pos (sym)ensime-symbol-decl-pos30,698
(defun ensime-symbol-type (sym)ensime-symbol-type33,764
(defun ensime-package-name (info)ensime-package-name36,822
(defun ensime-package-full-name (info)ensime-package-full-name39,883
(defun ensime-package-members (info)ensime-package-members42,954
(defun ensime-package-p (info)ensime-package-p45,1021
(defun ensime-type-name (type)ensime-type-name48,1101
(defun ensime-type-full-name (type)ensime-type-full-name53,1244
(defun ensime-type-is-object-p (type)ensime-type-is-object-p58,1397
(defun ensime-type-full-name-with-args (type)ensime-type-full-name-with-args61,1481
(defun ensime-type-param-sections (type)ensime-type-param-sections64,1559
(defun ensime-type-name-with-args (type)ensime-type-name-with-args67,1637
(defun ensime-type-is-by-name-p (type)ensime-type-is-by-name-p70,1705
(defun ensime-declared-as (obj)ensime-declared-as75,1966
(defun ensime-declared-as-str (obj)ensime-declared-as-str78,2027
(defun ensime-type-is-arrow-p (type)ensime-type-is-arrow-p88,2239
(defun ensime-type-param-types (type)ensime-type-param-types91,2309
(defun ensime-param-section-accepts-block-p (section)ensime-param-section-accepts-block-p100,2539
(defun ensime-type-result-type (type)ensime-type-result-type109,2875
(defun ensime-type-type-args (type)ensime-type-type-args112,2947
(defun ensime-member-name (member)ensime-member-name115,3015
(defun ensime-member-type (member)ensime-member-type118,3079
(defun ensime-member-signature (member)ensime-member-signature121,3143
(defun ensime-member-pos (member)ensime-member-pos124,3224
(defun ensime-pos-file (pos)ensime-pos-file127,3286
(defun ensime-pos-archive (pos)ensime-pos-archive130,3341
(defun ensime-pos-effective-file (pos)ensime-pos-effective-file133,3402
(defun ensime-pos-offset (pos)ensime-pos-offset141,3659
(defun ensime-pos-line (pos)ensime-pos-line144,3718
(defun ensime-pos-available-p (pos)ensime-pos-available-p147,3773
(defun ensime-pos-valid-local-p (pos)ensime-pos-valid-local-p151,3866
(defun ensime-note-file (note)ensime-note-file159,4196
(defun ensime-note-beg (note)ensime-note-beg162,4254
(defun ensime-note-end (note)ensime-note-end165,4310
(defun ensime-note-line (note)ensime-note-line168,4366
(defun ensime-note-message (note)ensime-note-message171,4424
(defun ensime-type-ancestors (type)ensime-type-ancestors174,4484
(defun ensime-type-inheritors (type)ensime-type-inheritors177,4552
(defun ensime-type-fqn (type)ensime-type-fqn180,4622
(defun ensime-type-source-position (type)ensime-type-source-position183,4678
(defun ensime-source-hint-position (hint)ensime-source-hint-position186,4758
(defun ensime-preview (hint)ensime-preview189,4831

elpa/ensime-2.0.2/ensime-startup.el,2197
(defvar ensime-idle-typecheck-timer nilensime-idle-typecheck-timer10,155
(defvar ensime-last-change-time 0ensime-last-change-time13,233
(defvar ensime-server-process-start-hook nilensime-server-process-start-hook16,300
(defvar ensime--classpath-separatorensime--classpath-separator19,400
(defvar ensime--abort-connection nil)ensime--abort-connection23,533
(defvar ensime--debug-messages nilensime--debug-messages25,572
(defcustom ensime-startup-notification tensime-startup-notification28,668
(defun ensime-startup-notifications ()ensime-startup-notifications34,845
(defun ensime--maybe-update-and-start (orig-buffer-file-name &optional host port)ensime--maybe-update-and-start66,2042
(defun ensime--maybe-update-and-start-noninteractive (orig-buffer-file-name)ensime--maybe-update-and-start-noninteractive76,2582
(defun ensime-dev-version-p (version)ensime-dev-version-p80,2763
(defun* ensime--1 (config-file)ensime--187,3008
(defun ensime-idle-typecheck-set-timer ()ensime-idle-typecheck-set-timer133,5094
(defun ensime-after-change-function (start stop len)ensime-after-change-function141,5408
(defun ensime-idle-typecheck-function ()ensime-idle-typecheck-function144,5531
(defun ensime-reload ()ensime-reload157,6166
(defun ensime--maybe-start-server (buffer java-home classpath flags env config-file cache-dir)ensime--maybe-start-server164,6360
(defun ensime--start-server (buffer java-home classpath flags user-env config-file cache-dir)ensime--start-server170,6665
(defun ensime-kill-emacs-hook-function ()ensime-kill-emacs-hook-function217,9090
(defun ensime--scala-binary-version (full-version)ensime--scala-binary-version223,9280
(defun ensime-shutdown ()ensime-shutdown230,9560
(defun ensime-configured-project-root ()ensime-configured-project-root239,9953
(defun ensime--read-portfile (portfile)ensime--read-portfile248,10320
(defun ensime--retry-connect (server-proc host port-fn config cache-dir)ensime--retry-connect257,10581
(defun ensime--connect (host port config)ensime--connect279,11611
(defun ensime-timer-call (fun &rest args)ensime-timer-call290,12072
(defun ensime--abort-connection ()ensime--abort-connection298,12380

elpa/ensime-2.0.2/ensime-sbt.el,1683
(defgroup ensime-sbt nilensime-sbt22,525
(defcustom ensime-sbt-perform-on-save nilensime-sbt-perform-on-save27,625
(defun ensime-sbt ()ensime-sbt32,790
(defun ensime-sbt-maybe-auto-compile ()ensime-sbt-maybe-auto-compile43,1250
(defalias 'ensime-sbt-switch 'ensime-sbt)ensime-sbt-switch50,1458
(defun ensime-sbt-send-eol ()ensime-sbt-send-eol52,1501
(defun ensime-sbt-do-compile ()ensime-sbt-do-compile57,1618
(defun ensime-sbt-do-compile-only (arg)ensime-sbt-do-compile-only62,1740
(defun ensime-sbt-run-command-in-project (command &optional arg)ensime-sbt-run-command-in-project71,2064
(defun ensime-sbt-do-run ()ensime-sbt-do-run84,2675
(defun ensime-sbt-do-clean ()ensime-sbt-do-clean89,2794
(defun ensime-sbt-do-ensime-config ()ensime-sbt-do-ensime-config94,2919
(defun ensime-sbt-do-package ()ensime-sbt-do-package99,3066
(defmacro ensime-sbt-read-char-prompt (prompt verbose &rest clauses)ensime-sbt-read-char-prompt106,3286
(defun ensime-sbt-module-prompt (module abbrev li ri)ensime-sbt-module-prompt128,4193
(defun ensime-sbt-prompt-char-indices (module li ri module-prompt-clauses)ensime-sbt-prompt-char-indices143,4762
(defun ensime-sbt-prompt-for-test ()ensime-sbt-prompt-for-test161,5547
(defun ensime-sbt-test-dwim (command)ensime-sbt-test-dwim179,6444
(defun ensime-sbt-do-test ()ensime-sbt-do-test195,7240
(defun ensime-sbt-do-test-dwim ()ensime-sbt-do-test-dwim200,7333
(defun ensime-sbt-do-test-quick-dwim ()ensime-sbt-do-test-quick-dwim209,7630
(defun ensime-top-level-class-closest-to-point ()ensime-top-level-class-closest-to-point218,7943
(defun ensime-sbt-do-test-only-dwim ()ensime-sbt-do-test-only-dwim257,9552

elpa/ensime-2.0.2/ensime-compat.el,0

elpa/ensime-2.0.2/ensime-auto-complete.el,1197
(defcustom ensime-ac-enable-argument-placeholders tensime-ac-enable-argument-placeholders36,1277
(defcustom ensime-ac-override-settings tensime-ac-override-settings41,1442
(defcustom ensime-ac-case-sensitive nilensime-ac-case-sensitive46,1577
(defvar ensime-ac-max-results 30ensime-ac-max-results51,1726
(defun ensime-ac-completion-candidates (&optional prefix)ensime-ac-completion-candidates54,1829
(defun ensime-ac-get-doc (item)ensime-ac-get-doc63,2168
(defun ensime-ac-completion-prefix ()ensime-ac-completion-prefix67,2296
(defun ensime-ac-complete-action (&optional candidate-in)ensime-ac-complete-action72,2485
(defun ensime-ac-get-active-param-info ()ensime-ac-get-active-param-info135,4742
(defun ensime-ac-update-param-help ()ensime-ac-update-param-help157,5438
(defun ensime-ac-call-info-argument-list (call-info &optional is-operator)ensime-ac-call-info-argument-list169,5956
(defun ensime-ac-call-info-signature (call-info)ensime-ac-call-info-signature196,6775
(defun ensime-ac-enable ()ensime-ac-enable218,7465
(defun ensime-ac-disable ()ensime-ac-disable259,8408
(defun ensime-completion-at-point-function ()ensime-completion-at-point-function262,8463

elpa/ensime-2.0.2/ensime-debug.el,5684
(defgroup ensime-db nilensime-db29,945
(defface ensime-breakpoint-faceensime-breakpoint-face34,1055
(defface ensime-pending-breakpoint-faceensime-pending-breakpoint-face39,1171
(defface ensime-marker-faceensime-marker-face44,1305
(defface ensime-writable-value-faceensime-writable-value-face49,1446
(defvar ensime-db-default-main-args nilensime-db-default-main-args54,1566
(defvar ensime-db-default-main-class nilensime-db-default-main-class57,1655
(defvar ensime-db-default-hostname "localhost"ensime-db-default-hostname60,1737
(defvar ensime-db-default-port "9999"ensime-db-default-port63,1814
(defvar ensime-db-history nilensime-db-history66,1878
(defvar ensime-db-buffer-name "*ensime-debug-session*")ensime-db-buffer-name69,1955
(defvar ensime-db-value-buffer "*ensime-debug-value*")ensime-db-value-buffer70,2011
(defvar ensime-db-backtrace-buffer "*ensime-db-backtrace-buffer*")ensime-db-backtrace-buffer71,2066
(defvar ensime-db-output-buffer "*ensime-db-output-buffer*")ensime-db-output-buffer72,2133
(defvar ensime-db-active-thread-id nilensime-db-active-thread-id74,2195
(defvar ensime-db-thread-suspended-hook nilensime-db-thread-suspended-hook78,2307
(defvar ensime-db-attached nilensime-db-attached81,2410
(defvar ensime-db-marker-overlays '())ensime-db-marker-overlays84,2503
(defvar ensime-db-breakpoint-overlays '())ensime-db-breakpoint-overlays86,2543
(defvar ensime-db-ui-value-handlerensime-db-ui-value-handler96,2844
(defvar ensime-db-ui-backtrace-handlerensime-db-ui-backtrace-handler115,3489
(defun ensime-db-make-obj-ref-location (obj-id)ensime-db-make-obj-ref-location134,4109
(defun ensime-db-make-array-el-location (obj-id index)ensime-db-make-array-el-location136,4198
(defun ensime-db-make-obj-field-location (obj-id field-name)ensime-db-make-obj-field-location138,4306
(defun ensime-db-make-stack-slot-location (thread-id frame offset)ensime-db-make-stack-slot-location140,4423
(defun ensime-db-handle-event (evt)ensime-db-handle-event146,4580
(defun ensime-db-handle-unknown-event (evt)ensime-db-handle-unknown-event160,5058
(defun ensime-db-handle-output (evt)ensime-db-handle-output163,5140
(defun ensime-db-handle-exception (evt)ensime-db-handle-exception173,5536
(defun ensime-db-handle-start (evt)ensime-db-handle-start195,6194
(defun ensime-db-handle-step (evt)ensime-db-handle-step202,6486
(defun ensime-db-handle-break-hit (evt)ensime-db-handle-break-hit215,6903
(defun ensime-db-handle-shutdown (evt)ensime-db-handle-shutdown228,7330
(defun ensime-db-tooltip (point)ensime-db-tooltip236,7483
(defun ensime-db-set-debug-marker (file line)ensime-db-set-debug-marker246,7800
(defun ensime-db-create-breapoint-overlays (positions visuals)ensime-db-create-breapoint-overlays263,8338
(defun ensime-db-refresh-breakpoints ()ensime-db-refresh-breakpoints275,8772
(defun ensime-db-clear-breakpoint-overlays ()ensime-db-clear-breakpoint-overlays296,9420
(defun ensime-db-clear-marker-overlays ()ensime-db-clear-marker-overlays302,9623
(defun ensime-db-value-p (val)ensime-db-value-p308,9814
(defun ensime-db-backtrace-p (val)ensime-db-backtrace-p311,9888
(defun ensime-db-ui-insert-backtrace (val)ensime-db-ui-insert-backtrace314,9964
(defun ensime-db-obj-to-ref (val)ensime-db-obj-to-ref348,11084
(defun ensime-db-commit-writable-values ()ensime-db-commit-writable-values352,11190
(defun ensime-db-ui-handle-writable-value-modificationensime-db-ui-handle-writable-value-modification369,11907
(defun ensime-db-ui-make-writable-value (start end writer-func)ensime-db-ui-make-writable-value379,12310
(defun ensime-db-ui-insert-stack-varensime-db-ui-insert-stack-var396,13208
(defun ensime-db-ui-insert-object-link (text obj-id)ensime-db-ui-insert-object-link434,14498
(defun ensime-db-ui-indent (width)ensime-db-ui-indent443,14759
(defun ensime-db-ui-insert-value (val expansion)ensime-db-ui-insert-value446,14831
(defun ensime-db-update-backtraces ()ensime-db-update-backtraces539,17627
(defun ensime-db-grow-expansion (expansion-inensime-db-grow-expansion550,18157
(defun ensime-db-sub-expansion (expansion index-name)ensime-db-sub-expansion569,18604
(defun ensime-db-visit-obj-field (valensime-db-visit-obj-field573,18692
(defun ensime-db-visit-array-el (valensime-db-visit-array-el594,19499
(defun ensime-db-visit-value (valensime-db-visit-value612,20162
(defun ensime-db-visit-backtrace (valensime-db-visit-backtrace654,21566
(defun ensime-db-location-at-point (p)ensime-db-location-at-point683,22491
(defun ensime-db-inspect-value-at-point (p)ensime-db-inspect-value-at-point694,22831
(defun ensime-db-backtrace (&optional no-select)ensime-db-backtrace701,23137
(defun ensime-db-next ()ensime-db-next712,23530
(defun ensime-db-step ()ensime-db-step719,23725
(defun ensime-db-step-out ()ensime-db-step-out726,23912
(defun ensime-db-continue ()ensime-db-continue733,24109
(defun ensime-db-run ()ensime-db-run739,24261
(defun ensime-db-set-break (f line)ensime-db-set-break744,24369
(defun ensime-db-clear-break (f line)ensime-db-clear-break750,24606
(defun ensime-db-clear-all-breaks ()ensime-db-clear-all-breaks756,24811
(defun ensime-db-quit ()ensime-db-quit762,24965
(defun ensime-db-get-cmd-line ()ensime-db-get-cmd-line768,25134
(defun ensime-db-get-hostname ()ensime-db-get-hostname783,25772
(defun ensime-db-get-port ()ensime-db-get-port791,26041
(defun ensime-db-connection-closed (conn)ensime-db-connection-closed799,26270
(defun ensime--db-post-start (ret action attaching)ensime--db-post-start803,26390
(defun ensime-db-attach (&optional override-host override-port)ensime-db-attach818,26899

elpa/ensime-2.0.2/ensime-undo.el,368
(defvar ensime-undo-info-buffer-name "*ENSIME-Undo*")ensime-undo-info-buffer-name26,909
(defvar ensime-undo-info-mapensime-undo-info-map28,964
(defun ensime-undo-peek ()ensime-undo-peek42,1345
(defun ensime-undo-exec (id)ensime-undo-exec65,2104
(defun ensime-undo-populate-confirmation-buffer (summary changes)ensime-undo-populate-confirmation-buffer71,2272

elpa/ensime-2.0.2/ensime.el,237
(defvar ensime-prefer-noninteractive tensime-prefer-noninteractive25,720
(defvar ensime-popup-in-other-frame nil)ensime-popup-in-other-frame28,858
(defun ensime ()ensime32,916
(defun ensime-remote (host port)ensime-remote45,1431

elpa/ensime-2.0.2/ensime-pkg.el,90
(define-package "ensime" "2.0.2" "ENhanced Scala Interaction Mode for Emacs""ensime"1,0

elpa/ensime-2.0.2/ensime-doc.el,168
(defun ensime-make-doc-url (type &optional member)ensime-make-doc-url26,908
(defun ensime-show-doc-for-symbol-at-point ()ensime-show-doc-for-symbol-at-point33,1245

elpa/ensime-2.0.2/ensime-semantic-highlight.el,790
(defun ensime-sem-high-apply-properties (info)ensime-sem-high-apply-properties28,940
(defun ensime-sem-high-internalize-syms (syms)ensime-sem-high-internalize-syms55,2060
(defun ensime-sem-high-clear-buffer ()ensime-sem-high-clear-buffer85,3597
(defun ensime-sem-high-clear-region (beg end)ensime-sem-high-clear-region88,3685
(defun ensime-sem-high-refresh-hook ()ensime-sem-high-refresh-hook94,3869
(defun ensime-sem-high-refresh-buffer (&optional buffer)ensime-sem-high-refresh-buffer105,4287
(defun ensime-sem-high-refresh-all-buffers ()ensime-sem-high-refresh-all-buffers111,4533
(defun ensime-sem-high-refresh-region (beg end)ensime-sem-high-refresh-region119,4875
(defun ensime-sem-high-sym-types-at-point (&optional point)ensime-sem-high-sym-types-at-point131,5377

elpa/ensime-2.0.2/ensime-eldoc.el,117
(defun ensime-eldoc-info ()ensime-eldoc-info12,169
(defun ensime-eldoc-type-info ()ensime-eldoc-type-info32,1147

elpa/ensime-2.0.2/ensime-mode.el,1328
(defvar ensime-source-buffer-saved-hook nilensime-source-buffer-saved-hook51,1036
(defvar ensime-source-buffer-loaded-hook nilensime-source-buffer-loaded-hook54,1141
(defvar ensime-mode-mapensime-mode-map57,1248
(defun ensime-run-after-save-hooks ()ensime-run-after-save-hooks141,5727
(defun ensime-run-find-file-hooks ()ensime-run-find-file-hooks152,6117
(defun ensime-save-buffer-no-hooks ()ensime-save-buffer-no-hooks163,6509
(defun ensime-delete-buffer-and-file ()ensime-delete-buffer-and-file169,6684
(define-minor-mode ensime-modeensime-mode250,9536
(defun ensime-control-mouse-1-single-click (event)ensime-control-mouse-1-single-click351,12619
(defun ensime-mouse-motion (event)ensime-mouse-motion359,12871
(defun ensime-imenu-index-function ()ensime-imenu-index-function369,13162
(defun ensime-flatten-structure-view (member-plist &optional result parent)ensime-flatten-structure-view376,13385
(defun ensime--setup-imenu ()ensime--setup-imenu392,14062
(defun ensime--unset-imenu ()ensime--unset-imenu400,14511
(defun ensime-tooltip-show-message (msg)ensime-tooltip-show-message409,14774
(defun ensime-tooltip-handler (event)ensime-tooltip-handler416,14972
(defun ensime-modeline-string ()ensime-modeline-string478,17076
(defun ensime-troubleshooting ()ensime-troubleshooting505,17950

elpa/ensime-2.0.2/ensime-refactor.el,2468
(defvar ensime-refactor-id-counter 0ensime-refactor-id-counter28,935
(defvar ensime-refactor-info-buffer-name "*ENSIME-Refactoring*")ensime-refactor-info-buffer-name31,1017
(defvar ensime-refactor-info-mapensime-refactor-info-map33,1083
(defun ensime-refactor-organize-java-imports ()ensime-refactor-organize-java-imports46,1640
(defun ensime-refactor-diff-rename (&optional new-name)ensime-refactor-diff-rename61,2210
(defun ensime-refactor-diff-organize-imports ()ensime-refactor-diff-organize-imports79,2906
(defun ensime-refactor-diff-extract-local ()ensime-refactor-diff-extract-local90,3271
(defun ensime-refactor-diff-extract-method ()ensime-refactor-diff-extract-method103,3656
(defun ensime-refactor-diff-inline-local ()ensime-refactor-diff-inline-local116,4047
(defun ensime-refactor-expand-match-cases ()ensime-refactor-expand-match-cases130,4555
(defun ensime-refactor-diff (refactor-type params &optional non-interactive blocking)ensime-refactor-diff143,4943
(defun ensime-refactor-diff-handler (result)ensime-refactor-diff-handler154,5304
(defun ensime-refactor-diff-preview-popup (diff)ensime-refactor-diff-preview-popup174,6364
(defun ensime-refactor-diff-preview-apply-popup (diff)ensime-refactor-diff-preview-apply-popup180,6649
(defun ensime-refactor-diff-apply-silently (diff)ensime-refactor-diff-apply-silently187,7006
(defun ensime--refactor-diff-preview-override-types-p (refactor-type)ensime--refactor-diff-preview-override-types-p193,7195
(defun ensime--refactor-diff-preview-override-file-p (diff)ensime--refactor-diff-preview-override-file-p196,7329
(defun ensime--refactor-diff-preview-override-hunk-p (diff)ensime--refactor-diff-preview-override-hunk-p203,7600
(defun ensime--refactor-diff-no-preview-override-types-p (refactor-type)ensime--refactor-diff-no-preview-override-types-p210,7871
(defun ensime--refactor-diff-no-preview-override-file-p (diff)ensime--refactor-diff-no-preview-override-file-p213,8011
(defun ensime--refactor-diff-no-preview-override-hunk-p (diff)ensime--refactor-diff-no-preview-override-hunk-p220,8288
(defun ensime-refactor-diff-apply-hunks ()ensime-refactor-diff-apply-hunks228,8566
(defun ensime-refactor-diff-save-source-files ()ensime-refactor-diff-save-source-files237,8901
(defun ensime-refactor-add-type-annotation ()ensime-refactor-add-type-annotation250,9499
(defun ensime-refactor-diff-buffer-local-key ()ensime-refactor-diff-buffer-local-key262,9944

elpa/ensime-2.0.2/ensime-completion-util.el,900
(defconst ensime--rev-idrest-reensime--rev-idrest-re40,1421
(defconst ensime--rev-alphaid-reensime--rev-alphaid-re45,1600
(defconst ensime--rev-plainid-reensime--rev-plainid-re50,1856
(defconst ensime--rev-quotedid-re "`[^`\n\r]+`")ensime--rev-quotedid-re52,1961
(defconst ensime--rev-id-reensime--rev-id-re53,2010
(defconst ensime--prefix-char-classensime--prefix-char-class55,2119
(defun ensime--annotate-completions (completions)ensime--annotate-completions62,2251
(defun ensime-completion-prefix-at-point ()ensime-completion-prefix-at-point76,2662
(defun ensime-completion-suffix-at-point ()ensime-completion-suffix-at-point92,3375
(defun ensime-get-completions-asyncensime-get-completions-async100,3691
(defun ensime-get-completions (max-results case-sense)ensime-get-completions109,4028
(defun ensime-unique-candidate-at-point ()ensime-unique-candidate-at-point118,4319

elpa/ensime-2.0.2/ensime-config.el,2115
(defvar ensime-server-processes)ensime-server-processes31,989
(defvar ensime--cache-source-root-set nil)ensime--cache-source-root-set32,1022
(defvar ensime-config-file-name ".ensime"ensime-config-file-name34,1066
(defun ensime-config-for-buffer ()ensime-config-for-buffer37,1171
(defun ensime-process-for-config (&optional config)ensime-process-for-config42,1355
(defun ensime-subproject-for-config (&optional config)ensime-subproject-for-config50,1743
(defun ensime-project-for-current-buffer (&optional config)ensime-project-for-current-buffer62,2529
(defun ensime--get-cache-dir (config)ensime--get-cache-dir80,3403
(defun ensime--get-root-dir (config)ensime--get-root-dir86,3607
(defun ensime--get-name (config)ensime--get-name92,3805
(defun ensime--get-java-home (config)ensime--get-java-home98,3979
(defun ensime-config-source-roots (conf)ensime-config-source-roots104,4171
(defun ensime-source-jars-dir (config)ensime-source-jars-dir109,4402
(defun ensime--source-root-set (conf no-ref-sources)ensime--source-root-set114,4619
(defun ensime-config-includes-source-fileensime-config-includes-source-file134,5360
(defun ensime-default-config-file (&optional dir)ensime-default-config-file150,6034
(defun ensime-config-find-file (file-name)ensime-config-find-file153,6135
(defun ensime-config-find (&optional force-dir)ensime-config-find165,6644
(defun ensime-config-load (file-name)ensime-config-load186,7353
(defun ensime-source-roots-from-config ()ensime-source-roots-from-config194,7655
(defun ensime-refresh-config ()ensime-refresh-config201,7889
(defun ensime--config-and-generator (project-root)ensime--config-and-generator210,8217
(defun ensime--maybe-refresh-config (force after-refresh-fn no-refresh-fn)ensime--maybe-refresh-config219,8715
(defun ensime--refresh-config-sbt (project-root task on-success-fn)ensime--refresh-config-sbt235,9427
(defun ensime--refresh-config-sentinel (process event on-success-fn)ensime--refresh-config-sentinel251,10325
(defun ensime--config-sbt-needs-refresh-p (config-file)ensime--config-sbt-needs-refresh-p260,10617

elpa/ensime-2.0.2/ensime-expand-region.el,267
(defun ensime-expand-region-mark-syntactic-context ()ensime-expand-region-mark-syntactic-context23,556
(defun ensime-expand-region-add-expansions ()ensime-expand-region-add-expansions28,730
(defun ensime-expand-region-enable ()ensime-expand-region-enable34,956

elpa/ensime-2.0.2/ensime-notes.el,1849
(defvar ensime-note-overlays '()ensime-note-overlays14,302
(defun ensime-all-notes ()ensime-all-notes17,392
(defun ensime-add-notes (lang result)ensime-add-notes22,535
(defun ensime-clear-notes (lang)ensime-clear-notes44,1124
(defun ensime-make-overlay-at (file line b e msg visuals)ensime-make-overlay-at54,1413
(defun ensime-make-note-overlays (notes)ensime-make-note-overlays77,2199
(defun ensime-update-note-counts ()ensime-update-note-counts111,3174
(defun ensime-refresh-all-note-overlays ()ensime-refresh-all-note-overlays128,3580
(defface ensime-errline-highlightensime-errline-highlight138,3876
(defface ensime-warnline-highlightensime-warnline-highlight143,4041
(defface ensime-implicit-highlightensime-implicit-highlight148,4210
(defun ensime-make-overlay (beg end tooltip-text visuals &optional mouse-face buf)ensime-make-overlay157,4547
(defun ensime-show-sign-overlay (sign face ov)ensime-show-sign-overlay178,5524
(defun ensime-before-string (sign face)ensime-before-string182,5661
(defun ensime-set-left-window-margin (width)ensime-set-left-window-margin190,6129
(defun ensime-show-left-margin-hook ()ensime-show-left-margin-hook194,6283
(defun ensime-overlays-at (point)ensime-overlays-at202,6530
(defun ensime-clear-note-overlays (&optional lang)ensime-clear-note-overlays210,6750
(defun ensime-next-note-in-current-buffer (notes forward)ensime-next-note-in-current-buffer221,7107
(defun ensime-goto-next-note (forward)ensime-goto-next-note248,8120
(defun ensime-forward-note ()ensime-forward-note261,8658
(defun ensime-backward-note ()ensime-backward-note266,8784
(defun ensime-errors-at (point)ensime-errors-at271,8913
(defun ensime-print-errors-at-point (&optional arg)ensime-print-errors-at-point274,9036
(defun ensime-implicit-notes-at (point)ensime-implicit-notes-at288,9526

elpa/ensime-2.0.2/ensime-stacktrace.el,981
(defconst ensime-stacktrace-buffer-name-base "*ensime-stacktrace*")ensime-stacktrace-buffer-name-base10,159
(defvar ensime-stacktrace-buffer-mapensime-stacktrace-buffer-map12,228
(defvar ensime-stacktrace-foldable-stackframes '("at akka\\.*"ensime-stacktrace-foldable-stackframes21,596
(define-minor-mode ensime-stacktrace-buffer-modeensime-stacktrace-buffer-mode28,978
(defun ensime-stacktrace-build-buffer-name ()ensime-stacktrace-build-buffer-name34,1111
(defun ensime-stacktrace-switch ()ensime-stacktrace-switch40,1339
(defun ensime-stacktrace-highlight ()ensime-stacktrace-highlight66,2524
(defun ensime-stacktrace-pick-lines-to-fold (foldable-stackframes)ensime-stacktrace-pick-lines-to-fold74,2806
(defun ensime-stacktrace-group-lines-to-fold (lines)ensime-stacktrace-group-lines-to-fold89,3340
(defun ensime-stacktrace-fold-lines (lines)ensime-stacktrace-fold-lines97,3685
(defun ensime-stacktrace-fold-buffer ()ensime-stacktrace-fold-buffer103,3917

elpa/ensime-2.0.2/ensime-inf.el,2115
(defgroup ensime-inf nilensime-inf61,2398
(defcustom ensime-inf-cmd-templateensime-inf-cmd-template66,2529
(defcustom ensime-inf-ansi-support tensime-inf-ansi-support76,2867
(defconst ensime-inf-buffer-name "*Scala REPL*")ensime-inf-buffer-name81,2972
(defvar ensime-inf-prev-l/c-dir/file nilensime-inf-prev-l/c-dir/file83,3022
(defvar ensime-inf-overlay-marker nil)ensime-inf-overlay-marker88,3220
(define-derived-mode ensime-inf-mode comint-mode "Scala REPL"ensime-inf-mode91,3261
(defun ensime-inf-input-sender (proc string)ensime-inf-input-sender110,3978
(defun ensime-inf-running-p-1 ()ensime-inf-running-p-1114,4093
(defun ensime-inf-assert-running ()ensime-inf-assert-running118,4241
(defun ensime-inf-run-scala ()ensime-inf-run-scala122,4359
(defun ensime--inf-process-sentinel (proc ev)ensime--inf-process-sentinel154,5498
(defun ensime-inf-run-and-import ()ensime-inf-run-and-import160,5721
(defun ensime-inf-get-project-root ()ensime-inf-get-project-root168,5969
(defun ensime-inf-repl-config (&optional config)ensime-inf-repl-config173,6151
(defun ensime-inf-switch ()ensime-inf-switch192,7186
(defun ensime-inf-switch-and-import ()ensime-inf-switch-and-import203,7618
(defun ensime-inf-process-live-p (buffer-name)ensime-inf-process-live-p211,7890
(defun ensime-inf-send-tab ()ensime-inf-send-tab215,8036
(defun ensime-inf-send-string (str &rest args)ensime-inf-send-string221,8145
(defun ensime-inf-eval-region (start end)ensime-inf-eval-region225,8316
(defun ensime-inf-eval-result ()ensime-inf-eval-result241,9012
(defun ensime-inf-eval-definition ()ensime-inf-eval-definition256,9478
(defun ensime-inf-eval-buffer ()ensime-inf-eval-buffer301,11000
(defun ensime-inf-load-file (file-name)ensime-inf-load-file306,11146
(defun ensime-inf-import-package-at-point ()ensime-inf-import-package-at-point316,11569
(defun ensime-inf-import-package (package-name)ensime-inf-import-package324,11829
(defun ensime-inf-quit-interpreter ()ensime-inf-quit-interpreter328,11985
(defun ensime-inf-postoutput-filter (str)ensime-inf-postoutput-filter334,12136

elpa/ensime-2.0.2/ensime-macros.el,1886
(defmacro ensime-plist-bind (args expr &rest body)ensime-plist-bind26,901
(defmacro ensime-with-conn-interactive (conn-sym &rest body)ensime-with-conn-interactive34,1158
(defmacro* ensime-with-popup-buffer ((name &optional connection select major-mode-fn)ensime-with-popup-buffer44,1510
(defmacro ensime-assert-buffer-saved-interactive (&rest body)ensime-assert-buffer-saved-interactive69,2551
(defmacro* ensime-with-connection-buffer ((&optional process) &rest body)ensime-with-connection-buffer80,2887
(defmacro destructure-case (value &rest patterns)destructure-case90,3236
(defmacro ensime-define-keys (keymap &rest key-command)ensime-define-keys117,4137
(defmacro* with-struct ((conc-name &rest slots) struct &body body)with-struct123,4354
(defvar ensime-qualified-type-regexpensime-qualified-type-regexp140,4920
(defmacro* ensime-with-name-parts (str (path outer-type-name name) &rest body)ensime-with-name-parts143,5145
(defvar ensime-qualified-path-and-name-regexpensime-qualified-path-and-name-regexp157,5744
(defmacro* ensime-with-path-and-name (str (path name) &rest body)ensime-with-path-and-name159,5839
(defmacro* ensime-with-buffer-written-to-tmp ((file-sym) &rest body)ensime-with-buffer-written-to-tmp173,6366
(defmacro ensime-propertize-region (props &rest body)ensime-propertize-region183,6778
(defmacro ensime-with-rigid-indentation (level &rest body)ensime-with-rigid-indentation192,7135
(defmacro ensime-def-connection-var (varname &rest initial-value-and-doc)ensime-def-connection-var202,7541
(defmacro* ensime-rex ((&rest saved-vars)ensime-rex235,8886
(defmacro ensime-set-key (conf key val)ensime-set-key268,10055
(defmacro* ensime-db-with-active-thread ((tid-sym) &rest body)ensime-db-with-active-thread271,10141
(defmacro ensime--propertize-inserted-text (prop-list &rest body)ensime--propertize-inserted-text277,10351

elpa/ensime-2.0.2/ensime-ivy.el,609
(defvar ensime-search-min-length)ensime-search-min-length18,475
(defvar ensime-search-max-results)ensime-search-max-results19,509
(defvar ensime-ivy--search-results '()ensime-ivy--search-results20,544
(defun ensime-ivy--format-search-element (elem)ensime-ivy--format-search-element23,657
(defun ensime-ivy-jump-to-item (name)ensime-ivy-jump-to-item36,1283
(defun ensime-ivy-public-symbol-search (pattern)ensime-ivy-public-symbol-search40,1469
(defun ensime-search-ivy ()ensime-search-ivy49,1872
(defun ensime-ivy-select-source-position (positions name)ensime-ivy-select-source-position57,2097

elpa/ensime-2.0.2/ensime-comint-utils.el,785
(defvar ensime-comint-filter-buffer " *ensime-comint-filter-buffer*"ensime-comint-filter-buffer28,942
(defvar ensime-comint-completion-invalid-values "\C-h"ensime-comint-completion-invalid-values32,1135
(defun ensime-comint-sanitise(str)ensime-comint-sanitise36,1302
(defun ensime-comint-shape-candidate (candidate cand-max-length nbr-cols candidates)ensime-comint-shape-candidate41,1459
(defun ensime-comint-shape-candidates (candidates)ensime-comint-shape-candidates50,1885
(defun ensime-comint-treat-output (proc cand-regexp err-regexp output)ensime-comint-treat-output62,2369
(defun ensime-comint-cplt-output-filter (proc output)ensime-comint-cplt-output-filter98,4295
(defun ensime-comint-complete (proc input cand-regexp err-regexp)ensime-comint-complete103,4448

elpa/ensime-2.0.2/ensime-autoloads.el,0

elpa/ensime-2.0.2/ensime-helm.el,410
(defun ensime-helm-select-source-position (positions name)ensime-helm-select-source-position12,208
(defun ensime-helm-select-entry (entries name)ensime-helm-select-entry26,873
(defun ensime-helm--format-search-elemen (elem)ensime-helm--format-search-elemen33,1133
(defun ensime-helm-public-symbol-search ()ensime-helm-public-symbol-search45,1573
(defun ensime-helm-search ()ensime-helm-search51,1934

elpa/ensime-2.0.2/ensime-util.el,5477
(defvar ensime-dir (file-name-directory load-file-name)ensime-dir7,105
(defvar ensime-ch-fix 1ensime-ch-fix10,208
(defvar ensime-message-function 'message)ensime-message-function14,320
(defvar ensime-background-message-function 'ensime-display-oneliner)ensime-background-message-function16,363
(defun ensime-make-code-link (start end file-path offset &optional face line)ensime-make-code-link20,460
(defun ensime-make-pos-link (start end pos &optional face)ensime-make-pos-link33,996
(defun ensime-make-code-hyperlink (start end http-path &optional face)ensime-make-code-hyperlink41,1282
(defun ensime-http-url-p (s)ensime-http-url-p51,1636
(defun ensime-insert-link (text pos-or-path &optional face)ensime-insert-link54,1774
(defun ensime-insert-action-link (text action &optional face)ensime-insert-action-link74,2409
(defun ensime-insert-with-face (text face)ensime-insert-with-face83,2717
(defun ensime-kill-txt-props (str)ensime-kill-txt-props90,2918
(defun buffer-file-name-with-indirect ()buffer-file-name-with-indirect95,3064
(defun ensime-source-file-p (&optional filename)ensime-source-file-p101,3250
(defun ensime-java-file-p (f)ensime-java-file-p108,3570
(defun ensime-scala-file-p (f)ensime-scala-file-p111,3632
(defun ensime-visiting-java-file-p ()ensime-visiting-java-file-p114,3696
(defun ensime-visiting-scala-file-p ()ensime-visiting-scala-file-p117,3792
(defun ensime-path-prefix-p (file-name dir-name)ensime-path-prefix-p120,3890
(defun ensime-path-includes-dir-p (file dir)ensime-path-includes-dir-p127,4205
(defun ensime-temp-directory ()ensime-temp-directory148,5162
(defun ensime-temp-file-name (name)ensime-temp-file-name154,5393
(defun ensime-assert-executable-on-path (name)ensime-assert-executable-on-path159,5562
(defun ensime-relativise-path (path root)ensime-relativise-path164,5772
(defun ensime-write-buffer (&optional filename clear-modtime set-unmodified)ensime-write-buffer175,6216
(defun ensime-write-to-file (filename string)ensime-write-to-file190,6775
(defun ensime-read-from-file (filename)ensime-read-from-file198,7068
(defun ensime-src-info-for-current-buffer ()ensime-src-info-for-current-buffer204,7235
(defun ensime-src-info-with-contents-in-temp ()ensime-src-info-with-contents-in-temp213,7624
(defun ensime-src-info-with-contents ()ensime-src-info-with-contents230,8305
(defun ensime--dependencies-newer-than-target-p (target-file dep-files-list)ensime--dependencies-newer-than-target-p234,8507
(defun ensime--join-paths (base &rest paths)ensime--join-paths242,8822
(defun ensime--build-classpath (paths)ensime--build-classpath250,9012
(defun ensime-curry (fun &rest args)ensime-curry256,9190
(defun ensime-rcurry (fun &rest args)ensime-rcurry261,9397
(defun ensime-recompile-el ()ensime-recompile-el265,9556
(defun ensime-flatten-list (list)ensime-flatten-list270,9694
(defun ensime-escape-control-chars (s)ensime-escape-control-chars277,9872
(defun ensime-replace-keywords (template proplist)ensime-replace-keywords290,10342
(defun ensime-last-name-component (str)ensime-last-name-component305,10829
(defun ensime-short-local-name (local-name)ensime-short-local-name310,10967
(defun ensime-strip-dollar-signs (str)ensime-strip-dollar-signs315,11138
(defun ensime-computed-point ()ensime-computed-point322,11282
(defun ensime-computed-range ()ensime-computed-range329,11563
(defun ensime-externalize-offset (offset)ensime-externalize-offset336,11826
(defun ensime-internalize-offset (offset)ensime-internalize-offset345,12075
(defun ensime-internalize-offset-at-line (offset line-end-offset line)ensime-internalize-offset-at-line373,13171
(defun ensime-external-offsets-to-lines ()ensime-external-offsets-to-lines383,13679
(defun ensime-get-line-for-external-offset (offset-lines offset)ensime-get-line-for-external-offset408,14612
(defun ensime-internalize-offset-for-file (file-name offset)ensime-internalize-offset-for-file415,14844
(defun ensime-internalize-offset-fields (plist &rest keys)ensime-internalize-offset-fields424,15158
(defun ensime-get-buffer-as-string ()ensime-get-buffer-as-string432,15348
(defun ensime-minibuffer-respecting-message (format &rest format-args)ensime-minibuffer-respecting-message443,15684
(defun ensime-message (format &rest args)ensime-message452,16098
(defun ensime-display-warning (message &rest args)ensime-display-warning457,16297
(defun ensime-background-message (format-string &rest format-args)ensime-background-message461,16419
(defun ensime-display-oneliner (format-string &rest format-args)ensime-display-oneliner468,16785
(defun ensime-oneliner (string)ensime-oneliner473,17018
(defun ensime-add-face (face string)ensime-add-face482,17262
(defsubst ensime-insert-propertized (props &rest args)ensime-insert-propertized486,17377
(defun ensime-indent-rigidly (start end column)ensime-indent-rigidly490,17557
(defun ensime-insert-indented (&rest strings)ensime-insert-indented501,17905
(defun ensime-property-bounds (prop)ensime-property-bounds506,18063
(defun ensime-chomp (str)ensime-chomp513,18381
(defun ensime-in-comment-p (pos)ensime-in-comment-p520,18582
(defun ensime-at-bol-p ()ensime-at-bol-p529,18896
(defun ensime-in-string-or-comment-p (pos)ensime-in-string-or-comment-p534,19032
(defun ensime-pt-at-end-of-prev-line ()ensime-pt-at-end-of-prev-line548,19518
(defun ensime-event-sig (event &optional value)ensime-event-sig556,19666

elpa/ensime-2.0.2/ensime-popup.el,816
(defvar ensime-popup-buffer-mapensime-popup-buffer-map9,133
(define-minor-mode ensime-popup-buffer-modeensime-popup-buffer-mode16,365
(defvar ensime-popup-restore-data nilensime-popup-restore-data25,589
(defun ensime-make-popup-buffer (name buffer-vars &optional major-mode-fn)ensime-make-popup-buffer47,1443
(defun ensime-init-popup-buffer (buffer-vars)ensime-init-popup-buffer64,1962
(defun ensime-popup-buffer-p (buffer)ensime-popup-buffer-p69,2108
(defun ensime-display-popup-buffer (select)ensime-display-popup-buffer74,2242
(defun ensime-close-popup-window ()ensime-close-popup-window98,3051
(defun ensime-popup-buffer-quit-function (&optional kill-buffer-p)ensime-popup-buffer-quit-function114,3629
(defun ensime-popup-buffer-quit (&optional kill-buffer-p)ensime-popup-buffer-quit119,3846

elpa/ensime-2.0.2/ensime-vars.el,2695
(defgroup ensime nilensime9,124
(defgroup ensime-ui nilensime-ui13,216
(defcustom ensime-default-buffer-prefix "ENSIME-"ensime-default-buffer-prefix17,315
(defcustom ensime-truncate-lines tensime-truncate-lines22,472
(defcustom ensime-kill-without-query-p tensime-kill-without-query-p29,703
(defcustom ensime-save-before-compile tensime-save-before-compile34,856
(defcustom ensime-tooltip-hints tensime-tooltip-hints39,986
(defcustom ensime-tooltip-type-hints tensime-tooltip-type-hints44,1105
(defcustom ensime-eldoc-hints nilensime-eldoc-hints49,1239
(defcustom ensime-graphical-tooltips nilensime-graphical-tooltips55,1437
(defgroup ensime-server nilensime-server60,1570
(defcustom ensime-sbt-commandensime-sbt-command65,1663
(defcustom ensime-auto-generate-config nilensime-auto-generate-config71,1821
(defcustom ensime-default-server-env ()ensime-default-server-env78,2071
(defcustom ensime-server-logback nilensime-server-logback83,2231
(defun ensime--parent-dir (dir)ensime--parent-dir88,2364
(defcustom ensime-default-java-flags ()ensime-default-java-flags92,2477
(defgroup ensime-mode nilensime-mode97,2631
(defcustom ensime-mode-key-prefix [?\C-c]ensime-mode-key-prefix102,2747
(defcustom ensime-typecheck-when-idle tensime-typecheck-when-idle107,2872
(defcustom ensime-typecheck-interval 2ensime-typecheck-interval114,3123
(defcustom ensime-typecheck-idle-interval 0.5ensime-typecheck-idle-interval119,3259
(defcustom ensime-sem-high-enabled-p tensime-sem-high-enabled-p124,3405
(defcustom ensime-sem-high-facesensime-sem-high-faces130,3566
(defcustom ensime-completion-style 'companyensime-completion-style155,4624
(defcustom ensime-implicit-gutter-icons tensime-implicit-gutter-icons162,4860
(defcustom ensime-left-margin-gutter tensime-left-margin-gutter168,5031
(defcustom ensime-refactor-preview tensime-refactor-preview176,5315
(defcustom ensime-refactor-preview-override-file 0ensime-refactor-preview-override-file192,6018
(defcustom ensime-refactor-preview-override-hunk 10ensime-refactor-preview-override-hunk199,6268
(defcustom ensime-refactor-preview-override-types  '()ensime-refactor-preview-override-types206,6510
(defcustom ensime-refactor-no-preview-override-file 0ensime-refactor-no-preview-override-file214,6841
(defcustom ensime-refactor-no-preview-override-hunk 0ensime-refactor-no-preview-override-hunk221,7083
(defcustom ensime-refactor-no-preview-override-types  '()ensime-refactor-no-preview-override-types228,7317
(defcustom ensime-refactor-save-with-no-questions tensime-refactor-save-with-no-questions236,7638
(defcustom ensime-search-interface 'classicensime-search-interface241,7802

elpa/ensime-2.0.2/ensime-company.el,818
(defcustom ensime-company-case-sensitive nilensime-company-case-sensitive28,589
(defun ensime--yasnippet-escape (s)ensime--yasnippet-escape33,743
(defun ensime--build-yasnippet-for-callensime--build-yasnippet-for-call37,872
(defun ensime--company-try-completion ()ensime--company-try-completion91,3553
(defun ensime-company-complete-or-indent ()ensime-company-complete-or-indent109,4066
(defcustom ensime-company-idle-delay 0ensime-company-idle-delay118,4364
(defcustom company-minimum-prefix-length 2company-minimum-prefix-length123,4534
(defun ensime-company-enable ()ensime-company-enable129,4719
(defun ensime--yasnippet-complete-action (&optional candidate-in force-block)ensime--yasnippet-complete-action147,5422
(defun ensime-company (command &optional arg &rest rest)ensime-company245,9280

elpa/ensime-2.0.2/ensime-editor.el,6976
(defvar ensime-compile-result-buffer-name "*ENSIME-Compilation-Result*")ensime-compile-result-buffer-name21,395
(defvar ensime-compile-result-mapensime-compile-result-map23,469
(defface ensime-compile-warnlineensime-compile-warnline32,799
(defface ensime-compile-errlineensime-compile-errline37,957
(defface ensime-compile-infolineensime-compile-infoline42,1110
(defvar ensime-selection-overlay nil)ensime-selection-overlay47,1276
(defvar ensime-selection-stack nil)ensime-selection-stack49,1315
(defvar ensime-ui-method-bytecode-handlerensime-ui-method-bytecode-handler51,1352
(defvar ensime-uses-buffer-name "*Uses*")ensime-uses-buffer-name60,1566
(defvar ensime-hierarchy-buffer-name "*Hierarchy*")ensime-hierarchy-buffer-name61,1608
(defvar ensime-uses-buffer-mapensime-uses-buffer-map63,1661
(defun ensime-goto-line (line)ensime-goto-line73,1920
(defun ensime-line-col-to-point (file line col)ensime-line-col-to-point77,2006
(defun ensime-current-line ()ensime-current-line85,2226
(defun ensime-insert-change-list (changes)ensime-insert-change-list91,2366
(defun ensime-changes-are-proximate-p (ch1 ch2)ensime-changes-are-proximate-p159,4684
(defun ensime-merge-changes (changes)ensime-merge-changes173,5111
(defun ensime-group-changes-by-proximity (changes)ensime-group-changes-by-proximity195,5704
(defun ensime-extract-file-chunk (file-name start end)ensime-extract-file-chunk234,6606
(defun ensime-push-definition-stack ()ensime-push-definition-stack259,7307
(defun ensime-pop-find-definition-stack ()ensime-pop-find-definition-stack264,7458
(defun ensime-edit-definition-other-window (arg)ensime-edit-definition-other-window269,7593
(defun ensime-edit-definition-other-frame (arg)ensime-edit-definition-other-frame273,7703
(defun ensime-edit-definition (arg &optional where)ensime-edit-definition277,7811
(defun ensime-edit-definition-of-thing-at-point (&optional where)ensime-edit-definition-of-thing-at-point287,8161
(defun ensime-edit-definition-of-type-of-thing-at-point (&optional where)ensime-edit-definition-of-type-of-thing-at-point295,8507
(defun ensime-edit-definition-at-pos (pos where)ensime-edit-definition-at-pos303,8810
(defun ensime-files-equal-p (f1 f2)ensime-files-equal-p311,9099
(defun ensime-window-showing-file (file)ensime-window-showing-file317,9280
(defun ensime-window-showing-buffer (buffer)ensime-window-showing-buffer326,9546
(defun ensime-point-at-bol (file line)ensime-point-at-bol333,9729
(defun ensime-goto-source-location (pos &optional where)ensime-goto-source-location339,9887
(defun ensime-find-file-from-pos (pos other-window-p other-frame-p)ensime-find-file-from-pos360,10769
(defun ensime-typecheck-current-buffer ()ensime-typecheck-current-buffer390,11957
(defun ensime-save-and-typecheck-current-buffer ()ensime-save-and-typecheck-current-buffer396,12214
(defun ensime-reload-open-files ()ensime-reload-open-files401,12427
(defun ensime-sym-at-point (&optional point)ensime-sym-at-point407,12635
(defun ensime-local-sym-at-point (&optional point)ensime-local-sym-at-point422,13268
(defun ensime-java-new-import (qualified-name)ensime-java-new-import440,13877
(defun ensime-scala-new-import (qualified-name)ensime-scala-new-import443,13967
(defun ensime-scala-new-import-grouped-package (base-package grouped-classes)ensime-scala-new-import-grouped-package446,14057
(defun ensime-no-imports-in-buffer-p ()ensime-no-imports-in-buffer-p449,14196
(defun ensime-import-block-in-buffer-p ()ensime-import-block-in-buffer-p452,14273
(defun ensime-same-base-package-p (current-import qualified-name)ensime-same-base-package-p455,14351
(defun ensime-past-starting-point (starting-point)ensime-past-starting-point460,14630
(defun ensime-indent-line ()ensime-indent-line468,14992
(defun ensime-insert-new-import-no-imports-in-buffer (starting-point java-scala-new-import qualified-name)ensime-insert-new-import-no-imports-in-buffer471,15071
(defun ensime-insert-new-import-no-imports-or-package-in-buffer (starting-point java-scala-new-import qualified-name)ensime-insert-new-import-no-imports-or-package-in-buffer485,15789
(defun ensime-insert-new-import-next-line (starting-point java-scala-new-import qualified-name)ensime-insert-new-import-next-line499,16552
(defun ensime-insert-new-scala-import-grouped-package-next-line (current-import qualified-name)ensime-insert-new-scala-import-grouped-package-next-line512,17268
(defun ensime-move-to-end-of-multiline-import ()ensime-move-to-end-of-multiline-import534,18622
(defun ensime-at-start-of-multiline-block ()ensime-at-start-of-multiline-block543,18993
(defun ensime-java-new-import-insertion-decisioning-in-import-block (insertion-range starting-point qualified-name)ensime-java-new-import-insertion-decisioning-in-import-block547,19194
(defun ensime-scala-new-import-insertion-decisioning-in-import-block (insertion-range starting-point qualified-name)ensime-scala-new-import-insertion-decisioning-in-import-block564,20187
(defun ensime-insert-java-import (insertion-range starting-point qualified-name)ensime-insert-java-import586,21519
(defun ensime-insert-scala-import (insertion-range starting-point qualified-name)ensime-insert-scala-import605,22611
(defun ensime-insert-import (qualified-name)ensime-insert-import624,23736
(defun ensime-ask-user-to-select-entry (title entries)ensime-ask-user-to-select-entry647,24801
(defun ensime-import-type-at-point (&optional non-interactive)ensime-import-type-at-point665,25437
(defun ensime-format-source ()ensime-format-source704,27234
(defun ensime-revert-visited-files (files &optional typecheck)ensime-revert-visited-files712,27581
(defun ensime-set-selection-overlay (start end)ensime-set-selection-overlay739,28666
(defun ensime-clear-selection-overlay ()ensime-clear-selection-overlay745,28893
(defun ensime-expand-selection-command ()ensime-expand-selection-command750,29064
(defun ensime-set-selection (start end)ensime-set-selection783,29989
(defun ensime-expand-selection (start end)ensime-expand-selection791,30214
(defun ensime-contract-selection ()ensime-contract-selection802,30593
(defun ensime-ui-insert-method-bytecode (val)ensime-ui-insert-method-bytecode811,30862
(defun ensime-show-hierarchy-of-type-at-point ()ensime-show-hierarchy-of-type-at-point826,31289
(defun ensime-write-hierarchy-entries-to-buffer (hierarchy-entries)ensime-write-hierarchy-entries-to-buffer845,32063
(defun ensime-show-uses-of-symbol-at-point (&optional arg)ensime-show-uses-of-symbol-at-point853,32408
(defun ensime-classic-show-uses-of-symbol-at-point (uses)ensime-classic-show-uses-of-symbol-at-point882,33888
(defun ensime-format-source-position (source-position)ensime-format-source-position898,34383
(defun ensime-type-at-point (&optional arg use-full-name)ensime-type-at-point914,35150
(defun ensime-type-at-point-full-name (&optional arg)ensime-type-at-point-full-name932,35841

elpa/ensime-2.0.2/ensime-ui.el,929
(defvar ensime-ui-open-nav-in-other-frame nil)ensime-ui-open-nav-in-other-frame48,1529
(defvar ensime-db-ui-test-handlerensime-db-ui-test-handler67,2092
(defun ensime-ui-nav-handler-for-info (info)ensime-ui-nav-handler-for-info76,2281
(defun ensime-ui-nav-backward-page ()ensime-ui-nav-backward-page87,2690
(defun ensime-ui-nav-forward-page ()ensime-ui-nav-forward-page97,3040
(defun ensime-ui-nav-goto-cursor ()ensime-ui-nav-goto-cursor105,3266
(defun ensime-ui-nav-buffer-p (buf)ensime-ui-nav-buffer-p115,3537
(defun ensime-ui-make-keymap (handler info)ensime-ui-make-keymap120,3665
(defun ensime-ui-nav-quit ()ensime-ui-nav-quit129,3893
(defun ensime-ui-show-nav-buffer (buf-or-name info &optional select connensime-ui-show-nav-buffer148,4512
(defun ensime-ui-open-nav-window (buf select)ensime-ui-open-nav-window210,6495
(defun ensime-ui-make-nav-buffer (buf-or-name)ensime-ui-make-nav-buffer239,7217

elpa/ensime-2.0.2/ensime-client.el,9441
(defvar ensime-net-processes nilensime-net-processes49,2004
(defvar ensime-server-processes nilensime-server-processes52,2091
(defvar ensime-net-process-close-hooks '()ensime-net-process-close-hooks55,2192
(defcustom ensime-log-events nilensime-log-events59,2368
(defvar ensime-dispatching-connection nilensime-dispatching-connection108,4068
(defvar-local ensime-buffer-connection nilensime-buffer-connection113,4255
(defvar ensime-connection-counter 0ensime-connection-counter116,4353
(defvar ensime-connections-buffer-name "*ENSIME Connections*")ensime-connections-buffer-name119,4465
(defcustom ensime-outline-mode-in-events-buffer nilensime-outline-mode-in-events-buffer121,4529
(defvar ensime-event-buffer-name "*ensime-events*"ensime-event-buffer-name126,4677
(defvar ensime-event-hooks)ensime-event-hooks129,4771
(defvar ensime-stack-eval-tags nilensime-stack-eval-tags131,4800
(defun ensime-connection-or-nil ()ensime-connection-or-nil135,4900
(defun ensime-proc-if-alive (proc)ensime-proc-if-alive151,5746
(defun ensime-conn-if-alive (conn)ensime-conn-if-alive161,6049
(defun ensime-connected-p (&optional conn)ensime-connected-p166,6217
(defun ensime-connection ()ensime-connection173,6459
(defun ensime-connection-visiting-buffers (conn)ensime-connection-visiting-buffers185,6866
(defun ensime-source-file-belongs-to-connection-p (file-in conn)ensime-source-file-belongs-to-connection-p197,7249
(defun ensime-owning-server-process-for-source-file (source-file)ensime-owning-server-process-for-source-file201,7456
(defun ensime-owning-connection-for-source-file (source-file)ensime-owning-connection-for-source-file211,7814
(defun ensime-owning-connection-for-rootdir (dir)ensime-owning-connection-for-rootdir221,8165
(defun ensime-interrupt-all-servers ()ensime-interrupt-all-servers236,8884
(defun ensime-interrupt-buffer-process (&optional buffer)ensime-interrupt-buffer-process240,9029
(defun ensime-prompt-for-connection ()ensime-prompt-for-connection246,9280
(defcustom ensime-auto-connect 'neverensime-auto-connect268,10026
(defun ensime-auto-connect ()ensime-auto-connect276,10304
(defun ensime-setup-connection (process)ensime-setup-connection287,10639
(defun ensime-connect (host port &optional disconnect)ensime-connect310,11369
(defun ensime-handle-connection-info (info)ensime-handle-connection-info324,11929
(define-derived-mode ensime-connection-list-mode fundamental-modeensime-connection-list-mode344,12578
(defun ensime-connection-at-point ()ensime-connection-at-point356,12967
(defun ensime-list-connections ()ensime-list-connections360,13099
(defun ensime-update-connection-list ()ensime-update-connection-list367,13352
(defun ensime-draw-connection-list ()ensime-draw-connection-list376,13569
(defun ensime-generate-connection-name (server-name)ensime-generate-connection-name393,14086
(defun ensime-connection-close-hook (process)ensime-connection-close-hook403,14372
(defun ensime-disconnect ()ensime-disconnect410,14567
(defun ensime-disconnect-all ()ensime-disconnect-all415,14688
(defun ensime-connection-port (connection)ensime-connection-port420,14819
(defun ensime-set-config (connection config)ensime-set-config426,15015
(defun ensime-net-connect (host port)ensime-net-connect431,15127
(defun ensime-set-query-on-exit-flag (process)ensime-set-query-on-exit-flag447,15683
(defun ensime-make-net-buffer (name)ensime-make-net-buffer456,16041
(defun ensime-net-send (sexp proc)ensime-net-send465,16346
(defun ensime-net-close (process &optional debug)ensime-net-close476,16855
(defun ensime-net-sentinel (process message)ensime-net-sentinel485,17233
(defun ensime-net-filter (process string)ensime-net-filter492,17510
(defun ensime-process-available-input (process)ensime-process-available-input499,17763
(defun ensime-net-have-input-p ()ensime-net-have-input-p518,18405
(defun ensime-buffer-size-in-bytes ()ensime-buffer-size-in-bytes525,18643
(defun ensime-run-when-idle (function &rest args)ensime-run-when-idle528,18720
(defun ensime-net-read-or-lose (process)ensime-net-read-or-lose534,18910
(defun ensime-net-read ()ensime-net-read542,19112
(defun ensime-net-decode-length ()ensime-net-decode-length556,19500
(defun ensime-net-encode-length (msg encoding)ensime-net-encode-length560,19667
(defun ensime-prin1-to-string (sexp)ensime-prin1-to-string566,19908
(defun ensime-log-event (event)ensime-log-event585,20480
(defun ensime-events-buffer ()ensime-events-buffer593,20823
(defun ensime-copy-event-for-print (event)ensime-copy-event-for-print606,21297
(defun ensime-dispatch-event (event &optional process)ensime-dispatch-event629,22219
(defun ensime-send (sexp)ensime-send720,26890
(defun ensime-handle-compiler-ready ()ensime-handle-compiler-ready725,27028
(defun ensime-user-first-name ()ensime-user-first-name735,27469
(defvar ensime-words-of-encouragementensime-words-of-encouragement742,27669
(defun ensime-random-words-of-encouragement ()ensime-random-words-of-encouragement771,29138
(defun ensime-eval (sexp)ensime-eval783,29610
(defun ensime-eval-async (sexp &optional cont)ensime-eval-async816,30681
(defun ensime-rpc-doc-uri-at-point (file point)ensime-rpc-doc-uri-at-point840,31482
(defun ensime-rpc-doc-uri-for-symbol (scala-name &optional member-name member-signature)ensime-rpc-doc-uri-for-symbol844,31618
(defun ensime-rpc-debug-active-vm ()ensime-rpc-debug-active-vm848,31799
(defun ensime-rpc-debug-backtrace (thread-id index count)ensime-rpc-debug-backtrace852,31882
(defun ensime-rpc-async-debug-backtrace (thread-id index count continue)ensime-rpc-async-debug-backtrace856,32011
(defun ensime-rpc-debug-locate-name (thread-id name)ensime-rpc-debug-locate-name860,32170
(defun ensime-rpc-debug-value (location)ensime-rpc-debug-value864,32288
(defun ensime-rpc-debug-to-string (thread-id location)ensime-rpc-debug-to-string868,32381
(defun ensime-rpc-debug-set-value (location new-val)ensime-rpc-debug-set-value872,32503
(defun ensime-rpc-debug-attach (hostname port)ensime-rpc-debug-attach876,32621
(defun ensime-rpc-debug-stop ()ensime-rpc-debug-stop880,32727
(defun ensime-rpc-debug-next (thread-id)ensime-rpc-debug-next884,32800
(defun ensime-rpc-debug-continue (thread-id)ensime-rpc-debug-continue888,32893
(defun ensime-rpc-debug-run ()ensime-rpc-debug-run892,32994
(defun ensime-rpc-debug-step (thread-id)ensime-rpc-debug-step896,33065
(defun ensime-rpc-debug-step-out (thread-id)ensime-rpc-debug-step-out900,33158
(defun ensime-rpc-debug-list-breakpoints ()ensime-rpc-debug-list-breakpoints904,33259
(defun ensime-rpc-debug-set-break (file line)ensime-rpc-debug-set-break908,33356
(defun ensime-rpc-debug-clear-break (file line)ensime-rpc-debug-clear-break912,33460
(defun ensime-rpc-debug-clear-all-breaks ()ensime-rpc-debug-clear-all-breaks916,33568
(defun ensime-rpc-symbol-at-point ()ensime-rpc-symbol-at-point920,33665
(defun ensime-rpc-remove-file (file-name)ensime-rpc-remove-file924,33807
(defun ensime-rpc-restart-scala-compiler ()ensime-rpc-restart-scala-compiler927,33899
(defun ensime-rpc-async-typecheck-file (file-name continue)ensime-rpc-async-typecheck-file931,34011
(defun ensime-rpc-async-typecheck-files (file-names continue)ensime-rpc-async-typecheck-files934,34147
(defun ensime-rpc-async-typecheck-buffer (continue)ensime-rpc-async-typecheck-buffer937,34279
(defun ensime-rpc-expand-selection (file-name start end)ensime-rpc-expand-selection941,34435
(defun ensime-rpc-import-suggestions-at-point (names max-results)ensime-rpc-import-suggestions-at-point952,34688
(defun ensime-rpc-public-symbol-searchensime-rpc-public-symbol-search961,34908
(defun ensime-rpc-async-public-symbol-searchensime-rpc-async-public-symbol-search969,35056
(defun ensime-rpc-uses-of-symbol-at-point ()ensime-rpc-uses-of-symbol-at-point977,35234
(defun ensime-rpc-hierarchy-of-type-at-point ()ensime-rpc-hierarchy-of-type-at-point984,35415
(defun ensime-rpc-package-member-completions (path &optional prefix)ensime-rpc-package-member-completions991,35602
(defun ensime-rpc-get-type-by-id (id)ensime-rpc-get-type-by-id995,35749
(defun ensime-rpc-get-type-at-point ()ensime-rpc-get-type-at-point1000,35877
(defun ensime-rpc-peek-undo ()ensime-rpc-peek-undo1004,36019
(defun ensime-rpc-exec-undo (id)ensime-rpc-exec-undo1008,36090
(defun ensime-rpc-refactor-diffensime-rpc-refactor-diff1012,36167
(defun ensime-rpc-refactor-exec (proc-id refactor-type continue)ensime-rpc-refactor-exec1022,36479
(defun ensime-rpc-refactor-cancel (proc-id)ensime-rpc-refactor-cancel1025,36625
(defun ensime-rpc-async-symbol-designations (file start end requested-types continue)ensime-rpc-async-symbol-designations1033,36816
(defun ensime-rpc-async-symbol-designations-for-buffer (start end requested-types continue)ensime-rpc-async-symbol-designations-for-buffer1037,37006
(defun ensime-rpc-implicit-info-in-range (start end)ensime-rpc-implicit-info-in-range1042,37260
(defun ensime-rpc-get-call-completion (id)ensime-rpc-get-call-completion1047,37492
(defun ensime-rpc-completions-at-point (&optional max-results case-sens)ensime-rpc-completions-at-point1052,37630
(defun ensime-rpc-async-completions-at-point (max-results case-sens continue)ensime-rpc-async-completions-at-point1062,37885
(defun ensime-rpc-structure-view ()ensime-rpc-structure-view1072,38160

elpa/ensime-2.0.2/ensime-overlay.el,651
(defface ensime-result-overlay-faceensime-result-overlay-face18,328
(defcustom ensime-overlays-use-font-lock nilensime-overlays-use-font-lock28,777
(defcustom ensime-eval-result-prefix "=> "ensime-eval-result-prefix35,1018
(defcustom ensime-eval-result-duration 'commandensime-eval-result-duration40,1165
(defun ensime--delete-overlay (ov &rest _)ensime--delete-overlay50,1582
(defun ensime--make-overlay (l r type &rest props)ensime--make-overlay55,1768
(defun ensime--remove-result-overlay ()ensime--remove-result-overlay68,2372
(defun ensime--remove-result-overlay-after-command ()ensime--remove-result-overlay-after-command74,2641

elpa/ensime-2.0.2/ensime-http.el,194
(defun ensime-project-docs ()ensime-project-docs17,455
(defun ensime--normalise-url (url-or-path)ensime--normalise-url22,614
(defun ensime--http-for-buffer ()ensime--http-for-buffer29,904

elpa/ensime-2.0.2/ensime-search.el,554
(defvar ensime-search-interface)ensime-search-interface30,973
(defvar ensime-buffer-connection)ensime-buffer-connection31,1006
(defvar ensime-search-buffer-name "*ensime-search*")ensime-search-buffer-name35,1087
(defvar ensime-search-min-length 2ensime-search-min-length37,1141
(defvar ensime-search-max-results 50ensime-search-max-results41,1247
(defun ensime-search (&optional arg)ensime-search44,1340
(defun ensime-search-classic ()ensime-search-classic61,1840
(defun ensime-search-jump-to-item (item)ensime-search-jump-to-item83,2788

elpa/ace-window-0.9.0/ace-window-pkg.el,333
(define-package "ace-window" "0.9.0" "Quickly switch windows." '((avy "0.2.0")) :commit "eef897e590c4ce63c28fd29ebff3c97aec8a69ae" :keywords '("window" "location") :authors '(("Oleh Krehel" . "ohwoeowho@gmail.com")) :maintainer '("Oleh Krehel" . "ohwoeowho@gmail.com") :url "https://github.com/abo-abo/ace-window")"ace-window"2,31

elpa/ace-window-0.9.0/ace-window.el,2450
(defgroup ace-window nilace-window68,2225
(defcustom aw-keys '(?1 ?2 ?3 ?4 ?5 ?6 ?7 ?8 ?9)aw-keys73,2325
(defcustom aw-scope 'globalaw-scope76,2407
(defcustom aw-ignored-buffers '("*Calc Trail*" "*LV*")aw-ignored-buffers82,2567
(defcustom aw-ignore-on taw-ignore-on86,2702
(defcustom aw-ignore-current nilaw-ignore-current91,2849
(defcustom aw-background taw-background95,2957
(defcustom aw-leading-char-style 'charaw-leading-char-style99,3078
(defcustom aw-dispatch-always nilaw-dispatch-always105,3260
(defface aw-leading-char-faceaw-leading-char-face111,3478
(defface aw-background-faceaw-background-face118,3748
(defface aw-mode-line-faceaw-mode-line-face122,3865
(defun aw-ignored-p (window)aw-ignored-p127,4021
(defun aw-window-list ()aw-window-list135,4289
(defvar aw-overlays-back nilaw-overlays-back158,4952
(defvar ace-window-mode nilace-window-mode161,5032
(defun aw--done ()aw--done169,5259
(defun aw--lead-overlay (path leaf)aw--lead-overlay178,5476
(defun aw--make-backgrounds (wnd-list)aw--make-backgrounds212,6650
(defvar aw-dispatch-function 'aw-dispatch-defaultaw-dispatch-function229,7261
(defvar aw-action nilaw-action232,7380
(defun aw-set-mode-line (str)aw-set-mode-line235,7452
(defvar aw-dispatch-alistaw-dispatch-alist240,7576
(defun aw-dispatch-default (char)aw-dispatch-default250,7969
(defun aw-select (mode-line &optional action)aw-select261,8336
(defun ace-select-window ()ace-select-window317,10930
(defun ace-delete-window ()ace-delete-window324,11079
(defun ace-swap-window ()ace-swap-window331,11232
(defun ace-maximize-window ()ace-maximize-window338,11377
(defun ace-window (arg)ace-window345,11540
(defun aw-window< (wnd1 wnd2)aw-window<369,12185
(defvar aw--window-ring (make-ring 10)aw--window-ring387,12764
(defun aw--push-window (window)aw--push-window390,12844
(defun aw--pop-window ()aw--pop-window398,13119
(defun aw-switch-to-window (window)aw-switch-to-window413,13597
(defun aw-flip-window ()aw-flip-window425,14009
(defun aw-delete-window (window)aw-delete-window430,14142
(defun aw-swap-window (window)aw-swap-window442,14569
(defun aw-split-window-vert (window)aw-split-window-vert461,15426
(defun aw-split-window-horz (window)aw-split-window-horz466,15547
(defun aw-offset (window)aw-offset471,15672
(define-minor-mode ace-window-display-modeace-window-display-mode491,16317
(defun aw-update ()aw-update513,17081

elpa/ace-window-0.9.0/ace-window-autoloads.el,71
(defvar ace-window-display-mode nil "\ace-window-display-mode48,1081

elpa/dash-2.16.0/dash.el,16422
(defgroup dash ()dash37,1337
(defun dash--enable-fontlock (symbol value)dash--enable-fontlock42,1422
(defcustom dash-enable-fontlock nildash-enable-fontlock47,1540
(defmacro !cons (car cdr)!cons54,1723
(defmacro !cdr (list)!cdr58,1836
(defmacro --each (list &rest body)--each62,1934
(defmacro -doto (eval-initial-value &rest forms)-doto75,2264
(defmacro --doto (eval-initial-value &rest forms)--doto90,2864
(defun -each (list fn)-each98,3068
(defalias '--each-indexed '--each)--each-indexed104,3240
(defun -each-indexed (list fn)-each-indexed106,3276
(defmacro --each-while (list pred &rest body)--each-while115,3554
(defun -each-while (list pred fn)-each-while130,4001
(defmacro --each-r (list &rest body)--each-r137,4243
(defun -each-r (list fn)-each-r155,4949
(defmacro --each-r-while (list pred &rest body)--each-r-while160,5106
(defun -each-r-while (list pred fn)-each-r-while175,5559
(defmacro --dotimes (num &rest body)--dotimes180,5770
(defun -dotimes (num fn)-dotimes191,6122
(defun -map (fn list)-map197,6320
(defmacro --map (form list)--map201,6447
(defmacro --reduce-from (form initial-value list)--reduce-from206,6577
(defun -reduce-from (fn initial-value list)-reduce-from213,6782
(defmacro --reduce (form list)--reduce225,7214
(defun -reduce (fn list)-reduce234,7478
(defmacro --reduce-r-from (form initial-value list)--reduce-r-from249,7973
(defun -reduce-r-from (fn initial-value list)-reduce-r-from254,8163
(defmacro --reduce-r (form list)--reduce-r265,8576
(defun -reduce-r (fn list)-reduce-r270,8717
(defun -reductions-from (fn init list)-reductions-from287,9288
(defun -reductions (fn list)-reductions295,9584
(defun -reductions-r-from (fn init list)-reductions-r-from303,9844
(defun -reductions-r (fn list)-reductions-r311,10133
(defmacro --filter (form list)--filter323,10513
(defun -filter (pred list)-filter333,10757
(defalias '-select '-filter)-select341,10954
(defalias '--select '--filter)--select342,10983
(defmacro --remove (form list)--remove344,11015
(defun -remove (pred list)-remove351,11167
(defalias '-reject '-remove)-reject359,11343
(defalias '--reject '--remove)--reject360,11372
(defun -remove-first (pred list)-remove-first362,11404
(defmacro --remove-first (form list)--remove-first376,11765
(defalias '-reject-first '-remove-first)-reject-first381,11920
(defalias '--reject-first '--remove-first)--reject-first382,11961
(defun -remove-last (pred list)-remove-last384,12005
(defmacro --remove-last (form list)--remove-last392,12209
(defalias '-reject-last '-remove-last)-reject-last397,12361
(defalias '--reject-last '--remove-last)--reject-last398,12400
(defun -remove-item (item list)-remove-item400,12442
(defmacro --keep (form list)--keep407,12631
(defun -keep (fn list)-keep416,12899
(defun -non-nil (list)-non-nil422,13118
(defmacro --map-indexed (form list)--map-indexed427,13249
(defun -map-indexed (fn list)-map-indexed436,13479
(defmacro --map-when (pred rep list)--map-when444,13759
(defun -map-when (pred rep list)-map-when452,13996
(defalias '-replace-where '-map-when)-replace-where462,14335
(defalias '--replace-where '--map-when)--replace-where463,14373
(defun -map-first (pred rep list)-map-first465,14414
(defmacro --map-first (pred rep list)--map-first477,14812
(defun -map-last (pred rep list)-map-last481,14961
(defmacro --map-last (pred rep list)--map-last487,15172
(defun -replace (old new list)-replace491,15318
(defun -replace-first (old new list)-replace-first500,15539
(defun -replace-last (old new list)-replace-last509,15779
(defmacro --mapcat (form list)--mapcat518,16015
(defun -mapcat (fn list)-mapcat523,16152
(defun -flatten (l)-flatten528,16320
(defmacro --iterate (form init n)--iterate545,16897
(defun -flatten-n (num list)-flatten-n550,17050
(defun -concat (&rest lists)-concat557,17252
(defalias '-copy 'copy-sequence-copy562,17433
(defun -splice (pred fun list)-splice567,17514
(defmacro --splice (pred form list)--splice585,18029
(defun -splice-list (pred new-list list)-splice-list589,18159
(defmacro --splice-list (pred new-list list)--splice-list595,18345
(defun -cons* (&rest args)-cons*599,18484
(defun -snoc (list elem &rest elements)-snoc608,18770
(defmacro --first (form list)--first616,19004
(defun -first (pred list)-first625,19235
(defalias '-find '-first)-find633,19448
(defalias '--find '--first)--find634,19474
(defmacro --some (form list)--some636,19503
(defun -some (pred list)-some645,19722
(defalias '-any '-some)-any651,19879
(defalias '--any '--some)--any652,19903
(defmacro --last (form list)--last654,19930
(defun -last (pred list)-last663,20144
(defalias '-first-item 'car-first-item667,20272
(defalias '-second-item 'cadr-second-item679,20604
(defalias '-third-item 'caddr-third-item686,20739
(defun -fourth-item (list)-fourth-item693,20874
(defun -fifth-item (list)-fifth-item700,21067
(defun -last-item (list)-last-item717,21608
(defun -butlast (list)-butlast730,22084
(defmacro --count (pred list)--count736,22283
(defun -count (pred list)-count744,22499
(defun ---truthy? (val)---truthy?748,22631
(defmacro --any? (form list)--any?752,22718
(defun -any? (pred list)-any?757,22849
(defalias '-some? '-any?)-some?763,23013
(defalias '--some? '--any?)--some?764,23039
(defalias '-any-p '-any?)-any-p765,23067
(defalias '--any-p '--any?)--any-p766,23093
(defalias '-some-p '-any?)-some-p767,23121
(defalias '--some-p '--any?)--some-p768,23148
(defmacro --all? (form list)--all?770,23178
(defun -all? (pred list)-all?778,23396
(defalias '-every? '-all?)-every?784,23562
(defalias '--every? '--all?)--every?785,23589
(defalias '-all-p '-all?)-all-p786,23618
(defalias '--all-p '--all?)--all-p787,23644
(defalias '-every-p '-all?)-every-p788,23672
(defalias '--every-p '--all?)--every-p789,23700
(defmacro --none? (form list)--none?791,23731
(defun -none? (pred list)-none?796,23857
(defalias '-none-p '-none?)-none-p802,23999
(defalias '--none-p '--none?)--none-p803,24027
(defmacro --only-some? (form list)--only-some?805,24058
(defun -only-some? (pred list)-only-some?815,24370
(defalias '-only-some-p '-only-some?)-only-some-p822,24670
(defalias '--only-some-p '--only-some?)--only-some-p823,24708
(defun -slice (list from &optional to step)-slice825,24749
(defun -take (n list)-take852,25633
(defun -take-last (n list)-take-last864,25944
(defalias '-drop 'nthcdr-drop871,26112
(defun -drop-last (n list)-drop-last878,26232
(defmacro --take-while (form list)--take-while886,26456
(defun -take-while (pred list)-take-while894,26684
(defmacro --drop-while (form list)--drop-while898,26852
(defun -drop-while (pred list)-drop-while907,27098
(defun -split-at (n list)-split-at911,27263
(defun -rotate (n list)-rotate921,27571
(defun -insert-at (n x list)-insert-at931,27938
(defun -replace-at (n x list)-replace-at939,28205
(defun -update-at (n func list)-update-at947,28477
(defmacro --update-at (n form list)--update-at954,28767
(defun -remove-at (n list)-remove-at959,28926
(defun -remove-at-indices (indices list)-remove-at-indices966,29141
(defmacro --split-with (pred list)--split-with983,29705
(defun -split-with (pred list)-split-with1000,30176
(defmacro -split-on (item list)-split-on1004,30364
(defmacro --split-when (form list)--split-when1016,30695
(defun -split-when (fn list)-split-when1021,30847
(defmacro --separate (form list)--separate1039,31370
(defun -separate (pred list)-separate1048,31659
(defun ---partition-all-in-steps-reversed (n step list)---partition-all-in-steps-reversed1052,31822
(defun -partition-all-in-steps (n step list)-partition-all-in-steps1062,32187
(defun -partition-in-steps (n step list)-partition-in-steps1068,32483
(defun -partition-all (n list)-partition-all1078,32918
(defun -partition (n list)-partition1084,33152
(defmacro --partition-by (form list)--partition-by1091,33421
(defun -partition-by (fn list)-partition-by1118,34240
(defmacro --partition-by-header (form list)--partition-by-header1122,34395
(defun -partition-by-header (fn list)-partition-by-header1153,35366
(defun -partition-after-pred (pred list)-partition-after-pred1160,35661
(defun -partition-before-pred (pred list)-partition-before-pred1175,36148
(defun -partition-after-item (item list)-partition-after-item1180,36360
(defun -partition-before-item (item list)-partition-before-item1185,36552
(defmacro --group-by (form list)--group-by1190,36748
(defun -group-by (fn list)-group-by1212,37300
(defun -interpose (sep list)-interpose1217,37479
(defun -interleave (&rest lists)-interleave1229,37812
(defmacro --zip-with (form list1 list2)--zip-with1239,38143
(defun -zip-with (fn list1 list2)-zip-with1258,38711
(defun -zip (&rest lists)-zip1268,39125
(defalias '-zip-pair '-zip)-zip-pair1291,40088
(defun -zip-fill (fill-value &rest lists)-zip-fill1293,40117
(defun -unzip (lists)-unzip1300,40408
(defun -cycle (list)-cycle1313,40686
(defun -pad (fill-value &rest lists)-pad1320,40925
(defun -annotate (fn list)-annotate1327,41239
(defmacro --annotate (form list)--annotate1332,41427
(defun dash--table-carry (lists restore-lists &optional re)dash--table-carry1337,41573
(defun -table (fn &rest lists)-table1352,42010
(defun -table-flat (fn &rest lists)-table-flat1373,42752
(defun -partial (fn &rest args)-partial1399,43632
(defun -elem-index (elem list)-elem-index1406,43918
(defun -elem-indices (elem list)-elem-indices1413,44165
(defun -find-indices (pred list)-find-indices1419,44388
(defmacro --find-indices (form list)--find-indices1424,44601
(defun -find-index (pred list)-find-index1429,44759
(defmacro --find-index (form list)--find-index1437,44999
(defun -find-last-index (pred list)-find-last-index1442,45151
(defmacro --find-last-index (form list)--find-last-index1450,45401
(defun -select-by-indices (indices list)-select-by-indices1454,45536
(defun -select-columns (columns table)-select-columns1463,45808
(defun -select-column (column table)-select-column1476,46205
(defmacro -> (x &optional form &rest more)->1488,46584
(defmacro ->> (x &optional form &rest more)->>1501,47100
(defmacro --> (x &rest forms)-->1514,47555
(defmacro -as-> (value variable &rest forms)-as->1523,47896
(defmacro -some-> (x &optional form &rest more)-some->1538,48396
(defmacro -some->> (x &optional form &rest more)-some->>1548,48768
(defmacro -some--> (x &optional form &rest more)-some-->1558,49146
(defun -grade-up (comparator list)-grade-up1568,49524
(defun -grade-down (comparator list)-grade-down1578,49939
(defvar dash--source-counter 0dash--source-counter1588,50357
(defun dash--match-make-source-symbol ()dash--match-make-source-symbol1591,50435
(defun dash--match-ignore-place-p (symbol)dash--match-ignore-place-p1598,50701
(defun dash--match-cons-skip-cdr (skip-cdr source)dash--match-cons-skip-cdr1603,50876
(defun dash--match-cons-get-car (skip-cdr source)dash--match-cons-get-car1612,51168
(defun dash--match-cons-get-cdr (skip-cdr source)dash--match-cons-get-cdr1622,51406
(defun dash--match-cons (match-form source)dash--match-cons1632,51638
(defun dash--get-expand-function (type)dash--get-expand-function1656,52586
(defun dash--match-cons-1 (match-form source &optional props)dash--match-cons-11660,52709
(defun dash--vector-tail (seq start)dash--vector-tail1694,54181
(defun dash--match-vector (match-form source)dash--match-vector1705,54503
(defun dash--match-vector-1 (match-form source)dash--match-vector-11724,55442
(defun dash--match-kv-normalize-match-form (pattern)dash--match-kv-normalize-match-form1764,56912
(defun dash--match-kv (match-form source)dash--match-kv1805,58745
(defun dash-expand:&hash (key source)dash-expand:&hash1820,59394
(defun dash-expand:&plist (key source)dash-expand:&plist1824,59525
(defun dash-expand:&alist (key source)dash-expand:&alist1828,59660
(defun dash-expand:&hash? (key source)dash-expand:&hash?1832,59797
(defalias 'dash-expand:&keys 'dash-expand:&plist)dash-expand:&keys1839,60062
(defun dash--match-kv-1 (match-form source type)dash--match-kv-11841,60113
(defun dash--match-symbol (match-form source)dash--match-symbol1866,61099
(defun dash--match (match-form source)dash--match1872,61256
(defun dash--normalize-let-varlist (varlist)dash--normalize-let-varlist1906,62518
(defmacro -let* (varlist &rest body)-let*1920,62969
(defmacro -let (varlist &rest body)-let1939,63709
(defmacro -lambda (match-form &rest body)-lambda2113,69989
(defmacro -setq (&rest forms)-setq2146,71291
(defmacro -if-let* (vars-vals then &rest else)-if-let*2200,73481
(defmacro -if-let (var-val then &rest else)-if-let2219,74129
(defmacro --if-let (val then &rest else)--if-let2230,74436
(defmacro -when-let* (vars-vals &rest body)-when-let*2237,74662
(defmacro -when-let (var-val &rest body)-when-let2249,75094
(defmacro --when-let (val &rest body)--when-let2259,75373
(defvar -compare-fn nil-compare-fn2266,75575
(defun -distinct (list)-distinct2272,75796
(defalias '-uniq '-distinct)-uniq2282,76081
(defun -union (list list2)-union2284,76111
(defun -intersection (list list2)-intersection2303,77001
(defun -difference (list list2)-difference2309,77254
(defun -powerset (list)-powerset2315,77494
(defun -permutations (list)-permutations2322,77702
(defun -inits (list)-inits2331,77993
(defun -tails (list)-tails2335,78103
(defun -common-prefix (&rest lists)-common-prefix2339,78196
(defun -common-suffix (&rest lists)-common-suffix2345,78403
(defun -contains? (list element)-contains?2349,78551
(defalias '-contains-p '-contains?)-contains-p2369,79087
(defun -same-items? (list list2)-same-items?2371,79124
(defalias '-same-items-p '-same-items?)-same-items-p2383,79454
(defun -is-prefix? (prefix list)-is-prefix?2385,79495
(defun -is-suffix? (suffix list)-is-suffix?2394,79722
(defun -is-infix? (infix list)-is-infix?2401,79918
(defalias '-is-prefix-p '-is-prefix?)-is-prefix-p2414,80216
(defalias '-is-suffix-p '-is-suffix?)-is-suffix-p2415,80254
(defalias '-is-infix-p '-is-infix?)-is-infix-p2416,80292
(defun -sort (comparator list)-sort2418,80329
(defmacro --sort (form list)--sort2425,80652
(defun -list (&rest args)-list2430,80789
(defun -repeat (n x)-repeat2439,81053
(defun -sum (list)-sum2447,81247
(defun -running-sum (list)-running-sum2452,81356
(defun -product (list)-product2461,81591
(defun -running-product (list)-running-product2466,81708
(defun -max (list)-max2475,81951
(defun -min (list)-min2480,82096
(defun -max-by (comparator list)-max-by2485,82242
(defun -min-by (comparator list)-min-by2493,82541
(defmacro --max-by (form list)--max-by2501,82837
(defmacro --min-by (form list)--min-by2508,83055
(defun -iterate (fun init n)-iterate2515,83273
(defun -fix (fn list)-fix2529,83602
(defmacro --fix (form list)--fix2539,83881
(defun -unfold (fun seed)-unfold2543,83977
(defmacro --unfold (form seed)--unfold2559,84498
(defun -cons-pair? (con)-cons-pair?2564,84638
(defalias '-cons-pair-p '-cons-pair?)-cons-pair-p2573,84865
(defun -cons-to-list (con)-cons-to-list2575,84904
(defun -value-to-list (val)-value-to-list2580,85085
(defun -tree-mapreduce-from (fn folder init-value tree)-tree-mapreduce-from2592,85412
(defmacro --tree-mapreduce-from (form folder init-value tree)--tree-mapreduce-from2609,86090
(defun -tree-mapreduce (fn folder tree)-tree-mapreduce2614,86332
(defmacro --tree-mapreduce (form folder tree)--tree-mapreduce2631,86957
(defun -tree-map (fn tree)-tree-map2636,87156
(defmacro --tree-map (form tree)--tree-map2645,87421
(defun -tree-reduce-from (fn init-value tree)-tree-reduce-from2650,87564
(defmacro --tree-reduce-from (form init-value tree)--tree-reduce-from2666,88122
(defun -tree-reduce (fn tree)-tree-reduce2671,88321
(defmacro --tree-reduce (form tree)--tree-reduce2686,88828
(defun -tree-map-nodes (pred fun tree)-tree-map-nodes2691,88984
(defmacro --tree-map-nodes (pred form tree)--tree-map-nodes2704,89406
(defun -tree-seq (branch children tree)-tree-seq2708,89560
(defmacro --tree-seq (branch children tree)--tree-seq2723,90098
(defun -clone (list)-clone2727,90246
(defun dash-enable-font-lock ()dash-enable-font-lock2735,90537

elpa/dash-2.16.0/dash-pkg.el,259
(define-package "dash" "2.16.0" "A modern list library for Emacs" 'nil :commit "258c324d9840901db83b2cabef3fa75bba57c1ba" :keywords '("lists") :authors '(("Magnar Sveen" . "magnars@gmail.com")) :maintainer '("Magnar Sveen" . "magnars@gmail.com"))"dash"2,31

elpa/dash-2.16.0/dash-autoloads.el,0

elpa/f-0.20.0/f-pkg.el,363
(define-package "f" "0.20.0" "Modern API for working with files and directories" '((s "1.7.0") (dash "2.2.0")) :commit "de6d4d40ddc844eee643e92d47b9d6a63fbebb48" :keywords '("files" "directories") :authors '(("Johan Andersson" . "johan.rejeep@gmail.com")) :maintainer '("Johan Andersson" . "johan.rejeep@gmail.com") :url "http://github.com/rejeep/f.el")"f"2,31

elpa/f-0.20.0/f.el,5167
(defvar f--guard-paths nilf--guard-paths42,1366
(defmacro f--destructive (path &rest body)f--destructive47,1475
(defun f-join (&rest args)f-join62,1892
(defun f-split (path)f-split71,2125
(defun f-expand (path &optional dir)f-expand78,2342
(defun f-filename (path)f-filename87,2699
(defalias 'f-parent 'f-dirname)f-parent91,2809
(defun f-dirname (path)f-dirname92,2841
(defun f-common-parent (paths)f-common-parent101,3154
(defun f-ext (path)f-ext121,3790
(defun f-no-ext (path)f-no-ext128,3998
(defun f-swap-ext (path ext)f-swap-ext132,4111
(defun f-base (path)f-base139,4331
(defun f-relative (path &optional dir)f-relative143,4447
(defalias 'f-abbrev 'f-short)f-abbrev147,4553
(defun f-short (path)f-short148,4583
(defun f-long (path)f-long152,4693
(defun f-canonical (path)f-canonical156,4767
(defun f-slash (path)f-slash160,4857
(defun f-full (path)f-full169,5070
(defun f--uniquify (paths)f--uniquify173,5172
(defun f-uniquify (files)f-uniquify189,5945
(defun f-uniquify-alist (files)f-uniquify-alist195,6087
(defun f-read-bytes (path)f-read-bytes204,6271
(defalias 'f-read 'f-read-text)f-read214,6575
(defun f-read-text (path &optional coding)f-read-text215,6607
(defalias 'f-write 'f-write-text)f-write223,6830
(defun f-write-text (text coding path)f-write-text224,6864
(defun f-unibyte-string-p (s)f-unibyte-string-p231,7110
(defun f-write-bytes (data path)f-write-bytes235,7218
(defalias 'f-append 'f-append-text)f-append249,7697
(defun f-append-text (text coding path)f-append-text250,7733
(defun f-append-bytes (data path)f-append-bytes256,7911
(defun f-mkdir (&rest dirs)f-mkdir269,8182
(defun f-delete (path &optional force)f-delete279,8433
(defun f-symlink (source path)f-symlink288,8714
(defun f-move (from to)f-move292,8846
(defun f-copy (from to)f-copy297,8995
(defun f-copy-contents (from to)f-copy-contents317,9783
(defun f-touch (path)f-touch326,10118
(defun f-exists? (path)f-exists?336,10340
(defalias 'f-exists-p 'f-exists?)f-exists-p340,10435
(defalias 'f-dir? 'f-directory?)f-dir?342,10470
(defalias 'f-dir-p 'f-dir?)f-dir-p343,10503
(defun f-directory? (path)f-directory?345,10532
(defalias 'f-directory-p 'f-directory?)f-directory-p349,10639
(defun f-file? (path)f-file?351,10680
(defalias 'f-file-p 'f-file?)f-file-p355,10775
(defun f-symlink? (path)f-symlink?357,10806
(defalias 'f-symlink-p 'f-symlink?)f-symlink-p361,10919
(defun f-readable? (path)f-readable?363,10956
(defalias 'f-readable-p 'f-readable?)f-readable-p367,11060
(defun f-writable? (path)f-writable?369,11099
(defalias 'f-writable-p 'f-writable?)f-writable-p373,11203
(defun f-executable? (path)f-executable?375,11242
(defalias 'f-executable-p 'f-executable?)f-executable-p379,11352
(defun f-absolute? (path)f-absolute?381,11395
(defalias 'f-absolute-p 'f-absolute?)f-absolute-p385,11504
(defun f-relative? (path)f-relative?387,11543
(defalias 'f-relative-p 'f-relative?)f-relative-p391,11649
(defun f-root? (path)f-root?393,11688
(defalias 'f-root-p 'f-root?)f-root-p397,11793
(defun f-ext? (path &optional ext)f-ext?399,11824
(defalias 'f-ext-p 'f-ext?)f-ext-p411,12194
(defalias 'f-equal? 'f-same?)f-equal?413,12223
(defalias 'f-equal-p 'f-equal?)f-equal-p414,12253
(defun f-same? (path-a path-b)f-same?416,12286
(defalias 'f-same-p 'f-same?)f-same-p424,12578
(defun f-parent-of? (path-a path-b)f-parent-of?426,12609
(defalias 'f-parent-of-p 'f-parent-of?)f-parent-of-p431,12748
(defun f-child-of? (path-a path-b)f-child-of?433,12789
(defalias 'f-child-of-p 'f-child-of?)f-child-of-p438,12926
(defun f-ancestor-of? (path-a path-b)f-ancestor-of?440,12965
(defalias 'f-ancestor-of-p 'f-ancestor-of?)f-ancestor-of-p446,13159
(defun f-descendant-of? (path-a path-b)f-descendant-of?448,13204
(defalias 'f-descendant-of-p 'f-descendant-of?)f-descendant-of-p454,13401
(defun f-hidden? (path)f-hidden?456,13450
(defalias 'f-hidden-p 'f-hidden?)f-hidden-p462,13631
(defun f-empty? (path)f-empty?464,13666
(defalias 'f-empty-p 'f-empty?)f-empty-p471,13931
(defun f-size (path)f-size476,13978
(defun f-depth (path)f-depth485,14239
(defun f-this-file ()f-this-file496,14506
(defvar f--path-separator nilf--path-separator504,14739
(defun f-path-separator ()f-path-separator507,14825
(defun f-glob (pattern &optional path)f-glob512,14970
(defun f--collect-entries (path recursive)f--collect-entries517,15111
(defmacro f--entries (path body &optional recursive)f--entries538,15780
(defun f-entries (path &optional fn recursive)f-entries547,15971
(defmacro f--directories (path body &optional recursive)f--directories556,16333
(defun f-directories (path &optional fn recursive)f-directories565,16536
(defmacro f--files (path body &optional recursive)f--files570,16774
(defun f-files (path &optional fn recursive)f-files579,16959
(defmacro f--traverse-upwards (body &optional path)f--traverse-upwards584,17162
(defun f-traverse-upwards (fn &optional path)f-traverse-upwards592,17353
(defun f-root ()f-root607,17824
(defmacro f-with-sandbox (path-or-paths &rest body)f-with-sandbox611,17901

elpa/f-0.20.0/f-autoloads.el,0

elpa/ag-0.48/ag.el,3509
(defgroup ag nilag42,1436
(defcustom ag-executableag-executable47,1536
(defcustom ag-argumentsag-arguments53,1637
(defcustom ag-dired-argumentsag-dired-arguments66,2041
(defcustom ag-context-lines nilag-context-lines72,2184
(defcustom ag-group-matches tag-group-matches77,2321
(defcustom ag-highlight-search nilag-highlight-search84,2501
(defcustom ag-reuse-buffers nilag-reuse-buffers91,2715
(defcustom ag-reuse-window nilag-reuse-window98,2917
(defcustom ag-project-root-function nilag-project-root-function104,3068
(defcustom ag-ignore-list nilag-ignore-list116,3477
(defface ag-hit-face '((t :inherit compilation-info))ag-hit-face129,3965
(defface ag-match-face '((t :inherit match))ag-match-face133,4071
(defvar ag-search-finished-hook nilag-search-finished-hook137,4168
(defun ag/run-finished-hook (buffer how-finished)ag/run-finished-hook140,4259
(defmacro ag/with-patch-function (fun-name fun-args fun-body &rest body)ag/with-patch-function145,4444
(defun ag/next-error-function (n &optional reset)ag/next-error-function153,4782
(defvar ag/file-column-pattern-nogroupag/file-column-pattern-nogroup169,5473
(defvar ag/file-column-pattern-groupag/file-column-pattern-group173,5652
(defun ag/compilation-match-grouped-filename ()ag/compilation-match-grouped-filename177,5816
(define-compilation-mode ag-mode "Ag"ag-mode184,6093
(define-key ag-mode-map (kbd "p") #'compilation-previous-error)ag-mode-map198,6897
(define-key ag-mode-map (kbd "n") #'compilation-next-error)ag-mode-map199,6961
(define-key ag-mode-map (kbd "k") '(lambda () (interactive)ag-mode-map200,7021
(defun ag/buffer-name (search-string directory regexp)ag/buffer-name203,7171
(defun ag/format-ignore (ignores)ag/format-ignore210,7489
(defun ag/dwim-at-point ()ag/dwim-at-point273,10705
(defun ag/buffer-extension-regex ()ag/buffer-extension-regex282,11037
(defun ag/longest-string (&rest strings)ag/longest-string291,11370
(defun ag/replace-first (string before after)ag/replace-first300,11678
(defun ag/project-root (file-path)ag/project-root319,12175
(defun ag/dired-align-size-column ()ag/dired-align-size-column333,12581
(defun ag/dired-filter (proc string)ag/dired-filter347,13030
(defun ag/dired-sentinel (proc state)ag/dired-sentinel383,14410
(defun ag/kill-process ()ag/kill-process406,15436
(defun ag/escape-pcre (regexp)ag/escape-pcre416,15782
(defun ag (string directory)ag430,16266
(defun ag-files (string file-type directory)ag-files440,16650
(defun ag-regexp (string directory)ag-regexp452,17141
(defun ag-project (string)ag-project461,17466
(defun ag-project-files (string file-type)ag-project-files470,17792
(defun ag/read-from-minibuffer (prompt)ag/read-from-minibuffer480,18213
(defun ag-project-regexp (regexp)ag-project-regexp500,18985
(defalias 'ag-project-at-point 'ag-project)ag-project-at-point512,19416
(defalias 'ag-regexp-project-at-point 'ag-project-regexp)ag-regexp-project-at-point516,19532
(defun ag-dired (dir string)ag-dired520,19676
(defun ag-dired-regexp (dir regexp)ag-dired-regexp534,20092
(defun ag-project-dired (pattern)ag-project-dired597,23047
(defun ag-project-dired-regexp (regexp)ag-project-dired-regexp605,23299
(defun ag-kill-buffers ()ag-kill-buffers613,23544
(defun ag-kill-other-buffers ()ag-kill-other-buffers621,23761
(defun ag-filter ()ag-filter632,24139
(defun ag/get-supported-types ()ag/get-supported-types665,25645
(defun ag/read-file-type ()ag/read-file-type673,26098

elpa/ag-0.48/ag-pkg.el,309
(define-package "ag" "0.48" "A front-end for ag ('the silver searcher'), the C ack replacement." '((dash "2.8.0") (s "1.9.0") (cl-lib "0.5")) :commit "bd81d68466e44301505629454dfc689b6c17d94b" :authors '(("Wilfred Hughes" . "me@wilfred.me.uk")) :maintainer '("Wilfred Hughes" . "me@wilfred.me.uk"))"ag"2,31

elpa/ag-0.48/ag-autoloads.el,165
(defalias 'ag-project-at-point 'ag-project)ag-project-at-point63,1768
(defalias 'ag-regexp-project-at-point 'ag-project-regexp)ag-regexp-project-at-point65,1813

elpa/elfeed-3.2.0/elfeed-search.el,6097
(defvar elfeed-search-entries ()elfeed-search-entries19,428
(defvar elfeed-search-filter-history nilelfeed-search-filter-history22,509
(defvar elfeed-search-last-update 0elfeed-search-last-update25,594
(defvar elfeed-search-update-hook ()elfeed-search-update-hook28,691
(defcustom elfeed-search-filter "@6-months-ago +unread"elfeed-search-filter31,805
(defcustom elfeed-sort-order 'descendingelfeed-sort-order36,938
(defcustom elfeed-search-sort-function nilelfeed-search-sort-function45,1266
(defcustom elfeed-search-clipboard-type 'PRIMARYelfeed-search-clipboard-type57,1695
(defcustom elfeed-search-date-format '("%Y-%m-%d" 10 :left)elfeed-search-date-format63,1950
(defcustom elfeed-search-compile-filter telfeed-search-compile-filter71,2287
(defvar elfeed-search-filter-active nilelfeed-search-filter-active76,2430
(defvar elfeed-search-filter-overflowing nilelfeed-search-filter-overflowing80,2600
(defvar elfeed-search--offset 1elfeed-search--offset83,2711
(defvar elfeed-search-header-function #'elfeed-search--headerelfeed-search-header-function86,2802
(defvar elfeed-search-print-entry-function #'elfeed-search-print-entry--defaultelfeed-search-print-entry-function89,2944
(defalias 'elfeed-search-tag-all-unreadelfeed-search-tag-all-unread92,3089
(defalias 'elfeed-search-untag-all-unreadelfeed-search-untag-all-unread96,3231
(defalias 'elfeed-search-update--forceelfeed-search-update--force100,3382
(defun elfeed-search-quit-window ()elfeed-search-quit-window104,3515
(defun elfeed-search-last-entry ()elfeed-search-last-entry110,3647
(defun elfeed-search-first-entry ()elfeed-search-first-entry116,3781
(defvar elfeed-search-mode-mapelfeed-search-mode-map121,3895
(defun elfeed-search--intro-header ()elfeed-search--intro-header145,4990
(defun elfeed-search--count-unread ()elfeed-search--count-unread161,5511
(defvar elfeed-search--header-cache nilelfeed-search--header-cache178,6233
(defun elfeed-search--header ()elfeed-search--header181,6314
(defun elfeed-search--header-1 ()elfeed-search--header-1190,6688
(defun elfeed-search-mode ()elfeed-search-mode213,7740
(defun elfeed-search-buffer ()elfeed-search-buffer238,8744
(defun elfeed-search--unload ()elfeed-search--unload241,8817
(defun elfeed-search-format-date (date)elfeed-search-format-date248,9070
(defface elfeed-search-date-faceelfeed-search-date-face266,9793
(defface elfeed-search-title-faceelfeed-search-title-face272,10010
(defface elfeed-search-unread-title-faceelfeed-search-unread-title-face278,10229
(defface elfeed-search-feed-faceelfeed-search-feed-face283,10365
(defface elfeed-search-tag-faceelfeed-search-tag-face289,10588
(defface elfeed-search-last-update-faceelfeed-search-last-update-face295,10803
(defface elfeed-search-unread-count-faceelfeed-search-unread-count-face300,10941
(defface elfeed-search-filter-faceelfeed-search-filter-face306,11180
(defcustom elfeed-search-title-max-width 70elfeed-search-title-max-width311,11327
(defcustom elfeed-search-title-min-width 16elfeed-search-title-min-width316,11472
(defcustom elfeed-search-trailing-width 30elfeed-search-trailing-width321,11617
(defcustom elfeed-search-face-alistelfeed-search-face-alist326,11760
(defun elfeed-search--faces (tags)elfeed-search--faces332,11979
(defun elfeed-search-print-entry--default (entry)elfeed-search-print-entry--default339,12253
(defun elfeed-search-parse-filter (filter)elfeed-search-parse-filter366,13565
(defun elfeed-search--recover-time (seconds)elfeed-search--recover-time420,15799
(defun elfeed-search--recover-units (after-seconds &optional before-seconds)elfeed-search--recover-units439,16494
(defun elfeed-search-unparse-filter (filter)elfeed-search-unparse-filter447,16847
(defun elfeed-search-filter (filter entry feed &optional count)elfeed-search-filter477,18017
(defun elfeed-search-compile-filter (filter)elfeed-search-compile-filter523,20105
(defun elfeed-search--prompt (current)elfeed-search--prompt583,22789
(defun elfeed-search-clear-filter ()elfeed-search-clear-filter593,23078
(defun elfeed-search-set-filter (new-filter)elfeed-search-set-filter599,23309
(defun elfeed-search--update-list ()elfeed-search--update-list640,24951
(defmacro elfeed-save-excursion (&rest body)elfeed-save-excursion671,26253
(defun elfeed-search-update (&optional force)elfeed-search-update685,26828
(defun elfeed-search-fetch (prefix)elfeed-search-fetch704,27675
(defun elfeed-search-fetch-visible ()elfeed-search-fetch-visible712,27949
(defun elfeed-search-update-line (&optional n)elfeed-search-update-line722,28380
(defun elfeed-search-update-entry (entry)elfeed-search-update-entry732,28720
(defun elfeed-search-selected (&optional ignore-region-p)elfeed-search-selected737,28918
(defun elfeed-search-browse-url (&optional use-generic-p)elfeed-search-browse-url753,29705
(defun elfeed-search-yank ()elfeed-search-yank768,30333
(defun elfeed-search-tag-all (tag)elfeed-search-tag-all785,31015
(defun elfeed-search-untag-all (tag)elfeed-search-untag-all793,31319
(defun elfeed-search-toggle-all (tag)elfeed-search-toggle-all801,31630
(defun elfeed-search-show-entry (entry)elfeed-search-show-entry814,32175
(defun elfeed-search-set-entry-title (title)elfeed-search-set-entry-title824,32511
(defun elfeed-search-set-feed-title (title)elfeed-search-set-feed-title834,32898
(defvar elfeed-search-filter-syntax-tableelfeed-search-filter-syntax-table848,33419
(defun elfeed-search--minibuffer-setup ()elfeed-search--minibuffer-setup857,33750
(defun elfeed-search--live-update ()elfeed-search--live-update866,34127
(defun elfeed-search-live-filter ()elfeed-search-live-filter884,34954
(defun elfeed-search-bookmark-handler (record)elfeed-search-bookmark-handler896,35307
(defun elfeed-search-bookmark-make-record ()elfeed-search-bookmark-make-record901,35483
(defun elfeed-search-desktop-save (_desktop-dirname)elfeed-search-desktop-save912,35913
(defun elfeed-search-desktop-restore (_file-name _buffer-name search-filter)elfeed-search-desktop-restore920,36218

elpa/elfeed-3.2.0/elfeed-pkg.el,78
(define-package "elfeed" "3.2.0" "an Emacs Atom/RSS feed reader""elfeed"1,0

elpa/elfeed-3.2.0/elfeed-link.el,127
(defun elfeed-link-store-link ()elfeed-link-store-link20,412
(defun elfeed-link-open (filter-or-id)elfeed-link-open49,1704

elpa/elfeed-3.2.0/elfeed-db.el,3496
(defcustom elfeed-db-directory "~/.elfeed"elfeed-db-directory52,2089
(defvar elfeed-db nilelfeed-db57,2222
(defvar elfeed-db-feeds nilelfeed-db-feeds60,2280
(defvar elfeed-db-entries nilelfeed-db-entries63,2353
(defvar elfeed-db-index nilelfeed-db-index66,2430
(defvar elfeed-db-versionelfeed-db-version69,2527
(defvar elfeed-new-entry-hook ()elfeed-new-entry-hook76,2737
(defvar elfeed-db-update-hook ()elfeed-db-update-hook80,2898
(defvar elfeed-db-unload-hook ()elfeed-db-unload-hook84,3032
(defun elfeed-entry-merge (a b)elfeed-entry-merge97,3471
(defun elfeed-db-get-feed (id)elfeed-db-get-feed113,4121
(defun elfeed-db-get-entry (id)elfeed-db-get-entry121,4354
(defun elfeed-db-compare (a b)elfeed-db-compare126,4468
(defun elfeed-db-set-update-time ()elfeed-db-set-update-time136,4840
(defun elfeed-db-add (entries)elfeed-db-add141,5024
(defun elfeed-entry-feed (entry)elfeed-entry-feed170,6132
(defun elfeed-normalize-tags (tags &rest more-tags)elfeed-normalize-tags174,6254
(defun elfeed-tag-1 (entry &rest tags)elfeed-tag-1179,6489
(defun elfeed-untag-1 (entry &rest tags)elfeed-untag-1185,6692
(defun elfeed-tag (entry-or-entry-list &rest tags)elfeed-tag191,6905
(defun elfeed-untag (entry-or-entry-list &rest tags)elfeed-untag199,7302
(defun elfeed-tagged-p (tag entry)elfeed-tagged-p207,7712
(defun elfeed-db-last-update ()elfeed-db-last-update211,7831
(defmacro with-elfeed-db-visit (entry-and-feed &rest body)with-elfeed-db-visit216,7998
(defun elfeed-feed-entries (feed-or-id)elfeed-feed-entries236,8683
(defun elfeed-apply-hooks-now ()elfeed-apply-hooks-now248,9141
(defmacro elfeed-db-return (&optional value)elfeed-db-return255,9378
(defun elfeed-db-get-all-tags ()elfeed-db-get-all-tags259,9532
(defun elfeed-db-save ()elfeed-db-save271,9932
(defun elfeed-db-save-safe ()elfeed-db-save-safe292,10762
(defun elfeed-db-upgrade (db)elfeed-db-upgrade296,10909
(defun elfeed-db--empty ()elfeed-db--empty340,13019
(defun elfeed-db--dummy ()elfeed-db--dummy348,13305
(defun elfeed-db-load ()elfeed-db-load370,14306
(defun elfeed-db-unload ()elfeed-db-unload406,16161
(defun elfeed-db-ensure ()elfeed-db-ensure418,16497
(defun elfeed-db-size ()elfeed-db-size422,16615
(defun elfeed-meta--plist (thing)elfeed-meta--plist432,16948
(defun elfeed-meta--set-plist (thing plist)elfeed-meta--set-plist439,17206
(defun elfeed-db--plist-fixup (plist)elfeed-db--plist-fixup446,17507
(defun elfeed-meta (thing key &optional default)elfeed-meta452,17688
(defun elfeed-meta--put (thing key value)elfeed-meta--put457,17858
(defvar elfeed-ref-archive nilelfeed-ref-archive469,18322
(defvar elfeed-ref-cache nilelfeed-ref-cache472,18393
(defun elfeed-ref--file (ref)elfeed-ref--file478,18543
(defun elfeed-ref-archive-load ()elfeed-ref-archive-load489,18998
(defun elfeed-ref-archive-ensure ()elfeed-ref-archive-ensure498,19344
(defun elfeed-ref-exists-p (ref)elfeed-ref-exists-p502,19488
(defun elfeed-deref (ref)elfeed-deref509,19762
(defun elfeed-ref (content)elfeed-ref533,20787
(defun elfeed-deref-entry (entry)elfeed-deref-entry550,21480
(defun elfeed-ref-delete (ref)elfeed-ref-delete557,21745
(defun elfeed-db-gc-empty-feeds ()elfeed-db-gc-empty-feeds562,21890
(defun elfeed-db-gc (&optional stats-p)elfeed-db-gc572,22269
(defun elfeed-db-pack ()elfeed-db-pack598,23542
(defun elfeed-db-compact ()elfeed-db-compact626,24654
(defun elfeed-db-gc-safe ()elfeed-db-gc-safe636,25029

elpa/elfeed-3.2.0/elfeed-log.el,662
(defface elfeed-log-date-faceelfeed-log-date-face9,122
(defface elfeed-log-error-level-faceelfeed-log-error-level-face14,265
(defface elfeed-log-warn-level-faceelfeed-log-warn-level-face19,417
(defface elfeed-log-info-level-faceelfeed-log-info-level-face24,573
(defface elfeed-log-debug-level-faceelfeed-log-debug-level-face29,733
(defvar elfeed-log-buffer-name "*elfeed-log*"elfeed-log-buffer-name34,890
(defvar elfeed-log-level 'infoelfeed-log-level37,989
(defun elfeed-log-buffer ()elfeed-log-buffer40,1064
(defun elfeed-log--level-number (level)elfeed-log--level-number49,1365
(defun elfeed-log (level fmt &rest objects)elfeed-log58,1549

elpa/elfeed-3.2.0/elfeed-curl.el,2521
(defcustom elfeed-curl-program-name "curl"elfeed-curl-program-name45,1545
(defcustom elfeed-curl-max-connections 16elfeed-curl-max-connections50,1674
(defcustom elfeed-curl-timeout 30elfeed-curl-timeout55,1794
(defcustom elfeed-curl-extra-arguments ()elfeed-curl-extra-arguments60,1935
(defvar elfeed-curl-queue ()elfeed-curl-queue69,2284
(defvar elfeed-curl-queue-active 0elfeed-curl-queue-active72,2350
(defvar-local elfeed-curl-headers nilelfeed-curl-headers75,2439
(defvar-local elfeed-curl-status-code nilelfeed-curl-status-code78,2515
(defvar-local elfeed-curl-error-message nilelfeed-curl-error-message81,2619
(defvar-local elfeed-curl-location nilelfeed-curl-location84,2714
(defvar-local elfeed-curl--regions ()elfeed-curl--regions87,2801
(defvar-local elfeed-curl--requests ()elfeed-curl--requests90,2889
(defvar-local elfeed-curl--token nilelfeed-curl--token93,2987
(defvar-local elfeed-curl--refcount nilelfeed-curl--refcount96,3065
(defvar elfeed-curl--error-codeselfeed-curl--error-codes99,3162
(defvar elfeed-curl--capabilities-cacheelfeed-curl--capabilities-cache179,7299
(defun elfeed-curl-get-capabilities ()elfeed-curl-get-capabilities183,7451
(defun elfeed-curl-get-version ()elfeed-curl-get-version205,8379
(defun elfeed-curl--token ()elfeed-curl--token210,8611
(defun elfeed-curl--parse-write-out ()elfeed-curl--parse-write-out221,9098
(defun elfeed-curl--narrow (kind n)elfeed-curl--narrow247,10168
(defun elfeed-curl--parse-headers ()elfeed-curl--parse-headers255,10498
(defun elfeed-curl--decode ()elfeed-curl--decode270,11232
(defun elfeed-curl--final-location (location headers)elfeed-curl--final-location279,11696
(defun elfeed-curl--args (url token &optional headers method data)elfeed-curl--args286,12000
(defun elfeed-curl--prepare-response (url n)elfeed-curl--prepare-response309,12924
(defun elfeed-curl--call-callback (buffer n url cb)elfeed-curl--call-callback333,13928
(defun elfeed-curl--fail-callback (buffer cb)elfeed-curl--fail-callback354,14756
(defun elfeed-curl--sentinel (process status)elfeed-curl--sentinel362,15000
(defun elfeed-curl--request-key (url headers method data)elfeed-curl--request-key421,17810
(defun elfeed-curl--queue-consolidate (queue-in)elfeed-curl--queue-consolidate432,18153
(defun elfeed-curl--queue-wrap (cb)elfeed-curl--queue-wrap457,19245
(defvar elfeed-curl--run-queue-queued nilelfeed-curl--run-queue-queued464,19447
(defun elfeed-curl--run-queue ()elfeed-curl--run-queue467,19559

elpa/elfeed-3.2.0/elfeed.el,3086
(defgroup elfeed ()elfeed38,938
(defconst elfeed-version "3.2.0")elfeed-version42,1005
(defcustom elfeed-feeds ()elfeed-feeds44,1040
(defcustom elfeed-feed-functionselfeed-feed-functions63,1720
(defcustom elfeed-use-curlelfeed-use-curl75,2123
(defcustom elfeed-user-agent (format "Emacs Elfeed %s" elfeed-version)elfeed-user-agent81,2310
(defcustom elfeed-initial-tags '(unread)elfeed-initial-tags86,2486
(defvar elfeed-http-error-hooks ()elfeed-http-error-hooks93,2619
(defvar elfeed-parse-error-hooks ()elfeed-parse-error-hooks98,2838
(defvar elfeed-update-hooks ()elfeed-update-hooks103,3069
(defvar elfeed-update-init-hooks ()elfeed-update-init-hooks109,3296
(defvar elfeed-tag-hooks ()elfeed-tag-hooks114,3476
(defvar elfeed-untag-hooks ()elfeed-untag-hooks119,3664
(defvar elfeed--inhibit-update-init-hooks nilelfeed--inhibit-update-init-hooks124,3857
(defun elfeed-queue-count-active ()elfeed-queue-count-active127,3961
(defun elfeed-queue-count-total ()elfeed-queue-count-total133,4143
(defun elfeed-set-max-connections (n)elfeed-set-max-connections139,4331
(defun elfeed-get-max-connections ()elfeed-get-max-connections145,4540
(defun elfeed-set-timeout (seconds)elfeed-set-timeout151,4723
(defun elfeed-get-timeout ()elfeed-get-timeout157,4913
(defun elfeed-is-status-error (status use-curl)elfeed-is-status-error163,5069
(defmacro elfeed-with-fetch (url &rest body)elfeed-with-fetch168,5278
(defun elfeed-unjam ()elfeed-unjam188,6222
(defun elfeed-feed-type (content)elfeed-feed-type204,6751
(defun elfeed-generate-id (&optional content)elfeed-generate-id211,7017
(defun elfeed--atom-content (entry)elfeed--atom-content215,7197
(defvar elfeed-new-entry-parse-hook '()elfeed-new-entry-parse-hook232,7836
(defsubst elfeed--fixup-protocol (protocol url)elfeed--fixup-protocol239,8104
(defsubst elfeed--atom-authors-to-plist (authors)elfeed--atom-authors-to-plist246,8340
(defsubst elfeed--creators-to-plist (creators)elfeed--creators-to-plist263,8980
(defun elfeed-entries-from-atom (url xml)elfeed-entries-from-atom268,9169
(defsubst elfeed--rss-author-to-plist (author)elfeed--rss-author-to-plist336,13153
(defun elfeed-entries-from-rss (url xml)elfeed-entries-from-rss345,13516
(defun elfeed-entries-from-rss1.0 (url xml)elfeed-entries-from-rss1.0404,16863
(defun elfeed-feed-list ()elfeed-feed-list439,18738
(defun elfeed-feed-autotags (url-or-feed)elfeed-feed-autotags453,19300
(defun elfeed-apply-autotags-now ()elfeed-apply-autotags-now461,19663
(defun elfeed-handle-http-error (url status)elfeed-handle-http-error467,19882
(defun elfeed-handle-parse-error (url error)elfeed-handle-parse-error473,20160
(defun elfeed-update-feed (url)elfeed-update-feed479,20435
(defun elfeed-candidate-feeds ()elfeed-candidate-feeds517,22323
(defun elfeed-update ()elfeed-update551,23522
(defun elfeed ()elfeed562,23898
(defun elfeed--parse-opml (xml)elfeed--parse-opml626,26321
(defun elfeed-load-opml (file)elfeed-load-opml634,26668
(defun elfeed-export-opml (file)elfeed-export-opml648,27276

elpa/elfeed-3.2.0/elfeed-autoloads.el,0

elpa/elfeed-3.2.0/elfeed-csv.el,162
(defvar elfeed-csv-nil ""elfeed-csv-nil78,2261
(defun elfeed-csv-quote (sexp)elfeed-csv-quote82,2398
(defun elfeed-csv-insert (seq)elfeed-csv-insert92,2735

elpa/elfeed-3.2.0/xml-query.el,1361
(defun xml-query-strip-ns (tag)xml-query-strip-ns32,878
(defun xml-query--tag-all (match xml)xml-query--tag-all40,1119
(defun xml-query--attrib-all (attrib value xml)xml-query--attrib-all45,1358
(defun xml-query--keyword (matcher xml)xml-query--keyword50,1594
(defun xml-query--symbol (matcher xml)xml-query--symbol56,1845
(defun xml-query--vector (matcher xml)xml-query--vector59,1921
(defun xml-query--list (matchers xml)xml-query--list64,2076
(defun xml-query--append (xml)xml-query--append70,2306
(defun xml-query--stringp (thing)xml-query--stringp74,2439
(defun xml-query-all (query xml)xml-query-all78,2584
(defun xml-query (query xml)xml-query115,4023
(defun xml-query--compile-tag (tag subexp subloop-p)xml-query--compile-tag143,5202
(defun xml-query--compile-attrib (pair subexp subloop-p)xml-query--compile-attrib150,5392
(defun xml-query--compile-keyword (keyword subexp)xml-query--compile-keyword158,5647
(defun xml-query--compile-star (subexp)xml-query--compile-star164,5845
(defun xml-query--compile-top (query input subexp)xml-query--compile-top168,5958
(defun xml-query--compile (query input)xml-query--compile191,6839
(defmacro xml-query* (query sexp)xml-query*196,6999
(defun xml-query-all--compile (query input)xml-query-all--compile205,7304
(defmacro xml-query-all* (query sexp)xml-query-all*211,7507

elpa/elfeed-3.2.0/elfeed-show.el,3141
(defcustom elfeed-show-truncate-long-urls telfeed-show-truncate-long-urls18,351
(defcustom elfeed-show-entry-author telfeed-show-entry-author23,502
(defvar elfeed-show-entry nilelfeed-show-entry28,653
(defvar elfeed-show-entry-switch #'switch-to-bufferelfeed-show-entry-switch31,731
(defvar elfeed-show-entry-delete #'elfeed-kill-bufferelfeed-show-entry-delete35,886
(defvar elfeed-show-refresh-function #'elfeed-show-refresh--mail-styleelfeed-show-refresh-function41,1070
(defvar elfeed-show-mode-mapelfeed-show-mode-map44,1203
(defun elfeed-show-mode ()elfeed-show-mode72,2472
(defalias 'elfeed-show-tag--unreadelfeed-show-tag--unread85,2861
(defun elfeed-insert-html (html &optional base-url)elfeed-insert-html89,2977
(defun elfeed-compute-base (url)elfeed-compute-base112,3982
(defun elfeed--show-format-author (author)elfeed--show-format-author119,4214
(defun elfeed-show-refresh--mail-style ()elfeed-show-refresh--mail-style135,4731
(defun elfeed-show-refresh ()elfeed-show-refresh182,7107
(defcustom elfeed-show-unique-buffers nilelfeed-show-unique-buffers187,7258
(defun elfeed-show--buffer-name (entry)elfeed-show--buffer-name194,7460
(defun elfeed-show-entry (entry)elfeed-show-entry203,7805
(defun elfeed-show-next ()elfeed-show-next212,8116
(defun elfeed-show-prev ()elfeed-show-prev219,8349
(defun elfeed-show-new-live-search ()elfeed-show-new-live-search227,8608
(defun elfeed-show-visit (&optional use-generic-p)elfeed-show-visit234,8790
(defun elfeed-show-yank ()elfeed-show-yank246,9239
(defun elfeed-show-tag (&rest tags)elfeed-show-tag258,9618
(defun elfeed-show-untag (&rest tags)elfeed-show-untag267,9944
(defcustom elfeed-enclosure-default-dir (expand-file-name "~")elfeed-enclosure-default-dir281,10476
(defcustom elfeed-save-multiple-enclosures-without-asking nilelfeed-save-multiple-enclosures-without-asking290,10788
(defvar elfeed-show-enclosure-filename-functionelfeed-show-enclosure-filename-function296,11006
(defun elfeed--download-enclosure (url path)elfeed--download-enclosure300,11161
(defun elfeed--get-enclosure-num (prompt entry &optional multi)elfeed--get-enclosure-num311,11514
(defun elfeed--request-enclosure-path (fname path)elfeed--request-enclosure-path331,12374
(defun elfeed--request-enclosures-dir (path)elfeed--request-enclosures-dir339,12680
(defun elfeed-show-enclosure-filename-remote (_entry url-enclosure)elfeed-show-enclosure-filename-remote347,12990
(defun elfeed-show-save-enclosure-single (&optional entry enclosure-index)elfeed-show-save-enclosure-single354,13276
(defun elfeed-show-save-enclosure-multi (&optional entry)elfeed-show-save-enclosure-multi377,14317
(defun elfeed-show-save-enclosure (&optional multi)elfeed-show-save-enclosure412,16016
(defun elfeed--enclosure-maybe-prompt-index (entry)elfeed--enclosure-maybe-prompt-index421,16318
(defun elfeed-show-play-enclosure (enclosure-index)elfeed-show-play-enclosure427,16552
(defun elfeed-show-add-enclosure-to-playlist (enclosure-index)elfeed-show-add-enclosure-to-playlist438,17026
(defun elfeed-show-next-link ()elfeed-show-next-link448,17500

elpa/elfeed-3.2.0/elfeed-lib.el,2341
(defun elfeed-expose (function &rest args)elfeed-expose18,393
(defun elfeed-goto-line (n)elfeed-goto-line22,562
(defun elfeed-kill-buffer ()elfeed-kill-buffer27,692
(defun elfeed-kill-line ()elfeed-kill-line32,801
(defun elfeed-time-duration (time &optional now)elfeed-time-duration39,993
(defun elfeed-looks-like-url-p (string)elfeed-looks-like-url-p55,1664
(defun elfeed-format-column (string width &optional align)elfeed-format-column61,1898
(defun elfeed-clamp (min value max)elfeed-clamp69,2194
(defun elfeed-valid-regexp-p (regexp)elfeed-valid-regexp-p73,2298
(defun elfeed-cleanup (name)elfeed-cleanup79,2445
(defun elfeed-parse-simple-iso-8601 (string)elfeed-parse-simple-iso-860184,2672
(defun elfeed-new-date-for-entry (old-date new-date)elfeed-new-date-for-entry105,3703
(defun elfeed-float-time (date)elfeed-float-time114,4040
(defun elfeed-xml-parse-region (&optional beg end buffer parse-dtd _parse-ns)elfeed-xml-parse-region133,4780
(defun elfeed-xml-unparse (element)elfeed-xml-unparse155,5795
(defun elfeed-directory-empty-p (dir)elfeed-directory-empty-p171,6360
(defun elfeed-slurp (file &optional literally)elfeed-slurp175,6474
(defvar elfeed-gzip-supported-p--cache :unknownelfeed-gzip-supported-p--cache191,6990
(defun elfeed-gzip-supported-p ()elfeed-gzip-supported-p194,7107
(defun elfeed-libxml-supported-p ()elfeed-libxml-supported-p214,8080
(defun elfeed-keyword->symbol (keyword)elfeed-keyword->symbol221,8350
(defun elfeed-resize-vector (vector length)elfeed-resize-vector227,8555
(defun elfeed-readable-p (value)elfeed-readable-p234,8872
(defun elfeed-strip-properties (string)elfeed-strip-properties240,9038
(defun elfeed-clipboard-get ()elfeed-clipboard-get248,9300
(defun elfeed-get-link-at-point ()elfeed-get-link-at-point263,9897
(defun elfeed-get-url-at-point ()elfeed-get-url-at-point270,10145
(defun elfeed-move-to-first-empty-line ()elfeed-move-to-first-empty-line275,10276
(defun elfeed--shuffle (seq)elfeed--shuffle283,10569
(defun elfeed-split-ranges-to-numbers (str n)elfeed-split-ranges-to-numbers290,10805
(defun elfeed-remove-dot-segments (input)elfeed-remove-dot-segments313,11866
(defun elfeed-update-location (old-url new-url)elfeed-update-location340,12801
(defun elfeed-url-to-namespace (url)elfeed-url-to-namespace372,14106

elpa/plantuml-mode-1.4.1/plantuml-mode.el,4551
(defgroup plantuml-mode nilplantuml-mode80,5073
(defcustom plantuml-jar-pathplantuml-jar-path84,5165
(defcustom plantuml-executable-pathplantuml-executable-path90,5318
(defvar plantuml-mode-hook nil "Standard hook for plantuml-mode.")plantuml-mode-hook96,5449
(defconst plantuml-mode-version "1.4.1" "The plantuml-mode version string.")plantuml-mode-version98,5517
(defvar plantuml-mode-debug-enabled nil)plantuml-mode-debug-enabled100,5595
(defvar plantuml-font-lock-keywords nil)plantuml-font-lock-keywords102,5637
(defvar plantuml-mode-mapplantuml-mode-map104,5679
(defcustom plantuml-java-command "java"plantuml-java-command110,5846
(defcustom plantuml-java-args (list "-Djava.awt.headless=true" "-jar" "--illegal-access=deny")plantuml-java-args115,5970
(defcustom plantuml-jar-args (list "-charset" "UTF-8" )plantuml-jar-args120,6189
(defcustom plantuml-server-url "https://www.plantuml.com/plantuml"plantuml-server-url125,6361
(defcustom plantuml-executable-args (list "-headless")plantuml-executable-args130,6506
(defcustom plantuml-default-exec-mode 'serverplantuml-default-exec-mode135,6681
(defcustom plantuml-suppress-deprecation-warning tplantuml-suppress-deprecation-warning142,6972
(defun plantuml-jar-render-command (&rest arguments)plantuml-jar-render-command147,7140
(defvar plantuml-mode-syntax-tableplantuml-mode-syntax-table155,7526
(defvar plantuml-types nil)plantuml-types167,8005
(defvar plantuml-keywords nil)plantuml-keywords168,8033
(defvar plantuml-preprocessors nil)plantuml-preprocessors169,8064
(defvar plantuml-builtins nil)plantuml-builtins170,8100
(defvar plantuml-kwdList nil "The plantuml keywords.")plantuml-kwdList173,8154
(defvar-local plantuml-exec-mode nilplantuml-exec-mode176,8237
(defun plantuml-set-exec-mode (mode)plantuml-set-exec-mode179,8374
(defun plantuml-get-exec-mode ()plantuml-get-exec-mode194,9111
(defun plantuml-enable-debug ()plantuml-enable-debug199,9260
(defun plantuml-disable-debug ()plantuml-disable-debug204,9413
(defun plantuml-debug (msg)plantuml-debug209,9583
(defun plantuml-download-jar ()plantuml-download-jar220,10007
(defun plantuml-jar-get-language (buf)plantuml-jar-get-language245,11589
(defun plantuml-server-get-language (buf)plantuml-server-get-language255,12097
(defun plantuml-executable-get-language (buf)plantuml-executable-get-language261,12363
(defun plantuml-get-language (mode buf)plantuml-get-language268,12691
(defun plantuml-init (mode)plantuml-init278,13149
(defconst plantuml-preview-buffer "*PLANTUML Preview*")plantuml-preview-buffer315,14669
(defvar plantuml-output-typeplantuml-output-type317,14726
(defun plantuml-read-output-type ()plantuml-read-output-type325,14985
(defun plantuml-set-output-type (type)plantuml-set-output-type341,15533
(defun plantuml-is-image-output-p ()plantuml-is-image-output-p349,15838
(defun plantuml-jar-output-type-opt (output-type)plantuml-jar-output-type-opt353,16007
(defun plantuml-jar-start-process (buf)plantuml-jar-start-process360,16302
(defun plantuml-executable-start-process (buf)plantuml-executable-start-process370,16698
(defun plantuml-update-preview-buffer (prefix buf)plantuml-update-preview-buffer378,17030
(defun plantuml-jar-preview-string (prefix string buf)plantuml-jar-preview-string395,17674
(defun plantuml-server-encode-url (string)plantuml-server-encode-url411,18445
(defun plantuml-server-preview-string (prefix string buf)plantuml-server-preview-string418,18846
(defun plantuml-executable-preview-string (prefix string buf)plantuml-executable-preview-string438,19826
(defun plantuml-exec-mode-preview-string (prefix mode string buf)plantuml-exec-mode-preview-string454,20611
(defun plantuml-preview-string (prefix string)plantuml-preview-string468,21313
(defun plantuml-preview-buffer (prefix)plantuml-preview-buffer482,21909
(defun plantuml-preview-region (prefix begin end)plantuml-preview-region491,22285
(defun plantuml-preview-current-block (prefix)plantuml-preview-current-block504,22913
(defun plantuml-preview (prefix)plantuml-preview516,23414
(defun plantuml-init-once (&optional mode)plantuml-init-once528,23911
(defun plantuml-complete-symbol ()plantuml-complete-symbol644,32638
(defun plantuml-current-block-depth ()plantuml-current-block-depth671,33514
(defun plantuml-indent-line ()plantuml-indent-line692,34264
(define-derived-mode plantuml-mode prog-mode "plantuml"plantuml-mode710,34913
(defun plantuml-deprecation-warning ()plantuml-deprecation-warning725,35586

elpa/plantuml-mode-1.4.1/plantuml-mode-autoloads.el,0

elpa/plantuml-mode-1.4.1/plantuml-mode-pkg.el,283
(define-package "plantuml-mode" "1.4.1" "Major mode for PlantUML" '((dash "2.0.0") (emacs "25.0")) :commit "5889166b6cfe94a37532ea27fc8de13be2ebfd02" :keywords '("uml" "plantuml" "ascii") :authors '(("Zhang Weize (zwz)")) :maintainer '("Carlo Sciolla (skuro)"))"plantuml-mode"2,31

elpa/json-snatcher-1.0.0/json-snatcher-pkg.el,350
(define-package "json-snatcher" "1.0.0" "Grabs the path to JSON values in a JSON file" '((emacs "24")) :commit "c4cecc0a5051bd364373aa499c47a1bb7a5ac51c" :authors '(("Sterling Graham" . "sterlingrgraham@gmail.com")) :maintainer '("Sterling Graham" . "sterlingrgraham@gmail.com") :url "http://github.com/sterlingg/json-snatcher")"json-snatcher"2,31

elpa/json-snatcher-1.0.0/json-snatcher-autoloads.el,0

elpa/json-snatcher-1.0.0/json-snatcher.el,1390
(defvar jsons-curr-token 0jsons-curr-token76,3201
(defvar jsons-parsed (make-hash-table :test 'equal)jsons-parsed78,3283
(defvar jsons-parsed-regions (make-hash-table :test 'equal)jsons-parsed-regions80,3399
(defvar jsons-curr-region () "The node ranges in the current buffer.")jsons-curr-region82,3551
(defvar jsons-path-printer 'jsons-print-path-python "Default jsons path printer")jsons-path-printer83,3622
(defun jsons-consume-token ()jsons-consume-token86,3755
(defun jsons-array (path)jsons-array105,4902
(defun jsons-literal (token path)jsons-literal122,5525
(defun jsons-member (token path)jsons-member130,5892
(defun jsons-number (token path)jsons-number148,6689
(defun jsons-object (path)jsons-object156,7074
(defun jsons-string (token path)jsons-string171,7674
(defun jsons-value (token path array-index)jsons-value181,8109
(defun jsons-get-path ()jsons-get-path207,9402
(defun jsons-is-number (str)jsons-is-number224,10052
(defun jsons-parse ()jsons-parse235,10381
(defun jsons-print-to-buffer (node buffer)jsons-print-to-buffer252,11077
(defun jsons-print-path-jq ()jsons-print-path-jq288,12527
(defun jsons-print-path-python ()jsons-print-path-python310,13273
(defun jsons-print-path ()jsons-print-path328,13893
(defun jsons-put-string (buffer str)jsons-put-string333,14049
(defun jsons-remove-buffer ()jsons-remove-buffer339,14255

elpa/undo-tree-0.6.5/undo-tree-autoloads.el,66
(defvar global-undo-tree-mode nil "\global-undo-tree-mode32,868

elpa/undo-tree-0.6.5/undo-tree-pkg.el,318
(define-package "undo-tree" "0.6.5" "Treat undo history as a tree" 'nil :keywords '("convenience" "files" "undo" "redo" "history" "tree") :authors '(("Toby Cubitt" . "toby-undo-tree@dr-qubit.org")) :maintainer '("Toby Cubitt" . "toby-undo-tree@dr-qubit.org") :url "http://www.dr-qubit.org/emacs.php")"undo-tree"2,31

elpa/undo-tree-0.6.5/undo-tree.el,13559
(defvar buffer-undo-tree nilbuffer-undo-tree844,33387
(defgroup undo-tree nilundo-tree850,33553
(defcustom undo-tree-mode-lighter " Undo-Tree"undo-tree-mode-lighter854,33614
(defcustom undo-tree-incompatible-major-modes '(term-mode)undo-tree-incompatible-major-modes861,33769
(defcustom undo-tree-enable-undo-in-region tundo-tree-enable-undo-in-region868,33983
(defcustom undo-tree-auto-save-history nilundo-tree-auto-save-history879,34318
(defcustom undo-tree-history-directory-alist nilundo-tree-history-directory-alist904,35298
(defcustom undo-tree-visualizer-relative-timestamps tundo-tree-visualizer-relative-timestamps930,36371
(defcustom undo-tree-visualizer-timestamps nilundo-tree-visualizer-timestamps939,36601
(defcustom undo-tree-visualizer-diff nilundo-tree-visualizer-diff950,36937
(defcustom undo-tree-visualizer-lazy-drawing 100undo-tree-visualizer-lazy-drawing960,37248
(defface undo-tree-visualizer-default-faceundo-tree-visualizer-default-face985,38235
(defface undo-tree-visualizer-current-faceundo-tree-visualizer-current-face990,38389
(defface undo-tree-visualizer-active-branch-faceundo-tree-visualizer-active-branch-face995,38560
(defface undo-tree-visualizer-register-faceundo-tree-visualizer-register-face1003,38859
(defface undo-tree-visualizer-unmodified-faceundo-tree-visualizer-unmodified-face1009,39047
(defvar undo-tree-visualizer-parent-buffer nilundo-tree-visualizer-parent-buffer1016,39242
(defvar undo-tree-visualizer-parent-mtime nil)undo-tree-visualizer-parent-mtime1022,39510
(defvar undo-tree-visualizer-spacing nil)undo-tree-visualizer-spacing1027,39748
(defsubst undo-tree-visualizer-calculate-spacing ()undo-tree-visualizer-calculate-spacing1033,39988
(defvar undo-tree-visualizer-initial-node nil)undo-tree-visualizer-initial-node1039,40203
(defvar undo-tree-visualizer-selected-node nil)undo-tree-visualizer-selected-node1044,40437
(defvar undo-tree-visualizer-needs-extending-down nil)undo-tree-visualizer-needs-extending-down1049,40673
(defvar undo-tree-visualizer-needs-extending-up nil)undo-tree-visualizer-needs-extending-up1052,40868
(defvar undo-tree-inhibit-kill-visualizer nil)undo-tree-inhibit-kill-visualizer1058,41187
(defvar undo-tree-insert-face nil)undo-tree-insert-face1061,41297
(defconst undo-tree-visualizer-buffer-name " *undo-tree*")undo-tree-visualizer-buffer-name1064,41360
(defconst undo-tree-diff-buffer-name "*undo-tree Diff*")undo-tree-diff-buffer-name1065,41419
(defvar undo-tree-map nilundo-tree-map1077,41751
(defvar undo-tree-visualizer-mode-map nilundo-tree-visualizer-mode-map1102,42801
(defvar undo-tree-visualizer-selection-mode-map nilundo-tree-visualizer-selection-mode-map1157,45607
(defvar undo-tree-old-undo-menu-item nil)undo-tree-old-undo-menu-item1206,48040
(defun undo-tree-update-menu-bar ()undo-tree-update-menu-bar1208,48083
(defmacro undo-tree-node-p (n)undo-tree-node-p1285,50380
(defmacro undo-tree-region-data-p (r)undo-tree-region-data-p1306,50962
(defmacro undo-tree-node-clear-region-data (node)undo-tree-node-clear-region-data1310,51101
(defmacro undo-tree-node-undo-beginning (node)undo-tree-node-undo-beginning1318,51301
(defmacro undo-tree-node-undo-end (node)undo-tree-node-undo-end1323,51506
(defmacro undo-tree-node-redo-beginning (node)undo-tree-node-redo-beginning1328,51699
(defmacro undo-tree-node-redo-end (node)undo-tree-node-redo-end1333,51904
(defsetf undo-tree-node-undo-beginning (node) (val)undo-tree-node-undo-beginning1339,52098
(defsetf undo-tree-node-undo-end (node) (val)undo-tree-node-undo-end1347,52467
(defsetf undo-tree-node-redo-beginning (node) (val)undo-tree-node-redo-beginning1355,52824
(defsetf undo-tree-node-redo-end (node) (val)undo-tree-node-redo-end1363,53193
(defmacro undo-tree-visualizer-data-p (v)undo-tree-visualizer-data-p1383,53801
(defun undo-tree-node-clear-visualizer-data (node)undo-tree-node-clear-visualizer-data1387,53948
(defmacro undo-tree-node-lwidth (node)undo-tree-node-lwidth1395,54283
(defmacro undo-tree-node-cwidth (node)undo-tree-node-cwidth1400,54484
(defmacro undo-tree-node-rwidth (node)undo-tree-node-rwidth1405,54685
(defmacro undo-tree-node-marker (node)undo-tree-node-marker1410,54886
(defsetf undo-tree-node-lwidth (node) (val)undo-tree-node-lwidth1416,55088
(defsetf undo-tree-node-cwidth (node) (val)undo-tree-node-cwidth1424,55461
(defsetf undo-tree-node-rwidth (node) (val)undo-tree-node-rwidth1432,55834
(defsetf undo-tree-node-marker (node) (val)undo-tree-node-marker1440,56207
(defun undo-tree-register-data-p (data)undo-tree-register-data-p1457,56738
(defun undo-tree-register-data-print-func (data)undo-tree-register-data-print-func1462,56892
(defmacro undo-tree-node-register (node)undo-tree-node-register1466,57038
(defsetf undo-tree-node-register (node) (val)undo-tree-node-register1469,57139
(defun undo-tree-grow (undo)undo-tree-grow1479,57429
(defun undo-tree-grow-backwards (node undo &optional redo)undo-tree-grow-backwards1487,57728
(defun undo-tree-splice-node (node splice)undo-tree-splice-node1497,58128
(defun undo-tree-snip-node (node)undo-tree-snip-node1511,58725
(defun undo-tree-mapc (--undo-tree-mapc-function-- node)undo-tree-mapc1544,60197
(defmacro undo-tree-num-branches ()undo-tree-num-branches1554,60494
(defun undo-tree-position (node list)undo-tree-position1559,60661
(defvar *undo-tree-id-counter* 0)*undo-tree-id-counter*1572,61028
(defmacro undo-tree-generate-id ()undo-tree-generate-id1575,61116
(defun undo-tree-decircle (undo-tree)undo-tree-decircle1583,61436
(defun undo-tree-recircle (undo-tree)undo-tree-recircle1593,61736
(defmacro undo-list-marker-elt-p (elt)undo-list-marker-elt-p1608,62178
(defmacro undo-list-GCd-marker-elt-p (elt)undo-list-GCd-marker-elt-p1611,62248
(defun undo-tree-move-GC-elts-to-pool (elt)undo-tree-move-GC-elts-to-pool1626,62931
(defun undo-tree-restore-GC-elts-from-pool (elt)undo-tree-restore-GC-elts-from-pool1636,63360
(defun undo-list-clean-GCd-elts (undo-list)undo-list-clean-GCd-elts1647,63750
(defun undo-list-pop-changeset (&optional discard-pos)undo-list-pop-changeset1664,64355
(defun undo-tree-copy-list (undo-list)undo-tree-copy-list1690,65430
(defun undo-list-transfer-to-tree ()undo-list-transfer-to-tree1713,66260
(defun undo-list-byte-size (undo-list)undo-list-byte-size1765,68679
(defun undo-list-rebuild-from-tree ()undo-list-rebuild-from-tree1777,68989
(defun undo-tree-oldest-leaf (node)undo-tree-oldest-leaf1819,70374
(defun undo-tree-discard-node (node)undo-tree-discard-node1830,70750
(defun undo-tree-discard-history ()undo-tree-discard-history1903,73871
(defun undo-tree-compute-widths (node)undo-tree-compute-widths1989,77565
(defun undo-tree-node-compute-widths (node)undo-tree-node-compute-widths2007,78299
(defun undo-tree-clear-visualizer-data (tree)undo-tree-clear-visualizer-data2076,81190
(defun undo-tree-node-unmodified-p (node &optional mtime)undo-tree-node-unmodified-p2083,81379
(defvar undo-adjusted-markers nil)undo-adjusted-markers2113,82433
(defun undo-tree-pull-undo-in-region-branch (start end)undo-tree-pull-undo-in-region-branch2116,82470
(defun undo-tree-pull-redo-in-region-branch (start end)undo-tree-pull-redo-in-region-branch2350,92391
(defun undo-tree-adjust-elements-to-elt (node undo-elt &optional below)undo-tree-adjust-elements-to-elt2512,99143
(defun undo-tree-apply-deltas (undo-elt deltas &optional sgn)undo-tree-apply-deltas2536,100156
(defun undo-tree-repeated-undo-in-region-p (start end)undo-tree-repeated-undo-in-region-p2573,101336
(defun undo-tree-repeated-redo-in-region-p (start end)undo-tree-repeated-redo-in-region-p2583,101726
(defalias 'undo-tree-reverting-undo-in-region-pundo-tree-reverting-undo-in-region-p2593,102137
(defalias 'undo-tree-reverting-redo-in-region-pundo-tree-reverting-redo-in-region-p2599,102332
(define-minor-mode undo-tree-modeundo-tree-mode2609,102561
(defun turn-on-undo-tree-mode (&optional print-message)turn-on-undo-tree-mode2638,103411
(defun undo-tree-overridden-undo-bindings-p ()undo-tree-overridden-undo-bindings-p2663,104485
(define-globalized-minor-mode global-undo-tree-modeglobal-undo-tree-mode2683,105281
(defun undo-tree-undo (&optional arg)undo-tree-undo2688,105377
(defun undo-tree-undo-1 (&optional arg preserve-redo preserve-timestamps)undo-tree-undo-12706,106036
(defun undo-tree-redo (&optional arg)undo-tree-redo2797,110199
(defun undo-tree-redo-1 (&optional arg preserve-undo preserve-timestamps)undo-tree-redo-12813,110816
(defun undo-tree-switch-branch (branch)undo-tree-switch-branch2905,114950
(defun undo-tree-set (node &optional preserve-timestamps)undo-tree-set2940,116292
(defun undo-tree-save-state-to-register (register)undo-tree-save-state-to-register2974,117964
(defun undo-tree-restore-state-from-register (register)undo-tree-restore-state-from-register2997,118851
(defun undo-tree-make-history-save-file-name (file)undo-tree-make-history-save-file-name3023,119996
(defun undo-tree-save-history (&optional filename overwrite)undo-tree-save-history3037,120573
(defun undo-tree-load-history (&optional filename noerror)undo-tree-load-history3091,122599
(defun undo-tree-save-history-hook ()undo-tree-save-history-hook3151,124636
(defun undo-tree-load-history-hook ()undo-tree-load-history-hook3156,124809
(defun undo-tree-visualize ()undo-tree-visualize3168,125149
(defun undo-tree-kill-visualizer (&rest _dummy)undo-tree-kill-visualizer3207,126931
(defun undo-tree-draw-tree (undo-tree)undo-tree-draw-tree3217,127300
(defun undo-tree-extend-down (node &optional bottom)undo-tree-extend-down3266,129438
(defun undo-tree-extend-up (node &optional top)undo-tree-extend-up3309,131142
(defun undo-tree-expand-down (from &optional to)undo-tree-expand-down3362,133372
(defun undo-tree-expand-up (from &optional to)undo-tree-expand-up3387,134416
(defun undo-tree-highlight-active-branch (node &optional end)undo-tree-highlight-active-branch3424,136010
(defun undo-tree-draw-node (node &optional current)undo-tree-draw-node3438,136511
(defun undo-tree-draw-subtree (node &optional active-branch)undo-tree-draw-subtree3492,138616
(defun undo-tree-node-char-lwidth (node)undo-tree-node-char-lwidth3623,144081
(defun undo-tree-node-char-rwidth (node)undo-tree-node-char-rwidth3631,144407
(defun undo-tree-insert (str &optional arg)undo-tree-insert3639,144734
(defun undo-tree-move-down (&optional arg)undo-tree-move-down3657,145397
(defun undo-tree-move-up (&optional arg)undo-tree-move-up3675,145953
(defun undo-tree-move-forward (&optional arg)undo-tree-move-forward3681,146102
(defun undo-tree-move-backward (&optional arg)undo-tree-move-backward3707,146885
(defun undo-tree-move-to-parent (node)undo-tree-move-to-parent3713,147049
(defun undo-tree-timestamp-to-stringundo-tree-timestamp-to-string3762,148700
(defun undo-tree-visualize-undo (&optional arg)undo-tree-visualize-undo3832,150742
(defun undo-tree-visualize-redo (&optional arg)undo-tree-visualize-redo3857,151815
(defun undo-tree-visualize-switch-branch-right (arg)undo-tree-visualize-switch-branch-right3882,152925
(defun undo-tree-visualize-switch-branch-left (arg)undo-tree-visualize-switch-branch-left3909,154233
(defun undo-tree-visualizer-quit ()undo-tree-visualizer-quit3917,154527
(defun undo-tree-visualizer-abort ()undo-tree-visualizer-abort3938,155268
(defun undo-tree-visualizer-set (&optional pos)undo-tree-visualizer-set3946,155503
(defun undo-tree-visualizer-mouse-set (pos)undo-tree-visualizer-mouse-set3962,156223
(defun undo-tree-visualize-undo-to-x (&optional x)undo-tree-visualize-undo-to-x3969,156422
(defun undo-tree-visualize-redo-to-x (&optional x)undo-tree-visualize-redo-to-x4021,158329
(defun undo-tree-visualizer-toggle-timestamps ()undo-tree-visualizer-toggle-timestamps4073,160228
(defun undo-tree-visualizer-scroll-left (&optional arg)undo-tree-visualizer-scroll-left4082,160577
(defun undo-tree-visualizer-scroll-right (&optional arg)undo-tree-visualizer-scroll-right4087,160685
(defun undo-tree-visualizer-scroll-up (&optional arg)undo-tree-visualizer-scroll-up4092,160795
(defun undo-tree-visualizer-scroll-down (&optional arg)undo-tree-visualizer-scroll-down4107,161363
(define-minor-mode undo-tree-visualizer-selection-modeundo-tree-visualizer-selection-mode4135,162400
(defun undo-tree-visualizer-select-previous (&optional arg)undo-tree-visualizer-select-previous4159,163318
(defun undo-tree-visualizer-select-next (&optional arg)undo-tree-visualizer-select-next4179,164113
(defun undo-tree-visualizer-select-right (&optional arg)undo-tree-visualizer-select-right4201,164982
(defun undo-tree-visualizer-select-left (&optional arg)undo-tree-visualizer-select-left4222,165796
(defun undo-tree-visualizer-select (pos)undo-tree-visualizer-select4243,166624
(defun undo-tree-visualizer-mouse-select (pos)undo-tree-visualizer-mouse-select4261,167328
(defun undo-tree-visualizer-toggle-diff ()undo-tree-visualizer-toggle-diff4272,167630
(defun undo-tree-visualizer-selection-toggle-diff ()undo-tree-visualizer-selection-toggle-diff4280,167850
(defun undo-tree-visualizer-show-diff (&optional node)undo-tree-visualizer-show-diff4289,168177
(defun undo-tree-visualizer-hide-diff ()undo-tree-visualizer-hide-diff4301,168557
(defun undo-tree-diff (&optional node)undo-tree-diff4308,168804
(defun undo-tree-visualizer-update-diff (&optional node)undo-tree-visualizer-update-diff4335,169820

elpa/org-pomodoro-2.1.0/org-pomodoro-autoloads.el,0

elpa/org-pomodoro-2.1.0/org-pomodoro.el,5497
(defgroup org-pomodoro nilorg-pomodoro48,1675
(defcustom org-pomodoro-long-break-frequency 4org-pomodoro-long-break-frequency53,1780
(defcustom org-pomodoro-ask-upon-killing torg-pomodoro-ask-upon-killing58,1936
(defcustom org-pomodoro-play-sounds torg-pomodoro-play-sounds63,2083
(defcustom org-pomodoro-length 25org-pomodoro-length70,2232
(defcustom org-pomodoro-time-format "%.2m:%.2s"org-pomodoro-time-format75,2349
(defcustom org-pomodoro-format "Pomodoro~%s"org-pomodoro-format80,2505
(defcustom org-pomodoro-audio-player (or (executable-find "aplay")org-pomodoro-audio-player86,2658
(defcustom org-pomodoro-start-sound-p nilorg-pomodoro-start-sound-p93,2898
(defcustom org-pomodoro-start-sound (when load-file-nameorg-pomodoro-start-sound100,3118
(defcustom org-pomodoro-start-sound-args nilorg-pomodoro-start-sound-args107,3444
(defcustom org-pomodoro-finished-sound-p torg-pomodoro-finished-sound-p114,3623
(defcustom org-pomodoro-finished-sound (when load-file-nameorg-pomodoro-finished-sound121,3848
(defcustom org-pomodoro-finished-sound-args nilorg-pomodoro-finished-sound-args128,4185
(defcustom org-pomodoro-killed-sound-p nilorg-pomodoro-killed-sound-p134,4367
(defcustom org-pomodoro-killed-sound nilorg-pomodoro-killed-sound141,4588
(defcustom org-pomodoro-killed-sound-args nilorg-pomodoro-killed-sound-args146,4746
(defcustom org-pomodoro-short-break-sound-p torg-pomodoro-short-break-sound-p152,4929
(defcustom org-pomodoro-clock-break nilorg-pomodoro-clock-break159,5163
(defcustom org-pomodoro-short-break-sound (when load-file-nameorg-pomodoro-short-break-sound164,5289
(defcustom org-pomodoro-short-break-sound-args nilorg-pomodoro-short-break-sound-args171,5632
(defcustom org-pomodoro-long-break-sound-p torg-pomodoro-long-break-sound-p177,5824
(defcustom org-pomodoro-long-break-sound (when load-file-nameorg-pomodoro-long-break-sound184,6055
(defcustom org-pomodoro-long-break-sound-args nilorg-pomodoro-long-break-sound-args191,6408
(defcustom org-pomodoro-ticking-sound-p nilorg-pomodoro-ticking-sound-p197,6595
(defcustom org-pomodoro-ticking-sound (when load-file-nameorg-pomodoro-ticking-sound202,6738
(defcustom org-pomodoro-ticking-sound-args nilorg-pomodoro-ticking-sound-args209,7071
(defcustom org-pomodoro-ticking-sound-states '(:pomodoro :short-break :long-break)org-pomodoro-ticking-sound-states214,7225
(defcustom org-pomodoro-short-break-length 5org-pomodoro-short-break-length220,7412
(defcustom org-pomodoro-short-break-format "Short Break~%s"org-pomodoro-short-break-format225,7543
(defcustom org-pomodoro-long-break-length 20org-pomodoro-long-break-length230,7705
(defcustom org-pomodoro-long-break-format "Long Break~%s"org-pomodoro-long-break-format235,7835
(defcustom org-pomodoro-expiry-time 120org-pomodoro-expiry-time240,7994
(defcustom org-pomodoro-keep-killed-pomodoro-time nilorg-pomodoro-keep-killed-pomodoro-time249,8357
(defvar org-pomodoro-started-hook nilorg-pomodoro-started-hook256,8511
(defvar org-pomodoro-finished-hook nilorg-pomodoro-finished-hook259,8593
(defvar org-pomodoro-killed-hook nilorg-pomodoro-killed-hook262,8677
(defvar org-pomodoro-break-finished-hook nilorg-pomodoro-break-finished-hook265,8757
(defvar org-pomodoro-long-break-finished-hook nilorg-pomodoro-long-break-finished-hook269,8883
(defvar org-pomodoro-short-break-finished-hook nilorg-pomodoro-short-break-finished-hook272,8980
(defvar org-pomodoro-tick-hook nilorg-pomodoro-tick-hook275,9077
(defface org-pomodoro-mode-lineorg-pomodoro-mode-line280,9170
(defface org-pomodoro-mode-line-breakorg-pomodoro-mode-line-break285,9293
(defvar org-pomodoro-mode-line "")org-pomodoro-mode-line292,9453
(defvar org-pomodoro-timer nilorg-pomodoro-timer295,9543
(defvar org-pomodoro-countdown 0org-pomodoro-countdown298,9619
(defvar org-pomodoro-state :noneorg-pomodoro-state301,9709
(defvar org-pomodoro-count 0org-pomodoro-count306,9885
(defvar org-pomodoro-last-clock-in nilorg-pomodoro-last-clock-in309,9971
(defun org-pomodoro-active-p ()org-pomodoro-active-p316,10087
(defun org-pomodoro-expires-p ()org-pomodoro-expires-p320,10211
(defun org-pomodoro-sound-p (type)org-pomodoro-sound-p327,10566
(defun org-pomodoro-sound (type)org-pomodoro-sound338,10993
(defun org-pomodoro-sound-args (type)org-pomodoro-sound-args349,11400
(defun org-pomodoro-play-sound (type)org-pomodoro-play-sound360,11850
(defun org-pomodoro-maybe-play-sound (type)org-pomodoro-maybe-play-sound378,12467
(defun org-pomodoro-format-seconds ()org-pomodoro-format-seconds383,12627
(defun org-pomodoro-update-mode-line ()org-pomodoro-update-mode-line387,12814
(defun org-pomodoro-kill ()org-pomodoro-kill403,13525
(defun org-pomodoro-tick ()org-pomodoro-tick407,13648
(defun org-pomodoro-set (state)org-pomodoro-set425,14467
(defun org-pomodoro-start (&optional state)org-pomodoro-start435,14872
(defun org-pomodoro-reset ()org-pomodoro-reset454,15623
(defun org-pomodoro-notify (title message)org-pomodoro-notify463,15881
(defun org-pomodoro-finished ()org-pomodoro-finished469,16077
(defun org-pomodoro-killed ()org-pomodoro-killed484,16720
(defun org-pomodoro-short-break-finished ()org-pomodoro-short-break-finished495,17126
(defun org-pomodoro-long-break-finished ()org-pomodoro-long-break-finished505,17562
(defun org-pomodoro-extend-last-clock ()org-pomodoro-extend-last-clock515,17993
(defun org-pomodoro (&optional arg)org-pomodoro533,18697

elpa/org-pomodoro-2.1.0/org-pomodoro-pidgin.el,839
(defgroup org-pomodoro-pidgin nilorg-pomodoro-pidgin41,1372
(defcustom org-pomodoro-pidgin-busy-statusorg-pomodoro-pidgin-busy-status46,1501
(defcustom org-pomodoro-pidgin-break-statusorg-pomodoro-pidgin-break-status53,1723
(defun org-pompid--status-type-to-id (type)org-pompid--status-type-to-id58,1864
(defun org-pompid--call-method (method handler &rest args)org-pompid--call-method71,2159
(defun org-pompid--set-status-message (status message)org-pompid--set-status-message86,2655
(defun org-pompid--new-transient-status (type handler)org-pompid--new-transient-status94,2844
(defun org-pompid--activate (status)org-pompid--activate102,3085
(defun org-pompid--change-status-message (type message)org-pompid--change-status-message109,3250
(defun org-pompid--format-message (message)org-pompid--format-message119,3565

elpa/org-pomodoro-2.1.0/org-pomodoro-pkg.el,98
(define-package "org-pomodoro" "2.1.0" "Pomodoro implementation for org-mode.""org-pomodoro"1,0

elpa/neotree-0.5.2/neotree.el,17212
(defconst neo-buffer-name " *NeoTree*"neo-buffer-name45,1231
(defconst neo-dirneo-dir48,1335
(defconst neo-header-height 5)neo-header-height53,1497
(defmacro neo-util--to-bool (obj)neo-util--to-bool84,2475
(defmacro neo-global--with-buffer (&rest body)neo-global--with-buffer88,2577
(defmacro neo-global--with-window (&rest body)neo-global--with-window96,2866
(defmacro neo-global--when-window (&rest body)neo-global--when-window103,3077
(defmacro neo-global--switch-to-buffer ()neo-global--switch-to-buffer109,3293
(defmacro neo-buffer--with-editing-buffer (&rest body)neo-buffer--with-editing-buffer115,3497
(defmacro neo-buffer--with-resizable-window (&rest body)neo-buffer--with-resizable-window124,3776
(defmacro neotree-make-executor (&rest fn-form)neotree-make-executor134,4094
(defgroup neotree nilneotree150,4568
(defgroup neotree-vc-options nilneotree-vc-options155,4650
(defgroup neotree-confirmations nilneotree-confirmations161,4800
(defcustom neo-window-position 'leftneo-window-position166,4922
(defcustom neo-display-action '(neo-default-display-fn)neo-display-action172,5078
(defcustom neo-create-file-auto-open nilneo-create-file-auto-open181,5386
(defcustom neo-banner-message nilneo-banner-message186,5519
(defcustom neo-show-updir-line tneo-show-updir-line191,5632
(defcustom neo-theme 'classicneo-theme196,5745
(defcustom neo-mode-line-type 'neotreeneo-mode-line-type210,6228
(defcustom neo-mode-line-custom-format nilneo-mode-line-custom-format222,6724
(defcustom neo-smart-open nilneo-smart-open228,6897
(defcustom neo-show-hidden-files nilneo-show-hidden-files233,7078
(defcustom neo-autorefresh tneo-autorefresh238,7208
(defcustom neo-window-width 25neo-window-width243,7329
(defcustom neo-window-fixed-size tneo-window-fixed-size248,7445
(defcustom neo-keymap-style 'defaultneo-keymap-style253,7598
(defcustom neo-cwd-line-style 'textneo-cwd-line-style259,7773
(defcustom neo-help-echo-style 'defaultneo-help-echo-style265,7923
(defcustom neo-click-changes-root nilneo-click-changes-root274,8284
(defcustom neo-auto-indent-point nilneo-auto-indent-point279,8447
(defcustom neo-hidden-regexp-listneo-hidden-regexp-list284,8598
(defcustom neo-enter-hook nilneo-enter-hook290,8777
(defcustom neo-after-create-hook nilneo-after-create-hook295,8885
(defcustom neo-vc-integration nilneo-vc-integration300,9008
(defcustom neo-vc-state-char-alistneo-vc-state-char-alist306,9211
(defcustom neo-confirm-change-root 'yes-or-no-pneo-confirm-change-root327,9844
(defcustom neo-confirm-create-file 'yes-or-no-pneo-confirm-create-file334,10185
(defcustom neo-confirm-create-directory 'yes-or-no-pneo-confirm-create-directory341,10500
(defcustom neo-confirm-delete-file 'yes-or-no-pneo-confirm-delete-file348,10825
(defcustom neo-confirm-delete-directory-recursively 'yes-or-no-pneo-confirm-delete-directory-recursively355,11142
(defcustom neo-confirm-kill-buffers-for-files-in-directory 'yes-or-no-pneo-confirm-kill-buffers-for-files-in-directory362,11487
(defcustom neo-toggle-window-keep-p nilneo-toggle-window-keep-p369,11855
(defcustom neo-force-change-root nilneo-force-change-root374,12012
(defcustom neo-filepath-sort-function 'string<neo-filepath-sort-function379,12137
(defface neo-banner-faceneo-banner-face390,12438
(defvar neo-banner-face 'neo-banner-face)neo-banner-face395,12688
(defface neo-header-faceneo-header-face397,12731
(defvar neo-header-face 'neo-header-face)neo-header-face402,12964
(defface neo-root-dir-faceneo-root-dir-face404,13007
(defvar neo-root-dir-face 'neo-root-dir-face)neo-root-dir-face409,13261
(defface neo-dir-link-faceneo-dir-link-face411,13308
(defvar neo-dir-link-face 'neo-dir-link-face)neo-dir-link-face416,13553
(defface neo-file-link-faceneo-file-link-face418,13600
(defvar neo-file-link-face 'neo-file-link-face)neo-file-link-face423,13833
(defface neo-button-faceneo-button-face425,13882
(defvar neo-button-face 'neo-button-face)neo-button-face429,14041
(defface neo-expand-btn-faceneo-expand-btn-face431,14084
(defvar neo-expand-btn-face 'neo-expand-btn-face)neo-expand-btn-face436,14323
(defface neo-vc-default-faceneo-vc-default-face438,14374
(defvar  neo-vc-default-face 'neo-vc-default-face)neo-vc-default-face444,14661
(defface neo-vc-user-faceneo-vc-user-face446,14713
(defvar  neo-vc-user-face 'neo-vc-user-face)neo-vc-user-face450,14919
(defface neo-vc-up-to-date-faceneo-vc-up-to-date-face452,14965
(defvar  neo-vc-up-to-date-face 'neo-vc-up-to-date-face)neo-vc-up-to-date-face457,15222
(defface neo-vc-edited-faceneo-vc-edited-face459,15280
(defvar  neo-vc-edited-face 'neo-vc-edited-face)neo-vc-edited-face464,15530
(defface neo-vc-needs-update-faceneo-vc-needs-update-face466,15580
(defvar  neo-vc-needs-update-face 'neo-vc-needs-update-face)neo-vc-needs-update-face470,15779
(defface neo-vc-needs-merge-faceneo-vc-needs-merge-face472,15841
(defvar  neo-vc-needs-merge-face 'neo-vc-needs-merge-face)neo-vc-needs-merge-face477,16091
(defface neo-vc-unlocked-changes-faceneo-vc-unlocked-changes-face479,16151
(defvar  neo-vc-unlocked-changes-face 'neo-vc-unlocked-changes-face)neo-vc-unlocked-changes-face483,16382
(defface neo-vc-added-faceneo-vc-added-face485,16452
(defvar  neo-vc-added-face 'neo-vc-added-face)neo-vc-added-face490,16701
(defface neo-vc-removed-faceneo-vc-removed-face492,16749
(defvar  neo-vc-removed-face 'neo-vc-removed-face)neo-vc-removed-face496,16944
(defface neo-vc-conflict-faceneo-vc-conflict-face498,16996
(defvar  neo-vc-conflict-face 'neo-vc-conflict-face)neo-vc-conflict-face503,17240
(defface neo-vc-missing-faceneo-vc-missing-face505,17294
(defvar  neo-vc-missing-face 'neo-vc-missing-face)neo-vc-missing-face510,17536
(defface neo-vc-ignored-faceneo-vc-ignored-face512,17588
(defvar  neo-vc-ignored-face 'neo-vc-ignored-face)neo-vc-ignored-face517,17839
(defface neo-vc-unregistered-faceneo-vc-unregistered-face519,17891
(defvar  neo-vc-unregistered-face 'neo-vc-unregistered-face)neo-vc-unregistered-face523,18054
(defvar neo-global--buffer nil)neo-global--buffer529,18136
(defvar neo-global--window nil)neo-global--window531,18169
(defvar neo-global--autorefresh-timer nil)neo-global--autorefresh-timer533,18202
(defvar neo-mode-line-formatneo-mode-line-format535,18246
(defvar-local neo-buffer--start-node nilneo-buffer--start-node555,19118
(defvar-local neo-buffer--start-line nilneo-buffer--start-line558,19208
(defvar-local neo-buffer--cursor-pos (cons nil 1)neo-buffer--cursor-pos561,19292
(defvar-local neo-buffer--last-window-pos (cons nil 1)neo-buffer--last-window-pos565,19450
(defvar-local neo-buffer--show-hidden-file-p nilneo-buffer--show-hidden-file-p568,19559
(defvar-local neo-buffer--expanded-node-list nilneo-buffer--expanded-node-list571,19641
(defvar-local neo-buffer--node-list nilneo-buffer--node-list574,19726
(defvar-local neo-buffer--node-list-1 nilneo-buffer--node-list-1577,19809
(defvar neotree-file-button-keymapneotree-file-button-keymap584,19934
(defvar neotree-dir-button-keymapneotree-dir-button-keymap592,20141
(defvar neotree-mode-mapneotree-mode-map599,20338
(define-derived-mode neotree-mode special-mode "NeoTree"neotree-mode650,23103
(defun neo-global--window-exists-p ()neo-global--window-exists-p679,24171
(defun neo-global--select-window ()neo-global--select-window684,24385
(defun neo-global--get-window (&optional auto-create-p)neo-global--get-window690,24543
(defun neo-default-display-fn (buffer _alist)neo-default-display-fn702,25016
(defun neo-global--create-window ()neo-global--create-window710,25396
(defun neo-global--get-buffer (&optional init-p)neo-global--get-buffer722,25736
(defun neo-global--file-in-root-p (path)neo-global--file-in-root-p735,26207
(defun neo-global--alone-p ()neo-global--alone-p741,26433
(defun neo-global--do-autorefresh ()neo-global--do-autorefresh748,26666
(defun neo-global--open ()neo-global--open754,26827
(defun neo-global--open-dir (path)neo-global--open-dir763,27141
(defun neo-global--open-and-find (path)neo-global--open-and-find769,27324
(defun neo-global--select-mru-window (arg)neo-global--select-mru-window783,27862
(defun neo-global--detach ()neo-global--detach820,29174
(defun neo-global--attach ()neo-global--attach829,29454
(defun neo-global--set-window-width (width)neo-global--set-window-width843,30006
(defun neo-global--reset-width ()neo-global--reset-width849,30217
(defadvice mouse-drag-vertical-linemouse-drag-vertical-line857,30373
(defadvice balance-windowsbalance-windows863,30571
(defun neo-hook--node-first-letter ()neo-hook--node-first-letter902,31717
(defun neo-util--filter (condp lst)neo-util--filter912,31952
(defun neo-util--find (where which)neo-util--find923,32275
(defun neo-util--make-printable-string (string)neo-util--make-printable-string931,32484
(defun neo-util--walk-dir (path)neo-util--walk-dir935,32634
(defun neo-util--hidden-path-filter (node)neo-util--hidden-path-filter945,32967
(defun neo-str--trim-left (s)neo-str--trim-left955,33366
(defun neo-str--trim-right (s)neo-str--trim-right961,33520
(defun neo-str--trim (s)neo-str--trim967,33669
(defun neo-path--expand-name (path &optional current-dir)neo-path--expand-name971,33796
(defun neo-path--shorten (path len)neo-path--shorten978,34059
(defun neo-path--insert-chroot-button (label path face)neo-path--insert-chroot-button990,34507
(defun neo-path--insert-header-buttonized (path)neo-path--insert-header-buttonized998,34694
(defun neo-path--updir (path)neo-path--updir1021,35750
(defun neo-path--join (root &rest dirs)neo-path--join1031,36078
(defun neo-path--file-short-name (file)neo-path--file-short-name1046,36619
(defun neo-path--file-truename (path)neo-path--file-truename1052,36905
(defun neo-path--has-subfile-p (dir)neo-path--has-subfile-p1063,37228
(defun neo-path--match-path-directory (path)neo-path--match-path-directory1070,37423
(defun neo-path--get-working-dir ()neo-path--get-working-dir1085,37941
(defun neo-path--strip (path)neo-path--strip1089,38091
(defun neo-path--path-equal-p (path1 path2)neo-path--path-equal-p1099,38374
(defun neo-path--file-equal-p (file1 file2)neo-path--file-equal-p1104,38565
(defun neo-path--file-in-directory-p (file dir)neo-path--file-in-directory-p1113,38921
(defun neo-util--kill-buffers-for-path (path)neo-util--kill-buffers-for-path1122,39278
(defun neo-util--set-window-width (window n)neo-util--set-window-width1136,39802
(defun neo-point-auto-indent ()neo-point-auto-indent1145,40137
(defun off-p (msg)off-p1152,40385
(defun neo-sort-hidden-last (x y)neo-sort-hidden-last1156,40472
(defun neo-filepath-hidden-p (node)neo-filepath-hidden-p1168,40778
(defun neo-get-unsaved-buffers-from-projectile ()neo-get-unsaved-buffers-from-projectile1175,41031
(defun neo-buffer--newline-and-begin ()neo-buffer--newline-and-begin1195,41599
(defun neo-buffer--get-icon (name)neo-buffer--get-icon1200,41696
(defun neo-buffer--insert-fold-symbol (name &optional node-name)neo-buffer--insert-fold-symbol1209,41995
(defun neo-buffer--save-cursor-pos (&optional node-path line-pos)neo-buffer--save-cursor-pos1243,43836
(defun neo-buffer--goto-cursor-pos ()neo-buffer--goto-cursor-pos1259,44530
(defun neo-buffer--node-list-clear ()neo-buffer--node-list-clear1285,45438
(defun neo-buffer--node-list-set (line-num path)neo-buffer--node-list-set1289,45534
(defun neo-buffer--insert-with-face (content face)neo-buffer--insert-with-face1304,46099
(defun neo-buffer--valid-start-node-p ()neo-buffer--valid-start-node-p1311,46315
(defun neo-buffer--create ()neo-buffer--create1315,46462
(defun neo-buffer--insert-banner ()neo-buffer--insert-banner1326,46754
(defun neo-buffer--insert-root-entry (node)neo-buffer--insert-root-entry1333,46993
(defun neo-buffer--help-echo-message (node-name)neo-buffer--help-echo-message1353,47755
(defun neo-buffer--insert-dir-entry (node depth expanded)neo-buffer--insert-dir-entry1362,47982
(defun neo-buffer--insert-file-entry (node depth)neo-buffer--insert-file-entry1378,48668
(defun neo-vc-for-node (node)neo-vc-for-node1397,49511
(defun neo-buffer--get-nodes (path)neo-buffer--get-nodes1417,50460
(defun neo-buffer--get-node-index (node nodes)neo-buffer--get-node-index1424,50813
(defun neo-buffer--expanded-node-p (node)neo-buffer--expanded-node-p1439,51232
(defun neo-buffer--set-expand (node do-expand)neo-buffer--set-expand1446,51427
(defun neo-buffer--toggle-expand (node)neo-buffer--toggle-expand1457,51853
(defun neo-buffer--insert-tree (path depth)neo-buffer--insert-tree1460,51968
(defun neo-buffer--refresh (save-pos-p &optional non-neotree-buffer)neo-buffer--refresh1475,52533
(defun neo-buffer--post-move ()neo-buffer--post-move1496,53281
(defun neo-buffer--get-button-current-line ()neo-buffer--get-button-current-line1507,53575
(defun neo-buffer--get-filename-current-line (&optional default)neo-buffer--get-filename-current-line1531,54603
(defun neo-buffer--lock-width ()neo-buffer--lock-width1539,54918
(defun neo-buffer--unlock-width ()neo-buffer--unlock-width1544,55064
(defun neo-buffer--rename-node ()neo-buffer--rename-node1548,55178
(defun neo-buffer--copy-node ()neo-buffer--copy-node1565,55834
(defun neo-buffer--select-file-node (file &optional recursive-p)neo-buffer--select-file-node1581,56466
(defun neo-buffer--change-root (root-dir)neo-buffer--change-root1610,57612
(defun neo-buffer--get-nodes-for-select-down-node (path)neo-buffer--get-nodes-for-select-down-node1623,58088
(defun neo-buffer--get-nodes-for-sibling (path)neo-buffer--get-nodes-for-sibling1632,58478
(defun neo-buffer--sibling (path &optional previous)neo-buffer--sibling1643,58870
(defun neo-buffer--execute (arg &optional file-fn dir-fn)neo-buffer--execute1652,59250
(defun neo-buffer--set-show-hidden-file-p (show-p)neo-buffer--set-show-hidden-file-p1673,59999
(defun neo-buffer--forward-line (n)neo-buffer--forward-line1678,60178
(defun neo-mode-line--compute-format (parent index ndirs nfiles)neo-mode-line--compute-format1687,60340
(defun neo-window--init (window buffer)neo-window--init1713,61609
(defun neo-window--zoom (method)neo-window--zoom1721,61824
(defun neo-window--minimize-p ()neo-window--minimize-p1736,62301
(defun neotree-next-line (&optional count)neotree-next-line1744,62463
(defun neotree-previous-line (&optional count)neotree-previous-line1750,62657
(defun neotree-find (&optional path default-path)neotree-find1757,62876
(defun neotree-click-changes-root-toggle ()neotree-click-changes-root-toggle1777,63724
(defun neo-open-dir (full-path &optional arg)neo-open-dir1784,64017
(defun neo-open-dired (full-path &optional arg)neo-open-dired1798,64437
(defun neo-open-file (full-path &optional arg)neo-open-file1806,64658
(defun neo-open-file-vertical-split (full-path arg)neo-open-file-vertical-split1817,65125
(defun neo-open-file-horizontal-split (full-path arg)neo-open-file-horizontal-split1822,65318
(defun neo-open-file-ace-window (full-path arg)neo-open-file-ace-window1827,65513
(defun neotree-change-root ()neotree-change-root1832,65706
(defun neotree-select-up-node ()neotree-select-up-node1843,66133
(defun neotree-select-down-node ()neotree-select-down-node1857,66772
(defun neotree-select-next-sibling-node ()neotree-select-next-sibling-node1894,68556
(defun neotree-select-previous-sibling-node ()neotree-select-previous-sibling-node1901,68856
(defun neotree-create-node (filename)neotree-create-node1908,69166
(defun neotree-delete-node ()neotree-delete-node1943,70787
(defun neotree-rename-node ()neotree-rename-node1982,72353
(defun neotree-copy-node ()neotree-copy-node1987,72454
(defun neotree-hidden-file-toggle ()neotree-hidden-file-toggle1992,72549
(defun neotree-empty-fn ()neotree-empty-fn1997,72710
(defun neotree-refresh (&optional is-auto-refresh)neotree-refresh2001,72808
(defun neotree-stretch-toggle ()neotree-stretch-toggle2012,73199
(defun neotree-projectile-action ()neotree-projectile-action2021,73453
(defun neotree-toggle ()neotree-toggle2037,73874
(defun neotree-show ()neotree-show2045,74045
(defun neotree-hide ()neotree-hide2057,74352
(defun neotree-dir (path)neotree-dir2064,74516
(defalias 'neotree 'neotree-show "Show the NeoTree window.")neotree2071,74704
(defun neo-bc--make-obsolete-message (from to)neo-bc--make-obsolete-message2077,74796
(defun neo-buffer--enter-file (path)neo-buffer--enter-file2080,74912
(defun neo-buffer--enter-dir (path)neo-buffer--enter-dir2083,75024
(defun neotree-enter (&optional arg)neotree-enter2086,75133
(defun neotree-quick-look (&optional arg)neotree-quick-look2092,75318
(defun neotree-enter-vertical-split ()neotree-enter-vertical-split2099,75511
(defun neotree-enter-horizontal-split ()neotree-enter-horizontal-split2104,75718
(defun neotree-enter-ace-window ()neotree-enter-ace-window2109,75931
(defun neotree-copy-filepath-to-yank-ring ()neotree-copy-filepath-to-yank-ring2114,76133
(defun neotree-split-window-sensibly (&optional window)neotree-split-window-sensibly2119,76342

elpa/neotree-0.5.2/neotree-autoloads.el,52
(defalias 'neotree 'neotree-show "\neotree49,1113

elpa/neotree-0.5.2/neotree-pkg.el,86
(define-package "neotree" "0.5.2" "A tree plugin like NerdTree for Vim""neotree"1,0

elpa/popup-imenu-0.6/popup-imenu.el,1237
(defvar popup-imenu-fuzzy-match tpopup-imenu-fuzzy-match42,1296
(defvar popup-imenu-hide-rescan tpopup-imenu-hide-rescan45,1359
(defvar popup-imenu-position 'pointpopup-imenu-position48,1424
(defvar popup-imenu-style 'flatpopup-imenu-style54,1646
(defvar popup-imenu-force-position nilpopup-imenu-force-position59,1830
(defun popup-imenu--filter ()popup-imenu--filter65,2153
(defun popup-imenu--flx-match (query items)popup-imenu--flx-match71,2346
(defun popup-imenu--flx-decorate (things)popup-imenu--flx-decorate90,3108
(defun popup-imenu--propertize (thing)popup-imenu--propertize103,3606
(defun popup-imenu--flatten-index (imenu-index)popup-imenu--flatten-index110,3932
(defun popup-imenu--indent-index (imenu-index &optional indent)popup-imenu--indent-index126,4432
(defun popup-imenu--build-popup-items-in-style (index-items)popup-imenu--build-popup-items-in-style147,5285
(defun popup-imenu--index ()popup-imenu--index157,5616
(defun popup-imenu--pos (menu-height popup-items)popup-imenu--pos165,5824
(defun popup-imenu--point-at-col-row (column row)popup-imenu--point-at-col-row183,6575
(defun popup-imenu--jump-to (selected)popup-imenu--jump-to189,6736
(defun popup-imenu ()popup-imenu199,7089

elpa/popup-imenu-0.6/popup-imenu-autoloads.el,0

elpa/popup-imenu-0.6/popup-imenu-pkg.el,363
(define-package "popup-imenu" "0.6" "imenu index popup" '((dash "2.12.1") (popup "0.5.3") (flx-ido "0.6.1")) :commit "c5e2e69adbd3a630e4cb750965a1aee8c10c1f09" :keywords '("popup" "imenu") :authors '(("Igor Shymko" . "igor.shimko@gmail.com")) :maintainer '("Igor Shymko" . "igor.shimko@gmail.com") :url "https://github.com/ancane/popup-imenu")"popup-imenu"2,31

elpa/use-package-2.4/use-package-autoloads.el,666
(defalias 'use-package-normalize/:bind 'use-package-normalize-binder)use-package-normalize/:bind32,1083
(defalias 'use-package-normalize/:bind* 'use-package-normalize-binder)use-package-normalize/:bind*34,1154
(defalias 'use-package-autoloads/:bind 'use-package-autoloads-mode)use-package-autoloads/:bind36,1226
(defalias 'use-package-autoloads/:bind* 'use-package-autoloads-mode)use-package-autoloads/:bind*38,1295
(defalias 'use-package-normalize/:bind-keymap 'use-package-normalize-binder)use-package-normalize/:bind-keymap45,1497
(defalias 'use-package-normalize/:bind-keymap* 'use-package-normalize-binder)use-package-normalize/:bind-keymap*47,1575

elpa/use-package-2.4/use-package-lint.el,138
(defun use-package-lint-declaration (name plist)use-package-lint-declaration38,1315
(defun use-package-lint ()use-package-lint65,2328

elpa/use-package-2.4/use-package-diminish.el,318
(defun use-package-normalize-diminish (name label arg &optional recursed)use-package-normalize-diminish38,1349
(defun use-package-normalize/:diminish (name keyword args)use-package-normalize/:diminish60,2091
(defun use-package-handler/:diminish (name _keyword arg rest state)use-package-handler/:diminish65,2279

elpa/use-package-2.4/use-package-jump.el,166
(defun use-package-find-require (package)use-package-find-require40,1472
(defun use-package-jump-to-package-form (package)use-package-jump-to-package-form50,1840

elpa/use-package-2.4/use-package-delight.el,290
(defun use-package-normalize-delight (name args)use-package-normalize-delight38,1346
(defun use-package-normalize/:delight (name _keyword args)use-package-normalize/:delight55,1958
(defun use-package-handler/:delight (name _keyword args rest state)use-package-handler/:delight80,2934

elpa/use-package-2.4/use-package-pkg.el,106
(define-package "use-package" "2.4" "A configuration macro for simplifying your .emacs""use-package"1,0

elpa/use-package-2.4/use-package-core.el,13063
(defgroup use-package niluse-package55,2027
(defconst use-package-version "2.4"use-package-version59,2134
(defcustom use-package-keywordsuse-package-keywords62,2205
(defcustom use-package-deferring-keywordsuse-package-deferring-keywords108,3500
(defcustom use-package-ignore-unknown-keywords niluse-package-ignore-unknown-keywords121,3986
(defcustom use-package-verbose niluse-package-verbose128,4259
(defcustom use-package-check-before-init niluse-package-check-before-init140,4822
(defcustom use-package-always-defer niluse-package-always-defer146,5039
(defcustom use-package-always-demand niluse-package-always-demand152,5236
(defcustom use-package-defaultsuse-package-defaults158,5434
(defcustom use-package-merge-key-alistuse-package-merge-key-alist202,7448
(defcustom use-package-hook-name-suffix "-hook"use-package-hook-name-suffix226,8321
(defcustom use-package-minimum-reported-time 0.1use-package-minimum-reported-time233,8574
(defcustom use-package-inject-hooks niluse-package-inject-hooks240,8809
(defcustom use-package-expand-minimally niluse-package-expand-minimally266,9717
(defcustom use-package-form-regexp-evaluse-package-form-regexp-eval281,10329
(defcustom use-package-enable-imenu-support niluse-package-enable-imenu-support294,10843
(defconst use-package-font-lock-keywordsuse-package-font-lock-keywords312,11560
(defcustom use-package-compute-statistics niluse-package-compute-statistics319,11814
(defvar use-package-statistics (make-hash-table))use-package-statistics328,12190
(defsubst use-package-error (msg)use-package-error335,12349
(defsubst use-package-concat (&rest elems)use-package-concat339,12490
(defsubst use-package-non-nil-symbolp (sym)use-package-non-nil-symbolp343,12669
(defsubst use-package-as-symbol (string-or-symbol)use-package-as-symbol346,12741
(defsubst use-package-as-string (string-or-symbol)use-package-as-string352,12982
(defsubst use-package-regex-p (re)use-package-regex-p358,13228
(defun use-package-normalize-regex (re)use-package-normalize-regex363,13372
(defsubst use-package-is-pair (x car-pred cdr-pred)use-package-is-pair370,13628
(defun use-package-as-mode (string-or-symbol)use-package-as-mode378,13907
(defsubst use-package-load-name (name &optional noerror)use-package-load-name387,14267
(defun use-package-hook-injector (name-string keyword body)use-package-hook-injector395,14591
(defun use-package-with-elapsed-timer (text body)use-package-with-elapsed-timer409,15242
(defun use-package-require (name &optional no-require body)use-package-require429,16044
(defun use-package-plist-delete (plist property)use-package-plist-delete450,16695
(defun use-package-plist-delete-first (plist property)use-package-plist-delete-first460,16995
(defsubst use-package-plist-maybe-put (plist property value)use-package-plist-maybe-put472,17364
(defsubst use-package-plist-cons (plist property value)use-package-plist-cons478,17582
(defsubst use-package-plist-append (plist property value)use-package-plist-append482,17772
(defun use-package-split-list (pred xs)use-package-split-list486,17969
(defun use-package-split-list-at-keys (key lst)use-package-split-list-at-keys498,18298
(defun use-package-keyword-index (keyword)use-package-keyword-index508,18607
(defun use-package-normalize-plist (name input &optional plist merge-function)use-package-normalize-plist516,18848
(defun use-package-unalias-keywords (_name args)use-package-unalias-keywords548,20272
(defun use-package-merge-keys (key new old)use-package-merge-keys556,20554
(defun use-package-sort-keywords (plist)use-package-sort-keywords562,20736
(defun use-package-normalize-keywords (name args)use-package-normalize-keywords578,21245
(defun use-package-process-keywords (name plist &optional state)use-package-process-keywords683,26162
(defun use-package-list-insert (elem xs &optional anchor after test)use-package-list-insert712,27437
(defun use-package-only-one (label args f)use-package-only-one741,28457
(defun use-package-as-one (label args f &optional allow-empty)use-package-as-one754,28848
(defun use-package-memoize (f arg)use-package-memoize769,29392
(defsubst use-package-normalize-value (_label arg)use-package-normalize-value781,29879
(defun use-package-normalize-symbols (label arg &optional recursed)use-package-normalize-symbols792,30199
(defun use-package-normalize-symlist (_name keyword args)use-package-normalize-symlist803,30590
(defun use-package-normalize-recursive-symbols (label arg)use-package-normalize-recursive-symbols807,30736
(defun use-package-normalize-recursive-symlist (_name keyword args)use-package-normalize-recursive-symlist819,31117
(defun use-package-normalize-paths (label arg &optional recursed)use-package-normalize-paths823,31283
(defun use-package-normalize-predicate (_name keyword args)use-package-normalize-predicate841,32006
(defun use-package-normalize-form (label args)use-package-normalize-form847,32185
(defun use-package-normalize-forms (_name keyword args)use-package-normalize-forms859,32691
(defun use-package-normalize-pairsuse-package-normalize-pairs862,32807
(defun use-package-recognize-function (v &optional binding additional-pred)use-package-recognize-function887,33665
(defun use-package-normalize-function (v)use-package-normalize-function910,34282
(defun use-package-normalize-commands (args)use-package-normalize-commands928,34804
(defun use-package-normalize-mode (name keyword args)use-package-normalize-mode936,35086
(defun use-package-autoloads-mode (_name _keyword args)use-package-autoloads-mode944,35445
(defun use-package-handle-mode (name alist args rest state)use-package-handle-mode952,35728
(defun use-package-reset-statistics ()use-package-reset-statistics969,36234
(defun use-package-statistics-status (package)use-package-statistics-status973,36341
(defun use-package-statistics-last-event (package)use-package-statistics-last-event980,36667
(defun use-package-statistics-time (package)use-package-statistics-time989,37066
(defun use-package-statistics-convert (package)use-package-statistics-convert996,37407
(defun use-package-report ()use-package-report1010,37873
(define-derived-mode use-package-statistics-mode tabulated-list-modeuse-package-statistics-mode1027,38623
(defun use-package-statistics-gather (keyword name after)use-package-statistics-gather1038,39012
(defun use-package-normalize/:disabled (_name _keyword _arg)use-package-normalize/:disabled1057,39678
(defun use-package-handler/:disabled (name _keyword _arg rest state)use-package-handler/:disabled1060,39769
(defun use-package-normalize-test (_name keyword args)use-package-normalize-test1065,39918
(defalias 'use-package-normalize/:if 'use-package-normalize-test)use-package-normalize/:if1069,40061
(defun use-package-handler/:if (name _keyword pred rest state)use-package-handler/:if1071,40128
(defalias 'use-package-normalize/:when 'use-package-normalize-test)use-package-normalize/:when1075,40284
(defalias 'use-package-handler/:when 'use-package-handler/:if)use-package-handler/:when1077,40353
(defalias 'use-package-normalize/:unless 'use-package-normalize-test)use-package-normalize/:unless1079,40417
(defun use-package-handler/:unless (name _keyword pred rest state)use-package-handler/:unless1081,40488
(defalias 'use-package-normalize/:requires 'use-package-normalize-symlist)use-package-normalize/:requires1087,40666
(defun use-package-handler/:requires (name _keyword requires rest state)use-package-handler/:requires1089,40742
(defun use-package-normalize/:load-path (_name keyword args)use-package-normalize/:load-path1100,41115
(defun use-package-handler/:load-path (name _keyword arg rest state)use-package-handler/:load-path1104,41262
(defalias 'use-package-normalize/:no-require 'use-package-normalize-predicate)use-package-normalize/:no-require1114,41567
(defun use-package-handler/:no-require (name _keyword _arg rest state)use-package-handler/:no-require1116,41647
(defalias 'use-package-normalize/:defines 'use-package-normalize-symlist)use-package-normalize/:defines1121,41784
(defun use-package-handler/:defines (name _keyword _arg rest state)use-package-handler/:defines1123,41859
(defalias 'use-package-normalize/:functions 'use-package-normalize-symlist)use-package-normalize/:functions1128,41995
(defun use-package-handler/:functions (name _keyword _arg rest state)use-package-handler/:functions1130,42072
(defalias 'use-package-normalize/:preface 'use-package-normalize-forms)use-package-normalize/:preface1135,42208
(defun use-package-handler/:preface (name _keyword arg rest state)use-package-handler/:preface1137,42281
(defvar use-package--form)use-package--form1150,42721
(defvar use-package--hush-function #'(lambda (_keyword body) body))use-package--hush-function1151,42748
(defsubst use-package-hush (context keyword body)use-package-hush1153,42817
(defun use-package-normalize/:catch (_name keyword args)use-package-normalize/:catch1158,42985
(defun use-package-handler/:catch (name keyword arg rest state)use-package-handler/:catch1164,43158
(defalias 'use-package-normalize/:interpreter 'use-package-normalize-mode)use-package-normalize/:interpreter1199,44712
(defalias 'use-package-autoloads/:interpreter 'use-package-autoloads-mode)use-package-autoloads/:interpreter1200,44787
(defun use-package-handler/:interpreter (name _keyword arg rest state)use-package-handler/:interpreter1202,44863
(defalias 'use-package-normalize/:mode 'use-package-normalize-mode)use-package-normalize/:mode1207,45020
(defalias 'use-package-autoloads/:mode 'use-package-autoloads-mode)use-package-autoloads/:mode1208,45088
(defun use-package-handler/:mode (name _keyword arg rest state)use-package-handler/:mode1210,45157
(defalias 'use-package-normalize/:magic 'use-package-normalize-mode)use-package-normalize/:magic1215,45301
(defalias 'use-package-autoloads/:magic 'use-package-autoloads-mode)use-package-autoloads/:magic1216,45370
(defun use-package-handler/:magic (name _keyword arg rest state)use-package-handler/:magic1218,45440
(defalias 'use-package-normalize/:magic-fallback 'use-package-normalize-mode)use-package-normalize/:magic-fallback1223,45595
(defalias 'use-package-autoloads/:magic-fallback 'use-package-autoloads-mode)use-package-autoloads/:magic-fallback1224,45673
(defun use-package-handler/:magic-fallback (name _keyword arg rest state)use-package-handler/:magic-fallback1226,45752
(defun use-package-normalize/:hook (name keyword args)use-package-normalize/:hook1231,45915
(defalias 'use-package-autoloads/:hook 'use-package-autoloads-mode)use-package-autoloads/:hook1251,46803
(defun use-package-handler/:hook (name _keyword args rest state)use-package-handler/:hook1253,46872
(defalias 'use-package-normalize/:commands 'use-package-normalize-symlist)use-package-normalize/:commands1274,47578
(defun use-package-handler/:commands (name _keyword arg rest state)use-package-handler/:commands1276,47654
(defalias 'use-package-normalize/:defer 'use-package-normalize-predicate)use-package-normalize/:defer1296,48417
(defun use-package-handler/:defer (name _keyword arg rest state)use-package-handler/:defer1298,48492
(defun use-package-normalize/:after (name keyword args)use-package-normalize/:after1312,49023
(defun use-package-after-count-uses (features*)use-package-after-count-uses1318,49202
(defun use-package-require-after-load (features* body)use-package-require-after-load1335,49900
(defun use-package-handler/:after (name _keyword arg rest state)use-package-handler/:after1354,50676
(defalias 'use-package-normalize/:demand 'use-package-normalize-predicate)use-package-normalize/:demand1367,51122
(defun use-package-handler/:demand (name _keyword _arg rest state)use-package-handler/:demand1369,51198
(defun use-package-normalize/:custom (_name keyword args)use-package-normalize/:custom1374,51330
(defun use-package-handler/:custom (name _keyword args rest state)use-package-handler/:custom1386,51757
(defun use-package-normalize/:custom-face (name-symbol _keyword arg)use-package-normalize/:custom-face1402,52310
(defun use-package-handler/:custom-face (name _keyword args rest state)use-package-handler/:custom-face1419,52907
(defalias 'use-package-normalize/:init 'use-package-normalize-forms)use-package-normalize/:init1427,53184
(defun use-package-handler/:init (name _keyword arg rest state)use-package-handler/:init1429,53254
(defun use-package-normalize/:load (name keyword args)use-package-normalize/:load1448,54000
(defun use-package-handler/:load (name _keyword arg rest state)use-package-handler/:load1454,54178
(defalias 'use-package-normalize/:config 'use-package-normalize-forms)use-package-normalize/:config1462,54431
(defun use-package-handler/:config (name _keyword arg rest state)use-package-handler/:config1464,54503
(defmacro use-package-core (name args)use-package-core1488,55428
(defmacro use-package (name &rest args)use-package1510,56384

elpa/use-package-2.4/use-package-ensure.el,1041
(defgroup use-package-ensure niluse-package-ensure39,1381
(defcustom use-package-always-ensure niluse-package-always-ensure47,1649
(defcustom use-package-always-pin niluse-package-always-pin53,1864
(defcustom use-package-ensure-function 'use-package-ensure-elpause-package-ensure-function59,2074
(defun use-package-normalize/:pin (_name keyword args)use-package-normalize/:pin79,2888
(defun use-package-archive-exists-p (archive)use-package-archive-exists-p93,3310
(defun use-package-pin-package (package archive)use-package-pin-package106,3704
(defun use-package-handler/:pin (name _keyword archive-name rest state)use-package-handler/:pin119,4339
(defvar package-archive-contents)package-archive-contents133,4955
(defun use-package-normalize/:ensure (_name keyword args)use-package-normalize/:ensure136,5005
(defun use-package-ensure-elpa (name args _state &optional _no-refresh)use-package-ensure-elpa155,5704
(defun use-package-handler/:ensure (name _keyword ensure rest state)use-package-handler/:ensure186,7028

elpa/use-package-2.4/use-package-bind-key.el,1233
(defun use-package-autoload-keymap (keymap-symbol package override)use-package-autoload-keymap42,1550
(defun use-package-normalize-binder (name keyword args)use-package-normalize-binder71,2859
(defalias 'use-package-normalize/:bind 'use-package-normalize-binder)use-package-normalize/:bind116,4418
(defalias 'use-package-normalize/:bind* 'use-package-normalize-binder)use-package-normalize/:bind*118,4503
(defalias 'use-package-autoloads/:bind 'use-package-autoloads-mode)use-package-autoloads/:bind125,4761
(defalias 'use-package-autoloads/:bind* 'use-package-autoloads-mode)use-package-autoloads/:bind*127,4844
(defun use-package-handler/:binduse-package-handler/:bind130,4929
(defun use-package-handler/:bind* (name keyword arg rest state)use-package-handler/:bind*140,5309
(defalias 'use-package-normalize/:bind-keymap 'use-package-normalize-binder)use-package-normalize/:bind-keymap146,5494
(defalias 'use-package-normalize/:bind-keymap* 'use-package-normalize-binder)use-package-normalize/:bind-keymap*148,5586
(defun use-package-handler/:bind-keymapuse-package-handler/:bind-keymap151,5680
(defun use-package-handler/:bind-keymap* (name keyword arg rest state)use-package-handler/:bind-keymap*167,6166

elpa/use-package-2.4/use-package.el,0

elpa/smex-3.0/smex-autoloads.el,0

elpa/smex-3.0/smex-pkg.el,348
(define-package "smex" "3.0" "M-x interface with Ido-style fuzzy matching." 'nil :commit "97b4a4d82a4449e3f1a3fa8a93387d6eb0ef9c26" :keywords '("convenience" "usability") :authors '(("Cornelius Mika" . "cornelius.mika@gmail.com")) :maintainer '("Cornelius Mika" . "cornelius.mika@gmail.com") :url "http://github.com/nonsequitur/smex/")"smex"2,31

elpa/smex-3.0/smex.el,3079
(defgroup smex nilsmex32,673
(defcustom smex-auto-update tsmex-auto-update38,866
(defcustom smex-save-file "~/.smex-items"smex-save-file44,1057
(defcustom smex-history-length 7smex-history-length51,1287
(defcustom smex-prompt-string "M-x "smex-prompt-string58,1473
(defcustom smex-flex-matching tsmex-flex-matching63,1585
(defvar smex-initialized-p nil)smex-initialized-p69,1740
(defvar smex-cache)smex-cache70,1772
(defvar smex-ido-cache)smex-ido-cache71,1792
(defvar smex-data)smex-data72,1816
(defvar smex-history)smex-history73,1835
(defvar smex-command-count 0)smex-command-count74,1857
(defvar smex-custom-action nil)smex-custom-action75,1887
(defun smex ()smex81,2037
(defsubst smex-already-running ()smex-already-running92,2307
(defsubst smex-update-and-rerun ()smex-update-and-rerun95,2414
(defun smex-read-and-run (commands &optional initial-input)smex-read-and-run99,2561
(defun smex-major-mode-commands ()smex-major-mode-commands110,3027
(defun smex-completing-read (choices initial-input)smex-completing-read119,3498
(defun smex-prompt-with-prefix-arg ()smex-prompt-with-prefix-arg129,3990
(defun smex-prepare-ido-bindings ()smex-prepare-ido-bindings142,4378
(defun smex-rebuild-cache ()smex-rebuild-cache152,4863
(defun smex-convert-for-ido (command-items)smex-convert-for-ido173,5658
(defun smex-restore-history ()smex-restore-history176,5786
(defun smex-sort-according-to-cache (list)smex-sort-according-to-cache190,6523
(defun smex-update ()smex-update200,6886
(defun smex-detect-new-commands ()smex-detect-new-commands205,6971
(defun smex-auto-update (&optional idle-time)smex-auto-update211,7168
(defun smex-initialize ()smex-initialize218,7446
(defun smex-initialize-ido ()smex-initialize-ido227,7687
(defun smex-load-save-file ()smex-load-save-file232,7871
(defsubst smex-save-file-not-empty-p ()smex-save-file-not-empty-p248,8658
(defun smex-save-history ()smex-save-history251,8752
(defun smex-save-to-file ()smex-save-to-file260,9034
(defun smex-sorting-rules (command-item other-command-item)smex-sorting-rules270,9301
(defun smex-rank (command)smex-rank284,10058
(defun smex-update-counter (command-item)smex-update-counter312,11322
(defun smex-sort-item-at (n)smex-sort-item-at324,11755
(defun smex-detect-position (cell function)smex-detect-position343,12696
(defun smex-remove-nth-cell (n list)smex-remove-nth-cell357,13177
(defun smex-insert-cell (new-cell n list)smex-insert-cell364,13400
(defun smex-do-with-selected-item (fn)smex-do-with-selected-item373,13708
(defun smex-describe-function ()smex-describe-function377,13804
(defun smex-where-is ()smex-where-is383,14010
(defun smex-find-function ()smex-find-function387,14093
(defun smex-extract-commands-from-keymap (map)smex-extract-commands-from-keymap391,14186
(defun smex-parse-keymap (map commands)smex-parse-keymap396,14304
(defun smex-extract-commands-from-features (mode)smex-extract-commands-from-features405,14713
(defun smex-show-unbound-commands ()smex-show-unbound-commands428,15684

elpa/tablist-1.0/tablist-autoloads.el,0

elpa/tablist-1.0/tablist-filter.el,2295
(defvar python-mode-hook)python-mode-hook25,875
(defvar wisent-eoi-term)wisent-eoi-term32,1033
(defvar tablist-filter-binary-operatortablist-filter-binary-operator35,1119
(defvar tablist-filter-unary-operator nil)tablist-filter-unary-operator44,1386
(defvar tablist-filter-wisent-parser nil)tablist-filter-wisent-parser46,1430
(defvar tablist-filter-lexer-regexps nil)tablist-filter-lexer-regexps48,1473
(defvar tablist-filter-wisent-grammartablist-filter-wisent-grammar50,1516
(defun tablist-filter-parser-init (&optional reinitialize interactive)tablist-filter-parser-init77,2232
(defun tablist-filter-wisent-lexer ()tablist-filter-wisent-lexer111,3633
(defun tablist-filter-parse (filter)tablist-filter-parse152,4931
(defun tablist-filter-unparse (filter &optional noerror)tablist-filter-unparse172,5658
(defun tablist-filter-eval (filter id entry &optional named-alist)tablist-filter-eval221,7710
(defun tablist-filter-get-item-by-name (entry col-name)tablist-filter-get-item-by-name258,9226
(defun tablist-filter-op-equal (_id entry op1 op2)tablist-filter-op-equal272,9763
(defun tablist-filter-op-regexp (_id entry op1 op2)tablist-filter-op-regexp277,9969
(defun tablist-filter-op-< (id entry op1 op2)tablist-filter-op-<282,10177
(defun tablist-filter-op-> (id entry op1 op2)tablist-filter-op->286,10344
(defun tablist-filter-op-<= (id entry op1 op2)tablist-filter-op-<=290,10514
(defun tablist-filter-op->= (id entry op1 op2)tablist-filter-op->=294,10696
(defun tablist-filter-op-= (id entry op1 op2)tablist-filter-op-=298,10881
(defun tablist-filter-op-numeric (op _id entry op1 op2)tablist-filter-op-numeric302,11059
(defun tablist-filter-help (&optional temporary)tablist-filter-help307,11255
(defun tablist-filter-negate (filter)tablist-filter-negate351,12780
(defun tablist-filter-push (filter new-filter &optional or-p)tablist-filter-push359,12956
(defun tablist-filter-pop (filter)tablist-filter-pop370,13284
(defun tablist-filter-map (fn filter)tablist-filter-map385,13721
(defvar tablist-filter-edit-history nil)tablist-filter-edit-history398,13997
(defvar tablist-filter-edit-display-help t)tablist-filter-edit-display-help399,14038
(defun tablist-filter-edit-filter (prompt &optionaltablist-filter-edit-filter401,14083

elpa/tablist-1.0/tablist.el,10836
(defmacro tablist-save-marks (&rest body)tablist-save-marks45,1338
(defmacro tablist-with-remembering-entry (&rest body)tablist-with-remembering-entry68,2148
(defmacro tablist-with-filter-displayed (&rest body)tablist-with-filter-displayed111,3857
(defvar tablist-mode-filter-maptablist-mode-filter-map124,4216
(defvar tablist-mode-mark-maptablist-mode-mark-map143,5034
(defvar tablist-mode-regexp-maptablist-mode-regexp-map152,5368
(defvar tablist-minor-mode-maptablist-minor-mode-map158,5559
(defvar tablist-mode-maptablist-mode-map188,6848
(defvar tablist-umark-filtered-entries t)tablist-umark-filtered-entries208,7529
(defvar tablist-marker-char dired-marker-chartablist-marker-char209,7571
(defvar tablist-marker-face 'dired-marktablist-marker-face211,7654
(defvar tablist-marked-face  'dired-markedtablist-marked-face213,7737
(defvar-local tablist-operations-function niltablist-operations-function217,7840
(defvar-local tablist-major-columns niltablist-major-columns266,9332
(defvar-local tablist-current-filter nil)tablist-current-filter270,9428
(defvar-local tablist-filter-suspended nil)tablist-filter-suspended271,9470
(defvar tablist-named-filter nil)tablist-named-filter272,9514
(defvar tablist-column-name-history nil)tablist-column-name-history275,9570
(defvar tablist-selection-changed-functions niltablist-selection-changed-functions278,9621
(defvar-local tablist-context-window nil)tablist-context-window282,9748
(defvar-local tablist-context-window-function nil)tablist-context-window-function283,9790
(defvar tablist-context-window-display-actiontablist-context-window-display-action284,9841
(defvar savehist-additional-variables)savehist-additional-variables294,10049
(define-minor-mode tablist-minor-modetablist-minor-mode300,10237
(define-derived-mode tablist-mode tabulated-list-mode "TL"tablist-mode307,10452
(defun tablist-init (&optional disable)tablist-init310,10530
(defun tablist-quit ()tablist-quit334,11534
(defvar-local tablist-selected-id nil)tablist-selected-id339,11623
(defvar tablist-edit-column-minor-mode)tablist-edit-column-minor-mode340,11662
(defun tablist-selection-changed-handler ()tablist-selection-changed-handler342,11703
(defvar tablist-context-window-update--timer nil)tablist-context-window-update--timer352,12053
(defun tablist-context-window-update (&optional id)tablist-context-window-update354,12104
(defun tablist-display-context-window ()tablist-display-context-window375,13196
(defun tablist-hide-context-window ()tablist-hide-context-window388,13621
(defun tablist-toggle-context-window ()tablist-toggle-context-window395,13847
(defun tablist-revert ()tablist-revert405,14043
(defun tablist-major-columns ()tablist-major-columns412,14231
(defun tablist-put-mark (&optional pos)tablist-put-mark419,14469
(defun tablist-mark-forward (&optional arg interactive)tablist-mark-forward459,15983
(defun tablist-mark-backward (&optional arg interactive)tablist-mark-backward487,16813
(defun tablist-unmark-forward (&optional arg interactive)tablist-unmark-forward495,17068
(defun tablist-unmark-backward (&optional arg interactive)tablist-unmark-backward504,17340
(defun tablist-flag-forward (&optional arg interactive)tablist-flag-forward513,17615
(defun tablist-change-marks (old new)tablist-change-marks522,17899
(defun tablist-unmark-all-marks (&optional marks interactive)tablist-unmark-all-marks549,18805
(defun tablist-toggle-marks ()tablist-toggle-marks577,19722
(defun tablist-get-marked-items (&optional arg distinguish-one-marked)tablist-get-marked-items598,20353
(defun tablist-mark-items-regexp (column-name regexp)tablist-mark-items-regexp610,20816
(defun tablist-mark-items-numeric (binop column-name operand)tablist-mark-items-numeric618,21083
(defun tablist-map-over-marks (fn &optional arg show-progresstablist-map-over-marks629,21478
(defun tablist-marker-regexp (&optional marks)tablist-marker-regexp686,23829
(defun tablist-get-mark-state ()tablist-get-mark-state694,24135
(defun tablist-put-mark-state (state)tablist-put-mark-state707,24575
(defun tablist-mark-prompt (arg items)tablist-mark-prompt717,24903
(defun tablist-forward-entry (&optional n)tablist-forward-entry739,25663
(defun tablist-next-line (&optional n)tablist-next-line756,26102
(defun tablist-previous-line (&optional n)tablist-previous-line776,26669
(defun tablist-repeat-over-lines (arg function)tablist-repeat-over-lines780,26769
(defun tablist-move-to-column (n)tablist-move-to-column803,27572
(defun tablist-move-to-major-column (&optional first-skip-invisible-p)tablist-move-to-major-column818,28144
(defun tablist-forward-column (n)tablist-forward-column825,28404
(defun tablist-backward-column (n)tablist-backward-column850,29266
(defun tablist-skip-invisible-entries (&optional backward)tablist-skip-invisible-entries856,29411
(defun tablist-yes-or-no-p (operation arg items)tablist-yes-or-no-p886,30274
(defun tablist-operation-available-p (op)tablist-operation-available-p908,31024
(defun tablist-do-delete (&optional arg)tablist-do-delete913,31218
(defun tablist-do-flagged-delete (&optional interactive)tablist-do-flagged-delete925,31677
(defun tablist-do-kill-lines (&optional arg interactive)tablist-do-kill-lines936,32056
(defun tablist-do-operation (arg fn operation &optional delete-p revert-p)tablist-do-operation951,32589
(defvar tablist-edit-column-minor-mode-maptablist-edit-column-minor-mode-map976,33436
(define-minor-mode tablist-edit-column-minor-modetablist-edit-column-minor-mode991,34221
(defun tablist-edit-column (&optional n)tablist-edit-column1006,34759
(defun tablist-edit-column-quit ()tablist-edit-column-quit1054,36474
(defun tablist-edit-column-commit (&optional abandon-edit)tablist-edit-column-commit1058,36560
(defun tablist-edit-column-complete ()tablist-edit-column-complete1091,37886
(defun tablist-column-editable (n)tablist-column-editable1110,38684
(defun tablist-assert-column-editable (n)tablist-assert-column-editable1114,38826
(defun tablist-edit-column-constrain-point ()tablist-edit-column-constrain-point1123,39190
(defun tablist-edit-column-bounds (&optional skip-final-space)tablist-edit-column-bounds1134,39569
(defun tablist-edit-column-mark-field ()tablist-edit-column-mark-field1159,40442
(defun tablist-find-entry (&optional id)tablist-find-entry1165,40597
(defun tablist-column-property (n prop)tablist-column-property1177,40895
(defun tablist-current-column ()tablist-current-column1182,41004
(defun tablist-column-offsets ()tablist-column-offsets1195,41406
(defun tablist-pretty-print-entry (item)tablist-pretty-print-entry1213,41956
(defun tablist--save-face-property (beg end)tablist--save-face-property1218,42109
(defun tablist--restore-face-property (beg end)tablist--restore-face-property1226,42486
(defun tablist-copy-text-property (beg end from to)tablist-copy-text-property1230,42668
(defun tablist-read-column-name (arg &optional prompt default)tablist-read-column-name1244,43074
(defun tablist-column-name (n)tablist-column-name1281,44283
(defun tablist-column-names ()tablist-column-names1289,44511
(defun tablist-nth-entry (n &optional entry)tablist-nth-entry1294,44681
(defun tablist-major-column-name ()tablist-major-column-name1304,44951
(defun tablist-export-csv (&optional separator always-quote-ptablist-export-csv1308,45088
(defun tablist-enlarge-column (&optional column width)tablist-enlarge-column1369,47274
(defun tablist-shrink-column (&optional column width)tablist-shrink-column1395,48211
(defun tablist-sort (&optional column)tablist-sort1404,48428
(defun tablist-read-filter-name (prompt)tablist-read-filter-name1489,51427
(defun tablist-apply-filter (&optional filter)tablist-apply-filter1501,51817
(defadvice tabulated-list-print (after tabulated-list activate)tabulated-list-print1518,52406
(defun tablist-eval-filter (filter)tablist-eval-filter1524,52599
(defun tablist-map-with-filter (fn filter &optional show-progresstablist-map-with-filter1531,52776
(defun tablist-push-filter (filter &optional interactive or-p)tablist-push-filter1561,53970
(defun tablist-pop-filter (&optional n interactive)tablist-pop-filter1570,54237
(defun tablist-negate-filter (&optional interactive)tablist-negate-filter1586,54725
(defun tablist-toggle-first-filter-logic ()tablist-toggle-first-filter-logic1596,55019
(defun tablist-suspend-filter (&optional flag)tablist-suspend-filter1610,55424
(defun tablist-read-regexp-filter (operation arg)tablist-read-regexp-filter1622,55837
(defun tablist-read-equal-filter (operation arg)tablist-read-equal-filter1632,56150
(defun tablist-read-numeric-filter (operation arg)tablist-read-numeric-filter1638,56357
(defun tablist-push-regexp-filter (column-name regexp)tablist-push-regexp-filter1662,57304
(defun tablist-push-equal-filter (column-name string)tablist-push-equal-filter1674,57717
(defun tablist-push-numeric-filter (op column-name 2nd-arg)tablist-push-numeric-filter1686,58136
(defun tablist-push-named-filter (name)tablist-push-named-filter1698,58555
(defun tablist-delete-named-filter (name &optional mode)tablist-delete-named-filter1710,58933
(defun tablist-name-current-filter (name)tablist-name-current-filter1730,59566
(defun tablist-deconstruct-named-filter ()tablist-deconstruct-named-filter1747,60105
(defun tablist-filter-names (&optional mode)tablist-filter-names1766,60682
(defun tablist-get-named-filter (name &optional mode)tablist-get-named-filter1770,60826
(defun tablist-put-named-filter (name filter &optional mode)tablist-put-named-filter1775,60997
(defun tablist-validate-named-filter (filter)tablist-validate-named-filter1788,61442
(defun tablist-edit-filter ()tablist-edit-filter1797,61744
(defun tablist-clear-filter ()tablist-clear-filter1808,62041
(defconst tablist-display-filter-mode-line-tag nil)tablist-display-filter-mode-line-tag1816,62178
(defun tablist-display-filter (&optional flag)tablist-display-filter1818,62231
(defun tablist-display-filter-temporarily ()tablist-display-filter-temporarily1851,63653
(defun tablist-filter-set-entry-hidden (flag &optional pos)tablist-filter-set-entry-hidden1858,63787
(defun tablist-filter-hide-entry (&optional pos)tablist-filter-hide-entry1868,64060
(defun tablist-filter-unhide-entry (&optional pos)tablist-filter-unhide-entry1872,64169
(defun tablist-filter-unhide-buffer ()tablist-filter-unhide-buffer1875,64266
(defun tablist-window-attach (awindow &optional window)tablist-window-attach1881,64415
(defun tablist-display-buffer-split-below-and-attach (buf alist)tablist-display-buffer-split-below-and-attach1907,65511
(defun tablist-generate-sorter (column compare-fn &optional read-fn)tablist-generate-sorter1923,66092

elpa/tablist-1.0/tablist-pkg.el,77
(define-package "tablist" "1.0" "Extended tabulated-list-mode""tablist"1,0

elpa/pcache-0.4.2/pcache-autoloads.el,0

elpa/pcache-0.4.2/pcache-pkg.el,261
(define-package "pcache" "0.4.2" "persistent caching for Emacs." '((eieio "1.3")) :commit "025ef2411fa1bf82a9ac61dfdb7bd4cedaf2d740" :authors '(("Yann Hodique" . "yann.hodique@gmail.com")) :maintainer '("Yann Hodique" . "yann.hodique@gmail.com"))"pcache"2,31

elpa/pcache-0.4.2/pcache.el,1704
(defvar pcache-directorypcache-directory59,2009
(defvar *pcache-repositories* (make-hash-table :test 'equal))*pcache-repositories*64,2131
(defconst pcache-default-save-delay 300)pcache-default-save-delay66,2194
(defconst pcache-internal-version-constant "0.4")pcache-internal-version-constant68,2236
(defconst pcache-version-constantpcache-version-constant70,2287
(defclass pcache-repository (eieio-persistent eieio-named)pcache-repository73,2389
(defvar *pcache-repository-name* nil)*pcache-repository-name*84,2912
(defmethod constructor :static ((cache pcache-repository) &rest args)constructor86,2951
(defun pcache-hash-table-values (h)pcache-hash-table-values115,4196
(defun pcache-validate-repo (cache)pcache-validate-repo120,4309
(defclass pcache-entry ()pcache-entry133,4780
(defmethod pcache-entry-valid-p ((entry pcache-entry))pcache-entry-valid-p140,5023
(defmethod pcache-get ((cache pcache-repository) key &optional default)pcache-get146,5236
(defmethod pcache-has ((cache pcache-repository) key)pcache-has156,5539
(defmethod pcache-put ((cache pcache-repository) key value &optional ttl)pcache-put164,5809
(defmethod pcache-invalidate ((cache pcache-repository) key)pcache-invalidate179,6371
(defmethod pcache-clear ((cache pcache-repository))pcache-clear184,6522
(defmethod pcache-purge-invalid ((cache pcache-repository))pcache-purge-invalid195,7049
(defmethod pcache-save ((cache pcache-repository) &optional force)pcache-save203,7313
(defmethod pcache-map ((cache pcache-repository) func)pcache-map213,7759
(defun pcache-kill-emacs-hook ()pcache-kill-emacs-hook217,7881
(defun pcache-destroy-repository (name)pcache-destroy-repository227,8154

elpa/hydra-0.15.0/hydra-autoloads.el,0

elpa/hydra-0.15.0/hydra.el,7411
(defvar hydra-curr-map nilhydra-curr-map87,3190
(defvar hydra-curr-on-exit nilhydra-curr-on-exit90,3263
(defvar hydra-curr-foreign-keys nilhydra-curr-foreign-keys93,3345
(defvar hydra-curr-body-fn nilhydra-curr-body-fn96,3423
(defvar hydra-deactivate nilhydra-deactivate99,3497
(defvar hydra-amaranth-warn-message "An amaranth Hydra can only exit through a blue head"hydra-amaranth-warn-message103,3646
(defun hydra-set-transient-map (keymap on-exit &optional foreign-keys)hydra-set-transient-map106,3855
(defun hydra--clearfun ()hydra--clearfun125,4552
(defvar hydra--ignore nilhydra--ignore142,5227
(defvar hydra--input-method-function nilhydra--input-method-function145,5306
(defun hydra-disable ()hydra-disable148,5400
(defun hydra-amaranth-warn ()hydra-amaranth-warn188,6931
(defgroup hydra nilhydra194,7089
(defcustom hydra-is-helpful thydra-is-helpful199,7186
(defcustom hydra-default-hint ""hydra-default-hint204,7319
(defun hydra-posframe-show (str)hydra-posframe-show214,7625
(defun hydra-posframe-hide ()hydra-posframe-hide221,7789
(defvar hydra-hint-display-alisthydra-hint-display-alist224,7859
(defcustom hydra-hint-display-type 'lvhydra-hint-display-type230,8129
(defcustom hydra-lv thydra-lv242,8474
(defcustom hydra-verbose nilhydra-verbose246,8593
(defcustom hydra-key-format-spec "%s"hydra-key-format-spec250,8711
(defcustom hydra-doc-format-spec "%s"hydra-doc-format-spec255,8905
(defcustom hydra-look-for-remap nilhydra-look-for-remap259,9029
(defface hydra-face-redhydra-face-red271,9451
(defface hydra-face-bluehydra-face-blue277,9613
(defface hydra-face-amaranthhydra-face-amaranth285,9864
(defface hydra-face-pinkhydra-face-pink290,10040
(defface hydra-face-tealhydra-face-teal295,10203
(defun hydra-add-font-lock ()hydra-add-font-lock301,10390
(defvar hydra-base-maphydra-base-map332,11584
(defun hydra--universal-argument (arg)hydra--universal-argument360,12890
(defun hydra--digit-argument (arg)hydra--digit-argument369,13178
(defun hydra--negative-argument (arg)hydra--negative-argument388,13915
(defvar hydra-repeat--prefix-arg nilhydra-repeat--prefix-arg396,14155
(defvar hydra-repeat--command nilhydra-repeat--command399,14237
(defun hydra-repeat (&optional arg)hydra-repeat402,14313
(defun hydra--callablep (x)hydra--callablep415,14799
(defun hydra--make-callable (x)hydra--make-callable421,14943
(defun hydra-plist-get-default (plist prop default)hydra-plist-get-default434,15341
(defun hydra--head-property (h prop &optional default)hydra--head-property445,15692
(defun hydra--head-set-property (h prop value)hydra--head-set-property450,15895
(defun hydra--head-has-property (h prop)hydra--head-has-property454,16053
(defun hydra--body-foreign-keys (body)hydra--body-foreign-keys458,16179
(defun hydra--body-exit (body)hydra--body-exit467,16440
(defun hydra--normalize-body (body)hydra--normalize-body476,16660
(defalias 'hydra--imf #'list)hydra--imf491,17373
(defun hydra-default-pre ()hydra-default-pre493,17404
(defvar hydra-timeout-timer (timer-create)hydra-timeout-timer502,17803
(defvar hydra-message-timer (timer-create)hydra-message-timer505,17879
(defvar hydra--work-around-dedicated thydra--work-around-dedicated508,17948
(defun hydra-keyboard-quit ()hydra-keyboard-quit512,18103
(defvar hydra-head-format "[%s]: "hydra-head-format525,18493
(defvar hydra-key-doc-function 'hydra-key-doc-function-defaulthydra-key-doc-function528,18584
(defun hydra-key-doc-function-default (key key-width doc doc-width)hydra-key-doc-function-default531,18696
(defun hydra--to-string (x)hydra--to-string538,19025
(defun hydra--eval-and-format (x)hydra--eval-and-format543,19095
(defun hydra--hint-heads-wocol (body heads)hydra--hint-heads-wocol551,19281
(defun hydra--hint (body heads)hydra--hint603,21320
(defvar hydra-fontify-head-function nilhydra-fontify-head-function619,22173
(defun hydra-fontify-head-default (head body)hydra-fontify-head-default622,22274
(defun hydra-fontify-head-greyscale (head _body)hydra-fontify-head-greyscale651,23298
(defun hydra-fontify-head (head body)hydra-fontify-head659,23549
(defun hydra--strip-align-markers (str)hydra--strip-align-markers664,23731
(defvar hydra-docstring-keys-translate-alisthydra-docstring-keys-translate-alist675,24121
(defconst hydra-width-spec-regex " ?-?[0-9]*?"hydra-width-spec-regex684,24329
(defvar hydra-key-regex "\\[\\|]\\|[-\\[:alnum:] ~.,;:/|?<>={}*+#%@!&^↑↓←→⌫⌦⏎'`()\"$]+?"hydra-key-regex687,24436
(defun hydra--format (_name body docstring heads)hydra--format690,24588
(defun hydra--format-1 (docstring rest varlist)hydra--format-1773,28673
(defun hydra--complain (format-string &rest args)hydra--complain803,29827
(defun hydra--doc (body-key body-name heads)hydra--doc809,30059
(defun hydra--call-interactively-remap-maybe (cmd)hydra--call-interactively-remap-maybe825,30563
(defun hydra--call-interactively (cmd name)hydra--call-interactively835,30958
(defun hydra--make-defun (name body doc headhydra--make-defun845,31315
(defvar hydra-props-alist nil)hydra-props-alist906,34023
(defun hydra-set-property (name key val)hydra-set-property908,34055
(defun hydra-get-property (name key)hydra-get-property920,34466
(defun hydra-show-hint (hint caller)hydra-show-hint928,34702
(defmacro hydra--make-funcall (sym)hydra--make-funcall940,35124
(defun hydra--head-name (h name)hydra--head-name945,35281
(defun hydra--delete-duplicates (heads)hydra--delete-duplicates960,35892
(defun hydra--pad (lst n)hydra--pad977,36596
(defmacro hydra-multipop (lst n)hydra-multipop984,36766
(defun hydra--matrix (lst rows cols)hydra--matrix994,37044
(defun hydra--cell (fstr names)hydra--cell1003,37311
(defun hydra--vconcat (strs &optional joiner)hydra--vconcat1024,38007
(defvar hydra-cell-format "% -20s %% -8`%s"hydra-cell-format1039,38420
(defun hydra--table (names rows cols &optional cell-formats)hydra--table1042,38510
(defun hydra-reset-radios (names)hydra-reset-radios1063,39253
(defun hydra--normalize-heads (heads)hydra--normalize-heads1070,39538
(defun hydra--sort-heads (normalized-heads)hydra--sort-heads1081,39992
(defun hydra--pad-heads (heads-groups padding-head)hydra--pad-heads1103,41486
(defun hydra--generate-matrix (heads-groups)hydra--generate-matrix1114,42115
(defun hydra-interpose (x lst)hydra-interpose1138,43655
(defun hydra--hint-row (heads body)hydra--hint-row1146,43843
(defun hydra--hint-from-matrix (body heads-matrix)hydra--hint-from-matrix1165,44665
(defun hydra--hint-from-matrix-1 (body heads-matrix)hydra--hint-from-matrix-11175,45132
(defun hydra-idle-message (secs hint name)hydra-idle-message1187,45611
(defun hydra-timeout (secs &optional function)hydra-timeout1200,46043
(defmacro defhydra (name body &optional docstring &rest heads)defhydra1217,46589
(defmacro defhydra+ (name body &optional docstring &rest heads)defhydra+1434,56423
(defun hydra--prop (name prop-name)hydra--prop1449,56961
(defmacro defhydradio (name _body &rest heads)defhydradio1452,57063
(defun hydra--radio (parent head)hydra--radio1475,57871
(defun hydra--quote-maybe (x)hydra--quote-maybe1486,58285
(defun hydra--cycle-radio (sym)hydra--cycle-radio1495,58450
(defvar hydra-pause-ring (make-ring 10)hydra-pause-ring1513,58974
(defun hydra-pause-resume ()hydra-pause-resume1516,59044

elpa/hydra-0.15.0/hydra-ox.el,343
(defhydradio hydra-ox ()hydra-ox38,1322
(defhydra hydra-ox-html (:color blue)hydra-ox-html45,1584
(defhydra hydra-ox-latex (:color blue)hydra-ox-latex67,2270
(defhydra hydra-ox-text (:color blue)hydra-ox-text76,2593
(defhydra hydra-ox ()hydra-ox106,3394
(define-key org-mode-map (kbd "C-c C-,") 'hydra-ox/body)org-mode-map123,4039

elpa/hydra-0.15.0/hydra-pkg.el,80
(define-package "hydra" "0.15.0" "Make bindings that stick around.""hydra"1,0

elpa/hydra-0.15.0/hydra-examples.el,1056
(defun hydra-vi/pre ()hydra-vi/pre121,4248
(defun hydra-vi/post ()hydra-vi/post124,4304
(defvar whitespace-mode nil)whitespace-mode167,5830
(defhydra hydra-toggle (:color pink)hydra-toggle168,5859
(defhydra hydra-buffer-menu (:color pinkhydra-buffer-menu194,6655
(defvar dired-mode-map)dired-mode-map228,8252
(defhydra hydra-apropos (:color bluehydra-apropos246,8784
(defhydra hydra-rectangle (:body-pre (rectangle-mark-mode 1)hydra-rectangle265,9270
(defun org-agenda-cts ()org-agenda-cts295,10153
(defhydra hydra-org-agenda-view (:hint none)hydra-org-agenda-view302,10371
(defhydra hydra-movement ()hydra-movement337,12152
(defun hydra-move-splitter-left (arg)hydra-move-splitter-left346,12367
(defun hydra-move-splitter-right (arg)hydra-move-splitter-right354,12617
(defun hydra-move-splitter-up (arg)hydra-move-splitter-up362,12869
(defun hydra-move-splitter-down (arg)hydra-move-splitter-down370,13086
(defvar rectangle-mark-mode)rectangle-mark-mode378,13307
(defun hydra-ex-point-mark ()hydra-ex-point-mark379,13336

elpa/flx-ido-0.6.1/flx-ido-autoloads.el,48
(defvar flx-ido-mode nil "\flx-ido-mode12,295

elpa/flx-ido-0.6.1/flx-ido.el,1587
(defcustom flx-ido-threshold 6000flx-ido-threshold66,1857
(defcustom flx-ido-use-faces tflx-ido-use-faces74,2058
(defvar flx-ido-narrowed-matches-hash (make-hash-table :test 'equal)flx-ido-narrowed-matches-hash95,2767
(defvar flx-ido-debug nil)flx-ido-debug98,2903
(defun flx-ido-debug (&rest args)flx-ido-debug100,2931
(defun flx-ido-is-prefix-match (str prefix)flx-ido-is-prefix-match106,3071
(defun flx-ido-narrowed (query items)flx-ido-narrowed113,3309
(defun flx-ido-undecorate (strings)flx-ido-undecorate141,4542
(defun flx-ido-decorate (things &optional clear)flx-ido-decorate146,4649
(defun flx-ido-match-internal (query items)flx-ido-match-internal165,5346
(defun flx-ido-key-for-query (query)flx-ido-key-for-query186,6394
(defun flx-ido-cache (query items)flx-ido-cache190,6508
(defun flx-ido-reset ()flx-ido-reset196,6714
(defun flx-ido-match (query items)flx-ido-match200,6831
(defun flx-ido-query-to-regexp (query)flx-ido-query-to-regexp209,7244
(defun flx-flex-match (query items)flx-flex-match221,7804
(define-minor-mode flx-ido-modeflx-ido-mode238,8348
(defadvice ido-exit-minibuffer (around flx-ido-reset activate)ido-exit-minibuffer245,8464
(defadvice ido-read-internal (before flx-ido-reset activate)ido-read-internal258,8850
(defadvice ido-restrict-to-matches (before flx-ido-reset activate)ido-restrict-to-matches263,8995
(defadvice ido-set-matches-1 (around flx-ido-set-matches-1 activate compile)ido-set-matches-1268,9135
(defadvice ido-kill-buffer-at-head (before flx-ido-reset activate)ido-kill-buffer-at-head279,9703

elpa/flx-ido-0.6.1/flx-ido-pkg.el,243
(define-package "flx-ido" "0.6.1" "flx integration for ido" '((flx "0.1") (cl-lib "0.3")) :commit "7fce6a4cdb65ac1b52e2b409ba548767581ce34c" :authors '(("Le Wang")) :maintainer '("Le Wang") :url "https://github.com/lewang/flx")"flx-ido"2,31

elpa/shrink-path-0.3.1/shrink-path.el,674
(defun shrink-path--truncate (str)shrink-path--truncate46,1416
(defun shrink-path--dirs-internal (full-path &optional truncate-all)shrink-path--dirs-internal50,1575
(defun shrink-path-dirs (&optional path truncate-tail)shrink-path-dirs72,2432
(defun shrink-path-expand (str &optional absolute-p)shrink-path-expand83,2869
(defun shrink-path-prompt (&optional pwd)shrink-path-prompt102,3742
(defun shrink-path-file (file &optional truncate-tail)shrink-path-file115,4229
(defun shrink-path-file-expand (str &optional exists-p absolute-p)shrink-path-file-expand123,4560
(defun shrink-path-file-mixed (shrink-path rel-path filename)shrink-path-file-mixed134,4991

elpa/shrink-path-0.3.1/shrink-path-autoloads.el,0

elpa/shrink-path-0.3.1/shrink-path-pkg.el,307
(define-package "shrink-path" "0.3.1" "fish-style path" '((s "1.6.1") (dash "1.8.0") (f "0.10.0")) :commit "9b8cfb59a2dcee8b39b680ab9adad5ecb1f53c0b" :keywords '("path") :authors '(("Benjamin Andresen")) :maintainer '("Benjamin Andresen") :url "https://gitlab.com/bennya/shrink-path.el")"shrink-path"2,31

elpa/treemacs-projectile-2.6/treemacs-projectile-autoloads.el,0

elpa/treemacs-projectile-2.6/treemacs-projectile.el,372
(defun treemacs-projectile (&optional arg)treemacs-projectile33,1130
(define-key treemacs-project-map (kbd "p") #'treemacs-projectile)treemacs-project-map60,2720
(defun treemacs--read-first-project-path ()treemacs--read-first-project-path62,2787
(defun treemacs--projectile-current-user-project-function ()treemacs--projectile-current-user-project-function73,3243

elpa/treemacs-projectile-2.6/treemacs-projectile-pkg.el,366
(define-package "treemacs-projectile" "2.6" "Projectile integration for treemacs" '((projectile "0.14.0") (treemacs "0.0")) :commit "e01ad21ea3cc0eba8cd460737116b51be32ffb45" :authors '(("Alexander Miller" . "alexanderm@web.de")) :maintainer '("Alexander Miller" . "alexanderm@web.de") :url "https://github.com/Alexander-Miller/treemacs")"treemacs-projectile"2,31

elpa/docker-compose-mode-1.1.0/docker-compose-mode.el,1099
(defgroup docker-compose nildocker-compose43,1496
(defcustom docker-compose-keywordsdocker-compose-keywords48,1624
(defun docker-compose--find-version ()docker-compose--find-version66,22045
(defun docker-compose--normalize-version (version)docker-compose--normalize-version77,22460
(defun docker-compose--keywords-for-buffer ()docker-compose--keywords-for-buffer83,22648
(defun docker-compose--post-completion (_string status)docker-compose--post-completion93,23129
(defun docker-compose--find-context ()docker-compose--find-context100,23411
(defun docker-compose--find-subtree (nodes tree)docker-compose--find-subtree119,24107
(defun docker-compose--filter-candidates-tree (prefix tree)docker-compose--filter-candidates-tree127,24446
(defun docker-compose--candidates (prefix)docker-compose--candidates134,24754
(defun docker-compose--prefix ()docker-compose--prefix143,25154
(defun docker-compose-keyword-complete-at-point ()docker-compose-keyword-complete-at-point150,25451
(define-derived-mode docker-compose-mode yaml-mode "docker-compose"docker-compose-mode159,25835

elpa/docker-compose-mode-1.1.0/docker-compose-mode-pkg.el,370
(define-package "docker-compose-mode" "1.1.0" "Major mode for editing docker-compose files" '((emacs "24.3") (dash "2.12.0") (yaml-mode "0.0.12")) :commit "7f4cd0b1718df2ab93d51bd395b2f37df9482265" :keywords '("convenience") :authors '(("Ricardo Martins")) :maintainer '("Ricardo Martins") :url "https://github.com/meqif/docker-compose-mode")"docker-compose-mode"2,31

elpa/docker-compose-mode-1.1.0/docker-compose-mode-autoloads.el,0

elpa/goto-chg-1.7.3/goto-chg.el,1228
(defvar glc-default-span 8 "*goto-last-change don't visit the same point twice. glc-default-span tells how far around a visited point not to visit again.")glc-default-span101,4190
(defvar glc-current-span 8 "Internal for goto-last-change.\nA copy of glc-default-span or the ARG passed to goto-last-change.")glc-current-span102,4346
(defvar glc-probe-depth 0 "Internal for goto-last-change.\nIt is non-zero between successive goto-last-change.")glc-probe-depth103,4474
(defvar glc-direction 1 "Direction goto-last-change moves towards.")glc-direction104,4587
(defun glc-center-ellipsis (str maxlen &optional ellipsis)glc-center-ellipsis108,4716
(defun glc-adjust-pos2 (pos p1 p2 adj)glc-adjust-pos2121,5184
(defun glc-adjust-pos (pos e)glc-adjust-pos135,5659
(defun glc-adjust-list (r)glc-adjust-list155,6794
(defun glc-get-pos (e)glc-get-pos173,7414
(defun glc-get-descript (e &optional n)glc-get-descript185,8100
(defun glc-is-positionable (e)glc-is-positionable207,9329
(defun glc-is-filetime (e)glc-is-filetime212,9520
(defvar buffer-undo-tree)buffer-undo-tree217,9702
(defun goto-last-change (arg)goto-last-change225,10020
(defun goto-last-change-reverse (arg)goto-last-change-reverse347,16324

elpa/goto-chg-1.7.3/goto-chg-pkg.el,347
(define-package "goto-chg" "1.7.3" "goto last change" 'nil :commit "16a63aae80db90713fb1f7d378c5d591c2ce15ff" :keywords '("convenience" "matching") :authors '(("David Andersson <l.david.andersson(at)sverige.nu>")) :maintainer '("Vasilij Schneidermann" . "v.schneidermann@github.com") :url "https://github.com/emacs-evil/goto-chg")"goto-chg"2,31

elpa/goto-chg-1.7.3/goto-chg-autoloads.el,0

elpa/yasnippet-0.13.0/yasnippet-autoloads.el,54
(defvar yas-global-mode nil "\yas-global-mode28,706

elpa/yasnippet-0.13.0/yasnippet-pkg.el,307
(define-package "yasnippet" "0.13.0" "Yet another snippet extension for Emacs." '((cl-lib "0.5")) :commit "5a29fe67d70de3749e30ebb37206395b4d1a51a8" :keywords '("convenience" "emulation") :maintainer '("Noam Postavsky" . "npostavs@gmail.com") :url "http://github.com/joaotavora/yasnippet")"yasnippet"2,31

elpa/yasnippet-0.13.0/yasnippet.el,24482
(defvar yas--editing-template)yas--editing-template140,4962
(defvar yas--guessed-modes)yas--guessed-modes141,4993
(defvar yas--indent-original-column)yas--indent-original-column142,5021
(defvar yas--scheduled-jit-loads)yas--scheduled-jit-loads143,5058
(defvar yas-keymap)yas-keymap144,5092
(defvar yas-selected-text)yas-selected-text145,5112
(defvar yas-verbosity)yas-verbosity146,5139
(defvar yas--current-template)yas--current-template147,5162
(defgroup yasnippet nilyasnippet152,5229
(defconst yas--loaddiryas--loaddir157,5324
(defconst yas-installed-snippets-dir (expand-file-name "snippets" yas--loaddir))yas-installed-snippets-dir161,5456
(defconst yas--default-user-snippets-diryas--default-user-snippets-dir165,5652
(defcustom yas-snippet-dirs (list yas--default-user-snippets-dir)yas-snippet-dirs168,5748
(defun yas-snippet-dirs ()yas-snippet-dirs191,6638
(defcustom yas-new-snippet-default "\yas-new-snippet-default205,7171
(defcustom yas-prompt-functions '(yas-dropdown-promptyas-prompt-functions215,7443
(defcustom yas-indent-line 'autoyas-indent-line244,8390
(defcustom yas-also-auto-indent-first-line nilyas-also-auto-indent-first-line260,8931
(defcustom yas-also-indent-empty-lines nilyas-also-indent-empty-lines266,9126
(defcustom yas-snippet-revival tyas-snippet-revival270,9249
(defcustom yas-triggers-in-field nilyas-triggers-in-field274,9363
(defcustom yas-fallback-behavior 'return-nilyas-fallback-behavior281,9564
(defcustom yas-choose-keys-first nilyas-choose-keys-first295,10089
(defcustom yas-choose-tables-first nilyas-choose-tables-first303,10326
(defcustom yas-use-menu 'abbreviateyas-use-menu312,10608
(defcustom yas-trigger-symbol (or (and (eq window-system 'mac)yas-trigger-symbol330,11167
(defcustom yas-wrap-around-region nilyas-wrap-around-region337,11495
(defcustom yas-good-grace tyas-good-grace349,12029
(defcustom yas-visit-from-menu nilyas-visit-from-menu362,12501
(defcustom yas-expand-only-for-last-commands nilyas-expand-only-for-last-commands368,12688
(defcustom yas-alias-to-yas/prefix-p tyas-alias-to-yas/prefix-p381,13205
(defface yas-field-highlight-faceyas-field-highlight-face389,13479
(defface yas--field-debug-faceyas--field-debug-face393,13614
(defconst yas-maybe-skip-and-clear-fieldyas-maybe-skip-and-clear-field400,13745
(defvar yas-keymap  (let ((map (make-sparse-keymap)))yas-keymap408,14068
(defvar yas-key-syntaxes (list #'yas-try-key-from-whitespaceyas-key-syntaxes418,14679
(defvar yas-after-exit-snippet-hookyas-after-exit-snippet-hook457,16293
(defvar yas-before-expand-snippet-hookyas-before-expand-snippet-hook470,16649
(defconst yas-not-string-or-comment-conditionyas-not-string-or-comment-condition474,16746
(defcustom yas-buffer-local-condition tyas-buffer-local-condition484,17197
(defcustom yas-overlay-priority 100yas-overlay-priority541,19150
(defconst yas--version "0.13.0")yas--version550,19400
(defvar yas--menu-table (make-hash-table)yas--menu-table552,19434
(defvar yas--escaped-charactersyas--escaped-characters555,19534
(defconst yas--field-regexpyas--field-regexp559,19661
(defconst yas--multi-dollar-lisp-expression-regexpyas--multi-dollar-lisp-expression-regexp563,19768
(defconst yas--backquote-lisp-expression-regexpyas--backquote-lisp-expression-regexp567,19909
(defconst yas--transform-mirror-regexpyas--transform-mirror-regexp571,20046
(defconst yas--simple-mirror-regexpyas--simple-mirror-regexp575,20199
(defvar yas--snippet-id-seed 0yas--snippet-id-seed579,20298
(defvar yas--original-auto-fill-function nilyas--original-auto-fill-function582,20371
(defvar yas--watch-auto-fill-backtrace nil)yas--watch-auto-fill-backtrace586,20529
(defun yas--watch-auto-fill (sym newval op _where)yas--watch-auto-fill588,20574
(defun yas--snippet-next-id ()yas--snippet-next-id614,21921
(defvar last-buffer-undo-list nil)last-buffer-undo-list623,22133
(defvar yas--minor-mode-menu nilyas--minor-mode-menu625,22169
(defvar yas--condition-cache-timestamp nil)yas--condition-cache-timestamp628,22234
(defun yas--maybe-expand-key-filter (cmd)yas--maybe-expand-key-filter630,22279
(defconst yas-maybe-expandyas-maybe-expand635,22440
(defvar yas-minor-mode-mapyas-minor-mode-map642,22702
(defvar yas--extra-modes nilyas--extra-modes757,28333
(define-obsolete-variable-alias 'yas-extra-modes 'yas--extra-modes "0.9.1")yas-extra-modes762,28544
(defvar yas--tables (make-hash-table)yas--tables764,28621
(defvar yas--parents (make-hash-table)yas--parents767,28719
(defvar yas--direct-keymaps (list)yas--direct-keymaps778,29113
(defun yas-direct-keymaps-reload ()yas-direct-keymaps-reload790,29619
(defun yas--modes-to-activate (&optional mode)yas--modes-to-activate800,30001
(defvar yas-minor-mode-hook nilyas-minor-mode-hook821,31075
(defun yas--auto-fill-wrapper ()yas--auto-fill-wrapper824,31158
(define-minor-mode yas-minor-modeyas-minor-mode831,31412
(defun yas-activate-extra-mode (mode)yas-activate-extra-mode876,33372
(defun yas-deactivate-extra-mode (mode)yas-deactivate-extra-mode896,34003
(define-obsolete-variable-alias 'yas-dont-activateyas-dont-activate906,34344
(defvar yas-dont-activate-functions (list #'minibufferp)yas-dont-activate-functions908,34435
(defun yas-minor-mode-on ()yas-minor-mode-on928,35275
(define-globalized-minor-mode yas-global-mode yas-minor-mode yas-minor-mode-on)yas-global-mode942,35777
(defun yas--global-mode-reload-with-jit-maybe ()yas--global-mode-reload-with-jit-maybe944,35858
(defvar yas--font-lock-keywordsyas--font-lock-keywords953,36105
(defvar snippet-mode-mapsnippet-mode-map974,36925
(defun yas-snippet-mode-buffer-p ()yas-snippet-mode-buffer-p1011,38622
(defun yas--get-template-by-uuid (mode uuid)yas--get-template-by-uuid1104,41901
(defun yas--remove-template-by-uuid (table uuid)yas--remove-template-by-uuid1164,43981
(defconst yas-maybe-expand-from-keymapyas-maybe-expand-from-keymap1191,45128
(defun yas--add-template (table template)yas--add-template1195,45269
(defun yas--update-template (table template)yas--update-template1220,46246
(defun yas--update-template-menu (table template)yas--update-template-menu1236,46670
(defun yas--namehash-templates-alist (namehash)yas--namehash-templates-alist1280,48629
(defun yas--fetch (table key)yas--fetch1288,48832
(defun yas--eval-condition (condition)yas--eval-condition1301,49248
(defun yas--filter-templates-by-condition (templates)yas--filter-templates-by-condition1312,49550
(defun yas--require-template-specific-condition-p ()yas--require-template-specific-condition-p1328,50219
(defun yas--template-can-expand-p (condition requirement)yas--template-can-expand-p1344,50934
(defun yas--table-templates (table)yas--table-templates1353,51249
(defun yas--templates-for-key-at-point ()yas--templates-for-key-at-point1363,51613
(defun yas--table-all-keys (table)yas--table-all-keys1401,53176
(defun yas--table-mode (table)yas--table-mode1410,53504
(defun yas--remove-misc-free-from-undo (old-undo-list)yas--remove-misc-free-from-undo1416,53610
(defmacro yas--save-restriction-and-widen (&rest body)yas--save-restriction-and-widen1441,54712
(defun yas--eval-for-string (form)yas--eval-for-string1453,55189
(defun yas--eval-for-effect (form)yas--eval-for-effect1466,55665
(defun yas--read-lisp (string &optional nil-on-error)yas--read-lisp1469,55757
(defun yas--read-keybinding (keybinding)yas--read-keybinding1479,56127
(defun yas--table-get-create (mode)yas--table-get-create1493,56687
(defun yas--get-snippet-tables (&optional mode)yas--get-snippet-tables1505,57128
(defun yas--menu-keymap-get-create (mode &optional parents)yas--menu-keymap-get-create1517,57524
(defun yas--parse-template (&optional file)yas--parse-template1533,58161
(defun yas--calculate-group (file)yas--calculate-group1611,61292
(defun yas--subdirs (directory &optional filep)yas--subdirs1625,61938
(defun yas--make-menu-binding (template)yas--make-menu-binding1639,62604
(defun yas--expand-or-visit-from-menu (mode uuid)yas--expand-or-visit-from-menu1643,62815
(defun yas--key-from-desc (text)yas--key-from-desc1658,63560
(defun yas--prompt-for-template (templates &optional prompt)yas--prompt-for-template1665,63750
(defun yas--prompt-for-keys (keys &optional prompt)yas--prompt-for-keys1682,64377
(defun yas--prompt-for-table (tables &optional prompt)yas--prompt-for-table1691,64678
(defun yas-x-prompt (prompt choices &optional display-fn)yas-x-prompt1702,65049
(defun yas-maybe-ido-prompt (prompt choices &optional display-fn)yas-maybe-ido-prompt1723,65828
(defun yas-ido-prompt (prompt choices &optional display-fn)yas-ido-prompt1727,65980
(defun yas-dropdown-prompt (_prompt choices &optional display-fn)yas-dropdown-prompt1731,66133
(defun yas-completing-prompt (prompt choices &optional display-fn completion-fn)yas-completing-prompt1739,66434
(defun yas-no-prompt (_prompt choices &optional _display-fn)yas-no-prompt1750,66927
(defvar yas--creating-compiled-snippets nil)yas--creating-compiled-snippets1759,67134
(defun yas--define-snippets-1 (snippet snippet-table)yas--define-snippets-11761,67180
(defun yas-define-snippets (mode snippets)yas-define-snippets1768,67494
(defun yas--template-get-file (template)yas--template-get-file1820,69332
(defun yas--load-yas-setup-file (file)yas--load-yas-setup-file1829,69691
(defun yas--define-parents (mode parents)yas--define-parents1839,70068
(defun yas-load-directory (top-level-dir &optional use-jit interactive)yas-load-directory1846,70310
(defun yas--load-directory-1 (directory mode-sym)yas--load-directory-11897,72682
(defun yas--load-directory-2 (directory mode-sym)yas--load-directory-21915,73691
(defun yas--load-snippet-dirs (&optional nojit)yas--load-snippet-dirs1941,74640
(defun yas-reload-all (&optional no-jit interactive)yas-reload-all1959,75474
(defvar yas-after-reload-hook nilyas-after-reload-hook2034,78599
(defun yas--load-pending-jits ()yas--load-pending-jits2037,78673
(defun yas-escape-text (text)yas-escape-text2046,79054
(defun yas-compile-directory (top-level-dir)yas-compile-directory2054,79219
(defun yas-recompile-all ()yas-recompile-all2063,79554
(defvar yas--scheduled-jit-loads (make-hash-table)yas--scheduled-jit-loads2072,79719
(defun yas--schedule-jit (mode fun)yas--schedule-jit2075,79852
(defun yas-about ()yas-about2082,79977
(defun yas--template-menu-binding-pair-get-create (template &optional type)yas--template-menu-binding-pair-get-create2135,82487
(defun yas--template-menu-managed-by-yas-define-menu (template)yas--template-menu-managed-by-yas-define-menu2150,83209
(defun yas--show-menu-p (mode)yas--show-menu-p2155,83406
(defun yas--delete-from-keymap (keymap uuid)yas--delete-from-keymap2162,83626
(defun yas-define-menu (mode menu &optional omit-items)yas-define-menu2188,84680
(defun yas--define-menu-1 (table menu-keymap menu uuidhash &optional group-list)yas--define-menu-12219,85988
(defun yas--define (mode key template &optional name condition group)yas--define2252,87545
(defun yas-hippie-try-expand (first-time?)yas-hippie-try-expand2262,88022
(defmacro yas-define-condition-cache (func doc &rest body)yas-define-condition-cache2279,88361
(defalias 'yas-expand 'yas-expand-from-trigger-key)yas-expand2302,89393
(defun yas-expand-from-trigger-key (&optional field)yas-expand-from-trigger-key2303,89445
(defun yas--maybe-expand-from-keymap-filter (cmd)yas--maybe-expand-from-keymap-filter2332,90798
(defun yas-expand-from-keymap ()yas-expand-from-keymap2343,91300
(defun yas--expand-or-prompt-for-template (templates &optional start end)yas--expand-or-prompt-for-template2351,91614
(defun yas--fallback ()yas--fallback2373,92662
(defun yas--keybinding-beyond-yasnippet ()yas--keybinding-beyond-yasnippet2415,94536
(defun yas--fallback-translate-input (keys)yas--fallback-translate-input2423,94844
(defun yas--all-templates (tables)yas--all-templates2450,95854
(defun yas--lookup-snippet-1 (name mode)yas--lookup-snippet-12468,96610
(defun yas-lookup-snippet (name &optional mode noerror)yas-lookup-snippet2476,96942
(defun yas-insert-snippet (&optional no-condition)yas-insert-snippet2489,97340
(defun yas-visit-snippet-file ()yas-visit-snippet-file2515,98650
(defun yas--visit-snippet-file-1 (template)yas--visit-snippet-file-12532,99329
(defun yas--guess-snippet-directories-1 (table)yas--guess-snippet-directories-12564,101047
(defun yas--guess-snippet-directories (&optional table)yas--guess-snippet-directories2570,101309
(defun yas--make-directory-maybe (table-and-dirs &optional main-table-string)yas--make-directory-maybe2596,102464
(defconst yas-new-snippet-buffer-name "+new-snippet+")yas-new-snippet-buffer-name2619,103717
(defun yas-new-snippet (&optional no-template)yas-new-snippet2621,103773
(defun yas--compute-major-mode-and-parents (file)yas--compute-major-mode-and-parents2646,104785
(defvar yas--editing-template nilyas--editing-template2677,106397
(defvar yas--current-template nilyas--current-template2680,106513
(defvar yas--guessed-modes nilyas--guessed-modes2683,106611
(defun yas--read-table ()yas--read-table2686,106708
(defun yas-load-snippet-buffer (table &optional interactive)yas-load-snippet-buffer2707,107575
(defun yas-maybe-load-snippet-buffer ()yas-maybe-load-snippet-buffer2736,109001
(defun yas-load-snippet-buffer-and-close (table &optional kill)yas-load-snippet-buffer-and-close2751,109721
(defun yas-tryout-snippet (&optional debug)yas-tryout-snippet2780,111108
(defun yas-active-keys ()yas-active-keys2818,113176
(defun yas--template-fine-group (template)yas--template-fine-group2825,113447
(defun yas-describe-table-by-namehash ()yas-describe-table-by-namehash2829,113596
(defun yas-describe-tables (&optional with-nonactive)yas-describe-tables2853,114516
(defun yas--describe-pretty-table (table &optional original-buffer)yas--describe-pretty-table2873,115219
(defun yas-try-key-from-whitespace (_start-point)yas-try-key-from-whitespace2929,118070
(defun yas-shortest-key-until-whitespace (_start-point)yas-shortest-key-until-whitespace2936,118350
(defun yas-longest-key-from-whitespace (start-point)yas-longest-key-from-whitespace2941,118555
(defvar yas-modified-p nilyas-modified-p2956,119034
(defvar yas-moving-away-p nilyas-moving-away-p2959,119129
(defvar yas-text nilyas-text2962,119205
(defun yas-substr (str pattern &optional subexp)yas-substr2965,119261
(defun yas-choose-value (&rest possibilities)yas-choose-value2976,119630
(defun yas-key-to-value (alist)yas-key-to-value2991,120175
(defun yas-throw (text)yas-throw2999,120422
(defun yas-verify-value (possibilities)yas-verify-value3005,120654
(defun yas-field-value (number)yas-field-value3011,120950
(defun yas-text ()yas-text3022,121308
(defun yas-selected-text ()yas-selected-text3028,121470
(defun yas--get-field-once (number &optional transform-fn)yas--get-field-once3034,121677
(defun yas-default-from-field (number)yas-default-from-field3040,121873
(defun yas-inside-string ()yas-inside-string3044,121969
(defun yas-unimplemented (&optional missing-feature)yas-unimplemented3048,122146
(defvar yas--active-field-overlay nilyas--active-field-overlay3059,122615
(defvar yas--field-protection-overlays nilyas--field-protection-overlays3062,122696
(defvar yas-selected-text nilyas-selected-text3065,122792
(defvar yas--start-column nilyas--start-column3068,122887
(defmacro yas--letenv (env &rest body)yas--letenv3129,124683
(defun yas--snippet-map-markers (fun snippet)yas--snippet-map-markers3142,125175
(defun yas--snippet-live-p (snippet)yas--snippet-live-p3156,125911
(defun yas--apply-transform (field-or-mirror field &optional empty-on-nil-p)yas--apply-transform3165,126210
(defsubst yas--replace-all (from to &optional text)yas--replace-all3187,127273
(defun yas--snippet-find-field (snippet number)yas--snippet-find-field3197,127600
(defun yas--snippet-sort-fields (snippet)yas--snippet-sort-fields3202,127780
(defun yas--snippet-field-compare (field1 field2)yas--snippet-field-compare3208,128003
(defun yas--field-probably-deleted-p (snippet field)yas--field-probably-deleted-p3226,128583
(defun yas-active-snippets (&optional beg end)yas-active-snippets3250,129353
(define-obsolete-function-alias 'yas--snippets-at-pointyas--snippets-at-point3272,130206
(defun yas-next-field-or-maybe-expand ()yas-next-field-or-maybe-expand3275,130294
(defun yas-next-field-will-exit-p (&optional arg)yas-next-field-will-exit-p3288,130743
(defun yas--find-next-field (n snippet active)yas--find-next-field3295,131060
(defun yas-next-field (&optional arg)yas-next-field3304,131506
(defun yas--place-overlays (snippet field)yas--place-overlays3324,132260
(defun yas--move-to-field (snippet field)yas--move-to-field3333,132714
(defun yas-prev-field ()yas-prev-field3357,133688
(defun yas-abort-snippet (&optional snippet)yas-abort-snippet3362,133817
(defun yas-exit-snippet (snippet)yas-exit-snippet3369,134030
(defun yas-exit-all-snippets ()yas-exit-all-snippets3378,134404
(defvar yas--inhibit-overlay-hooks nilyas--inhibit-overlay-hooks3389,134661
(defvar yas-snippet-beg nil "Beginning position of the last snippet committed.")yas-snippet-beg3392,134784
(defvar yas-snippet-end nil "End position of the last snippet committed.")yas-snippet-end3393,134865
(defun yas--commit-snippet (snippet)yas--commit-snippet3395,134941
(defvar yas--snippets-to-move nil)yas--snippets-to-move3440,136678
(defun yas--prepare-snippets-for-move (beg end buf pos)yas--prepare-snippets-for-move3443,136766
(defun yas--on-buffer-kill ()yas--on-buffer-kill3466,137731
(defun yas--finish-moving-snippets ()yas--finish-moving-snippets3484,138460
(defun yas--safely-call-fun (fun)yas--safely-call-fun3504,139362
(defun yas--safely-run-hook (hook)yas--safely-run-hook3512,139595
(defun yas--check-commit-snippet ()yas--check-commit-snippet3519,139898
(defun yas--markers-to-points (snippet)yas--markers-to-points3571,142319
(defun yas--points-to-markers (snippet)yas--points-to-markers3578,142594
(defun yas--maybe-move-to-active-field (snippet)yas--maybe-move-to-active-field3582,142762
(defun yas--field-contains-point-p (field &optional point)yas--field-contains-point-p3590,143109
(defun yas--field-text-for-display (field)yas--field-text-for-display3596,143315
(defun yas--undo-in-progress ()yas--undo-in-progress3600,143486
(defun yas--make-control-overlay (snippet start end)yas--make-control-overlay3606,143650
(defun yas-current-field ()yas-current-field3619,144126
(defun yas--maybe-clear-field-filter (cmd)yas--maybe-clear-field-filter3625,144338
(defun yas-skip-and-clear-field (&optional field)yas-skip-and-clear-field3634,144690
(defun yas-skip-and-clear-or-delete-char (&optional field)yas-skip-and-clear-or-delete-char3640,144900
(defun yas--skip-and-clear (field &optional from)yas--skip-and-clear3651,145372
(defun yas--mark-this-and-children-modified (field)yas--mark-this-and-children-modified3663,145984
(defun yas--make-move-active-field-overlay (snippet field)yas--make-move-active-field-overlay3673,146367
(defun yas--skip-and-clear-field-p (field beg _end length)yas--skip-and-clear-field-p3695,147493
(defun yas--on-field-overlay-modification (overlay after? beg end &optional length)yas--on-field-overlay-modification3702,147848
(defun yas--auto-fill ()yas--auto-fill3734,149496
(defun yas--make-move-field-protection-overlays (snippet field)yas--make-move-field-protection-overlays3812,153469
(defun yas--on-protection-overlay-modification (_overlay after? beg end &optional length)yas--on-protection-overlay-modification3845,154988
(defun yas-expand-snippet (snippet &optional start end expand-env)yas-expand-snippet3884,156732
(defun yas--take-care-of-redo (snippet)yas--take-care-of-redo3977,161043
(defun yas--snippet-revive (beg end snippet)yas--snippet-revive3986,161367
(defun yas--snippet-create (content expand-env begin end)yas--snippet-create4006,162277
(defun yas--fom-start (fom)yas--fom-start4068,164533
(defun yas--fom-end (fom)yas--fom-end4076,164732
(defun yas--fom-next (fom)yas--fom-next4084,164925
(defun yas--fom-parent-field (fom)yas--fom-parent-field4092,165119
(defun yas--calculate-adjacencies (snippet)yas--calculate-adjacencies4100,165320
(defun yas--calculate-simple-fom-parentage (snippet fom)yas--calculate-simple-fom-parentage4132,166569
(defun yas--advance-end-maybe (fom newend)yas--advance-end-maybe4154,167525
(defun yas--advance-start-maybe (fom newstart)yas--advance-start-maybe4174,168262
(defun yas--advance-end-of-parents-maybe (field newend)yas--advance-end-of-parents-maybe4182,168567
(defvar yas--dollar-regions nilyas--dollar-regions4192,169003
(defvar yas--indent-markers nilyas--indent-markers4196,169127
(defun yas--snippet-parse-create (snippet)yas--snippet-parse-create4199,169205
(defun yas--snapshot-marker-location (marker &optional beg end)yas--snapshot-marker-location4273,172807
(defun yas--snapshot-overlay-location (overlay beg end)yas--snapshot-overlay-location4293,173796
(defun yas--snapshot-overlay-line-location (overlay)yas--snapshot-overlay-line-location4306,174405
(defun yas--goto-saved-location (regexp ws-count)yas--goto-saved-location4319,175186
(defun yas--restore-marker-location (re-marker)yas--restore-marker-location4330,175658
(defun yas--restore-overlay-location (ov-locations)yas--restore-overlay-location4336,175942
(defun yas--restore-overlay-line-location (ov-locations)yas--restore-overlay-line-location4349,176533
(defun yas--indent-region (from to snippet)yas--indent-region4364,177314
(defvar yas--indent-original-column nil)yas--indent-original-column4392,178608
(defun yas--indent (snippet)yas--indent4393,178649
(defun yas--collect-snippet-markers (snippet)yas--collect-snippet-markers4428,180150
(defun yas--escape-string (escaped)yas--escape-string4434,180351
(defun yas--protect-escapes (&optional text escaped)yas--protect-escapes4437,180449
(defun yas--restore-escapes (&optional text escaped)yas--restore-escapes4451,181041
(defun yas--save-backquotes ()yas--save-backquotes4465,181623
(defun yas--restore-backquotes (saved-quotes)yas--restore-backquotes4502,183451
(defun yas--scan-sexps (from count)yas--scan-sexps4514,183911
(defun yas--make-marker (pos)yas--make-marker4521,184162
(defun yas--indent-parse-create ()yas--indent-parse-create4527,184359
(defun yas--field-parse-create (snippet &optional parent-field)yas--field-parse-create4537,184761
(defun yas--transform-mirror-parse-create (snippet)yas--transform-mirror-parse-create4611,188643
(defun yas--simple-fom-create (snippet)yas--simple-fom-create4634,189903
(defun yas--delete-regions (regions)yas--delete-regions4663,191368
(defun yas--calculate-mirror-depth (mirror &optional traversed)yas--calculate-mirror-depth4671,191646
(defun yas--update-mirrors (snippet)yas--update-mirrors4687,192353
(defun yas--mirror-update-display (mirror field)yas--mirror-update-display4728,194429
(defun yas--field-update-display (field)yas--field-update-display4749,195576
(defun yas--post-command-handler ()yas--post-command-handler4770,196531
(defun yas--expand-from-trigger-key-doc (context)yas--expand-from-trigger-key-doc4815,198741
(defun yas--expand-from-keymap-doc (context)yas--expand-from-keymap-doc4836,199839
(defun yas--template-pretty-list (templates)yas--template-pretty-list4856,201005
(define-button-type 'help-snippet-defhelp-snippet-def4865,201327
(defun yas--snippet-description-finish-runonce ()yas--snippet-description-finish-runonce4870,201532
(defun yas--create-snippet-xrefs ()yas--create-snippet-xrefs4876,201781
(defvar yas-verbosity 3yas-verbosity4889,202278
(defun yas--message (level message &rest args)yas--message4892,202383
(defun yas--warning (format-control &rest format-args)yas--warning4897,202589
(defun yas--format (format-control &rest format-args)yas--format4902,202777
(defvar unload-function-defs-list) ; loadhist.elunload-function-defs-list4964,205632
(defun yasnippet-unload-function ()yasnippet-unload-function4966,205682
(defun yas-initialize ()yas-initialize4990,206613
(defvar yas--backported-syms '(;; `defcustom'syas--backported-syms4995,206792
(defvar yas--exported-symsyas--exported-syms5117,212213

elpa/scala-mode-1.0.0/scala-mode-syntax.el,12955
(defconst scala-syntax:hexDigit-group "0-9A-Fa-f")scala-syntax:hexDigit-group21,726
(defconst scala-syntax:UnicodeEscape-re (concat "\\\\u[" scala-syntax:hexDigit-group "]\\{4\\}"))scala-syntax:UnicodeEscape-re22,777
(defconst scala-syntax:upper-group "[:upper:]\\$") ;; missing _ to make ids workscala-syntax:upper-group24,876
(defconst scala-syntax:upperAndUnderscore-group (concat "_" scala-syntax:upper-group ))scala-syntax:upperAndUnderscore-group25,957
(defconst scala-syntax:lower-group "[:lower:]")scala-syntax:lower-group26,1045
(defconst scala-syntax:letter-group (concat scala-syntax:lower-group scala-syntax:upper-group)) ;; TODO: add Lt, Lo, Nlscala-syntax:letter-group27,1093
(defconst scala-syntax:digit-group "0-9")scala-syntax:digit-group28,1213
(defconst scala-syntax:letterOrDigit-group (concatscala-syntax:letterOrDigit-group29,1255
(defconst scala-syntax:opchar-safe-group "!%&*+/?\\\\^|~-") ;; TODO: Sm, Soscala-syntax:opchar-safe-group33,1528
(defconst scala-syntax:opchar-unsafe-group "#:<=>@")scala-syntax:opchar-unsafe-group34,1604
(defconst scala-syntax:opchar-group (concat scala-syntax:opchar-unsafe-groupscala-syntax:opchar-group35,1657
(defconst scala-syntax:delimiter-group ".,;")scala-syntax:delimiter-group39,1859
(defconst scala-syntax:nonZeroDigit-group "1-9")scala-syntax:nonZeroDigit-group42,1941
(defconst scala-syntax:octalDigit-group "0-7")scala-syntax:octalDigit-group43,1990
(defconst scala-syntax:decimalNumeral-rescala-syntax:decimalNumeral-re44,2037
(defconst scala-syntax:hexNumeral-re (concat "0x[" scala-syntax:hexDigit-group "]+"))scala-syntax:hexNumeral-re47,2178
(defconst scala-syntax:octalNumeral-re (concat "0[" scala-syntax:octalDigit-group "]+"))scala-syntax:octalNumeral-re48,2264
(defconst scala-syntax:integerLiteral-re (concat "-?" ;; added from definition of literalscala-syntax:integerLiteral-re49,2353
(defconst scala-syntax:exponentPart-re (concat "\\([eE][+-]?[" scala-syntax:digit-group "]+\\)"))scala-syntax:exponentPart-re57,2801
(defconst scala-syntax:floatType-re "[fFdD]")scala-syntax:floatType-re58,2899
(defconst scala-syntax:floatingPointLiteral-rescala-syntax:floatingPointLiteral-re59,2945
(defconst scala-syntax:number-safe-start-rescala-syntax:number-safe-start-re68,3487
(defconst scala-syntax:booleanLiteral-re "true|false")scala-syntax:booleanLiteral-re72,3616
(defconst scala-syntax:escapeSequence-re "\\\\['btnfr\"\\\\]")scala-syntax:escapeSequence-re75,3708
(defconst scala-syntax:octalEscape-re (concat "\\\\[" scala-syntax:octalDigit-group "\\]\\{1,3\\}"))scala-syntax:octalEscape-re78,3814
(defconst scala-syntax:characterLiteral-rescala-syntax:characterLiteral-re81,3954
(defconst scala-syntax:string-escape-rescala-syntax:string-escape-re87,4236
(defconst scala-syntax:stringElement-rescala-syntax:stringElement-re93,4445
(defconst scala-syntax:oneLineStringLiteral-re (concat "\\(\"\\)" scala-syntax:stringElement-re "*\\(\"\\)"))scala-syntax:oneLineStringLiteral-re96,4570
(defconst scala-syntax:multiLineStringLiteral-start-rescala-syntax:multiLineStringLiteral-start-re97,4680
(defconst scala-syntax:multiLineStringLiteral-end-rescala-syntax:multiLineStringLiteral-end-re99,4771
(defconst scala-syntax:multiLineStringLiteral-rescala-syntax:multiLineStringLiteral-re101,4843
(defconst scala-syntax:stringLiteral-rescala-syntax:stringLiteral-re104,5002
(defconst scala-syntax:relaxed-char-and-string-literal-rescala-syntax:relaxed-char-and-string-literal-re113,5398
(defconst scala-syntax:op-rescala-syntax:op-re120,5722
(defconst scala-syntax:idrest-rescala-syntax:idrest-re122,5799
(defconst scala-syntax:varid-re (concat "[" scala-syntax:lower-group "]" scala-syntax:idrest-re))scala-syntax:varid-re127,6123
(defconst scala-syntax:capitalid-re (concat "[" scala-syntax:upperAndUnderscore-group "]" scala-syntax:idrest-re))scala-syntax:capitalid-re128,6221
(defconst scala-syntax:alphaid-re (concat "\\(" "[" scala-syntax:lower-group scala-syntax:upperAndUnderscore-group "]" scala-syntax:idrest-re "\\)"))scala-syntax:alphaid-re130,6366
(defconst scala-syntax:plainid-re (concat "\\(" scala-syntax:alphaid-re "\\|" scala-syntax:op-re "\\)"))scala-syntax:plainid-re131,6516
(defconst scala-syntax:stringlit-re "[^`\n\r]")scala-syntax:stringlit-re134,6761
(defconst scala-syntax:quotedid-re (concat "`" scala-syntax:stringlit-re "+`"))scala-syntax:quotedid-re135,6809
(defconst scala-syntax:id-re (concat "\\(" scala-syntax:plainid-rescala-syntax:id-re136,6889
(defconst scala-syntax:id-first-char-groupscala-syntax:id-first-char-group138,7025
(defconst scala-syntax:symbolLiteral-rescala-syntax:symbolLiteral-re144,7225
(defconst scala-syntax:literal-rescala-syntax:literal-re149,7434
(defconst scala-syntax:interpolation-rescala-syntax:interpolation-re158,7788
(defun scala-syntax:interpolation-matcher (end)scala-syntax:interpolation-matcher161,7904
(defun scala-syntax:looking-at-super ()scala-syntax:looking-at-super194,9198
(defun scala-syntax:looking-at-stableIdOrPath (&optional path-p beg)scala-syntax:looking-at-stableIdOrPath219,10368
(defun scala-syntax:looking-at-simplePattern-beginning ()scala-syntax:looking-at-simplePattern-beginning239,11286
(defun scala-syntax:regexp-for-id (id)scala-syntax:regexp-for-id245,11464
(defconst scala-syntax:preamble-start-rescala-syntax:preamble-start-re258,11906
(defconst scala-syntax:empty-line-rescala-syntax:empty-line-re261,11958
(defconst scala-syntax:comment-start-rescala-syntax:comment-start-re264,12009
(defconst scala-syntax:end-of-code-line-rescala-syntax:end-of-code-line-re267,12061
(defconst scala-syntax:path-keywords-unsafe-rescala-syntax:path-keywords-unsafe-re273,12333
(defconst scala-syntax:path-keywords-rescala-syntax:path-keywords-re276,12422
(defconst scala-syntax:value-keywords-unsafe-rescala-syntax:value-keywords-unsafe-re279,12540
(defconst scala-syntax:value-keywords-rescala-syntax:value-keywords-re282,12637
(defconst scala-syntax:other-keywords-unsafe-rescala-syntax:other-keywords-unsafe-re285,12757
(defconst scala-syntax:other-keywords-rescala-syntax:other-keywords-re292,13181
(defconst scala-syntax:keywords-unsafe-rescala-syntax:keywords-unsafe-re295,13301
(defconst scala-syntax:after-reserved-symbol-underscore-rescala-syntax:after-reserved-symbol-underscore-re308,13773
(defconst scala-syntax:reserved-symbol-underscore-rescala-syntax:reserved-symbol-underscore-re312,13937
(defconst scala-syntax:reserved-symbols-unsafe-rescala-syntax:reserved-symbols-unsafe-re318,14169
(defconst scala-syntax:double-arrow-unsafe-rescala-syntax:double-arrow-unsafe-re323,14357
(defconst scala-syntax:after-reserved-symbol-rescala-syntax:after-reserved-symbol-re326,14427
(defconst scala-syntax:reserved-symbols-rescala-syntax:reserved-symbols-re330,14579
(defconst scala-syntax:colon-rescala-syntax:colon-re336,14843
(defconst scala-syntax:override-unsafe-rescala-syntax:override-unsafe-re342,15014
(defconst scala-syntax:override-rescala-syntax:override-re345,15094
(defconst scala-syntax:abstract-unsafe-rescala-syntax:abstract-unsafe-re348,15202
(defconst scala-syntax:abstract-rescala-syntax:abstract-re351,15282
(defconst scala-syntax:final-unsafe-rescala-syntax:final-unsafe-re354,15390
(defconst scala-syntax:final-rescala-syntax:final-re357,15464
(defconst scala-syntax:sealed-unsafe-rescala-syntax:sealed-unsafe-re360,15566
(defconst scala-syntax:sealed-rescala-syntax:sealed-re363,15642
(defconst scala-syntax:implicit-unsafe-rescala-syntax:implicit-unsafe-re366,15746
(defconst scala-syntax:implicit-rescala-syntax:implicit-re369,15826
(defconst scala-syntax:lazy-unsafe-rescala-syntax:lazy-unsafe-re372,15934
(defconst scala-syntax:lazy-rescala-syntax:lazy-re375,16006
(defconst scala-syntax:private-unsafe-rescala-syntax:private-unsafe-re378,16106
(defconst scala-syntax:private-rescala-syntax:private-re381,16184
(defconst scala-syntax:protected-unsafe-rescala-syntax:protected-unsafe-re384,16290
(defconst scala-syntax:protected-rescala-syntax:protected-re387,16372
(defconst scala-syntax:modifiers-unsafe-rescala-syntax:modifiers-unsafe-re390,16482
(defconst scala-syntax:modifiers-rescala-syntax:modifiers-re394,16647
(defconst scala-syntax:body-start-rescala-syntax:body-start-re397,16757
(defconst scala-syntax:list-keywords-rescala-syntax:list-keywords-re401,16895
(defconst scala-syntax:case-rescala-syntax:case-re405,17020
(defconst scala-syntax:for-rescala-syntax:for-re408,17068
(defconst scala-syntax:class-or-object-rescala-syntax:class-or-object-re411,17114
(defvar scala-syntax:syntax-table nilscala-syntax:syntax-table423,17452
(defun scala-syntax:propertize-extend-region (start end)scala-syntax:propertize-extend-region496,20333
(defmacro scala-syntax:put-syntax-table-property (match-group value)scala-syntax:put-syntax-table-property501,20465
(defun scala-syntax:propertize-char-and-string-literals (start end)scala-syntax:propertize-char-and-string-literals509,20792
(defun scala-syntax:propertize-shell-preamble (start end)scala-syntax:propertize-shell-preamble564,23504
(defun scala-syntax:propertize-underscore-and-idrest (start end)scala-syntax:propertize-underscore-and-idrest575,23960
(defun scala-syntax:propertize-special-symbols (start end)scala-syntax:propertize-special-symbols600,25161
(defun scala-syntax:propertize-quotedid (start end)scala-syntax:propertize-quotedid615,25919
(defun scala-syntax:propertize-dollar (start end)scala-syntax:propertize-dollar622,26211
(defun scala-syntax:propertize (start end)scala-syntax:propertize629,26460
(defun scala-syntax:beginning-of-code-line ()scala-syntax:beginning-of-code-line642,26906
(defun scala-syntax:looking-at-varid-p (&optional point)scala-syntax:looking-at-varid-p664,27680
(defun scala-syntax:looking-at-empty-line-p ()scala-syntax:looking-at-empty-line-p678,28163
(defun scala-syntax:looking-at-reserved-symbol (re &optional point)scala-syntax:looking-at-reserved-symbol684,28351
(defun scala-syntax:looking-at-case-p (&optional point)scala-syntax:looking-at-case-p694,28720
(defun scala-syntax:looking-back-empty-line-p ()scala-syntax:looking-back-empty-line-p703,29062
(defun scala-syntax:skip-forward-ignorable ()scala-syntax:skip-forward-ignorable711,29327
(defun scala-syntax:skip-backward-ignorable ()scala-syntax:skip-backward-ignorable720,29687
(defun scala-syntax:looking-at (re)scala-syntax:looking-at729,30098
(defun scala-syntax:looking-back-token (re &optional max-chars)scala-syntax:looking-back-token737,30389
(defun scala-syntax:backward-parameter-groups ()scala-syntax:backward-parameter-groups758,31451
(defun scala-syntax:forward-parameter-groups ()scala-syntax:forward-parameter-groups765,31670
(defun scala-syntax:forward-modifiers ()scala-syntax:forward-modifiers772,31874
(defun scala-syntax:looking-back-else-if-p ()scala-syntax:looking-back-else-if-p780,32140
(defun scala-syntax:newlines-disabled-p (&optional point)scala-syntax:newlines-disabled-p791,32618
(defun scala-syntax:forward-sexp ()scala-syntax:forward-sexp833,34527
(defun scala-syntax:forward-token ()scala-syntax:forward-token854,35441
(defun scala-syntax:backward-sexp ()scala-syntax:backward-sexp888,36885
(defun scala-syntax:has-char-before (char end)scala-syntax:has-char-before905,37574
(defun scala-syntax:search-backward-sexp (re)scala-syntax:search-backward-sexp915,37882
(defun scala-syntax:list-p (&optional point)scala-syntax:list-p930,38548
(defconst scala-syntax:modifiers-rescala-syntax:modifiers-re956,39792
(defconst scala-syntax:whitespace-delimeted-modifiers-rescala-syntax:whitespace-delimeted-modifiers-re960,39957
(defconst scala-syntax:definition-words-rescala-syntax:definition-words-re963,40081
(defun scala-syntax:build-definition-re (words-re)scala-syntax:build-definition-re966,40213
(defconst scala-syntax:all-definition-rescala-syntax:all-definition-re975,40403
(defun scala-syntax:backward-sexp-forcing ()scala-syntax:backward-sexp-forcing981,40607
(defun scala-syntax:forward-sexp-or-next-line ()scala-syntax:forward-sexp-or-next-line984,40717
(defun scala-syntax:beginning-of-definition ()scala-syntax:beginning-of-definition989,40865
(defun scala-syntax:end-of-definition ()scala-syntax:end-of-definition1003,41408
(defun scala-syntax:find-brace-equals-or-next ()scala-syntax:find-brace-equals-or-next1014,41793
(defun scala-syntax:handle-brace-equals-or-next ()scala-syntax:handle-brace-equals-or-next1022,42147
(defun scala-syntax:movement-function-until-re (re movement-function)scala-syntax:movement-function-until-re1032,42678
(defun scala-syntax:movement-function-until-cond-function (cond-function movement-function)scala-syntax:movement-function-until-cond-function1037,42877
(defun scala-syntax:go-to-pos (pos) (when pos (goto-char pos)))scala-syntax:go-to-pos1045,43225

elpa/scala-mode-1.0.0/scala-mode-imenu.el,1631
(defcustom scala-imenu:should-flatten-index tscala-imenu:should-flatten-index13,313
(defcustom scala-imenu:build-imenu-candidatescala-imenu:build-imenu-candidate15,434
(defcustom scala-imenu:cleanup-hooks nilscala-imenu:cleanup-hooks18,602
(defun scala-imenu:flatten-list (incoming-list &optional predicate)scala-imenu:flatten-list21,713
(defun scala-imenu:flatten-imenu-index (index)scala-imenu:flatten-imenu-index26,953
(defun scala-imenu:create-imenu-index ()scala-imenu:create-imenu-index31,1115
(defun scala-imenu:build-imenu-candidates (member-info &optional parents)scala-imenu:build-imenu-candidates40,1455
(defun scala-imenu:build-child-members (parents child-members)scala-imenu:build-child-members58,2214
(defun scala-imenu:destructure-for-build-imenu-candidate (member-info parents)scala-imenu:destructure-for-build-imenu-candidate62,2381
(defun scala-imenu:default-build-imenu-candidate (member-name definition-typescala-imenu:default-build-imenu-candidate68,2637
(defun scala-imenu:create-index ()scala-imenu:create-index76,2972
(defun scala-imenu:parse-nested-from-end ()scala-imenu:parse-nested-from-end83,3180
(defun scala-imenu:parse-nested-from-beginning ()scala-imenu:parse-nested-from-beginning94,3713
(defun scala-imenu:nested-members ()scala-imenu:nested-members98,3838
(defvar scala-imenu:nested-definition-types '("class" "object" "trait"))scala-imenu:nested-definition-types108,4178
(defun scala-imenu:get-nested-members (parent-start-point)scala-imenu:get-nested-members110,4252
(defun scala-imenu:get-member-info-at-point ()scala-imenu:get-member-info-at-point117,4511

elpa/scala-mode-1.0.0/scala-mode-fontlock.el,3558
(defcustom scala-font-lock:constant-list '()scala-font-lock:constant-list7,198
(defun scala-font-lock:create-user-constant-re ()scala-font-lock:create-user-constant-re14,436
(defun scala-font-lock:mark-reserved-symbols (limit)scala-font-lock:mark-reserved-symbols17,540
(defun scala-font-lock:mark-underscore (limit)scala-font-lock:mark-underscore21,743
(defun scala-font-lock:limit-pattern2 (&optional start)scala-font-lock:limit-pattern227,1001
(defun scala-font-lock:limit-pattern2-list (&optional start)scala-font-lock:limit-pattern2-list61,2401
(defun scala-font-lock:mark-pattern1-part (&optional limit pattern-p)scala-font-lock:mark-pattern1-part68,2672
(defun scala-font-lock:limit-pattern (&optional start)scala-font-lock:limit-pattern192,7300
(defun scala-font-lock:mark-pattern-part (&optional limit)scala-font-lock:mark-pattern-part211,8102
(defun scala-font-lock:limit-type (&optional start)scala-font-lock:limit-type218,8354
(defun scala-font-lock:limit-simpleType (&optional start)scala-font-lock:limit-simpleType222,8417
(defun scala-font-lock:mark-simpleType (&optional limit)scala-font-lock:mark-simpleType240,8992
(defun scala-font-lock:mark-string-escapes (limit)scala-font-lock:mark-string-escapes294,10729
(defun scala-font-lock:mark-numberLiteral (re limit)scala-font-lock:mark-numberLiteral300,11008
(defun scala-font-lock:mark-floatingPointLiteral (limit)scala-font-lock:mark-floatingPointLiteral308,11379
(defun scala-font-lock:mark-integerLiteral (limit)scala-font-lock:mark-integerLiteral313,11526
(defun scala-font-lock:keywords ()scala-font-lock:keywords318,11661
(defun scala-font-lock:syntactic-face-function (state)scala-font-lock:syntactic-face-function494,18501
(defface scala-font-lock:var-facescala-font-lock:var-face504,18887
(defvar scala-font-lock:var-face 'scala-font-lock:var-facescala-font-lock:var-face509,19046
(defface scala-font-lock:private-facescala-font-lock:private-face512,19142
(defvar scala-font-lock:private-face 'scala-font-lock:private-facescala-font-lock:private-face517,19295
(defface scala-font-lock:protected-facescala-font-lock:protected-face520,19404
(defvar scala-font-lock:protected-face 'scala-font-lock:protected-facescala-font-lock:protected-face525,19561
(defface scala-font-lock:override-facescala-font-lock:override-face528,19676
(defvar scala-font-lock:override-face 'scala-font-lock:override-facescala-font-lock:override-face533,19831
(defface scala-font-lock:sealed-facescala-font-lock:sealed-face536,19943
(defvar scala-font-lock:sealed-face 'scala-font-lock:sealed-facescala-font-lock:sealed-face541,20094
(defface scala-font-lock:abstract-facescala-font-lock:abstract-face544,20200
(defvar scala-font-lock:abstract-face 'scala-font-lock:abstract-facescala-font-lock:abstract-face549,20355
(defface scala-font-lock:final-facescala-font-lock:final-face552,20467
(defvar scala-font-lock:final-face 'scala-font-lock:final-facescala-font-lock:final-face557,20616
(defface scala-font-lock:implicit-facescala-font-lock:implicit-face560,20719
(defvar scala-font-lock:implicit-face 'scala-font-lock:implicit-facescala-font-lock:implicit-face565,20874
(defface scala-font-lock:lazy-facescala-font-lock:lazy-face568,20986
(defvar scala-font-lock:lazy-face 'scala-font-lock:lazy-facescala-font-lock:lazy-face573,21133
(defface scala-font-lock:var-keyword-facescala-font-lock:var-keyword-face576,21233
(defvar scala-font-lock:var-keyword-face 'scala-font-lock:var-keyword-facescala-font-lock:var-keyword-face581,21386

elpa/scala-mode-1.0.0/scala-mode.el,523
(defgroup scala nilscala31,797
(defmacro scala-mode:make-local-variables (&rest quoted-names)scala-mode:make-local-variables35,889
(defun scala-mode:find-tag ()scala-mode:find-tag38,1053
(defun scala-mode:forward-sexp-function (&optional count)scala-mode:forward-sexp-function65,2251
(defun scala-mode:set-scala-syntax-mode ()scala-mode:set-scala-syntax-mode74,2504
(defun scala-mode:goto-start-of-code ()scala-mode:goto-start-of-code89,3213
(define-derived-mode scala-mode prog-mode "Scala"scala-mode97,3514

elpa/scala-mode-1.0.0/scala-mode-indent.el,6346
(defcustom scala-indent:step 2scala-indent:step12,330
(defcustom scala-indent:indent-value-expression nilscala-indent:indent-value-expression19,541
(defcustom scala-indent:align-parameters nilscala-indent:align-parameters44,943
(defcustom scala-indent:align-forms nilscala-indent:align-forms69,1458
(defconst scala-indent:eager-strategy 0scala-indent:eager-strategy89,1805
(defconst scala-indent:operator-strategy 1scala-indent:operator-strategy91,1885
(defconst scala-indent:reluctant-strategy 2scala-indent:reluctant-strategy93,1968
(defconst scala-indent:keywords-only-strategy 3scala-indent:keywords-only-strategy95,2052
(defcustom scala-indent:default-run-on-strategy 2scala-indent:default-run-on-strategy98,2150
(defcustom scala-indent:add-space-for-scaladoc-asterisk tscala-indent:add-space-for-scaladoc-asterisk121,3099
(defcustom scala-indent:use-javadoc-style nilscala-indent:use-javadoc-style128,3313
(defun scala-indent:run-on-strategy ()scala-indent:run-on-strategy136,3618
(defun scala-indent:toggle-effective-run-on-strategy ()scala-indent:toggle-effective-run-on-strategy142,3832
(defun scala-indent:reset-effective-run-on-strategy ()scala-indent:reset-effective-run-on-strategy160,4724
(defun scala-indent:rotate-run-on-strategy ()scala-indent:rotate-run-on-strategy163,4833
(defun scala-indent:backward-sexp-to-beginning-of-line ()scala-indent:backward-sexp-to-beginning-of-line179,5569
(defun scala-indent:align-anchor ()scala-indent:align-anchor198,6374
(defun scala-indent:value-expression-lead (start anchor &optional not-block-p)scala-indent:value-expression-lead207,6761
(defconst scala-indent:mustNotTerminate-keywords-rescala-indent:mustNotTerminate-keywords-re224,7369
(defconst scala-indent:mustNotTerminate-line-beginning-rescala-indent:mustNotTerminate-line-beginning-re229,7550
(defconst scala-indent:mustTerminate-rescala-indent:mustTerminate-re235,7863
(defconst scala-indent:mustNotContinue-rescala-indent:mustNotContinue-re243,8223
(defconst scala-indent:mustBeContinued-line-end-rescala-indent:mustBeContinued-line-end-re251,8663
(defun scala-indent:run-on-p (&optional point strategy)scala-indent:run-on-p257,8955
(defun scala-indent:run-on-line-p (&optional point strategy)scala-indent:run-on-line-p338,12237
(defun scala-indent:goto-run-on-anchor (&optional point strategy)scala-indent:goto-run-on-anchor346,12545
(defconst scala-indent:double-indent-rescala-indent:double-indent-re360,13183
(defun scala-indent:resolve-run-on-step (start &optional anchor)scala-indent:resolve-run-on-step364,13351
(defconst scala-indent:forms-align-rescala-indent:forms-align-re394,14532
(defun scala-indent:forms-align-p (&optional point)scala-indent:forms-align-p397,14630
(defun scala-indent:goto-forms-align-anchor (&optional point)scala-indent:goto-forms-align-anchor410,15123
(defun scala-indent:resolve-forms-align-step (start anchor)scala-indent:resolve-forms-align-step456,17281
(defun scala-indent:goto-list-anchor-impl (point)scala-indent:goto-list-anchor-impl465,17474
(defun scala-indent:goto-list-anchor (&optional point)scala-indent:goto-list-anchor480,17930
(defun scala-indent:resolve-list-step (start anchor)scala-indent:resolve-list-step488,18291
(defun scala-indent:for-enumerators-p (&optional point)scala-indent:for-enumerators-p493,18442
(defun scala-indent:goto-for-enumerators-anchor (&optional point)scala-indent:goto-for-enumerators-anchor511,19201
(defconst scala-indent:control-keywords-cond-rescala-indent:control-keywords-cond-re523,19634
(defconst scala-indent:control-keywords-other-rescala-indent:control-keywords-other-re528,19848
(defconst scala-indent:control-keywords-rescala-indent:control-keywords-re532,20030
(defun scala-indent:body-p (&optional point)scala-indent:body-p536,20191
(defun scala-indent:goto-body-anchor (&optional point)scala-indent:goto-body-anchor562,21339
(defun scala-indent:resolve-body-step (start &optional anchor)scala-indent:resolve-body-step576,21854
(defun scala-indent:goto-block-anchor (&optional point)scala-indent:goto-block-anchor586,22099
(defun scala-indent:resolve-block-step (start anchor)scala-indent:resolve-block-step610,23220
(defun scala-indent:open-parentheses-line-p (&optional point)scala-indent:open-parentheses-line-p639,24305
(defun scala-indent:goto-open-parentheses-anchor (&optional point)scala-indent:goto-open-parentheses-anchor648,24676
(defun scala-indent:resolve-open-parentheses-step (start anchor)scala-indent:resolve-open-parentheses-step692,26364
(defun scala-indent:goto-line-comment-anchor (&optional point)scala-indent:goto-line-comment-anchor708,26855
(defun scala-indent:apply-indent-rules (rule-indents &optional point)scala-indent:apply-indent-rules725,27417
(defun scala-indent:calculate-indent-for-line (&optional point)scala-indent:calculate-indent-for-line750,28597
(defun scala-indent:indent-line-to (column)scala-indent:indent-line-to767,29490
(defun scala-indent:remove-indent-from-previous-empty-line ()scala-indent:remove-indent-from-previous-empty-line777,29846
(defun scala-indent:indent-code-line (&optional strategy)scala-indent:indent-code-line794,30641
(defun scala-indent:indent-line (&optional strategy)scala-indent:indent-line810,31329
(defun scala-indent:indent-with-reluctant-strategy ()scala-indent:indent-with-reluctant-strategy830,32318
(defun scala-indent:scaladoc-indent (comment-start-pos)scala-indent:scaladoc-indent834,32455
(defun scala-indent:indent-on-parentheses ()scala-indent:indent-on-parentheses852,33112
(defconst scala-indent:indent-on-words-rescala-indent:indent-on-words-re857,33318
(defun scala-indent:indent-on-special-words ()scala-indent:indent-on-special-words861,33455
(defun scala-indent:indent-on-scaladoc-asterisk ()scala-indent:indent-on-scaladoc-asterisk875,34099
(defun scala-indent:fix-scaladoc-close ()scala-indent:fix-scaladoc-close891,34800
(defun scala-indent:insert-asterisk-on-multiline-comment ()scala-indent:insert-asterisk-on-multiline-comment903,35336
(defun scala-mode:indent-scaladoc-asterisk (&optional insert-space-p)scala-mode:indent-scaladoc-asterisk925,36430
(defun scala-indent:fixup-whitespace ()scala-indent:fixup-whitespace929,36573
(defun scala-indent:join-line (&optional arg)scala-indent:join-line943,37058

elpa/scala-mode-1.0.0/scala-mode-prettify-symbols.el,0

elpa/scala-mode-1.0.0/ob-scala.el,642
(defvar org-babel-default-header-args:scala '())org-babel-default-header-args:scala34,1173
(defun org-babel-expand-body:scala (body params &optional processed-params)org-babel-expand-body:scala36,1223
(defun org-babel-execute:scala (body params)org-babel-execute:scala54,1961
(defun org-babel-prep-session:scala (session params)org-babel-prep-session:scala85,3465
(defun org-babel-scala-var-to-scala (var)org-babel-scala-var-to-scala89,3598
(defun org-babel-scala-table-or-string (results)org-babel-scala-table-or-string94,3758
(defun org-babel-scala-initiate-session (&optional session)org-babel-scala-initiate-session107,4337

elpa/scala-mode-1.0.0/scala-mode-pkg.el,100
(define-package "scala-mode" "1.0.0" "Major mode for editing Scala" 'nil :keywords"scala-mode"1,0

elpa/scala-mode-1.0.0/scala-mode-paragraph.el,628
(defconst scala-paragraph:paragraph-line-start-rescala-paragraph:paragraph-line-start-re11,339
(defconst scala-paragraph:scaladoc-list-start-rescala-paragraph:scaladoc-list-start-re17,610
(defconst scala-paragraph:fill-first-line-rescala-paragraph:fill-first-line-re22,797
(defconst scala-paragraph:paragraph-start-rescala-paragraph:paragraph-start-re26,952
(defconst scala-paragraph:paragraph-separate-rescala-paragraph:paragraph-separate-re39,1437
(defun scala-paragraph:fill-function ()scala-paragraph:fill-function45,1624
(defun scala-paragraph:fill-paragraph (&rest args)scala-paragraph:fill-paragraph72,2959

elpa/scala-mode-1.0.0/scala-mode-map.el,228
(defvar scala-mode-mapscala-mode-map7,196
(defun scala-mode-map:add-self-insert-hooks ()scala-mode-map:add-self-insert-hooks14,438
(defun scala-mode-map:add-remove-indent-hook ()scala-mode-map:add-remove-indent-hook24,828

elpa/scala-mode-1.0.0/scala-mode-lib.el,306
(defvar scala-mode:debug-messagesscala-mode:debug-messages5,170
(defmacro scala-lib:column-after (&rest body)scala-lib:column-after9,269
(defmacro scala-lib:point-after (&rest body)scala-lib:point-after14,371
(defun scala-lib:delete-trailing-whitespace ()scala-lib:delete-trailing-whitespace19,463

elpa/scala-mode-1.0.0/scala-mode-autoloads.el,0

elpa/bind-key-2.4/bind-key-autoloads.el,0

elpa/bind-key-2.4/bind-key-pkg.el,363
(define-package "bind-key" "2.4" "A simple way to manage personal keybindings" 'nil :commit "39a8b8812c2c9f6f0b299e6a04e504ef393694ce" :keywords '("keys" "keybinding" "config" "dotemacs") :authors '(("John Wiegley" . "johnw@newartisans.com")) :maintainer '("John Wiegley" . "johnw@newartisans.com") :url "https://github.com/jwiegley/use-package")"bind-key"2,31

elpa/bind-key-2.4/bind-key.el,1099
(defgroup bind-key nilbind-key107,3766
(defcustom bind-key-column-widths '(18 . 40)bind-key-column-widths111,3855
(defcustom bind-key-segregation-regexpbind-key-segregation-regexp116,4010
(defcustom bind-key-describe-special-forms nilbind-key-describe-special-forms123,4244
(defvar override-global-map (make-keymap)override-global-map130,4468
(define-minor-mode override-global-modeoverride-global-mode133,4544
(defvar personal-keybindings nilpersonal-keybindings142,4853
(defmacro bind-key (key-name command &optional keymap predicate)bind-key148,5006
(defmacro unbind-key (key-name &optional keymap)unbind-key194,7061
(defmacro bind-key* (key-name command &optional predicate)bind-key*210,7748
(defun bind-keys-form (args keymap)bind-keys-form214,7942
(defmacro bind-keys (&rest args)bind-keys318,11960
(defmacro bind-keys* (&rest args)bind-keys*336,12676
(defun get-binding-description (elem)get-binding-description339,12774
(defun compare-keybindings (l r)compare-keybindings366,13530
(defun describe-personal-keybindings ()describe-personal-keybindings394,14485

elpa/dash-functional-2.16.0/dash-functional-autoloads.el,0

elpa/dash-functional-2.16.0/dash-functional-pkg.el,245
(define-package "dash-functional" "2.16.0" "Collection of useful combinators for Emacs Lisp" '((dash "2.0.0") (emacs "24")) :commit "258c324d9840901db83b2cabef3fa75bba57c1ba" :keywords '("lisp" "functions" "combinators"))"dash-functional"2,31

elpa/dash-functional-2.16.0/dash-functional.el,776
(defun -partial (fn &rest args)-partial35,1207
(defun -rpartial (fn &rest args)-rpartial42,1495
(defun -juxt (&rest fns)-juxt49,1821
(defun -compose (&rest fns)-compose56,2139
(defun -applify (fn)-applify66,2550
(defun -on (operator transformer)-on71,2706
(defun -flip (func)-flip79,3026
(defun -const (c)-const85,3182
(defmacro -cut (&rest params)-cut91,3320
(defun -not (pred)-not105,3851
(defun -orfn (&rest preds)-orfn111,4039
(defun -andfn (&rest preds)-andfn119,4310
(defun -iteratefn (fn n)-iteratefn127,4573
(defun -counter (&optional beg end inc)-counter142,5043
(defvar -fixfn-max-iterations 1000-fixfn-max-iterations158,5597
(defun -fixfn (fn &optional equal-test halt-test)-fixfn162,5731
(defun -prodfn (&rest fns)-prodfn202,7347

elpa/lsp-java-2.2/lsp-java-boot.el,911
(defcustom lsp-java-boot-enabled tlsp-java-boot-enabled29,911
(defcustom lsp-java-boot-java-tools-jar nillsp-java-boot-java-tools-jar34,1051
(defvar lsp-java-boot--callback nil)lsp-java-boot--callback39,1222
(defun lsp-java-boot--find-tools-jar ()lsp-java-boot--find-tools-jar41,1260
(defun lsp-java--sts-javadoc-hover-link (_workspace params)lsp-java--sts-javadoc-hover-link49,1595
(defun lsp-java-boot--sts-add-classpath-listener (_workspace params)lsp-java-boot--sts-add-classpath-listener57,1953
(defun lsp-java-boot--lens-backend (_ callback)lsp-java-boot--lens-backend65,2304
(define-minor-mode lsp-java-boot-lens-modelsp-java-boot-lens-mode71,2477
(defun lsp-java-boot--sts/hightlight (workspace params)lsp-java-boot--sts/hightlight92,3216
(defun lsp-java-boot--server-jar ()lsp-java-boot--server-jar101,3654
(defun lsp-java-boot--ls-command (port)lsp-java-boot--ls-command110,3917

elpa/lsp-java-2.2/lsp-java-treemacs.el,1279
(defface lsp-java-treemacs-directory-facelsp-java-treemacs-directory-face36,1138
(defface lsp-java-treemacs-extension-root-facelsp-java-treemacs-extension-root-face41,1318
(defface lsp-java-treemacs-file-facelsp-java-treemacs-file-face46,1476
(defun lsp-java-treemacs--is-root (dir-or-project)lsp-java-treemacs--is-root51,1618
(defun lsp-java-treemacs--get-libraries (project-uri)lsp-java-treemacs--get-libraries61,2025
(defun lsp-java-treemacs--library-children (project-uri node-id)lsp-java-treemacs--library-children68,2387
(defun lsp-java-treemacs--external-library-children (project-uri node-id path)lsp-java-treemacs--external-library-children76,2799
(defun lsp-java-treemacs--open-file (_arg)lsp-java-treemacs--open-file85,3301
(defmacro lsp-java-treemacs--setup-icon (var file-name &rest extensions)lsp-java-treemacs--setup-icon95,3671
(defmacro treemacs--lsp-node-or-folder ()treemacs--lsp-node-or-folder136,6437
(defun lsp-java-treemacs--folders-change (added removed)lsp-java-treemacs--folders-change218,10474
(defun lsp-java-treemacs--get-projects ()lsp-java-treemacs--get-projects229,10978
(defun lsp-java-treemacs-register ()lsp-java-treemacs-register235,11163
(defun lsp-java-treemacs-unregister ()lsp-java-treemacs-unregister258,12079

elpa/lsp-java-2.2/lsp-java-pkg.el,76
(define-package "lsp-java" "2.2" "Java support for lsp-mode""lsp-java"1,0

elpa/lsp-java-2.2/lsp-java-autoloads.el,0

elpa/lsp-java-2.2/lsp-java.el,12946
(defgroup lsp-java nillsp-java36,1161
(defcustom lsp-java-server-install-dir (locate-user-emacs-file "eclipse.jdt.ls/server/")lsp-java-server-install-dir42,1330
(defcustom lsp-java-jdt-download-url "http://download.eclipse.org/jdtls/snapshots/jdt-language-server-latest.tar.gz"lsp-java-jdt-download-url49,1553
(defcustom lsp-java-java-path "java"lsp-java-java-path55,1866
(defvar lsp-java-progress-string ""lsp-java-progress-string60,1973
(defface lsp-java-progress-facelsp-java-progress-face63,2072
(defcustom lsp-java-workspace-dir (expand-file-name (locate-user-emacs-file "workspace/"))lsp-java-workspace-dir68,2184
(defcustom lsp-java-workspace-cache-dir (expand-file-name ".cache/" lsp-java-workspace-dir)lsp-java-workspace-cache-dir74,2360
(defcustom lsp-java-themes-directory (f-join (f-dirname (or load-file-name buffer-file-name)) "icons")lsp-java-themes-directory80,2543
(defcustom lsp-java-theme "vscode"lsp-java-theme85,2719
(defcustom lsp-java-pop-buffer-function 'lsp-java-show-bufferlsp-java-pop-buffer-function90,2809
(defcustom lsp-java-vmargs '("-noverify" "-Xmx1G" "-XX:+UseG1GC" "-XX:+UseStringDeduplication")lsp-java-vmargs95,2978
(defcustom lsp-java-9-args '("--add-modules=ALL-SYSTEM" "--add-opens java.base/java.util=ALL-UNNAMED" "--add-opens java.base/java.lang=ALL-UNNAMED")lsp-java-9-args106,3395
(defcustom lsp-java-errors-incomplete-classpath-severity "warning"lsp-java-errors-incomplete-classpath-severity112,3655
(defcustom lsp-java-configuration-check-project-settings-exclusions tlsp-java-configuration-check-project-settings-exclusions117,3874
(defcustom lsp-java-configuration-update-build-configuration "automatic"lsp-java-configuration-update-build-configuration123,4116
(defcustom lsp-java-trace-server "off"lsp-java-trace-server128,4340
(defcustom lsp-java-import-gradle-enabled tlsp-java-import-gradle-enabled133,4508
(defcustom lsp-java-import-maven-enabled tlsp-java-import-maven-enabled137,4611
(defcustom lsp-java-maven-download-sources nillsp-java-maven-download-sources141,4712
(defcustom lsp-java-references-code-lens-enabled nillsp-java-references-code-lens-enabled145,4839
(defcustom lsp-java-signature-help-enabled tlsp-java-signature-help-enabled149,4956
(defcustom lsp-java-implementations-code-lens-enabled nillsp-java-implementations-code-lens-enabled153,5059
(defcustom lsp-java-configuration-maven-user-settings nillsp-java-configuration-maven-user-settings157,5186
(defcustom lsp-java-format-enabled tlsp-java-format-enabled161,5295
(defcustom lsp-java-save-actions-organize-imports nillsp-java-save-actions-organize-imports165,5393
(defcustom lsp-java-import-exclusions ["**/node_modules/**" "**/.metadata/**" "**/archetype-resources/**" "**/META-INF/maven/**"]lsp-java-import-exclusions169,5522
(defcustom lsp-java-content-provider-preferred nillsp-java-content-provider-preferred173,5729
(defcustom lsp-java-autobuild-enabled tlsp-java-autobuild-enabled178,5866
(defcustom lsp-java-max-concurrent-builds 1lsp-java-max-concurrent-builds182,5961
(defcustom lsp-java-completion-enabled tlsp-java-completion-enabled186,6059
(defcustom lsp-java-completion-overwrite tlsp-java-completion-overwrite190,6162
(defcustom lsp-java-completion-guess-method-arguments tlsp-java-completion-guess-method-arguments195,6340
(defcustom lsp-java-completion-favorite-static-members ["org.junit.Assert.*" "org.junit.Assume.*" "org.junit.jupiter.api.Assertions.*" "org.junit.jupiter.api.Assumptions.*" "org.junit.jupiter.api.DynamicContainer.*" "org.junit.jupiter.api.DynamicTest.*" "org.mockito.Mockito.*" "org.mockito.ArgumentMatchers.*" "org.mockito.Answers.*"]lsp-java-completion-favorite-static-members200,6531
(defcustom lsp-java-completion-import-order ["java" "javax" "com" "org"]lsp-java-completion-import-order207,7042
(defcustom lsp-java-folding-range-enabled tlsp-java-folding-range-enabled214,7318
(defcustom lsp-java-progress-reports-enabled tlsp-java-progress-reports-enabled220,7519
(defcustom lsp-java-format-settings-url nillsp-java-format-settings-url225,7677
(defcustom lsp-java-format-settings-profile nillsp-java-format-settings-profile230,7888
(defcustom lsp-java-format-comments-enabled tlsp-java-format-comments-enabled235,8027
(defcustom lsp-java-format-on-type-enabled tlsp-java-format-on-type-enabled239,8142
(defcustom lsp-java-bundles nillsp-java-bundles244,8286
(defcustom lsp-java-code-generation-hash-code-equals-use-java7objects nillsp-java-code-generation-hash-code-equals-use-java7objects248,8411
(defcustom lsp-java-code-generation-hash-code-equals-use-instanceof nillsp-java-code-generation-hash-code-equals-use-instanceof254,8641
(defcustom lsp-java-code-generation-use-blocks nillsp-java-code-generation-use-blocks259,8819
(defcustom lsp-java-code-generation-generate-comments nillsp-java-code-generation-generate-comments263,8952
(defcustom lsp-java-code-generation-to-string-template "${object.className} [${member.name()}=${member.value}, ${otherMembers}]"lsp-java-code-generation-to-string-template267,9087
(defcustom lsp-java-code-generation-to-string-code-style "STRING_CONCATENATION"lsp-java-code-generation-to-string-code-style271,9287
(defcustom lsp-java-code-generation-to-string-skip-null-values nillsp-java-code-generation-to-string-skip-null-values275,9530
(defcustom lsp-java-code-generation-to-string-list-array-contents tlsp-java-code-generation-to-string-list-array-contents279,9674
(defcustom lsp-java-code-generation-to-string-limit-elements 0lsp-java-code-generation-to-string-limit-elements283,9825
(defcustom lsp-java-inhibit-message tlsp-java-inhibit-message327,12964
(defvar lsp-java--download-root "https://raw.githubusercontent.com/yyoncho/lsp-java/che-dep/install/")lsp-java--download-root332,13106
(defun lsp-java--json-bool (param)lsp-java--json-bool334,13210
(defun lsp-java--list-or-empty (param)lsp-java--list-or-empty338,13337
(defvar lsp-java-buffer-configurationslsp-java-buffer-configurations342,13462
(defun lsp-java-show-buffer (buf)lsp-java-show-buffer345,13577
(defun lsp-java--locate-server-jar ()lsp-java--locate-server-jar358,14234
(defun lsp-java--locate-server-config ()lsp-java--locate-server-config372,15044
(defun lsp-java--current-workspace-or-lose ()lsp-java--current-workspace-or-lose384,15542
(defun lsp-java-build-project (&optional full)lsp-java-build-project390,15784
(defun lsp-java-update-project-configuration ()lsp-java-update-project-configuration398,16049
(defun lsp-java--ensure-dir (path)lsp-java--ensure-dir409,16624
(defun lsp-java--get-java-version ()lsp-java--get-java-version426,17227
(defun lsp-java--java-9-plus-p ()lsp-java--java-9-plus-p432,17557
(defun lsp-java--ls-command ()lsp-java--ls-command437,17728
(defun lsp-java--is-root (dir)lsp-java--is-root459,18440
(defun lsp-java--get-root ()lsp-java--get-root466,18655
(defun lsp-java--language-status-callback (workspace params)lsp-java--language-status-callback479,19309
(defun lsp-java--apply-workspace-edit (action)lsp-java--apply-workspace-edit496,20229
(defun lsp-java--actionable-notification-callback (_workspace params)lsp-java--actionable-notification-callback502,20425
(defun lsp-java--progress-report (_workspace params)lsp-java--progress-report509,20678
(defun lsp-java--render-string (str)lsp-java--render-string521,21136
(defun lsp-java--prepare-mvnw ()lsp-java--prepare-mvnw531,21400
(defun lsp-java--bundles-dir ()lsp-java--bundles-dir548,22133
(defun lsp-java--ensure-server ()lsp-java--ensure-server552,22270
(defun lsp-java-update-server ()lsp-java-update-server577,23809
(defun lsp-java--workspace-notify (&rest _args)lsp-java--workspace-notify584,23993
(defun lsp-java--get-filename (url)lsp-java--get-filename587,24073
(defun lsp-java--get-metadata-location (file-location)lsp-java--get-metadata-location599,24628
(defun lsp-java--resolve-uri (uri)lsp-java--resolve-uri605,24880
(defun lsp-java-actionable-notifications ()lsp-java-actionable-notifications621,25666
(defun lsp-java-execute-matching-action (regexp &optional not-found-message)lsp-java-execute-matching-action637,26476
(defun lsp-java-extract-to-local-variable (arg)lsp-java-extract-to-local-variable648,27057
(defun lsp-java-conver-to-static-import (arg)lsp-java-conver-to-static-import658,27386
(defun lsp-java-extract-to-constant ()lsp-java-extract-to-constant668,27702
(defun lsp-java-add-throws ()lsp-java-add-throws673,27852
(defun lsp-java-add-unimplemented-methods ()lsp-java-add-unimplemented-methods678,27996
(defun lsp-java-create-parameter ()lsp-java-create-parameter683,28158
(defun lsp-java-create-field ()lsp-java-create-field688,28304
(defun lsp-java-create-local ()lsp-java-create-local693,28438
(defun lsp-java-extract-method ()lsp-java-extract-method698,28579
(defun lsp-java-add-import ()lsp-java-add-import703,28720
(defun lsp-java--bundles ()lsp-java--bundles708,28843
(defun lsp-java--workspace-folders (workspace)lsp-java--workspace-folders723,29381
(defun lsp-java-update-project-uris ()lsp-java-update-project-uris727,29498
(defun lsp-java--set-project-uris (workspace project-uris)lsp-java--set-project-uris740,30051
(defun lsp-java--get-project-uris (workspace)lsp-java--get-project-uris744,30240
(defun lsp-java--find-workspace (file-uri)lsp-java--find-workspace756,30888
(defun lsp-java--find-project-uri (file-uri)lsp-java--find-project-uri760,31040
(defun lsp-java--nearest-widget ()lsp-java--nearest-widget774,31933
(defun lsp-java--tree-under-cursor ()lsp-java--tree-under-cursor783,32180
(defun lsp-java-classpath-open ()lsp-java-classpath-open790,32430
(defvar lsp-java-classpath-mode-maplsp-java-classpath-mode-map799,32727
(define-derived-mode lsp-java-classpath-mode special-mode "lsp-java-classpath"lsp-java-classpath-mode804,32868
(define-widget 'lsp-java-widget-guide 'itemlsp-java-widget-guide807,32988
(define-widget 'lsp-java-widget-end-guide 'itemlsp-java-widget-end-guide812,33094
(define-widget 'lsp-java-widget-handle 'itemlsp-java-widget-handle817,33213
(defmacro lsp-java-define-widget (name &optional image-open image-closed image-empty)lsp-java-define-widget822,33365
(defvar lsp-java-icons-file-type-jar (lsp-java-define-widget "file_type_jar"))lsp-java-icons-file-type-jar853,34843
(defvar lsp-java-icons-file-type-class (lsp-java-define-widget "file_type_class"))lsp-java-icons-file-type-class854,34922
(defvar lsp-java-icons-folder-type-component (lsp-java-define-widget "folder_type_component"lsp-java-icons-folder-type-component855,35005
(defvar lsp-java-icons-default-folder (lsp-java-define-widget "default_folder"lsp-java-icons-default-folder858,35293
(defvar lsp-java-icons-folder-type-library (lsp-java-define-widget "folder_type_library"lsp-java-icons-folder-type-library861,35539
(defvar lsp-java-icons-default-root-folder (lsp-java-define-widget "default_root_folder"lsp-java-icons-default-root-folder864,35815
(defvar lsp-java-icons-folder-type-maven (lsp-java-define-widget "folder_type_maven"lsp-java-icons-folder-type-maven867,36091
(defvar lsp-java-icons-error (lsp-java-define-widget "error"))lsp-java-icons-error871,36356
(defvar lsp-java-icons-warning (lsp-java-define-widget "warning"))lsp-java-icons-warning872,36419
(defvar lsp-java-icons-info (lsp-java-define-widget "info"))lsp-java-icons-info873,36486
(defun lsp-java--classpath-get-icon (kind)lsp-java--classpath-get-icon875,36548
(defun lsp-java--classpath-get-node (path kind project-uri)lsp-java--classpath-get-node883,36809
(defun lsp-java--classpath-render-classpath (classpath-entry project-uri)lsp-java--classpath-render-classpath897,37398
(defun lsp-java-classpath-browse ()lsp-java-classpath-browse908,37947
(defun lsp-java-boot--workspace-execute-client-command (_jdt-ls-workspace params)lsp-java-boot--workspace-execute-client-command954,39969
(defun lsp-java-generate-to-string ()lsp-java-generate-to-string976,41111
(defun lsp-java-generate-equals-and-hash-code ()lsp-java-generate-equals-and-hash-code981,41262
(defun lsp-java-generate-overrides ()lsp-java-generate-overrides986,41444
(defun lsp-java-organize-imports ()lsp-java-organize-imports991,41583
(defun lsp-java--completing-read-multiple (message items initial-selection)lsp-java--completing-read-multiple996,41730
(defun lsp-java--apply-document-changes (response)lsp-java--apply-document-changes1012,42447
(defun lsp-java--action-generate-to-string (action)lsp-java--action-generate-to-string1018,42689
(defun lsp-java--action-generate-equals-and-hash-code (action)lsp-java--action-generate-equals-and-hash-code1034,43594
(defun lsp-java--action-organize-imports (action)lsp-java--action-organize-imports1049,44599
(defun lsp-java--override-methods-prompt (action)lsp-java--override-methods-prompt1059,44990
(defun lsp-java-spring-initializr ()lsp-java-spring-initializr1131,50064

elpa/counsel-0.13.0/counsel-autoloads.el,125
(defalias 'counsel-org-goto #'counsel-outline)counsel-org-goto347,10118
(defvar counsel-mode nil "\counsel-mode574,15588

elpa/counsel-0.13.0/counsel.el,40138
(defgroup counsel nilcounsel48,1644
(defun counsel--elisp-to-pcre (regex &optional look-around)counsel--elisp-to-pcre54,1756
(defun counsel-directory-name (dir)counsel-directory-name99,3350
(defun counsel-string-compose (prefix str)counsel-string-compose105,3524
(defun counsel-require-program (cmd)counsel-require-program114,3772
(defun counsel-prompt-function-dir ()counsel-prompt-function-dir129,4417
(defvar counsel--async-time nilcounsel--async-time140,4897
(defvar counsel--async-start nilcounsel--async-start144,5025
(defvar counsel--async-duration nilcounsel--async-duration148,5154
(defvar counsel--async-exit-code-plist ()counsel--async-exit-code-plist152,5290
(defvar counsel--async-last-error-string nilcounsel--async-last-error-string157,5470
(defun counsel-set-async-exit-code (cmd number str)counsel-set-async-exit-code160,5577
(defvar counsel-async-split-string-re-alist '((t . "\n"))counsel-async-split-string-re-alist168,5916
(defvar counsel-async-ignore-re-alist nilcounsel-async-ignore-re-alist171,6033
(defvar counsel--async-last-command nilcounsel--async-last-command174,6158
(defun counsel--async-command (cmd &optional sentinel filter name)counsel--async-command177,6260
(defun counsel--split-string (&optional str)counsel--split-string201,7382
(defun counsel--async-sentinel (process _msg)counsel--async-sentinel207,7538
(defcustom counsel-async-filter-update-time 500000counsel-async-filter-update-time244,9314
(defun counsel--async-filter (process str)counsel--async-filter248,9463
(defun counsel-delete-process (&optional name)counsel-delete-process271,10560
(defun counsel-el ()counsel-el280,10827
(defun counsel-cl ()counsel-cl316,12030
(defun counsel-jedi ()counsel-jedi333,12611
(defun counsel--py-action (symbol-name)counsel--py-action344,12959
(defun counsel--generic (completion-fn)counsel--generic358,13408
(defun counsel-clj ()counsel-clj377,14037
(defvar company-candidates)company-candidates387,14251
(defvar company-common)company-common388,14279
(defvar company-prefix)company-prefix389,14303
(defun counsel-company ()counsel-company395,14486
(defun counsel-irony ()counsel-irony421,15378
(defun counsel-irony-callback (candidates)counsel-irony-callback426,15523
(defun counsel-irony-annotate (x)counsel-irony-annotate441,16176
(defvar counsel-describe-mapcounsel-describe-map450,16476
(defvar counsel-describe-symbol-history ()counsel-describe-symbol-history461,16804
(defun counsel-find-symbol ()counsel-find-symbol466,16977
(defun counsel--info-lookup-symbol ()counsel--info-lookup-symbol472,17168
(defvar find-tag-marker-ring)find-tag-marker-ring477,17326
(defalias 'counsel--push-xref-markercounsel--push-xref-marker480,17406
(defun counsel--find-symbol (x)counsel--find-symbol488,17688
(defun counsel--variable-p (symbol)counsel--variable-p513,18595
(defcustom counsel-describe-variable-function #'describe-variablecounsel-describe-variable-function519,18804
(defun counsel-describe-variable-transformer (var)counsel-describe-variable-transformer523,18955
(defun counsel-describe-variable ()counsel-describe-variable530,19165
(defcustom counsel-describe-function-function #'describe-functioncounsel-describe-function-function558,20142
(defun counsel-describe-function-transformer (function-name)counsel-describe-function-transformer562,20293
(defun ivy-function-called-at-point ()ivy-function-called-at-point568,20535
(defcustom counsel-describe-function-preselect #'ivy-thing-at-pointcounsel-describe-function-preselect572,20645
(defun counsel-describe-function ()counsel-describe-function579,20912
(defvar counsel-set-variable-history nilcounsel-set-variable-history604,21881
(defun counsel-read-setq-expression (sym)counsel-read-setq-expression607,21970
(defun counsel--setq-doconst (x)counsel--setq-doconst631,23220
(defface counsel-variable-documentationcounsel-variable-documentation652,23897
(defun counsel-set-variable (sym)counsel-set-variable658,24059
(defun counsel-apropos ()counsel-apropos717,26616
(defvar info-lookup-mode)info-lookup-mode748,28058
(defun counsel-info-lookup-symbol (symbol &optional mode)counsel-info-lookup-symbol757,28421
(defface counsel-key-bindingcounsel-key-binding783,29519
(defface counsel-active-modecounsel-active-mode788,29660
(defcustom counsel-alias-expand tcounsel-alias-expand793,29804
(defun counsel-M-x-transformer (cmd)counsel-M-x-transformer798,29937
(defvar amx-initialized)amx-initialized825,31136
(defvar amx-cache)amx-cache826,31161
(defvar smex-initialized-p)smex-initialized-p831,31355
(defvar smex-ido-cache)smex-ido-cache832,31383
(defun counsel--M-x-externs ()counsel--M-x-externs838,31591
(defun counsel--M-x-prompt ()counsel--M-x-prompt857,32261
(defvar counsel-M-x-history nilcounsel-M-x-history871,32770
(defun counsel-M-x-action (cmd)counsel-M-x-action874,32835
(defun counsel-M-x (&optional initial-input)counsel-M-x887,33198
(defun counsel-command-history-action-eval (cmd)counsel-command-history-action-eval924,34756
(defun counsel-command-history-action-edit-and-eval (cmd)counsel-command-history-action-edit-and-eval928,34853
(defun counsel-command-history ()counsel-command-history938,35204
(defun counsel-library-candidates ()counsel-library-candidates947,35518
(defun counsel-load-library ()counsel-load-library990,37481
(defun counsel-find-library-other-window (library)counsel-find-library-other-window1007,38043
(defun counsel-find-library-other-frame (library)counsel-find-library-other-frame1011,38199
(defun counsel-find-library ()counsel-find-library1023,38590
(defun counsel-load-theme-action (x)counsel-load-theme-action1036,39023
(defun counsel-load-theme ()counsel-load-theme1047,39357
(defvar counsel-descbinds-history nilcounsel-descbinds-history1065,39933
(defun counsel--descbinds-cands (&optional prefix buffer)counsel--descbinds-cands1068,40010
(defcustom counsel-descbinds-function #'describe-functioncounsel-descbinds-function1104,41516
(defun counsel-descbinds-action-describe (x)counsel-descbinds-action-describe1108,41659
(defun counsel-descbinds-action-exec (x)counsel-descbinds-action-exec1114,41863
(defun counsel-descbinds-action-find (x)counsel-descbinds-action-find1120,42042
(defun counsel-descbinds-action-info (x)counsel-descbinds-action-info1126,42250
(defun counsel-descbinds (&optional prefix buffer)counsel-descbinds1133,42513
(defcustom counsel-describe-face-function #'describe-facecounsel-describe-face-function1144,42971
(defun counsel--face-at-point ()counsel--face-at-point1148,43112
(defun counsel-describe-face ()counsel-describe-face1156,43393
(defun counsel-customize-face (name)counsel-customize-face1169,43789
(defun counsel-customize-face-other-window (name)counsel-customize-face-other-window1173,43891
(defvar counsel--faces-format "%-40s %s")counsel--faces-format1183,44216
(defun counsel--faces-format-function (names)counsel--faces-format-function1185,44259
(defun counsel-faces ()counsel-faces1198,44726
(defvar counsel-git-cmd "git ls-files --full-name --"counsel-git-cmd1225,45588
(defun counsel--dominating-file (file &optional dir)counsel--dominating-file1233,45808
(defun counsel-locate-git-root ()counsel-locate-git-root1240,46133
(defun counsel-git-cands ()counsel-git-cands1245,46309
(defun counsel-git (&optional initial-input)counsel-git1253,46493
(defun counsel-git-action (x)counsel-git-action1267,46990
(defun counsel-git-occur (&optional _cands)counsel-git-occur1273,47168
(defvar counsel-dired-listing-switches "-alh"counsel-dired-listing-switches1282,47470
(defun counsel-cmd-to-dired (full-cmd &optional filter)counsel-cmd-to-dired1285,47574
(defvar counsel-git-grep-mapcounsel-git-grep-map1312,48636
(defvar counsel-git-grep-cmd-default "git --no-pager grep --full-name -n --no-color -i -I -e \"%s\""counsel-git-grep-cmd-default1320,48948
(defvar counsel-git-grep-cmd nilcounsel-git-grep-cmd1323,49095
(defvar counsel-git-grep-history nilcounsel-git-grep-history1326,49176
(defvar counsel-git-grep-cmd-historycounsel-git-grep-cmd-history1329,49251
(defcustom counsel-grep-post-action-hook nilcounsel-grep-post-action-hook1333,49379
(defcustom counsel-git-grep-cmd-function #'counsel-git-grep-cmd-function-defaultcounsel-git-grep-cmd-function1338,49532
(defun counsel-git-grep-cmd-function-default (str)counsel-git-grep-cmd-function-default1345,49854
(defun counsel-git-grep-cmd-function-ignore-order (str)counsel-git-grep-cmd-function-ignore-order1353,50169
(defun counsel-git-grep-function (string)counsel-git-grep-function1360,50442
(defun counsel-git-grep-action (x)counsel-git-grep-action1369,50667
(defun counsel-git-grep-transformer (str)counsel-git-grep-transformer1388,51492
(defvar counsel-git-grep-projects-alist nilcounsel-git-grep-projects-alist1399,51949
(defun counsel--git-grep-cmd-and-proj (cmd)counsel--git-grep-cmd-and-proj1404,52140
(defun counsel--call (command &optional result-fn)counsel--call1426,52902
(defun counsel--command (&rest command)counsel--command1464,54875
(defun counsel--grep-unwind ()counsel--grep-unwind1468,54983
(defun counsel-git-grep (&optional initial-input initial-directory cmd)counsel-git-grep1473,55078
(defun counsel-git-grep-proj-function (str)counsel-git-grep-proj-function1509,56616
(defun counsel-git-grep-switch-cmd ()counsel-git-grep-switch-cmd1518,56891
(defun counsel--normalize-grep-match (str)counsel--normalize-grep-match1530,57372
(defun counsel--git-grep-occur-cmd (input)counsel--git-grep-occur-cmd1542,57740
(defun counsel-git-grep-occur (&optional _cands)counsel-git-grep-occur1560,58540
(defun counsel-git-grep-query-replace ()counsel-git-grep-query-replace1564,58708
(defun counsel-git-stash-kill-action (x)counsel-git-stash-kill-action1590,59834
(defun counsel-git-stash ()counsel-git-stash1597,60119
(defvar counsel-git-log-cmd "GIT_PAGER=cat git log --grep '%s'"counsel-git-log-cmd1611,60638
(defun counsel-git-log-function (str)counsel-git-log-function1614,60738
(defun counsel-git-log-action (x)counsel-git-log-action1629,61278
(defun counsel-git-log-show-commit-action (log-entry)counsel-git-log-show-commit-action1635,61433
(defun counsel-git-change-worktree-action (git-root-dir tree)counsel-git-change-worktree-action1646,61815
(defun counsel-git-worktree-list ()counsel-git-worktree-list1655,62281
(defun counsel-git-worktree-parse-root (tree)counsel-git-worktree-parse-root1660,62519
(defun counsel-git-close-worktree-files-action (root-dir)counsel-git-close-worktree-files-action1664,62655
(defun counsel-git-change-worktree ()counsel-git-change-worktree1679,63176
(defun counsel-git-checkout-action (branch)counsel-git-checkout-action1694,63881
(defun counsel-git-branch-list ()counsel-git-branch-list1704,64294
(defun counsel-git-checkout ()counsel-git-checkout1716,64814
(defvar counsel-yank-pop-truncate-radius)counsel-yank-pop-truncate-radius1723,65053
(defun counsel--git-log-format-function (str)counsel--git-log-format-function1725,65096
(defun counsel-git-log ()counsel-git-log1730,65250
(defvar counsel-find-file-mapcounsel-find-file-map1748,65837
(defun counsel-find-file-cd-bookmark-action (_)counsel-find-file-cd-bookmark-action1759,66326
(defcustom counsel-root-command "sudo"counsel-root-command1771,66798
(defun counsel-find-file-as-root (x)counsel-find-file-as-root1775,66892
(defun counsel--yes-or-no-p (fmt &rest args)counsel--yes-or-no-p1792,67616
(defun counsel-find-file-copy (x)counsel-find-file-copy1805,68195
(defun counsel-find-file-delete (x)counsel-find-file-delete1814,68501
(defun counsel-find-file-move (x)counsel-find-file-move1826,69053
(defun counsel-find-file-mkdir-action (_x)counsel-find-file-mkdir-action1835,69373
(defcustom counsel-find-file-at-point nilcounsel-find-file-at-point1857,70281
(defcustom counsel-preselect-current-file nilcounsel-preselect-current-file1861,70405
(defcustom counsel-find-file-ignore-regexp nilcounsel-find-file-ignore-regexp1865,70534
(defvar counsel--find-file-predicate nilcounsel--find-file-predicate1884,71399
(defun counsel--find-file-matcher (regexp candidates)counsel--find-file-matcher1887,71514
(defvar counsel-find-file-speedup-remote tcounsel-find-file-speedup-remote1913,72406
(defcustom counsel-find-file-extern-extensions '("mp4" "mkv" "xlsx")counsel-find-file-extern-extensions1916,72525
(defun counsel-find-file-action (x)counsel-find-file-action1920,72706
(defun counsel--preselect-file ()counsel--preselect-file1932,73175
(defun counsel--find-file-1 (prompt initial-input action caller)counsel--find-file-11946,73658
(defun counsel-find-file (&optional initial-input)counsel-find-file1962,74273
(defvar counsel-find-file-occur-cmd "ls -a | %s | xargs -d '\\n' ls -d --group-directories-first"counsel-find-file-occur-cmd1975,74678
(defvar counsel-find-file-occur-use-find (not (eq system-type 'gnu/linux))counsel-find-file-occur-use-find1978,74827
(defun counsel--expand-ls (cmd)counsel--expand-ls1981,74983
(defvar counsel-file-name-filter-alistcounsel-file-name-filter-alist1985,75141
(defun counsel--file-name-filter (&optional use-ignore)counsel--file-name-filter1996,75567
(defun counsel--occur-cmd-find ()counsel--occur-cmd-find2026,76990
(defun counsel--cmd-to-dired-by-type (type cmd)counsel--cmd-to-dired-by-type2035,77288
(defun counsel-find-file-occur (&optional _cands)counsel-find-file-occur2044,77559
(defvar counsel-up-directory-level tcounsel-up-directory-level2059,78102
(defun counsel-up-directory ()counsel-up-directory2070,78559
(defun counsel-down-directory ()counsel-down-directory2097,79635
(defun counsel-at-git-issue-p ()counsel-at-git-issue-p2102,79751
(defun counsel-github-url-p ()counsel-github-url-p2110,80106
(defun counsel-emacs-url-p ()counsel-emacs-url-p2130,80965
(defvar counsel-url-expansions-alist nilcounsel-url-expansions-alist2141,81405
(defun counsel-url-expand ()counsel-url-expand2167,82480
(defun counsel-dired (&optional initial-input)counsel-dired2189,83258
(defvar recentf-list)recentf-list2203,83726
(defun counsel-recentf ()counsel-recentf2207,83806
(defun counsel-buffer-or-recentf-candidates ()counsel-buffer-or-recentf-candidates2224,84354
(defun counsel-buffer-or-recentf ()counsel-buffer-or-recentf2240,84871
(defun counsel-buffer-or-recentf-transformer (var)counsel-buffer-or-recentf-transformer2261,85646
(defcustom counsel-bookmark-avoid-dired nilcounsel-bookmark-avoid-dired2268,85894
(defvar bookmark-alist)bookmark-alist2273,86092
(defun counsel-bookmark ()counsel-bookmark2280,86344
(defun counsel--apply-bookmark-fn (fn)counsel--apply-bookmark-fn2301,87298
(defun counsel-bookmarked-directory--candidates ()counsel-bookmarked-directory--candidates2316,87790
(defun counsel-bookmarked-directory ()counsel-bookmarked-directory2325,88097
(defun counsel-file-register ()counsel-file-register2348,88990
(defcustom counsel-locate-cmd (cond ((memq system-type '(darwin berkeley-unix))counsel-locate-cmd2384,90414
(defvar counsel-locate-history nilcounsel-locate-history2407,91481
(defun counsel-locate-action-extern (x)counsel-locate-action-extern2411,91567
(defalias 'counsel-find-file-extern #'counsel-locate-action-extern)counsel-find-file-extern2425,92206
(defun counsel-locate-action-dired (x)counsel-locate-action-dired2429,92316
(defun counsel-locate-cmd-default (input)counsel-locate-cmd-default2433,92405
(defun counsel-locate-cmd-noregex (input)counsel-locate-cmd-noregex2440,92630
(defun counsel-locate-cmd-mdfind (input)counsel-locate-cmd-mdfind2445,92788
(defvar w32-ansi-code-page)w32-ansi-code-page2450,92948
(defun counsel-locate-cmd-es (input)counsel-locate-cmd-es2452,92977
(defun counsel-locate-function (input)counsel-locate-function2467,93633
(defcustom counsel-locate-db-path "~/.local/mlocate.db"counsel-locate-db-path2476,93857
(defun counsel-file-stale-p (fname seconds)counsel-file-stale-p2480,94007
(defun counsel--locate-updatedb ()counsel--locate-updatedb2488,94237
(defun counsel-locate (&optional initial-input)counsel-locate2499,94672
(defvar counsel-fzf-cmd "fzf -f \"%s\""counsel-fzf-cmd2520,95422
(defvar counsel--fzf-dir nilcounsel--fzf-dir2523,95495
(defvar counsel-fzf-dir-function 'counsel-fzf-dir-function-projectilecounsel-fzf-dir-function2526,95560
(defun counsel-fzf-dir-function-projectile ()counsel-fzf-dir-function-projectile2529,95686
(defun counsel-fzf-function (str)counsel-fzf-function2537,95912
(defun counsel-fzf (&optional initial-input initial-directory fzf-prompt)counsel-fzf2545,96125
(defun counsel-fzf-action (x)counsel-fzf-action2574,97289
(defun counsel-fzf-occur (&optional _cands)counsel-fzf-occur2580,97452
(defun counsel-dpkg ()counsel-dpkg2596,97886
(defun counsel-rpm ()counsel-rpm2617,98641
(defun counsel--find-return-list (args)counsel--find-return-list2636,99374
(defcustom counsel-file-jump-args (split-string ". -name .git -prune -o -type f -print")counsel-file-jump-args2651,99876
(defun counsel-file-jump (&optional initial-input initial-directory)counsel-file-jump2657,100101
(defcustom counsel-dired-jump-args (split-string ". -name .git -prune -o -type d -print")counsel-dired-jump-args2685,101270
(defun counsel-dired-jump (&optional initial-input initial-directory)counsel-dired-jump2691,101498
(defun counsel--grep-mode-occur (git-grep-dir-is-file)counsel--grep-mode-occur2713,102493
(defvar counsel-ag-mapcounsel-ag-map2734,103493
(defcustom counsel-ag-base-commandcounsel-ag-base-command2742,103778
(defvar counsel-ag-command nil)counsel-ag-command2751,104095
(defvar counsel--grep-tool-look-around t)counsel--grep-tool-look-around2753,104128
(defvar counsel--regex-look-around nil)counsel--regex-look-around2755,104171
(defconst counsel--command-args-separator "-- ")counsel--command-args-separator2757,104212
(defun counsel--split-command-args (arguments)counsel--split-command-args2759,104262
(defun counsel--format-ag-command (extra-args needle)counsel--format-ag-command2772,104840
(defun counsel--grep-regex (str)counsel--grep-regex2781,105217
(defun counsel--ag-extra-switches (regex)counsel--ag-extra-switches2787,105374
(defun counsel-ag-function (string)counsel-ag-function2794,105643
(defun counsel-read-directory-name (prompt)counsel-read-directory-name2856,108412
(defun counsel-cd ()counsel-cd2869,108956
(defun counsel-grep-like-occur (cmd-template)counsel-grep-like-occur2878,109281
(defun counsel-ag-occur (&optional _cands)counsel-ag-occur2899,110261
(defcustom counsel-pt-base-command "pt --nocolor --nogroup -e %s"counsel-pt-base-command2905,110427
(defun counsel-pt (&optional initial-input)counsel-pt2910,110581
(defcustom counsel-ack-base-commandcounsel-ack-base-command2926,111161
(defun counsel-ack (&optional initial-input)counsel-ack2935,111398
(defcustom counsel-rg-base-commandcounsel-rg-base-command2947,111846
(defun counsel--rg-targets ()counsel--rg-targets2956,112213
(defun counsel-rg (&optional initial-input initial-directory extra-rg-args rg-prompt)counsel-rg2974,112865
(defvar counsel-grep-mapcounsel-grep-map3002,114053
(defcustom counsel-grep-base-command "grep -E -n -e %s %s"counsel-grep-base-command3009,114281
(defvar counsel-grep-command nil)counsel-grep-command3016,114604
(defun counsel-grep-function (string)counsel-grep-function3018,114639
(defvar counsel--grep-last-pos nilcounsel--grep-last-pos3029,114979
(defun counsel-grep-action (x)counsel-grep-action3035,115261
(defun counsel-grep-occur (&optional _cands)counsel-grep-occur3070,117087
(defvar counsel-grep-history nilcounsel-grep-history3080,117379
(defun counsel-grep (&optional initial-input)counsel-grep3084,117461
(defun counsel-grep-backward (&optional initial-input)counsel-grep-backward3130,119395
(defcustom counsel-grep-swiper-limit 300000counsel-grep-swiper-limit3140,119808
(defcustom counsel-grep-use-swiper-p #'counsel-grep-use-swiper-p-defaultcounsel-grep-use-swiper-p3146,120042
(defun counsel-grep-use-swiper-p-default ()counsel-grep-use-swiper-p-default3154,120412
(defun counsel-grep-or-swiper (&optional initial-input)counsel-grep-or-swiper3160,120574
(defun counsel-grep-or-swiper-backward (&optional initial-input)counsel-grep-or-swiper-backward3177,121202
(defun counsel-recoll-function (str)counsel-recoll-function3187,121666
(defun counsel-recoll (&optional initial-input)counsel-recoll3206,122333
(defvar counsel-org-tags nilcounsel-org-tags3230,123266
(defvar org-outline-regexp)org-outline-regexp3233,123333
(defvar org-indent-mode)org-indent-mode3234,123361
(defvar org-indent-indentation-per-level)org-indent-indentation-per-level3235,123386
(defvar org-tags-column)org-tags-column3236,123428
(defun counsel--org-make-tag-string ()counsel--org-make-tag-string3242,123633
(defun counsel-org-change-tags (tags)counsel-org-change-tags3249,123836
(defun counsel-org--set-tags ()counsel-org--set-tags3284,125323
(defvar org-agenda-bulk-marked-entries)org-agenda-bulk-marked-entries3292,125560
(defun counsel-org-tag-action (x)counsel-org-tag-action3297,125691
(defun counsel-org-tag-prompt ()counsel-org-tag-prompt3336,127574
(defvar org-setting-tags)org-setting-tags3341,127730
(defvar org-last-tags-completion-table)org-last-tags-completion-table3342,127756
(defvar org-tag-persistent-alist)org-tag-persistent-alist3343,127796
(defvar org-tag-alist)org-tag-alist3344,127830
(defvar org-complete-tags-always-offer-all-agenda-tags)org-complete-tags-always-offer-all-agenda-tags3345,127853
(defun counsel--org-get-tags ()counsel--org-get-tags3356,128264
(defun counsel-org-tag ()counsel-org-tag3362,128424
(defvar org-version)org-version3396,129953
(defun counsel-org-tag-agenda ()counsel-org-tag-agenda3399,129990
(defcustom counsel-org-headline-display-tags nilcounsel-org-headline-display-tags3408,130310
(defcustom counsel-org-headline-display-todo nilcounsel-org-headline-display-todo3412,130440
(defcustom counsel-org-headline-display-priority nilcounsel-org-headline-display-priority3416,130579
(defalias 'counsel-org-goto #'counsel-outline)counsel-org-goto3425,130874
(defcustom counsel-org-goto-all-outline-path-prefix nilcounsel-org-goto-all-outline-path-prefix3427,130922
(defun counsel-org-goto-all--outline-path-prefix ()counsel-org-goto-all--outline-path-prefix3435,131265
(defvar counsel-outline-settingscounsel-outline-settings3441,131508
(defun counsel-org-goto-all ()counsel-org-goto-all3511,134237
(defun counsel-org-goto-action (x)counsel-org-goto-action3528,134877
(defun counsel--org-get-heading-args ()counsel--org-get-heading-args3532,134984
(defvar org-attach-directory)org-attach-directory3548,135737
(defun counsel-org-files ()counsel-org-files3550,135768
(defun counsel-org-file ()counsel-org-file3572,136576
(defvar org-entities)org-entities3580,136826
(defvar org-entities-user)org-entities-user3581,136848
(defun counsel-org-entity ()counsel-org-entity3584,136891
(defvar org-capture-templates)org-capture-templates3613,138403
(defvar org-capture-templates-contexts)org-capture-templates-contexts3614,138434
(defun counsel-org-capture ()counsel-org-capture3621,138720
(defvar org-odd-levels-only)org-odd-levels-only3662,140195
(defun counsel-org-agenda-headlines-action-goto (headline)counsel-org-agenda-headlines-action-goto3668,140406
(defvar counsel-org-agenda-headlines-history nilcounsel-org-agenda-headlines-history3679,140738
(defcustom counsel-outline-display-style 'pathcounsel-outline-display-style3682,140837
(defcustom counsel-outline-path-separator "/"counsel-outline-path-separator3703,141549
(defun counsel-org-agenda-headlines--candidates ()counsel-org-agenda-headlines--candidates3711,141809
(defun counsel-org-agenda-headlines ()counsel-org-agenda-headlines3750,143300
(defface counsel--mark-ring-highlightcounsel--mark-ring-highlight3763,143788
(defvar counsel--mark-ring-overlay nilcounsel--mark-ring-overlay3768,143925
(defun counsel--mark-ring-add-highlight ()counsel--mark-ring-add-highlight3771,144042
(defun counsel--mark-ring-delete-highlight ()counsel--mark-ring-delete-highlight3779,144350
(defvar counsel--mark-ring-calling-point 0counsel--mark-ring-calling-point3783,144537
(defun counsel--mark-ring-unwind ()counsel--mark-ring-unwind3786,144634
(defun counsel--mark-ring-update-fn ()counsel--mark-ring-update-fn3791,144819
(defun counsel-mark-ring ()counsel-mark-ring3800,145107
(defvar package--initialized)package--initialized3849,147075
(defvar package-alist)package-alist3850,147105
(defvar package-archive-contents)package-archive-contents3851,147128
(defvar package-archives)package-archives3852,147162
(defvar package-user-dir)package-user-dir3853,147188
(defvar counsel-package-history nilcounsel-package-history3858,147357
(defun counsel--package-candidates ()counsel--package-candidates3861,147430
(defun counsel-package ()counsel-package3884,148422
(defun counsel-package-action (package)counsel-package-action3907,149210
(defun counsel-package-action-describe (package)counsel-package-action-describe3914,149441
(defun counsel-package-action-homepage (package)counsel-package-action-homepage3918,149568
(defun counsel--package-sort (a b)counsel--package-sort3925,149850
(defvar tmm-km-list nil)tmm-km-list3940,150340
(defun counsel-tmm-prompt (menu)counsel-tmm-prompt3945,150494
(defvar tmm-table-undef)tmm-table-undef3964,151199
(defun counsel-tmm ()counsel-tmm3967,151240
(defcustom counsel-yank-pop-truncate-radius 2counsel-yank-pop-truncate-radius3976,151503
(defun counsel--yank-pop-truncate (str)counsel--yank-pop-truncate3980,151634
(defcustom counsel-yank-pop-separator "\n"counsel-yank-pop-separator4005,152623
(defun counsel--yank-pop-format-function (cand-pairs)counsel--yank-pop-format-function4012,152845
(defun counsel--yank-pop-position (s)counsel--yank-pop-position4027,153309
(defun counsel-string-non-blank-p (s)counsel-string-non-blank-p4036,153757
(defcustom counsel-yank-pop-filter #'counsel-string-non-blank-pcounsel-yank-pop-filter4041,153956
(defun counsel--yank-pop-kills ()counsel--yank-pop-kills4051,154418
(defcustom counsel-yank-pop-after-point nilcounsel-yank-pop-after-point4067,155161
(defun counsel-yank-pop-action (s)counsel-yank-pop-action4075,155509
(defun counsel-yank-pop-action-remove (s)counsel-yank-pop-action-remove4093,156149
(defun counsel-yank-pop-action-rotate (s)counsel-yank-pop-action-rotate4105,156660
(defcustom counsel-yank-pop-preselect-last nilcounsel-yank-pop-preselect-last4120,157313
(defun counsel-yank-pop (&optional arg)counsel-yank-pop4137,157917
(defvar counsel-register-actionscounsel-register-actions4176,159511
(defvar counsel-register-history nilcounsel-register-history4190,160128
(defun counsel-register-action (register)counsel-register-action4193,160203
(defun counsel-register ()counsel-register4209,160838
(defun counsel-evil-registers ()counsel-evil-registers4231,161569
(defun counsel-evil-registers-action (s)counsel-evil-registers-action4246,162179
(defvar imenu-auto-rescan)imenu-auto-rescan4255,162431
(defvar imenu-auto-rescan-maxout)imenu-auto-rescan-maxout4256,162458
(defun counsel--imenu-candidates ()counsel--imenu-candidates4260,162589
(defun counsel-imenu-get-candidates-from (alist &optional prefix)counsel-imenu-get-candidates-from4272,163099
(defvar counsel-imenu-mapcounsel-imenu-map4295,163986
(defun counsel-imenu-categorize-functions (items)counsel-imenu-categorize-functions4300,164115
(defun counsel-imenu-action (x)counsel-imenu-action4308,164386
(defun counsel-imenu ()counsel-imenu4313,164475
(defun counsel-list-processes-action-delete (x)counsel-list-processes-action-delete4324,164845
(defun counsel-list-processes-action-switch (x)counsel-list-processes-action-switch4331,165059
(defun counsel-list-processes ()counsel-list-processes4340,165338
(defun counsel-ace-link ()counsel-ace-link4356,165914
(defun counsel-minibuffer-history ()counsel-minibuffer-history4387,167190
(defun counsel--browse-history (ring)counsel--browse-history4397,167552
(defvar eshell-history-ring)eshell-history-ring4406,167897
(defun counsel-esh-history ()counsel-esh-history4409,167942
(defvar comint-input-ring)comint-input-ring4415,168086
(defun counsel-shell-history ()counsel-shell-history4418,168129
(defvar slime-repl-input-history)slime-repl-input-history4424,168271
(defun counsel-slime-repl-history ()counsel-slime-repl-history4427,168321
(defvar hydra-curr-body-fn)hydra-curr-body-fn4434,168511
(defun counsel-hydra-heads ()counsel-hydra-heads4438,168606
(defun counsel-semantic-action (x)counsel-semantic-action4467,169849
(defvar counsel-semantic-history nilcounsel-semantic-history4471,169954
(defun counsel-semantic-format-tag (tag)counsel-semantic-format-tag4474,170029
(defun counsel-flatten-forest (func treep forest)counsel-flatten-forest4484,170424
(defun counsel-semantic-tags ()counsel-semantic-tags4499,171016
(defun counsel-semantic ()counsel-semantic4513,171468
(defun counsel-semantic-or-imenu ()counsel-semantic-or-imenu4528,171930
(defcustom counsel-outline-face-style nilcounsel-outline-face-style4536,172104
(defcustom counsel-outline-custom-faces nilcounsel-outline-custom-faces4574,173746
(defun counsel-outline-title ()counsel-outline-title4585,174126
(defun counsel-outline-title-org ()counsel-outline-title-org4591,174349
(defun counsel-outline-title-markdown ()counsel-outline-title-markdown4597,174562
(defun counsel-outline-title-latex ()counsel-outline-title-latex4607,175022
(defun counsel-outline-level-emacs-lisp ()counsel-outline-level-emacs-lisp4630,176203
(defvar counsel-outline--preselect 0counsel-outline--preselect4638,176515
(defun counsel-outline-candidates (&optional settings prefix)counsel-outline-candidates4641,176615
(defun counsel-outline--add-face (name level &optional face-style custom-faces)counsel-outline--add-face4706,179780
(defun counsel-outline-action (x)counsel-outline-action4721,180477
(defun counsel-outline ()counsel-outline4726,180571
(defvar counsel-ibuffer--buffer-name nilcounsel-ibuffer--buffer-name4740,181202
(defun counsel-ibuffer (&optional name)counsel-ibuffer4744,181313
(defvar ibuffer-movement-cycle)ibuffer-movement-cycle4757,181888
(defun counsel-ibuffer--get-buffers ()counsel-ibuffer--get-buffers4759,181921
(defun counsel-ibuffer-visit-buffer (x)counsel-ibuffer-visit-buffer4788,183194
(defun counsel-ibuffer-visit-buffer-other-window (x)counsel-ibuffer-visit-buffer-other-window4792,183302
(defun counsel-ibuffer-visit-ibuffer (_)counsel-ibuffer-visit-ibuffer4796,183454
(defun counsel--buffers-with-mode (mode)counsel--buffers-with-mode4806,183778
(defun counsel-switch-to-shell-buffer ()counsel-switch-to-shell-buffer4817,184102
(defun counsel--switch-to-shell (name)counsel--switch-to-shell4824,184377
(defvar counsel-unicode-char-history nilcounsel-unicode-char-history4836,184896
(defun counsel--unicode-names ()counsel--unicode-names4839,184979
(defvar counsel--unicode-tablecounsel--unicode-table4859,185883
(defun counsel-unicode-char (&optional count)counsel-unicode-char4865,186114
(defun counsel-unicode-copy (name)counsel-unicode-copy4884,186889
(defun counsel-colors-action-insert-hex (color)counsel-colors-action-insert-hex4893,187154
(defun counsel-colors-action-kill-hex (color)counsel-colors-action-kill-hex4897,187295
(defvar counsel-colors-emacs-history ()counsel-colors-emacs-history4902,187462
(defun counsel-colors--name-to-hex (name)counsel-colors--name-to-hex4905,187544
(defvar shr-color-visible-luminance-min)shr-color-visible-luminance-min4913,187788
(defvar counsel--colors-format "%-20s %s %s%s")counsel--colors-format4915,187878
(defun counsel--colors-emacs-format-function (colors)counsel--colors-emacs-format-function4917,187927
(defun counsel--colors-web-format-function (colors)counsel--colors-web-format-function4941,189054
(defun counsel-colors-emacs ()counsel-colors-emacs4960,189923
(defvar shr-color-html-colors-alist)shr-color-html-colors-alist4992,191178
(defun counsel-colors--web-alist ()counsel-colors--web-alist4994,191216
(defvar counsel-colors-web-history ()counsel-colors-web-history5011,191899
(defun counsel-colors-web ()counsel-colors-web5015,191992
(defvar counsel-fonts-history ()counsel-fonts-history5041,192857
(defun counsel-fonts ()counsel-fonts5045,192940
(defun counsel--run (&rest program-and-args)counsel--run5061,193426
(defun counsel--sl (cmd)counsel--sl5066,193597
(defun counsel-rhythmbox-play-song (song)counsel-rhythmbox-play-song5070,193705
(defun counsel-rhythmbox-enqueue-song (song)counsel-rhythmbox-enqueue-song5089,194438
(defun counsel-rhythmbox-toggle-shuffle (_song)counsel-rhythmbox-toggle-shuffle5097,194763
(defvar counsel-rhythmbox-history nilcounsel-rhythmbox-history5112,195296
(defvar counsel-rhythmbox-songs nil)counsel-rhythmbox-songs5115,195373
(defun counsel-rhythmbox-current-song ()counsel-rhythmbox-current-song5117,195411
(defun counsel-rhythmbox (&optional arg)counsel-rhythmbox5132,196009
(defalias 'counsel--xdg-data-homecounsel--xdg-data-home5170,197614
(defalias 'counsel--xdg-data-dirscounsel--xdg-data-dirs5180,197922
(defcustom counsel-linux-apps-directoriescounsel-linux-apps-directories5190,198247
(defcustom counsel-linux-app-format-function #'counsel-linux-app-format-function-defaultcounsel-linux-app-format-function5197,198536
(defface counsel-application-namecounsel-application-name5208,199202
(defface counsel-outline-1counsel-outline-15213,199341
(defface counsel-outline-2counsel-outline-25218,199462
(defface counsel-outline-3counsel-outline-35223,199583
(defface counsel-outline-4counsel-outline-45228,199704
(defface counsel-outline-5counsel-outline-55233,199825
(defface counsel-outline-6counsel-outline-65238,199946
(defface counsel-outline-7counsel-outline-75243,200067
(defface counsel-outline-8counsel-outline-85248,200188
(defface counsel-outline-defaultcounsel-outline-default5253,200309
(defvar counsel-linux-apps-faulty nilcounsel-linux-apps-faulty5258,200434
(defvar counsel--linux-apps-cache nilcounsel--linux-apps-cache5261,200508
(defvar counsel--linux-apps-cached-files nilcounsel--linux-apps-cached-files5264,200581
(defvar counsel--linux-apps-cache-timestamp nilcounsel--linux-apps-cache-timestamp5267,200662
(defvar counsel--linux-apps-cache-format-function nilcounsel--linux-apps-cache-format-function5270,200771
(defun counsel-linux-app-format-function-default (name comment exec)counsel-linux-app-format-function-default5273,200894
(defun counsel-linux-app-format-function-name-first (name comment exec)counsel-linux-app-format-function-name-first5286,201327
(defun counsel-linux-app-format-function-name-only (name comment _exec)counsel-linux-app-format-function-name-only5296,201691
(defun counsel-linux-app-format-function-command-only (_name _comment exec)counsel-linux-app-format-function-command-only5304,201942
(defun counsel-linux-apps-list-desktop-files ()counsel-linux-apps-list-desktop-files5308,202102
(defun counsel-linux-app--parse-file (file)counsel-linux-app--parse-file5324,202847
(defun counsel-linux-apps-parse (desktop-entries-alist)counsel-linux-apps-parse5374,204687
(defun counsel-linux-apps-list ()counsel-linux-apps-list5388,205229
(defun counsel-linux-app-action-default (desktop-shortcut)counsel-linux-app-action-default5409,206204
(defun counsel-linux-app-action-file (desktop-shortcut)counsel-linux-app-action-file5413,206357
(defun counsel-linux-app-action-open-desktop (desktop-shortcut)counsel-linux-app-action-open-desktop5419,206586
(defun counsel-linux-app (&optional arg)counsel-linux-app5433,207064
(defun counsel-wmctrl-action (x)counsel-wmctrl-action5443,207516
(defvar counsel-wmctrl-ignore '("XdndCollectionWindowImp"counsel-wmctrl-ignore5447,207648
(defun counsel--wmctrl-parse (s)counsel--wmctrl-parse5452,207891
(defun counsel-wmctrl ()counsel-wmctrl5460,208192
(defvar counsel--switch-buffer-temporary-buffers nilcounsel--switch-buffer-temporary-buffers5469,208512
(defvar counsel--switch-buffer-previous-buffers nilcounsel--switch-buffer-previous-buffers5472,208581
(defun counsel--switch-buffer-unwind ()counsel--switch-buffer-unwind5475,208649
(defun counsel--switch-buffer-update-fn ()counsel--switch-buffer-update-fn5485,209139
(defun counsel-switch-buffer ()counsel-switch-buffer5509,210077
(defun counsel-switch-buffer-other-window ()counsel-switch-buffer-other-window5521,210480
(defun counsel-open-buffer-file-externally (buffer)counsel-open-buffer-file-externally5532,210938
(defvar counsel-compile-history nilcounsel-compile-history5554,211750
(defvar counsel-compile-root-functionscounsel-compile-root-functions5575,212406
(defun counsel--compile-root ()counsel--compile-root5585,212750
(defun counsel--project-current ()counsel--project-current5591,213027
(defun counsel--configure-root ()counsel--configure-root5597,213229
(defun counsel--git-root ()counsel--git-root5602,213424
(defun counsel--dir-locals-root ()counsel--dir-locals-root5607,213603
(defvar counsel-compile-local-buildscounsel-compile-local-builds5612,213802
(defcustom counsel-compile-make-args "-k"counsel-compile-make-args5624,214308
(defcustom counsel-compile-env nilcounsel-compile-env5630,214487
(defvar counsel-compile-env-history nilcounsel-compile-env-history5636,214750
(defvar counsel-compile-env-patterncounsel-compile-env-pattern5639,214831
(defcustom counsel-compile-make-pattern "\\`\\(?:GNUm\\|[Mm]\\)akefile\\'"counsel-compile-make-pattern5643,214960
(defcustom counsel-compile-build-directoriescounsel-compile-build-directories5647,215101
(defvar counsel-compile-phony-pattern "^\\.PHONY:[\t ]+\\(.+\\)$"counsel-compile-phony-pattern5652,215274
(defun counsel-compile--probe-make-targets (dir)counsel-compile--probe-make-targets5656,215456
(defun counsel-compile--pretty-propertize (leader text face)counsel-compile--pretty-propertize5676,216247
(defun counsel--compile-get-make-targets (srcdir &optional blddir)counsel--compile-get-make-targets5685,216604
(defun counsel-compile-get-make-invocation (&optional blddir)counsel-compile-get-make-invocation5709,217860
(defun counsel--find-build-subdir (srcdir)counsel--find-build-subdir5719,218312
(defun counsel--get-build-subdirs (blddir)counsel--get-build-subdirs5726,218586
(defun counsel-compile-get-build-directories (&optional dir)counsel-compile-get-build-directories5740,219224
(defun counsel-compile-get-filtered-history (&optional dir)counsel-compile-get-filtered-history5758,220130
(defun counsel--get-compile-candidates (&optional dir)counsel--get-compile-candidates5770,220659
(defun counsel-compile--update-history (_proc)counsel-compile--update-history5784,221271
(defvar counsel-compile--current-build-dir nilcounsel-compile--current-build-dir5802,222211
(defun counsel-compile--action (cmd)counsel-compile--action5808,222444
(defun counsel-compile (&optional dir)counsel-compile5832,223523
(defun counsel-compile-env--format-hint (cands)counsel-compile-env--format-hint5844,224024
(defun counsel-compile-env--update (var)counsel-compile-env--update5859,224496
(defun counsel-compile-env ()counsel-compile-env5868,224895
(defvar counsel-minor-history nilcounsel-minor-history5885,225549
(defun counsel--minor-candidates ()counsel--minor-candidates5888,225618
(defun counsel-minor ()counsel-minor5911,226427
(defun counsel-major ()counsel-major5942,227340
(defun counsel-google-function (input)counsel-google-function5957,228091
(defun counsel-google ()counsel-google5979,228772
(defvar counsel-mode-mapcounsel-mode-map5989,229098
(defcustom counsel-mode-override-describe-bindings nilcounsel-mode-override-describe-bindings6013,230209
(define-minor-mode counsel-modecounsel-mode6018,230373

elpa/counsel-0.13.0/counsel-pkg.el,371
(define-package "counsel" "0.13.0" "Various completion functions using Ivy" '((emacs "24.5") (swiper "0.13.0")) :commit "cd634c6f51458f81898ecf2821ac3169cb65a1eb" :keywords '("convenience" "matching" "tools") :authors '(("Oleh Krehel" . "ohwoeowho@gmail.com")) :maintainer '("Oleh Krehel" . "ohwoeowho@gmail.com") :url "https://github.com/abo-abo/swiper")"counsel"2,31

elpa/flymake-json-0.1/flymake-json.el,265
(defconst flymake-json-err-line-patternsflymake-json-err-line-patterns32,691
(defun flymake-json-command (filename)flymake-json-command35,812
(defun flymake-json-load ()flymake-json-load41,975
(defun flymake-json-maybe-load ()flymake-json-maybe-load50,1266

elpa/flymake-json-0.1/flymake-json-autoloads.el,0

elpa/flymake-json-0.1/flymake-json-pkg.el,333
(define-package "flymake-json" "0.1" "A flymake handler for json using jsonlint" '((flymake-easy "0.1")) :commit "ad8e482db1ad29e23bdd9d089b9bc3615649ce65" :authors '(("Steve Purcell" . "steve@sanityinc.com")) :maintainer '("Steve Purcell" . "steve@sanityinc.com") :url "https://github.com/purcell/flymake-json")"flymake-json"2,31

elpa/wgrep-ag-2.3.0/wgrep-ag-pkg.el,408
(define-package "wgrep-ag" "2.3.0" "Writable ag buffer and apply the changes to files" '((wgrep "2.1.5")) :commit "36c5e8d0e03bc16b19d30a603730065f74b5b767" :keywords '("grep" "edit" "extensions") :authors '(("Masahiro Hayashi" . "mhayashi1120@gmail.com")) :maintainer '("Masahiro Hayashi" . "mhayashi1120@gmail.com") :url "http://github.com/mhayashi1120/Emacs-wgrep/raw/master/wgrep-ag.el")"wgrep-ag"2,31

elpa/wgrep-ag-2.3.0/wgrep-ag.el,478
(defvar wgrep-ag-grouped-result-file-regexp "^File:[[:space:]]+\\(.*\\)$"wgrep-ag-grouped-result-file-regexp53,1571
(defvar wgrep-ag-ungrouped-result-regexpwgrep-ag-ungrouped-result-regexp58,1840
(defun wgrep-ag-prepare-header/footer ()wgrep-ag-prepare-header/footer64,2100
(defun wgrep-ag-parse-command-results ()wgrep-ag-parse-command-results90,3427
(defun wgrep-ag-setup ()wgrep-ag-setup165,7500
(defun wgrep-ag-unload-function ()wgrep-ag-unload-function176,7821

elpa/wgrep-ag-2.3.0/wgrep-ag-autoloads.el,0

elpa/org-mru-clock-0.4.1/org-mru-clock.el,2078
(defgroup org-mru-clock nilorg-mru-clock83,2920
(defcustom org-mru-clock-how-many 20org-mru-clock-how-many88,3017
(defcustom org-mru-clock-completing-read completing-read-functionorg-mru-clock-completing-read97,3359
(defcustom org-mru-clock-include-entry-at-point torg-mru-clock-include-entry-at-point104,3641
(defcustom org-mru-clock-keep-formatting nilorg-mru-clock-keep-formatting109,3800
(defcustom org-mru-clock-predicate nilorg-mru-clock-predicate117,4123
(defcustom org-mru-clock-files #'org-files-listorg-mru-clock-files130,4670
(defun org-mru-clock-exclude-done-and-archived ()org-mru-clock-exclude-done-and-archived137,4931
(defun org-mru-clock-take (n l)org-mru-clock-take142,5154
(defun org-mru-clock-heading-marker (marker)org-mru-clock-heading-marker151,5347
(defun org-mru-clock--find-clocks (file)org-mru-clock--find-clocks168,5993
(defun org-mru-clock--predicate (&optional marker)org-mru-clock--predicate185,6645
(defun org-mru-clock-take-uniq (n l key test)org-mru-clock-take-uniq198,7144
(defun org-mru-clock (&optional n)org-mru-clock213,7795
(defun org-mru-clock-to-history (&optional n)org-mru-clock-to-history231,8542
(defun org-mru-clock-select-recent-task (&optional n)org-mru-clock-select-recent-task247,9220
(defun org-mru-clock-format-entry ()org-mru-clock-format-entry259,9694
(defcustom org-mru-clock-capture-if-no-match nilorg-mru-clock-capture-if-no-match274,10249
(defun org-mru-clock--capture (initial)org-mru-clock--capture290,10933
(defun org-mru-clock--clock-in-on-marker (marker)org-mru-clock--clock-in-on-marker306,11542
(defun org-mru-clock--clock-in (task)org-mru-clock--clock-in315,11837
(defun org-mru-clock--goto (task)org-mru-clock--goto338,12690
(defun org-mru-clock--read (prompt collection action caller)org-mru-clock--read353,13186
(defun org-mru-clock--collect-history (history)org-mru-clock--collect-history382,14449
(defun org-mru-clock--collect-entry-at-point ()org-mru-clock--collect-entry-at-point400,15182
(defun org-mru-clock-in (&optional n)org-mru-clock-in419,16078

elpa/org-mru-clock-0.4.1/org-mru-clock-autoloads.el,0

elpa/org-mru-clock-0.4.1/org-mru-clock-pkg.el,404
(define-package "org-mru-clock" "0.4.1" "clock in/out of tasks with completion and persistent history" '((emacs "24.3")) :commit "1547191254f6fc58b62864d0224356e72bd7d933" :keywords '("convenience" "calendar") :authors '(("Kevin Brubeck Unhammer" . "unhammer@fsfe.org")) :maintainer '("Kevin Brubeck Unhammer" . "unhammer@fsfe.org") :url "https://github.com/unhammer/org-mru-clock")"org-mru-clock"2,31

elpa/org-plus-contrib-20191021/ob-gnuplot.el,1547
(defvar org-babel-default-header-args:gnuplotorg-babel-default-header-args:gnuplot50,1706
(defvar org-babel-header-args:gnuplotorg-babel-header-args:gnuplot54,1888
(defvar org-babel-gnuplot-timestamp-fmt nil) ; Dynamically scoped.org-babel-gnuplot-timestamp-fmt66,2151
(defvar *org-babel-gnuplot-missing* nil)*org-babel-gnuplot-missing*68,2219
(defcustom *org-babel-gnuplot-terms**org-babel-gnuplot-terms*70,2261
(defun org-babel-gnuplot-process-vars (params)org-babel-gnuplot-process-vars77,2513
(defun org-babel-expand-body:gnuplot (body params)org-babel-expand-body:gnuplot98,3240
(defun org-babel-execute:gnuplot (body params)org-babel-execute:gnuplot172,6315
(defun org-babel-prep-session:gnuplot (session params)org-babel-prep-session:gnuplot204,7495
(defun org-babel-load-session:gnuplot (session body params)org-babel-load-session:gnuplot218,7998
(defun org-babel-variable-assignments:gnuplot (params)org-babel-variable-assignments:gnuplot227,8344
(defvar gnuplot-buffer)gnuplot-buffer233,8590
(defun org-babel-gnuplot-initiate-session (&optional session _params)org-babel-gnuplot-initiate-session234,8614
(defun org-babel-gnuplot-quote-timestamp-field (s)org-babel-gnuplot-quote-timestamp-field245,9059
(defvar org-table-number-regexp)org-table-number-regexp250,9268
(defvar org-ts-regexp3)org-ts-regexp3251,9301
(defun org-babel-gnuplot-quote-tsv-field (s)org-babel-gnuplot-quote-tsv-field252,9325
(defun org-babel-gnuplot-table-to-data (table data-file params)org-babel-gnuplot-table-to-data266,9780

elpa/org-plus-contrib-20191021/org-secretary.el,1009
(defvar org-sec-me nilorg-sec-me105,4174
(defvar org-sec-with nilorg-sec-with108,4255
(defvar org-sec-where ""org-sec-where113,4425
(defvar org-sec-with-history '()org-sec-with-history118,4568
(defvar org-sec-where-history '()org-sec-where-history121,4641
(defun org-sec-set-with ()org-sec-set-with124,4716
(defun org-sec-set-where ()org-sec-set-where136,5186
(defun org-sec-set-dowith ()org-sec-set-dowith145,5484
(defun org-sec-set-doat ()org-sec-set-doat155,5804
(defun org-sec-tag-entry ()org-sec-tag-entry164,6103
(defun join (lst sep &optional pre post)join179,6701
(defun org-sec-get-with ()org-sec-get-with182,6810
(defun org-sec-with-view (par &optional who)org-sec-with-view187,6893
(defun org-sec-where-view (par)org-sec-where-view195,7247
(defun org-sec-assigned-with-view (par &optional who)org-sec-assigned-with-view199,7387
(defun org-sec-stuck-with-view (par &optional who)org-sec-stuck-with-view208,7769
(defun org-sec-who-view (par)org-sec-who-view220,8220

elpa/org-plus-contrib-20191021/org-drill.el,16608
(defgroup org-drill nilorg-drill55,1930
(defcustom org-drill-question-tagorg-drill-question-tag62,2071
(defcustom org-drill-maximum-items-per-sessionorg-drill-maximum-items-per-session70,2247
(defcustom org-drill-maximum-durationorg-drill-maximum-duration79,2455
(defcustom org-drill-failure-qualityorg-drill-failure-quality87,2633
(defcustom org-drill-forgetting-indexorg-drill-forgetting-index103,3220
(defcustom org-drill-leech-failure-thresholdorg-drill-leech-failure-threshold113,3528
(defcustom org-drill-leech-methodorg-drill-leech-method121,3726
(defface org-drill-visible-cloze-faceorg-drill-visible-cloze-face134,4176
(defface org-drill-visible-cloze-hint-faceorg-drill-visible-cloze-hint-face140,4332
(defface org-drill-hidden-cloze-faceorg-drill-hidden-cloze-face146,4496
(defcustom org-drill-use-visible-cloze-face-porg-drill-use-visible-cloze-face-p152,4671
(defcustom org-drill-hide-item-headings-porg-drill-hide-item-headings-p160,4839
(defcustom org-drill-new-count-colororg-drill-new-count-color169,5126
(defcustom org-drill-mature-count-colororg-drill-mature-count-color176,5310
(defcustom org-drill-failed-count-colororg-drill-failed-count-color183,5545
(defcustom org-drill-done-count-colororg-drill-done-count-color190,5728
(defcustom org-drill-left-cloze-delimiterorg-drill-left-cloze-delimiter197,5904
(defcustom org-drill-right-cloze-delimiterorg-drill-right-cloze-delimiter203,6053
(defvar org-drill-hint-separator "||"org-drill-hint-separator228,6787
(defun org-drill--compute-cloze-regexp ()org-drill--compute-cloze-regexp233,7016
(defun org-drill--compute-cloze-keywords ()org-drill--compute-cloze-keywords242,7331
(defvar-local org-drill-cloze-regexporg-drill-cloze-regexp248,7601
(defvar-local org-drill-cloze-keywordsorg-drill-cloze-keywords252,7677
(defvar org-drill--quit-key ?qorg-drill--quit-key258,7870
(defvar org-drill--edit-key ?eorg-drill--edit-key260,7977
(defvar org-drill--help-key ??org-drill--help-key263,8124
(defvar org-drill--skip-key ?sorg-drill--skip-key265,8224
(defvar org-drill--tags-key ?torg-drill--tags-key268,8336
(defvar org-drill--pronounce-key ?porg-drill--pronounce-key271,8461
(defcustom org-drill-card-type-alistorg-drill-card-type-alist276,8589
(defcustom org-drill-scopeorg-drill-scope324,10739
(defcustom org-drill-matchorg-drill-match357,12708
(defcustom org-drill-save-buffers-after-drill-sessions-porg-drill-save-buffers-after-drill-sessions-p365,12941
(defcustom org-drill-spaced-repetition-algorithmorg-drill-spaced-repetition-algorithm373,13126
(defcustom org-drill-optimal-factor-matrixorg-drill-optimal-factor-matrix390,13959
(defvar org-drill-sm5-optimal-factor-matrixorg-drill-sm5-optimal-factor-matrix399,14193
(defun org-drill--transfer-optimal-factor-matrix ()org-drill--transfer-optimal-factor-matrix416,14649
(defcustom org-drill-sm5-initial-intervalorg-drill-sm5-initial-interval425,14968
(defcustom org-drill-add-random-noise-to-intervals-porg-drill-add-random-noise-to-intervals-p434,15218
(defcustom org-drill-adjust-intervals-for-early-and-late-repetitions-porg-drill-adjust-intervals-for-early-and-late-repetitions-p444,15540
(defcustom org-drill-cloze-text-weightorg-drill-cloze-text-weight461,16193
(defcustom org-drill-cram-hoursorg-drill-cram-hours482,17056
(defcustom org-drill-days-before-oldorg-drill-days-before-old503,17847
(defcustom org-drill-overdue-interval-factororg-drill-overdue-interval-factor511,18068
(defcustom org-drill-learn-fractionorg-drill-learn-fraction525,18632
(defcustom org-drill-entry-before-hook nilorg-drill-entry-before-hook536,19071
(defcustom org-drill-entry-after-hook nilorg-drill-entry-after-hook541,19206
(defcustom org-drill-auto-pronounce torg-drill-auto-pronounce546,19340
(defcustom org-drill-pronounce-command (executable-find "espeak")org-drill-pronounce-command552,19482
(defcustom org-drill-pronounce-command-argsorg-drill-pronounce-command-args557,19619
(defvar drill-answer nildrill-answer565,19822
(defvar *org-drill-session-qualities* nil)*org-drill-session-qualities*576,20272
(defvar *org-drill-start-time* 0)*org-drill-start-time*577,20315
(defvar *org-drill-new-entries* nil)*org-drill-new-entries*578,20349
(defvar *org-drill-dormant-entry-count* 0)*org-drill-dormant-entry-count*579,20386
(defvar *org-drill-due-entry-count* 0)*org-drill-due-entry-count*580,20429
(defvar *org-drill-overdue-entry-count* 0)*org-drill-overdue-entry-count*581,20468
(defvar *org-drill-due-tomorrow-count* 0)*org-drill-due-tomorrow-count*582,20511
(defvar *org-drill-overdue-entries* nil*org-drill-overdue-entries*583,20553
(defvar *org-drill-young-mature-entries* nil*org-drill-young-mature-entries*586,20712
(defvar *org-drill-old-mature-entries* nil*org-drill-old-mature-entries*589,20873
(defvar *org-drill-failed-entries* nil)*org-drill-failed-entries*592,21042
(defvar *org-drill-again-entries* nil)*org-drill-again-entries*593,21082
(defvar *org-drill-done-entries* nil)*org-drill-done-entries*594,21121
(defvar *org-drill-current-item* nil*org-drill-current-item*595,21159
(defvar *org-drill-cram-mode* nil*org-drill-cram-mode*597,21256
(defvar org-drill-scheduling-propertiesorg-drill-scheduling-properties600,21418
(defvar org-drill--lapse-very-overdue-entries-p nilorg-drill--lapse-very-overdue-entries-p604,21658
(defun free-marker (m)free-marker650,23971
(defmacro pop-random (place)pop-random654,24018
(defmacro push-end (val place)push-end664,24313
(defun shuffle-list (list)shuffle-list670,24470
(defun round-float (floatnum fix)round-float686,24886
(defun command-keybinding-to-string (cmd)command-keybinding-to-string693,25105
(defun time-to-inactive-org-timestamp (time)time-to-inactive-org-timestamp700,25375
(defun time-to-active-org-timestamp (time)time-to-active-org-timestamp706,25520
(defun org-map-drill-entries (func &optional scope drill-match &rest skip)org-map-drill-entries712,25663
(defmacro with-hidden-cloze-text (&rest body)with-hidden-cloze-text732,26499
(defmacro with-hidden-cloze-hints (&rest body)with-hidden-cloze-hints741,26688
(defmacro with-hidden-comments (&rest body)with-hidden-comments750,26871
(defun org-drill-days-since-last-review ()org-drill-days-since-last-review761,27132
(defun org-drill-hours-since-last-review ()org-drill-hours-since-last-review775,27669
(defun org-drill-entry-p (&optional marker)org-drill-entry-p787,28096
(defun org-drill-goto-entry (marker)org-drill-goto-entry797,28455
(defun org-part-of-drill-entry-p ()org-part-of-drill-entry-p802,28560
(defun org-drill-goto-drill-entry-heading ()org-drill-goto-drill-entry-heading810,28833
(defun org-drill-entry-leech-p ()org-drill-entry-leech-p823,29257
(defun org-drill-entry-days-overdue ()org-drill-entry-days-overdue847,30124
(defun org-drill-entry-overdue-p (&optional days-overdue last-interval)org-drill-entry-overdue-p877,31242
(defun org-drill-entry-due-p ()org-drill-entry-due-p894,31988
(defun org-drill-entry-new-p ()org-drill-entry-new-p900,32125
(defun org-drill-entry-last-quality (&optional default)org-drill-entry-last-quality906,32274
(defun org-drill-entry-failure-count ()org-drill-entry-failure-count913,32464
(defun org-drill-entry-average-quality (&optional default)org-drill-entry-average-quality920,32633
(defun org-drill-entry-last-interval (&optional default)org-drill-entry-last-interval926,32825
(defun org-drill-entry-repeats-since-fail (&optional default)org-drill-entry-repeats-since-fail932,33011
(defun org-drill-entry-total-repeats (&optional default)org-drill-entry-total-repeats938,33207
(defun org-drill-entry-ease (&optional default)org-drill-entry-ease944,33393
(defun org-drill-random-dispersal-factor ()org-drill-random-dispersal-factor952,33608
(defun pseudonormal (mean variation)pseudonormal965,34027
(defun org-drill-early-interval-factor (optimal-factororg-drill-early-interval-factor974,34261
(defun org-drill-get-item-data ()org-drill-get-item-data994,35152
(defun org-drill-store-item-data (last-interval repeats failuresorg-drill-store-item-data1032,36849
(defun determine-next-interval-sm2 (last-interval n ef qualitydetermine-next-interval-sm21052,37746
(defun initial-optimal-factor-sm5 (n ef)initial-optimal-factor-sm51102,39578
(defun get-optimal-factor-sm5 (n ef of-matrix)get-optimal-factor-sm51107,39680
(defun inter-repetition-interval-sm5 (last-interval n ef &optional of-matrix)inter-repetition-interval-sm51115,39928
(defun determine-next-interval-sm5 (last-interval n ef qualitydetermine-next-interval-sm51123,40205
(defun org-drill-simple8-first-interval (failures)org-drill-simple8-first-interval1186,42606
(defun org-drill-simple8-interval-factor (ease repetition)org-drill-simple8-interval-factor1196,42910
(defun org-drill-simple8-quality->ease (quality)org-drill-simple8-quality->ease1207,43374
(defun determine-next-interval-simple8 (last-interval repeats qualitydetermine-next-interval-simple81217,43666
(defun org-drill-smart-reschedule (quality &optional days-ahead)org-drill-smart-reschedule1291,46420
(defun org-drill-hypothetical-next-review-date (quality)org-drill-hypothetical-next-review-date1349,49373
(defun org-drill-hypothetical-next-review-dates ()org-drill-hypothetical-next-review-dates1383,51089
(defun org-drill-reschedule ()org-drill-reschedule1392,51338
(defun org-drill-hide-subheadings-if (test)org-drill-hide-subheadings-if1503,56158
(defun org-drill-hide-all-subheadings-except (heading-list)org-drill-hide-all-subheadings-except1526,57057
(defun org-drill-presentation-prompt (&rest fmt-and-args)org-drill-presentation-prompt1532,57266
(defun org-pos-in-regexp (pos regexp &optional nlines)org-pos-in-regexp1620,61290
(defun org-drill-hide-region (beg end &optional text)org-drill-hide-region1626,61421
(defun org-drill-hide-heading-at-point (&optional text)org-drill-hide-heading-at-point1639,61907
(defun org-drill-hide-comments ()org-drill-hide-comments1648,62149
(defun org-drill-unhide-text ()org-drill-unhide-text1654,62315
(defun org-drill-hide-clozed-text ()org-drill-hide-clozed-text1662,62580
(defun org-drill-hide-matched-cloze-text ()org-drill-hide-matched-cloze-text1678,63197
(defun org-drill-hide-cloze-hints ()org-drill-hide-cloze-hints1700,64130
(defmacro with-replaced-entry-text (text &rest body)with-replaced-entry-text1710,64553
(defmacro with-replaced-entry-text-multi (replacements &rest body)with-replaced-entry-text-multi1721,64888
(defun org-drill-replace-entry-text (text &optional multi-p)org-drill-replace-entry-text1732,65260
(defun org-drill-unreplace-entry-text ()org-drill-unreplace-entry-text1756,66191
(defun org-drill-replace-entry-text-multi (replacements)org-drill-replace-entry-text-multi1763,66420
(defmacro with-replaced-entry-heading (heading &rest body)with-replaced-entry-heading1785,67303
(defun org-drill-replace-entry-heading (heading)org-drill-replace-entry-heading1794,67512
(defun org-drill-unhide-clozed-text ()org-drill-unhide-clozed-text1801,67742
(defun org-drill-get-entry-text (&optional keep-properties-p)org-drill-get-entry-text1808,67970
(defun org-entry-empty-p ()org-entry-empty-p1819,68327
(defun org-drill-entry-empty-p () (org-entry-empty-p))org-drill-entry-empty-p1830,68733
(defun org-drill-present-simple-card ()org-drill-present-simple-card1843,69301
(defun org-drill-present-default-answer (reschedule-fn)org-drill-present-default-answer1856,69754
(defun org-drill--show-latex-fragments ()org-drill--show-latex-fragments1875,70281
(defun org-drill-present-two-sided-card ()org-drill-present-two-sided-card1882,70492
(defun org-drill-present-multi-sided-card ()org-drill-present-multi-sided-card1901,71141
(defun org-drill-present-multicloze-hide-n (number-to-hideorg-drill-present-multicloze-hide-n1918,71756
(defun org-drill-present-multicloze-hide-nth (to-hide)org-drill-present-multicloze-hide-nth2001,75583
(defun org-drill-present-multicloze-hide1 ()org-drill-present-multicloze-hide12055,77757
(defun org-drill-present-multicloze-hide2 ()org-drill-present-multicloze-hide22061,77937
(defun org-drill-present-multicloze-hide-first ()org-drill-present-multicloze-hide-first2067,78117
(defun org-drill-present-multicloze-hide-last ()org-drill-present-multicloze-hide-last2072,78283
(defun org-drill-present-multicloze-hide1-firstmore ()org-drill-present-multicloze-hide1-firstmore2077,78448
(defun org-drill-present-multicloze-show1-lastmore ()org-drill-present-multicloze-show1-lastmore2107,79834
(defun org-drill-present-multicloze-show1-firstless ()org-drill-present-multicloze-show1-firstless2132,80828
(defun org-drill-present-multicloze-show1 ()org-drill-present-multicloze-show12158,81881
(defun org-drill-present-multicloze-show2 ()org-drill-present-multicloze-show22165,82142
(defun org-drill-present-card-using-text (question &optional answer)org-drill-present-card-using-text2171,82326
(defun org-drill-present-card-using-multiple-overlays (replacements &optional answer)org-drill-present-card-using-multiple-overlays2186,82909
(defun org-drill-pronounce-word ()org-drill-pronounce-word2202,83578
(defun org-drill-entry ()org-drill-entry2213,83906
(defun org-drill-entries-pending-p ()org-drill-entries-pending-p2278,86541
(defun org-drill-pending-entry-count ()org-drill-pending-entry-count2291,87021
(defun org-drill-maximum-duration-reached-p ()org-drill-maximum-duration-reached-p2301,87367
(defun org-drill-maximum-item-count-reached-p ()org-drill-maximum-item-count-reached-p2311,87714
(defun org-drill-pop-next-pending-entry ()org-drill-pop-next-pending-entry2320,88025
(defun org-drill-entries (&optional resuming-p)org-drill-entries2368,90261
(defun org-drill-final-report ()org-drill-final-report2422,92440
(defun org-drill-free-markers (markers)org-drill-free-markers2513,96383
(defun org-drill-order-overdue-entries (overdue-data)org-drill-order-overdue-entries2537,97482
(defun org-drill--entry-lapsed-p ()org-drill--entry-lapsed-p2553,98228
(defun org-drill-entry-days-since-creation (&optional use-last-interval-p)org-drill-entry-days-since-creation2561,98409
(defun org-drill-entry-status ()org-drill-entry-status2575,98941
(defun org-drill-progress-message (collected scanned)org-drill-progress-message2635,101049
(defun org-map-drill-entry-function ()org-map-drill-entry-function2648,101575
(defun org-drill (&optional scope drill-match resume-p)org-drill2692,103096
(defun org-drill-save-optimal-factor-matrix ()org-drill-save-optimal-factor-matrix2807,108107
(defun org-drill-cram (&optional scope drill-match)org-drill-cram2811,108179
(defun org-drill-tree ()org-drill-tree2821,108512
(defun org-drill-directory ()org-drill-directory2828,108660
(defun org-drill-again (&optional scope drill-match)org-drill-again2835,108851
(defun org-drill-resume ()org-drill-resume2856,109602
(defun org-drill-relearn-item ()org-drill-relearn-item2875,110288
(defun org-drill-strip-entry-data ()org-drill-strip-entry-data2883,110598
(defun org-drill-strip-all-data (&optional scope)org-drill-strip-all-data2889,110741
(defun org-drill-add-cloze-fontification ()org-drill-add-cloze-fontification2910,111599
(defvar *org-drill-dest-id-table* (make-hash-table :test 'equal))*org-drill-dest-id-table*2944,112958
(defun org-drill-copy-entry-to-other-buffer (dest &optional path)org-drill-copy-entry-to-other-buffer2947,113026
(defun org-drill-merge-buffers (src &optional dest ignore-new-items-p)org-drill-merge-buffers2994,115072
(defvar org-drill-verb-tense-alistorg-drill-verb-tense-alist3096,119814
(defun org-drill-get-verb-conjugation-info ()org-drill-get-verb-conjugation-info3123,120712
(defun org-drill-present-verb-conjugation ()org-drill-present-verb-conjugation3153,122325
(defun org-drill-show-answer-verb-conjugation (reschedule-fn)org-drill-show-answer-verb-conjugation3180,123329
(defvar org-drill-noun-gender-alistorg-drill-noun-gender-alist3204,124188
(defun org-drill-get-noun-info ()org-drill-get-noun-info3220,124515
(defun org-drill-present-noun-declension ()org-drill-present-noun-declension3247,125874
(defun org-drill-show-answer-noun-declension (reschedule-fn)org-drill-show-answer-noun-declension3284,127369
(defun spelln-integer-in-language (n lang)spelln-integer-in-language3301,128010
(defun org-drill-present-translate-number ()org-drill-present-translate-number3305,128120
(defun org-drill-present-spanish-verb ()org-drill-present-spanish-verb3373,131059

elpa/org-plus-contrib-20191021/org-datetree.el,674
(defvar org-datetree-base-level 1org-datetree-base-level35,1254
(defcustom org-datetree-add-timestamp nilorg-datetree-add-timestamp42,1581
(defun org-datetree-find-date-create (d &optional keep-restriction)org-datetree-find-date-create53,1962
(defun org-datetree-find-iso-week-create (d &optional keep-restriction)org-datetree-find-iso-week-create92,3441
(defun org-datetree--find-createorg-datetree--find-create141,5405
(defun org-datetree-insert-line (year &optional month day text)org-datetree-insert-line167,6420
(defun org-datetree-file-entry-under (txt d)org-datetree-file-entry-under191,7222
(defun org-datetree-cleanup ()org-datetree-cleanup199,7521

elpa/org-plus-contrib-20191021/ox-latex.el,12424
(defvar org-latex-default-packages-alist)org-latex-default-packages-alist33,1038
(defvar org-latex-packages-alist)org-latex-packages-alist34,1080
(defvar orgtbl-exp-regexp)orgtbl-exp-regexp35,1114
(defconst org-latex-babel-language-alistorg-latex-babel-language-alist159,6884
(defconst org-latex-polyglossia-language-alistorg-latex-polyglossia-language-alist212,8187
(defconst org-latex-table-matrix-macros '(("bordermatrix" . "\\cr")org-latex-table-matrix-macros298,10197
(defconst org-latex-math-environments-reorg-latex-math-environments-re303,10390
(defgroup org-export-latex nilorg-export-latex320,10810
(defcustom org-latex-caption-above '(table)org-latex-caption-above327,10955
(defcustom org-latex-prefer-user-labels nilorg-latex-prefer-user-labels344,11651
(defcustom org-latex-default-class "article"org-latex-default-class401,13661
(defcustom org-latex-classesorg-latex-classes406,13801
(defcustom org-latex-inputenc-alist nilorg-latex-inputenc-alist536,18806
(defcustom org-latex-title-command "\\maketitle"org-latex-title-command550,19211
(defcustom org-latex-subtitle-format "\\\\\\medskip\n\\large %s"org-latex-subtitle-format573,19852
(defcustom org-latex-subtitle-separate nilorg-latex-subtitle-separate582,20183
(defcustom org-latex-toc-command "\\tableofcontents\n\n"org-latex-toc-command589,20388
(defcustom org-latex-hyperref-templateorg-latex-hyperref-template596,20689
(defcustom org-latex-format-headline-functionorg-latex-format-headline-function629,21606
(defcustom org-latex-footnote-separator "\\textsuperscript{,}\\,"org-latex-footnote-separator650,22256
(defcustom org-latex-footnote-defined-format "\\textsuperscript{\\ref{%s}}"org-latex-footnote-defined-format655,22404
(defcustom org-latex-active-timestamp-format "\\textit{%s}"org-latex-active-timestamp-format668,22912
(defcustom org-latex-inactive-timestamp-format "\\textit{%s}"org-latex-inactive-timestamp-format673,23080
(defcustom org-latex-diary-timestamp-format "\\textit{%s}"org-latex-diary-timestamp-format678,23252
(defcustom org-latex-images-centered torg-latex-images-centered686,23431
(defcustom org-latex-image-default-option ""org-latex-image-default-option694,23626
(defcustom org-latex-image-default-width ".9\\linewidth"org-latex-image-default-width701,23799
(defcustom org-latex-image-default-height ""org-latex-image-default-height709,24036
(defcustom org-latex-default-figure-position "htbp"org-latex-default-figure-position719,24339
(defcustom org-latex-inline-image-rulesorg-latex-inline-image-rules727,24546
(defcustom org-latex-link-with-unknown-path-format "\\texttt{%s}"org-latex-link-with-unknown-path-format747,25335
(defcustom org-latex-default-table-environment "tabular"org-latex-default-table-environment755,25512
(defcustom org-latex-default-table-mode 'tableorg-latex-default-table-mode762,25712
(defcustom org-latex-tables-centered torg-latex-tables-centered793,26747
(defcustom org-latex-tables-booktabs nilorg-latex-tables-booktabs799,26914
(defcustom org-latex-table-scientific-notation nilorg-latex-table-scientific-notation811,27333
(defcustom org-latex-text-markup-alist '((bold . "\\textbf{%s}")org-latex-text-markup-alist827,27766
(defcustom org-latex-format-drawer-function (lambda (_ contents) contents)org-latex-format-drawer-function856,28777
(defcustom org-latex-format-inlinetask-functionorg-latex-format-inlinetask-function874,29267
(defcustom org-latex-listings nilorg-latex-listings896,29986
(defcustom org-latex-listings-langsorg-latex-listings-langs937,31542
(defcustom org-latex-listings-options nilorg-latex-listings-options964,32523
(defcustom org-latex-minted-langsorg-latex-minted-langs993,33443
(defcustom org-latex-minted-options nilorg-latex-minted-options1017,34248
(defcustom org-latex-custom-lang-environments nilorg-latex-custom-lang-environments1046,35151
(defcustom org-latex-compiler-file-string "%% Intended LaTeX compiler: %s\n"org-latex-compiler-file-string1101,36668
(defcustom org-latex-compiler "pdflatex"org-latex-compiler1113,37163
(defconst org-latex-compilers '("pdflatex" "xelatex" "lualatex")org-latex-compilers1128,37628
(defcustom org-latex-bib-compiler "bibtex"org-latex-bib-compiler1132,37753
(defcustom org-latex-pdf-processorg-latex-pdf-process1146,38183
(defcustom org-latex-logfiles-extensionsorg-latex-logfiles-extensions1196,40466
(defcustom org-latex-remove-logfiles torg-latex-remove-logfiles1207,40888
(defcustom org-latex-known-warningsorg-latex-known-warnings1215,41223
(defun org-latex--caption-above-p (element info)org-latex--caption-above-p1238,41992
(defun org-latex--label (datum info &optional force full)org-latex--label1246,42339
(defun org-latex--caption/label-string (element info)org-latex--caption/label-string1286,43558
(defun org-latex-guess-inputenc (header)org-latex-guess-inputenc1331,45134
(defun org-latex-guess-babel-language (header info)org-latex-guess-babel-language1349,45839
(defun org-latex-guess-polyglossia-language (header info)org-latex-guess-polyglossia-language1385,47257
(defun org-latex--remove-packages (pkg-alist info)org-latex--remove-packages1438,48999
(defun org-latex--find-verb-separator (s)org-latex--find-verb-separator1457,49711
(defun org-latex--make-option-string (options)org-latex--make-option-string1465,50092
(defun org-latex--wrap-label (element output info)org-latex--wrap-label1478,50511
(defun org-latex--protect-text (text)org-latex--protect-text1489,50964
(defun org-latex--text-markup (text markup info)org-latex--text-markup1493,51125
(defun org-latex--delayed-footnotes-definitions (element info)org-latex--delayed-footnotes-definitions1525,52273
(defun org-latex--translate (s info)org-latex--translate1562,53596
(defun org-latex--format-spec (info)org-latex--format-spec1567,53779
(defun org-latex--insert-compiler (info)org-latex--insert-compiler1587,54640
(defun org-latex-matrices-tree-filter (tree _backend info)org-latex-matrices-tree-filter1598,55018
(defun org-latex-math-block-tree-filter (tree _backend info)org-latex-math-block-tree-filter1601,55124
(defun org-latex-math-block-options-filter (info _backend)org-latex-math-block-options-filter1604,55234
(defun org-latex-clean-invalid-line-breaks (data _backend _info)org-latex-clean-invalid-line-breaks1609,55438
(defun org-latex-make-preamble (info &optional template snippet?)org-latex-make-preamble1618,55638
(defun org-latex-template (contents info)org-latex-template1654,57065
(defun org-latex-bold (_bold contents info)org-latex-bold1733,60001
(defun org-latex-center-block (center-block contents info)org-latex-center-block1742,60240
(defun org-latex-clock (clock _contents info)org-latex-clock1752,60568
(defun org-latex-code (code _contents info)org-latex-code1768,61061
(defun org-latex-drawer (drawer contents info)org-latex-drawer1777,61308
(defun org-latex-dynamic-block (dynamic-block contents info)org-latex-dynamic-block1789,61714
(defun org-latex-entity (entity _contents _info)org-latex-entity1798,62017
(defun org-latex-example-block (example-block _contents info)org-latex-example-block1807,62263
(defun org-latex-export-block (export-block _contents _info)org-latex-export-block1826,62870
(defun org-latex-export-snippet (export-snippet _contents _info)org-latex-export-snippet1835,63226
(defun org-latex-fixed-width (fixed-width _contents info)org-latex-fixed-width1844,63549
(defun org-latex-footnote-reference (footnote-reference _contents info)org-latex-footnote-reference1857,63934
(defun org-latex-headline (headline contents info)org-latex-headline1905,65991
(defun org-latex-format-headline-default-functionorg-latex-format-headline-default-function2032,71411
(defun org-latex-horizontal-rule (horizontal-rule _contents info)org-latex-horizontal-rule2047,71861
(defun org-latex-inline-src-block (inline-src-block _contents info)org-latex-inline-src-block2069,72710
(defun org-latex-inlinetask (inlinetask contents info)org-latex-inlinetask2106,74196
(defun org-latex-format-inlinetask-default-functionorg-latex-format-inlinetask-default-function2123,75077
(defun org-latex-italic (_italic contents info)org-latex-italic2148,75865
(defun org-latex-item (item contents info)org-latex-item2157,76106
(defun org-latex-keyword (keyword _contents info)org-latex-keyword2220,78386
(defun org-latex--environment-type (latex-environment)org-latex--environment-type2258,79777
(defun org-latex-latex-environment (latex-environment _contents info)org-latex-latex-environment2284,80665
(defun org-latex-latex-fragment (latex-fragment _contents _info)org-latex-latex-fragment2316,81900
(defun org-latex-line-break (_line-break _contents _info)org-latex-line-break2329,82418
(defun org-latex-image-link-filter (data _backend info)org-latex-image-link-filter2337,82620
(defun org-latex--inline-image (link info)org-latex--inline-image2340,82751
(defun org-latex-link (link desc info)org-latex-link2486,88092
(defun org-latex-node-property (node-property _contents _info)org-latex-node-property2568,91368
(defun org-latex-paragraph (_paragraph contents _info)org-latex-paragraph2580,91759
(defun org-latex-plain-list (plain-list contents info)org-latex-plain-list2589,92006
(defun org-latex-plain-text (text info)org-latex-plain-text2612,92735
(defun org-latex-planning (planning _contents info)org-latex-planning2651,94193
(defun org-latex-property-drawer (_property-drawer contents _info)org-latex-property-drawer2685,95228
(defun org-latex--wrap-latex-matrices (data info)org-latex--wrap-latex-matrices2699,95726
(defun org-latex-matrices (matrices contents _info)org-latex-matrices2750,97863
(defun org-latex--wrap-latex-math-block (data info)org-latex--wrap-latex-math-block2766,98333
(defun org-latex-math-block (_math-block contents _info)org-latex-math-block2811,100245
(defun org-latex-quote-block (quote-block contents info)org-latex-quote-block2820,100527
(defun org-latex-radio-target (radio-target text info)org-latex-radio-target2830,100849
(defun org-latex-section (_section contents _info)org-latex-section2839,101134
(defun org-latex-special-block (special-block contents info)org-latex-special-block2848,101363
(defun org-latex-src-block (src-block _contents info)org-latex-src-block2865,102030
(defun org-latex-statistics-cookie (statistics-cookie _contents _info)org-latex-statistics-cookie3044,108509
(defun org-latex-strike-through (_strike-through contents info)org-latex-strike-through3053,108826
(defun org-latex-subscript (_subscript contents _info)org-latex-subscript3062,109112
(defun org-latex-superscript (_superscript contents _info)org-latex-superscript3070,109322
(defun org-latex-table (table contents info)org-latex-table3087,109951
(defun org-latex--align-string (table info &optional math?)org-latex--align-string3112,111090
(defun org-latex--org-table (table contents info)org-latex--org-table3143,112198
(defun org-latex--table.el-table (table info)org-latex--table.el-table3256,116250
(defun org-latex--math-table (table info)org-latex--math-table3293,117787
(defun org-latex-table-cell (table-cell contents info)org-latex-table-cell3336,119242
(defun org-latex-table-row (table-row contents info)org-latex-table-row3356,119872
(defun org-latex-target (target _contents info)org-latex-target3420,122106
(defun org-latex-timestamp (timestamp _contents info)org-latex-timestamp3429,122344
(defun org-latex-underline (_underline contents info)org-latex-underline3445,122884
(defun org-latex-verbatim (verbatim _contents info)org-latex-verbatim3454,123144
(defun org-latex-verse-block (verse-block contents info)org-latex-verse-block3464,123419
(defun org-latex-export-as-latexorg-latex-export-as-latex3489,124262
(defun org-latex-convert-region-to-latex ()org-latex-convert-region-to-latex3524,125485
(defun org-latex-export-to-latexorg-latex-export-to-latex3533,125819
(defun org-latex-export-to-pdforg-latex-export-to-pdf3565,126927
(defun org-latex-compile (texfile &optional snippet)org-latex-compile3599,128111
(defun org-latex--collect-warnings (buffer)org-latex--collect-warnings3659,130369
(defun org-latex-publish-to-latex (plist filename pub-dir)org-latex-publish-to-latex3677,131108
(defun org-latex-publish-to-pdf (plist filename pub-dir)org-latex-publish-to-pdf3688,131452

elpa/org-plus-contrib-20191021/ob-tcl.el,992
(defvar org-babel-tangle-lang-exts)org-babel-tangle-lang-exts36,1104
(defvar org-babel-default-header-args:tcl nil)org-babel-default-header-args:tcl39,1200
(defcustom org-babel-tcl-command "tclsh"org-babel-tcl-command41,1248
(defun org-babel-execute:tcl (body params)org-babel-execute:tcl47,1377
(defun org-babel-prep-session:tcl (session params)org-babel-prep-session:tcl63,2147
(defun org-babel-variable-assignments:tcl (params)org-babel-variable-assignments:tcl67,2312
(defun org-babel-tcl-var-to-tcl (var)org-babel-tcl-var-to-tcl78,2602
(defvar org-babel-tcl-buffers '(:default . nil))org-babel-tcl-buffers86,2902
(defun org-babel-tcl-initiate-session (&optional session params)org-babel-tcl-initiate-session88,2952
(defvar org-babel-tcl-wrapper-methodorg-babel-tcl-wrapper-method92,3081
(defvar org-babel-tcl-pp-wrapper-methodorg-babel-tcl-pp-wrapper-method106,3225
(defun org-babel-tcl-evaluate (session body &optional result-type)org-babel-tcl-evaluate109,3273

elpa/org-plus-contrib-20191021/org-src.el,5174
(defvar org-inhibit-startup)org-inhibit-startup50,1871
(defcustom org-edit-src-turn-on-auto-save nilorg-edit-src-turn-on-auto-save52,1901
(defcustom org-edit-src-auto-save-idle-delay 0org-edit-src-auto-save-idle-delay64,2389
(defcustom org-coderef-label-format "(ref:%s)"org-coderef-label-format76,2825
(defcustom org-edit-fixed-width-region-mode 'artist-modeorg-edit-fixed-width-region-mode93,3512
(defcustom org-src-preserve-indentation nilorg-src-preserve-indentation103,3851
(defcustom org-edit-src-content-indentation 2org-edit-src-content-indentation117,4460
(defcustom org-edit-src-persistent-message torg-edit-src-persistent-message129,4880
(defcustom org-src-ask-before-returning-to-edit-buffer torg-src-ask-before-returning-to-edit-buffer136,5176
(defcustom org-src-window-setup 'reorganize-frameorg-src-window-setup147,5618
(defvar org-src-mode-hook nilorg-src-mode-hook169,6579
(defcustom org-src-lang-modesorg-src-lang-modes180,7067
(defcustom org-src-block-faces nilorg-src-block-faces210,7921
(defcustom org-src-tab-acts-natively nilorg-src-tab-acts-natively232,8638
(defvar org-src--auto-save-timer nilorg-src--auto-save-timer243,8886
(defvar-local org-src--allow-write-back t)org-src--allow-write-back246,8976
(defvar-local org-src--babel-info nil)org-src--babel-info249,9072
(defvar-local org-src--beg-marker nil)org-src--beg-marker252,9158
(defvar-local org-src--block-indentation nil)org-src--block-indentation255,9244
(defvar-local org-src--end-marker nil)org-src--end-marker258,9344
(defvar-local org-src--from-org-mode nil)org-src--from-org-mode261,9430
(defvar-local org-src--overlay nil)org-src--overlay264,9522
(defvar-local org-src--preserve-indentation nil)org-src--preserve-indentation267,9602
(defvar-local org-src--remote nil)org-src--remote270,9708
(defvar-local org-src--saved-temp-window-config nil)org-src--saved-temp-window-config273,9786
(defvar-local org-src--source-type nilorg-src--source-type276,9900
(defvar-local org-src--tab-width nilorg-src--tab-width280,10035
(defvar-local org-src-source-file-name nilorg-src-source-file-name286,10244
(defun org-src--construct-edit-buffer-name (org-buffer-name lang)org-src--construct-edit-buffer-name290,10395
(defun org-src--edit-buffer (beg end)org-src--edit-buffer294,10577
(defun org-src--get-lang-mode (lang)org-src--get-lang-mode307,11040
(defun org-src--coordinates (pos beg end)org-src--coordinates316,11330
(defun org-src--goto-coordinates (coord beg end)org-src--goto-coordinates330,11917
(defun org-src--contents-area (datum)org-src--contents-area345,12480
(defun org-src--make-source-overlay (beg end edit-buffer)org-src--make-source-overlay386,14435
(defun org-src--remove-overlay ()org-src--remove-overlay410,15403
(defun org-src--on-datum-p (datum)org-src--on-datum-p414,15557
(defun org-src--contents-for-write-back ()org-src--contents-for-write-back427,16008
(defun org-src--edit-elementorg-src--edit-element460,17395
(defun org-src-font-lock-fontify-block (lang start end)org-src-font-lock-fontify-block571,21610
(defun org-escape-code-in-region (beg end)org-escape-code-in-region613,23265
(defun org-escape-code-in-string (s)org-escape-code-in-string623,23644
(defun org-unescape-code-in-region (beg end)org-unescape-code-in-region630,23906
(defun org-unescape-code-in-string (s)org-unescape-code-in-string640,24295
(defvar org-src-mode-maporg-src-mode-map651,24590
(define-minor-mode org-src-modeorg-src-mode658,24813
(defun org-src-mode-configure-edit-buffer ()org-src-mode-configure-edit-buffer701,26325
(defun org-src-associate-babel-session (info)org-src-associate-babel-session717,26809
(defun org-src-babel-configure-edit-buffer ()org-src-babel-configure-edit-buffer727,27227
(defmacro org-src-do-at-code-block (&rest body)org-src-do-at-code-block736,27449
(defun org-src-do-key-sequence-at-code-block (&optional key)org-src-do-key-sequence-at-code-block745,27744
(defun org-src-edit-buffer-p (&optional buffer)org-src-edit-buffer-p769,28742
(defun org-src-source-buffer ()org-src-source-buffer777,29088
(defun org-src-source-type ()org-src-source-type784,29422
(defun org-src-switch-to-buffer (buffer context)org-src-switch-to-buffer790,29665
(defun org-src-coderef-format (&optional element)org-src-coderef-format818,30628
(defun org-src-coderef-regexp (fmt &optional label)org-src-coderef-regexp833,31199
(defun org-edit-footnote-reference ()org-edit-footnote-reference851,31819
(defun org-edit-table.el ()org-edit-table.el911,34153
(defun org-edit-latex-environment ()org-edit-latex-environment935,34986
(defun org-edit-export-block ()org-edit-export-block957,35759
(defun org-edit-src-code (&optional code edit-buffer-name)org-edit-src-code987,36846
(defun org-edit-inline-src-code ()org-edit-inline-src-code1036,38806
(defun org-edit-fixed-width-region ()org-edit-fixed-width-region1070,40105
(defun org-edit-src-abort ()org-edit-src-abort1096,41059
(defun org-edit-src-continue (e)org-edit-src-continue1101,41226
(defun org-edit-src-save ()org-edit-src-save1110,41581
(defun org-edit-src-exit ()org-edit-src-exit1135,42498

elpa/org-plus-contrib-20191021/org-eval-light.el,1061
(defgroup org-eval-light nilorg-eval-light46,1821
(defvar org-eval-light-example-size-cutoff 10org-eval-light-example-size-cutoff51,1964
(defvar org-eval-light-regexp nil)org-eval-light-regexp56,2155
(defun org-eval-light-set-interpreters (var value)org-eval-light-set-interpreters58,2191
(defcustom org-eval-light-interpreters '("lisp" "emacs-lisp" "ruby" "shell")org-eval-light-interpreters65,2405
(defun org-eval-light-inside-snippet ()org-eval-light-inside-snippet86,3112
(defun org-eval-light-make-region-example (beg end)org-eval-light-make-region-example99,3491
(defun org-eval-light-current-snippet (&optional arg)org-eval-light-current-snippet119,4258
(defun org-eval-light-eval-subtree (&optional arg)org-eval-light-eval-subtree144,5209
(defun org-eval-light-code (interpreter code)org-eval-light-code154,5521
(defun org-eval-light-lisp (form)org-eval-light-lisp164,5922
(defun org-eval-light-run (cmd code)org-eval-light-run186,6672
(defadvice org-ctrl-c-ctrl-c (around org-cc-eval-source activate)org-ctrl-c-ctrl-c192,6841

elpa/org-plus-contrib-20191021/ob-ditaa.el,542
(defvar org-babel-default-header-args:ditaaorg-babel-default-header-args:ditaa42,1345
(defcustom org-ditaa-jar-path (expand-file-nameorg-ditaa-jar-path48,1540
(defcustom org-babel-ditaa-java-cmd "java"org-babel-ditaa-java-cmd61,1893
(defcustom org-ditaa-eps-jar-pathorg-ditaa-eps-jar-path66,2031
(defcustom org-ditaa-jar-option "-jar"org-ditaa-jar-option74,2273
(defun org-babel-execute:ditaa (body params)org-babel-execute:ditaa81,2459
(defun org-babel-prep-session:ditaa (_session _params)org-babel-prep-session:ditaa116,3866

elpa/org-plus-contrib-20191021/ox-md.el,2724
(defgroup org-export-md nilorg-export-md38,1173
(defcustom org-md-headline-style 'atxorg-md-headline-style45,1348
(defcustom org-md-footnotes-section "%s%s"org-md-footnotes-section56,1623
(defcustom org-md-footnote-format "<sup>%s</sup>"org-md-footnote-format65,1944
(defun org-md-separate-elements (tree _backend info)org-md-separate-elements119,3846
(defun org-md-bold (_bold contents _info)org-md-bold156,4915
(defun org-md-verbatim (verbatim _contents _info)org-md-verbatim165,5152
(defun org-md-example-block (example-block _contents info)org-md-example-block180,5609
(defun org-md-export-block (export-block contents info)org-md-export-block189,5922
(defun org-md-headline (headline contents info)org-md-headline200,6375
(defun org-md--headline-referred-p (headline info)org-md--headline-referred-p246,8312
(defun org-md--headline-title (style level title &optional anchor tags)org-md--headline-title287,9877
(defun org-md-horizontal-rule (_horizontal-rule _contents _info)org-md-horizontal-rule306,10750
(defun org-md-italic (_italic contents _info)org-md-italic315,10991
(defun org-md-item (item contents info)org-md-item324,11221
(defun org-md-keyword (keyword contents info)org-md-keyword353,12169
(defun org-md-line-break (_line-break _contents _info)org-md-line-break374,12925
(defun org-md-link (link contents info)org-md-link383,13124
(defun org-md-node-property (node-property _contents _info)org-md-node-property462,16147
(defun org-md-paragraph (paragraph contents _info)org-md-paragraph474,16538
(defun org-md-plain-list (_plain-list contents _info)org-md-plain-list487,16974
(defun org-md-plain-text (text info)org-md-plain-text496,17201
(defun org-md-property-drawer (_property-drawer contents _info)org-md-property-drawer523,18310
(defun org-md-quote-block (_quote-block contents _info)org-md-quote-block533,18638
(defun org-md-section (_section contents _info)org-md-section544,18946
(defun org-md--build-toc (info &optional n keyword local)org-md--build-toc553,19159
(defun org-md--footnote-formatted (footnote info)org-md--footnote-formatted600,20821
(defun org-md--footnote-section (info)org-md--footnote-section612,21389
(defun org-md-inner-template (contents info)org-md-inner-template627,22135
(defun org-md-template (contents _info)org-md-template644,22723
(defun org-md-export-as-markdown (&optional async subtreep visible-only)org-md-export-as-markdown655,22977
(defun org-md-convert-region-to-md ()org-md-convert-region-to-md682,23895
(defun org-md-export-to-markdown (&optional async subtreep visible-only)org-md-export-to-markdown692,24226
(defun org-md-publish-to-md (plist filename pub-dir)org-md-publish-to-md717,25049

elpa/org-plus-contrib-20191021/ob-css.el,251
(defvar org-babel-default-header-args:css '())org-babel-default-header-args:css32,1062
(defun org-babel-execute:css (body _params)org-babel-execute:css34,1110
(defun org-babel-prep-session:css (_session _params)org-babel-prep-session:css39,1254

elpa/org-plus-contrib-20191021/org-duration.el,1035
(defconst org-duration-canonical-unitsorg-duration-canonical-units58,1999
(defcustom org-duration-unitsorg-duration-units65,2168
(defcustom org-duration-format '(("d" . nil) (special . h:mm))org-duration-format106,3340
(defconst org-duration--h:mm-reorg-duration--h:mm-re199,6110
(defconst org-duration--h:mm:ss-reorg-duration--h:mm:ss-re205,6367
(defvar org-duration--unit-re nilorg-duration--unit-re211,6612
(defvar org-duration--full-re nilorg-duration--full-re216,6819
(defvar org-duration--mixed-re nilorg-duration--mixed-re220,6959
(defun org-duration--modifier (unit &optional canonical)org-duration--modifier226,7209
(defun org-duration-set-regexps ()org-duration-set-regexps239,7609
(defun org-duration-p (s)org-duration-p262,8374
(defun org-duration-to-minutes (duration &optional canonical)org-duration-to-minutes270,8627
(defun org-duration-from-minutes (minutes &optional fmt canonical)org-duration-from-minutes307,10073
(defun org-duration-h:mm-only-p (times)org-duration-h:mm-only-p417,13991

elpa/org-plus-contrib-20191021/ob-processing.el,940
(defvar org-babel-temporary-directory)org-babel-temporary-directory58,2118
(defvar org-babel-tangle-lang-exts)org-babel-tangle-lang-exts60,2158
(defvar org-babel-default-header-args:processingorg-babel-default-header-args:processing66,2412
(defvar org-babel-processing-processing-js-filename "processing.js"org-babel-processing-processing-js-filename70,2576
(defun org-babel-processing-view-sketch ()org-babel-processing-view-sketch73,2686
(defun org-babel-execute:processing (body params)org-babel-execute:processing115,4121
(defun org-babel-prep-session:processing (_session _params)org-babel-prep-session:processing136,4806
(defun org-babel-variable-assignments:processing (params)org-babel-variable-assignments:processing141,5015
(defun org-babel-processing-var-to-processing (pair)org-babel-processing-var-to-processing146,5233
(defun org-babel-processing-define-type (data)org-babel-processing-define-type176,6336

elpa/org-plus-contrib-20191021/ob-comint.el,757
(defun org-babel-comint-buffer-livep (buffer)org-babel-comint-buffer-livep37,1251
(defmacro org-babel-comint-in-buffer (buffer &rest body)org-babel-comint-in-buffer42,1487
(def-edebug-spec org-babel-comint-in-buffer (form body))org-babel-comint-in-buffer56,2023
(defmacro org-babel-comint-with-output (meta &rest body)org-babel-comint-with-output58,2081
(def-edebug-spec org-babel-comint-with-output (sexp body))org-babel-comint-with-output115,4306
(defun org-babel-comint-input-command (buffer cmd)org-babel-comint-input-command117,4366
(defun org-babel-comint-wait-for-output (buffer)org-babel-comint-wait-for-output126,4657
(defun org-babel-comint-eval-invisibly-and-wait-for-fileorg-babel-comint-eval-invisibly-and-wait-for-file139,5262

elpa/org-plus-contrib-20191021/ob-shell.el,1759
(defvar org-babel-default-header-args:shell '())org-babel-default-header-args:shell42,1460
(defvar org-babel-shell-names)org-babel-shell-names43,1509
(defun org-babel-shell-initialize ()org-babel-shell-initialize45,1541
(defcustom org-babel-shell-namesorg-babel-shell-names63,2346
(defun org-babel-execute:shell (body params)org-babel-execute:shell74,2769
(defun org-babel-prep-session:shell (session params)org-babel-prep-session:shell92,3641
(defun org-babel-load-session:shell (session body params)org-babel-load-session:shell102,4093
(defun org-babel--variable-assignments:sh-genericorg-babel--variable-assignments:sh-generic113,4458
(defun org-babel--variable-assignments:bash_arrayorg-babel--variable-assignments:bash_array118,4697
(defun org-babel--variable-assignments:bash_assocorg-babel--variable-assignments:bash_assoc128,5020
(defun org-babel--variable-assignments:bash (varname values &optional sep hline)org-babel--variable-assignments:bash142,5469
(defun org-babel-variable-assignments:shell (params)org-babel-variable-assignments:shell152,5966
(defun org-babel-sh-var-to-sh (var &optional sep hline)org-babel-sh-var-to-sh167,6551
(defun org-babel-sh-var-to-string (var &optional sep hline)org-babel-sh-var-to-string176,6868
(defun org-babel-sh-initiate-session (&optional session _params)org-babel-sh-initiate-session187,7299
(defvar org-babel-sh-eoe-indicator "echo 'org_babel_sh_eoe'"org-babel-sh-eoe-indicator200,7823
(defvar org-babel-sh-eoe-output "org_babel_sh_eoe"org-babel-sh-eoe-output202,7939
(defun org-babel-sh-evaluate (session body &optional params stdin cmdline)org-babel-sh-evaluate205,8046
(defun org-babel-sh-strip-weird-long-prompt (string)org-babel-sh-strip-weird-long-prompt272,10540

elpa/org-plus-contrib-20191021/org-annotate-file.el,878
(defgroup org-annotate-file nilorg-annotate-file62,2129
(defcustom org-annotate-file-storage-file "~/.org-annotate-file.org"org-annotate-file-storage-file66,2194
(defcustom org-annotate-file-add-search nilorg-annotate-file-add-search71,2346
(defcustom org-annotate-file-always-open torg-annotate-file-always-open76,2511
(defun org-annotate-file-ellipsify-desc (string &optional after)org-annotate-file-ellipsify-desc81,2680
(defun org-annotate-file ()org-annotate-file97,3389
(defun org-annotate-file-show-section (storage-file &optional annotated-buffer)org-annotate-file-show-section108,3796
(defun org-annotate-file-annotate (filename line)org-annotate-file-annotate120,4398
(defun org-annotate-file-add-upper-level (link)org-annotate-file-add-upper-level143,5307
(defun org-annotate-file-add-second-level (link)org-annotate-file-add-second-level149,5476

elpa/org-plus-contrib-20191021/ox-publish.el,4371
(defvar org-publish-cache nilorg-publish-cache50,1699
(defvar org-publish-after-publishing-hook nilorg-publish-after-publishing-hook54,1843
(defgroup org-export-publish nilorg-export-publish60,2063
(defcustom org-publish-project-alist nilorg-publish-project-alist65,2186
(defcustom org-publish-use-timestamps-flag torg-publish-use-timestamps-flag287,10664
(defcustom org-publish-timestamp-directoryorg-publish-timestamp-directory293,10894
(defcustom org-publish-list-skipped-files torg-publish-list-skipped-files299,11101
(defcustom org-publish-sitemap-sort-files 'alphabeticallyorg-publish-sitemap-sort-files304,11253
(defcustom org-publish-sitemap-sort-folders 'ignoreorg-publish-sitemap-sort-folders319,11843
(defcustom org-publish-sitemap-sort-ignore-case nilorg-publish-sitemap-sort-ignore-case342,12686
(defun org-publish-timestamp-filename (filename &optional pub-dir pub-func)org-publish-timestamp-filename354,12987
(defun org-publish-needed-porg-publish-needed-p360,13286
(defun org-publish-update-timestamporg-publish-update-timestamp377,14131
(defun org-publish-remove-all-timestamps ()org-publish-remove-all-timestamps385,14472
(defun org-publish-property (property project &optional default)org-publish-property396,14843
(defun org-publish--expand-file-name (file project)org-publish--expand-file-name405,15167
(defun org-publish-expand-projects (projects-alist)org-publish-expand-projects412,15470
(defun org-publish-get-base-files (project)org-publish-get-base-files429,16025
(defun org-publish-get-project-from-filename (filename &optional up)org-publish-get-project-from-filename487,18025
(defun org-publish-org-to (backend filename extension plist &optional pub-dir)org-publish-org-to546,20011
(defun org-publish-attachment (_plist filename pub-dir)org-publish-attachment586,21640
(defun org-publish-file (filename &optional project no-cache)org-publish-file607,22323
(defun org-publish-projects (projects)org-publish-projects654,24171
(defun org-publish--sitemap-files-to-lisp (files project style format-entry)org-publish--sitemap-files-to-lisp695,25864
(defun org-publish-sitemap (project &optional sitemap-filename)org-publish-sitemap750,27544
(defun org-publish-find-property (file property project &optional backend)org-publish-find-property832,30682
(defun org-publish-find-title (file project)org-publish-find-title858,31808
(defun org-publish-find-date (file project)org-publish-find-date872,32429
(defun org-publish-sitemap-default-entry (entry style project)org-publish-sitemap-default-entry897,33584
(defun org-publish-sitemap-default (title list)org-publish-sitemap-default910,34029
(defalias 'org-publish-project 'org-publish)org-publish-project922,34397
(defun org-publish (project &optional force async)org-publish925,34458
(defun org-publish-all (&optional force async)org-publish-all959,35755
(defun org-publish-current-file (&optional force async)org-publish-current-file981,36589
(defun org-publish-current-project (&optional force async)org-publish-current-project999,37267
(defun org-publish-collect-index (output _backend info)org-publish-collect-index1015,37792
(defun org-publish-index-generate-theindex (project directory)org-publish-index-generate-theindex1055,39370
(defun org-publish--store-crossrefs (output _backend info)org-publish--store-crossrefs1129,42253
(defun org-publish-resolve-external-link (search file &optional prefer-custom)org-publish-resolve-external-link1150,43081
(defun org-publish-file-relative-name (filename info)org-publish-file-relative-name1202,45091
(defun org-publish-write-cache-file (&optional free-cache)org-publish-write-cache-file1217,45553
(defun org-publish-initialize-cache (project-name)org-publish-initialize-cache1237,46335
(defun org-publish-reset-cache ()org-publish-reset-cache1268,47504
(defun org-publish-cache-file-needs-publishingorg-publish-cache-file-needs-publishing1275,47738
(defun org-publish-cache-set-file-propertyorg-publish-cache-set-file-property1318,49500
(defun org-publish-cache-get-file-propertyorg-publish-cache-get-file-property1330,50077
(defun org-publish-cache-get (key)org-publish-cache-get1345,50774
(defun org-publish-cache-set (key value)org-publish-cache-set1353,51091
(defun org-publish-cache-ctime-of-src (file)org-publish-cache-ctime-of-src1361,51400

elpa/org-plus-contrib-20191021/ob-groovy.el,684
(defvar org-babel-tangle-lang-exts) ;; Autoloadedorg-babel-tangle-lang-exts35,1220
(defvar org-babel-default-header-args:groovy '())org-babel-default-header-args:groovy37,1335
(defcustom org-babel-groovy-command "groovy"org-babel-groovy-command38,1385
(defun org-babel-execute:groovy (body params)org-babel-execute:groovy47,1685
(defvar org-babel-groovy-wrapper-methodorg-babel-groovy-wrapper-method67,2577
(defun org-babel-groovy-evaluateorg-babel-groovy-evaluate78,2767
(defun org-babel-prep-session:groovy (_session _params)org-babel-prep-session:groovy102,3773
(defun org-babel-groovy-initiate-session (&optional _session)org-babel-groovy-initiate-session106,3962

elpa/org-plus-contrib-20191021/org-docview.el,269
(defun org-docview-export (link description format)org-docview-export57,1930
(defun org-docview-open (link)org-docview-open70,2437
(defun org-docview-store-link ()org-docview-store-link80,2817
(defun org-docview-complete-link ()org-docview-complete-link92,3207

elpa/org-plus-contrib-20191021/ob-eukleides.el,419
(defvar org-babel-default-header-args:eukleidesorg-babel-default-header-args:eukleides40,1318
(defcustom org-eukleides-path nilorg-eukleides-path44,1479
(defcustom org-eukleides-eps-to-raster nilorg-eukleides-eps-to-raster49,1594
(defun org-babel-execute:eukleides (body params)org-babel-execute:eukleides58,1998
(defun org-babel-prep-session:eukleides (session params)org-babel-prep-session:eukleides90,3542

elpa/org-plus-contrib-20191021/org-mhe.el,941
(defcustom org-mhe-search-all-folders nilorg-mhe-search-all-folders38,1318
(defvar mh-progs)mh-progs69,2876
(defvar mh-current-folder)mh-current-folder70,2894
(defvar mh-show-folder-buffer)mh-show-folder-buffer71,2921
(defvar mh-index-folder)mh-index-folder72,2952
(defvar mh-searcher)mh-searcher73,2977
(defvar mh-search-regexp-builder)mh-search-regexp-builder74,2998
(defun org-mhe-store-link ()org-mhe-store-link80,3160
(defun org-mhe-open (path)org-mhe-open99,3923
(defun org-mhe-get-message-real-folder ()org-mhe-get-message-real-folder109,4283
(defun org-mhe-get-message-folder-from-index ()org-mhe-get-message-folder-from-index141,5250
(defun org-mhe-get-message-folder ()org-mhe-get-message-folder148,5503
(defun org-mhe-get-message-num ()org-mhe-get-message-num157,5767
(defun org-mhe-get-header (header)org-mhe-get-header166,6036
(defun org-mhe-follow-link (folder article)org-mhe-follow-link186,6765

elpa/org-plus-contrib-20191021/ob-lisp.el,640
(defvar org-babel-tangle-lang-exts)org-babel-tangle-lang-exts45,1481
(defvar org-babel-default-header-args:lisp '())org-babel-default-header-args:lisp48,1579
(defvar org-babel-header-args:lisp '((package . :any)))org-babel-header-args:lisp49,1627
(defcustom org-babel-lisp-eval-fn #'slime-evalorg-babel-lisp-eval-fn51,1684
(defcustom org-babel-lisp-dir-fmtorg-babel-lisp-dir-fmt59,1936
(defun org-babel-expand-body:lisp (body params)org-babel-expand-body:lisp68,2247
(defun org-babel-execute:lisp (body params)org-babel-execute:lisp85,2809
(defun org-babel-lisp-vector-to-list (results)org-babel-lisp-vector-to-list119,4451

elpa/org-plus-contrib-20191021/org-track.el,670
(defgroup org-track nilorg-track60,1943
(defcustom org-track-directory (concat user-emacs-directory "org/lisp")org-track-directory73,2381
(defcustom org-track-compile-sources torg-track-compile-sources78,2580
(defcustom org-track-org-url "https://orgmode.org/"org-track-org-url86,2856
(defcustom org-track-org-package "org-latest.tar.gz"org-track-org-package91,3005
(defcustom org-track-remove-package nilorg-track-remove-package98,3249
(defun org-track-update ()org-track-update106,3369
(defun org-track-fetch-package (&optional directory)org-track-fetch-package138,4502
(defun org-track-compile-org (&optional directory)org-track-compile-org174,5890

elpa/org-plus-contrib-20191021/ox-odt.el,13011
(defvar nxml-auto-insert-xml-declaration-flag) ; nxml-mode.elnxml-auto-insert-xml-declaration-flag134,5076
(defvar archive-zip-extract)		       ; arc-mode.elarchive-zip-extract135,5138
(defvar hfy-end-span-handler)		       ; htmlfontify.elhfy-end-span-handler136,5189
(defvar hfy-begin-span-handler)		       ; htmlfontify.elhfy-begin-span-handler137,5244
(defvar hfy-face-to-css)		       ; htmlfontify.elhfy-face-to-css138,5301
(defvar hfy-html-quote-map)		       ; htmlfontify.elhfy-html-quote-map139,5351
(defvar hfy-html-quote-regex)		       ; htmlfontify.elhfy-html-quote-regex140,5404
(defconst org-odt-lib-dirorg-odt-lib-dir145,5486
(defvar org-odt-data-dirorg-odt-data-dir151,5682
(defconst org-odt-special-string-regexpsorg-odt-special-string-regexps157,5871
(defconst org-odt-schema-dir-listorg-odt-schema-dir-list164,6139
(defconst org-odt-styles-dir-listorg-odt-styles-dir-list177,6666
(defconst org-odt-styles-dirorg-odt-styles-dir193,7344
(defconst org-odt-bookmark-prefix "OrgXref.")org-odt-bookmark-prefix218,8266
(defconst org-odt-manifest-file-entry-tagorg-odt-manifest-file-entry-tag220,8313
(defconst org-odt-file-extensionsorg-odt-file-extensions223,8441
(defconst org-odt-table-style-formatorg-odt-table-style-format237,8985
(defvar org-odt-automatic-styles '()org-odt-automatic-styles245,9272
(defvar org-odt-object-counters nilorg-odt-object-counters262,9861
(defvar org-odt-src-block-paragraph-formatorg-odt-src-block-paragraph-format267,10035
(defvar hfy-optimizations)hfy-optimizations279,10714
(defvar org-odt-embedded-formulas-count 0)org-odt-embedded-formulas-count280,10741
(defvar org-odt-embedded-images-count 0)org-odt-embedded-images-count281,10784
(defvar org-odt-image-size-probe-methodorg-odt-image-size-probe-method282,10825
(defvar org-odt-default-image-sizes-alistorg-odt-default-image-sizes-alist287,11019
(defvar org-odt-max-image-size '(17.0 . 20.0)org-odt-max-image-size296,11340
(defconst org-odt-label-stylesorg-odt-label-styles299,11435
(defvar org-odt-category-map-alistorg-odt-category-map-alist325,12436
(defvar org-odt-manifest-file-entries nil)org-odt-manifest-file-entries352,13601
(defvar hfy-user-sheet-assoc)hfy-user-sheet-assoc353,13644
(defvar org-odt-zip-dir nilorg-odt-zip-dir355,13675
(defgroup org-export-odt nilorg-export-odt362,13798
(defcustom org-odt-prettify-xml nilorg-odt-prettify-xml370,13940
(defcustom org-odt-schema-dirorg-odt-schema-dir384,14337
(defcustom org-odt-content-template-file nilorg-odt-content-template-file442,16224
(defcustom org-odt-styles-file nilorg-odt-styles-file454,16572
(defcustom org-odt-display-outline-level 2org-odt-display-outline-level498,18119
(defcustom org-odt-convert-processesorg-odt-convert-processes507,18350
(defcustom org-odt-convert-process "LibreOffice"org-odt-convert-process539,19413
(defcustom org-odt-convert-capabilitiesorg-odt-convert-capabilities554,19946
(defcustom org-odt-preferred-output-format nilorg-odt-preferred-output-format622,22546
(defcustom org-odt-format-drawer-function (lambda (_name contents) contents)org-odt-format-drawer-function648,23459
(defcustom org-odt-format-headline-functionorg-odt-format-headline-function666,23941
(defcustom org-odt-format-inlinetask-functionorg-odt-format-inlinetask-function686,24549
(defcustom org-odt-with-latex org-export-with-latexorg-odt-with-latex707,25211
(defcustom org-odt-inline-formula-rulesorg-odt-inline-formula-rules739,26332
(defcustom org-odt-inline-image-rulesorg-odt-inline-image-rules752,26794
(defcustom org-odt-pixels-per-inch 96.0org-odt-pixels-per-inch765,27262
(defcustom org-odt-create-custom-styles-for-srcblocks torg-odt-create-custom-styles-for-srcblocks777,27578
(defcustom org-odt-fontify-srcblocks torg-odt-fontify-srcblocks796,28316
(defcustom org-odt-table-stylesorg-odt-table-styles808,28682
(defcustom org-odt-use-date-fields nilorg-odt-use-date-fields906,32684
(defun org-odt--format-timestamp (timestamp &optional end iso-date-p)org-odt--format-timestamp943,34023
(defun org-odt--frame (text width height style &optional extraorg-odt--frame994,36145
(defun org-odt--zip-extract (archive members target)org-odt--zip-extract1020,36998
(defun org-odt--target (text id)org-odt--target1047,37883
(defun org-odt--textbox (text width height style &optionalorg-odt--textbox1056,38162
(defun org-odt--format-toc (title entries depth)org-odt--format-toc1070,38535
(defun org-odt-toc (depth info &optional scope)org-odt-toc1143,40968
(defun org-odt-add-automatic-style (object-type &optional object-props)org-odt-add-automatic-style1182,42461
(defun org-odt--checkbox (item)org-odt--checkbox1209,43579
(defun org-odt--build-date-styles (fmt style)org-odt--build-date-styles1221,43938
(defun org-odt-template (contents info)org-odt-template1305,47676
(defun org-odt-bold (_bold contents _info)org-odt-bold1578,58767
(defun org-odt-center-block (_center-block contents _info)org-odt-center-block1588,59037
(defun org-odt-clock (clock contents info)org-odt-clock1597,59274
(defun org-odt-code (code _contents _info)org-odt-code1615,59951
(defun org-odt-drawer (drawer contents info)org-odt-drawer1626,60268
(defun org-odt-dynamic-block (_dynamic-block contents _info)org-odt-dynamic-block1638,60632
(defun org-odt-entity (entity _contents _info)org-odt-entity1647,60890
(defun org-odt-example-block (example-block _contents info)org-odt-example-block1656,61132
(defun org-odt-export-snippet (export-snippet _contents _info)org-odt-export-snippet1664,61380
(defun org-odt-export-block (export-block _contents _info)org-odt-export-block1673,61698
(defun org-odt-fixed-width (fixed-width _contents info)org-odt-fixed-width1682,62037
(defun org-odt-footnote-reference (footnote-reference _contents info)org-odt-footnote-reference1695,62379
(defun org-odt-format-headline--wrap (headline backend infoorg-odt-format-headline--wrap1762,64754
(defun org-odt-headline (headline contents info)org-odt-headline1799,66392
(defun org-odt-format-headline-default-functionorg-odt-format-headline-default-function1862,68965
(defun org-odt-horizontal-rule (_horizontal-rule _contents _info)org-odt-horizontal-rule1892,69867
(defun org-odt--find-verb-separator (s)org-odt--find-verb-separator1906,70229
(defun org-odt-inline-src-block (_inline-src-block _contents _info)org-odt-inline-src-block1914,70608
(defun org-odt-inlinetask (inlinetask contents info)org-odt-inlinetask1923,70863
(defun org-odt-format-inlinetask-default-functionorg-odt-format-inlinetask-default-function1940,71679
(defun org-odt-italic (_italic contents _info)org-odt-italic1957,72256
(defun org-odt-item (item contents info)org-odt-item1967,72530
(defun org-odt-keyword (keyword _contents info)org-odt-keyword1983,73119
(defun org-odt-latex-environment (latex-environment _contents info)org-odt-latex-environment2019,74338
(defun org-odt-latex-fragment (latex-fragment _contents _info)org-odt-latex-fragment2035,74872
(defun org-odt-line-break (_line-break _contents _info)org-odt-line-break2045,75265
(defun org-odt--enumerate (element info &optional predicate n)org-odt--enumerate2055,75507
(defun org-odt-format-label (element info op)org-odt-format-label2092,76716
(defun org-odt--copy-image-file (path)org-odt--copy-image-file2178,80003
(defun org-odt--image-sizeorg-odt--image-size2201,80878
(defun org-odt-link--inline-image (element info)org-odt-link--inline-image2264,83241
(defun org-odt-link--inline-formula (element info)org-odt-link--inline-formula2337,86343
(defun org-odt--copy-formula-file (src-file)org-odt--copy-formula-file2383,88233
(defun org-odt--render-image/formula (cfg-key href width height &optionalorg-odt--render-image/formula2412,89412
(defun org-odt--enumerable-p (element _info)org-odt--enumerable-p2514,93520
(defun org-odt--enumerable-image-p (element info)org-odt--enumerable-image-p2519,93702
(defun org-odt--enumerable-latex-image-p (element info)org-odt--enumerable-latex-image-p2534,94288
(defun org-odt--enumerable-formula-p (element info)org-odt--enumerable-formula-p2549,94871
(defun org-odt--standalone-link-p (element _info &optionalorg-odt--standalone-link-p2561,95305
(defun org-odt-link--infer-description (destination info)org-odt-link--infer-description2598,96633
(defun org-odt-link (link desc info)org-odt-link2689,100558
(defun org-odt-node-property (node-property _contents _info)org-odt-node-property2810,105475
(defun org-odt--paragraph-style (paragraph)org-odt--paragraph-style2822,105875
(defun org-odt--format-paragraph (paragraph contents info default center quote)org-odt--format-paragraph2833,106267
(defun org-odt-paragraph (paragraph contents info)org-odt-paragraph2854,107231
(defun org-odt-plain-list (plain-list contents _info)org-odt-plain-list2867,107612
(defun org-odt--encode-tabs-and-spaces (line)org-odt--encode-tabs-and-spaces2888,108413
(defun org-odt--encode-plain-text (text &optional no-whitespace-filling)org-odt--encode-plain-text2896,108640
(defun org-odt-plain-text (text info)org-odt-plain-text2902,108933
(defun org-odt-planning (planning contents info)org-odt-planning2928,109908
(defun org-odt-property-drawer (_property-drawer contents _info)org-odt-property-drawer2957,110944
(defun org-odt-quote-block (_quote-block contents _info)org-odt-quote-block2968,111308
(defun org-odt-format-section (text style &optional name)org-odt-format-section2977,111537
(defun org-odt-section (_section contents _info) ; FIXMEorg-odt-section2985,111825
(defun org-odt-radio-target (radio-target text info)org-odt-radio-target2993,112056
(defun org-odt-special-block (special-block contents info)org-odt-special-block3002,112336
(defun org-odt-hfy-face-to-css (fn)org-odt-hfy-face-to-css3041,113787
(defun org-odt-htmlfontify-string (line)org-odt-htmlfontify-string3075,115171
(defun org-odt-do-format-codeorg-odt-do-format-code3092,115877
(defun org-odt-format-code (element info)org-odt-format-code3143,117740
(defun org-odt-src-block (src-block _contents info)org-odt-src-block3155,118235
(defun org-odt-statistics-cookie (statistics-cookie _contents _info)org-odt-statistics-cookie3174,118956
(defun org-odt-strike-through (_strike-through contents _info)org-odt-strike-through3184,119338
(defun org-odt-subscript (_subscript contents _info)org-odt-subscript3194,119654
(defun org-odt-superscript (_superscript contents _info)org-odt-superscript3204,119956
(defun org-odt-table-style-spec (element info)org-odt-table-style-spec3214,120265
(defun org-odt-get-table-cell-styles (table-cell info)org-odt-get-table-cell-styles3220,120547
(defun org-odt-table-cell (table-cell contents info)org-odt-table-cell3280,123313
(defun org-odt-table-row (table-row contents info)org-odt-table-row3349,125810
(defun org-odt-table-first-row-data-cells (table info)org-odt-table-first-row-data-cells3379,127068
(defun org-odt--table (table contents info)org-odt--table3389,127464
(defun org-odt-table (table contents info)org-odt-table3443,129409
(defun org-odt-target (target _contents info)org-odt-target3596,135149
(defun org-odt-timestamp (timestamp _contents info)org-odt-timestamp3605,135389
(defun org-odt-underline (_underline contents _info)org-odt-underline3651,137081
(defun org-odt-verbatim (verbatim _contents _info)org-odt-verbatim3661,137372
(defun org-odt-verse-block (_verse-block contents _info)org-odt-verse-block3672,137710
(defun org-odt--translate-image-links (data _backend info)org-odt--translate-image-links3690,138262
(defun org-odt--translate-latex-fragments (tree _backend info)org-odt--translate-latex-fragments3695,138416
(defun org-odt--translate-description-lists (tree _backend info)org-odt--translate-description-lists3803,142371
(defun org-odt--translate-list-tables (tree _backend info)org-odt--translate-list-tables3899,145288
(defun org-odt-create-manifest-file-entry (&rest args)org-odt-create-manifest-file-entry3948,146912
(defun org-odt-write-manifest-file ()org-odt-write-manifest-file3951,147013
(defmacro org-odt--export-wrap (out-file &rest body)org-odt--export-wrap3969,147819
(defun org-odt-export-as-odf (latex-frag &optional odf-file)org-odt-export-as-odf4081,152213
(defun org-odt-export-as-odf-and-open ()org-odt-export-as-odf-and-open4132,154195
(defun org-odt-export-to-odt (&optional async subtreep visible-only ext-plist)org-odt-export-to-odt4143,154531
(defun org-odt-reachable-p (in-fmt out-fmt)org-odt-reachable-p4215,157066
(defun org-odt-do-convert (in-file out-fmt &optional open)org-odt-do-convert4224,157411
(defun org-odt-do-reachable-formats (in-fmt)org-odt-do-reachable-formats4267,158934
(defun org-odt-reachable-formats (in-fmt)org-odt-reachable-formats4289,159762
(defun org-odt-convert-read-params ()org-odt-convert-read-params4297,160054
(defun org-odt-convert (&optional in-file out-fmt open)org-odt-convert4315,160718

elpa/org-plus-contrib-20191021/org-table.el,20028
(defvar constants-unit-system)constants-unit-system68,2904
(defvar org-element-use-cache)org-element-use-cache69,2935
(defvar org-export-filters-alist)org-export-filters-alist70,2966
(defvar org-table-follow-field-mode)org-table-follow-field-mode71,3000
(defvar orgtbl-mode) ; defined beloworgtbl-mode72,3037
(defvar orgtbl-mode-menu) ; defined when orgtbl mode get initializedorgtbl-mode-menu73,3074
(defvar sort-fold-case)sort-fold-case74,3143
(defvar orgtbl-after-send-table-hook nilorgtbl-after-send-table-hook76,3168
(defvar org-table-TBLFM-begin-regexp "^[ \t]*|.*\n[ \t]*#\\+TBLFM: ")org-table-TBLFM-begin-regexp82,3439
(defcustom orgtbl-optimized torgtbl-optimized84,3510
(defcustom orgtbl-radio-table-templatesorgtbl-radio-table-templates98,4035
(defgroup org-table-settings nilorg-table-settings147,5822
(defcustom org-table-default-size "5x2"org-table-default-size152,5942
(defcustom org-table-number-regexporg-table-number-regexp157,6092
(defcustom org-table-number-fraction 0.5org-table-number-fraction188,7707
(defgroup org-table-editing nilorg-table-editing196,8038
(defcustom org-table-automatic-realign torg-table-automatic-realign201,8170
(defcustom org-table-auto-blank-field torg-table-auto-blank-field208,8429
(defcustom org-table-exit-follow-field-mode-when-leaving-table torg-table-exit-follow-field-mode-when-leaving-table215,8689
(defcustom org-table-fix-formulas-confirm nilorg-table-fix-formulas-confirm226,9154
(defcustom org-table-tab-jumps-over-hlines torg-table-tab-jumps-over-hlines235,9449
(defgroup org-table-calculation nilorg-table-calculation244,9842
(defcustom org-table-use-standard-references 'fromorg-table-use-standard-references249,9974
(defcustom org-table-copy-increment torg-table-copy-increment261,10488
(defcustom org-calc-default-modesorg-calc-default-modes272,10903
(defcustom org-table-duration-custom-format 'hoursorg-table-duration-custom-format288,11548
(defcustom org-table-duration-hour-zero-padding torg-table-duration-hour-zero-padding304,12249
(defcustom org-table-formula-field-format "%s"org-table-formula-field-format313,12541
(defcustom org-table-formula-evaluate-inline torg-table-formula-evaluate-inline322,12884
(defcustom org-table-formula-use-constants torg-table-formula-use-constants333,13421
(defcustom org-table-formula-constants nilorg-table-formula-constants341,13764
(defcustom org-table-allow-automatic-line-recalculation torg-table-allow-automatic-line-recalculation359,14411
(defcustom org-table-relative-ref-may-cross-hline torg-table-relative-ref-may-cross-hline367,14713
(defcustom org-table-formula-create-columns nilorg-table-formula-create-columns386,15480
(defgroup org-table-import-export nilorg-table-import-export401,16215
(defcustom org-table-export-default-format "orgtbl-to-tsv"org-table-export-default-format406,16368
(defcustom org-table-convert-region-max-lines 999org-table-convert-region-max-lines415,16737
(defcustom org-table-shrunk-column-indicator "…"org-table-shrunk-column-indicator425,17060
(defconst org-table-auto-recalculate-regexp "^[ \t]*| *# *\\(|\\|$\\)"org-table-auto-recalculate-regexp433,17314
(defconst org-table-recalculate-regexp "^[ \t]*| *[#*] *\\(|\\|$\\)"org-table-recalculate-regexp436,17450
(defconst org-table-calculate-mark-regexp "^[ \t]*| *[!$^_#*] *\\(|\\|$\\)"org-table-calculate-mark-regexp439,17574
(defconst org-table-border-regexp "^[ \t]*[^| \t]"org-table-border-regexp442,17703
(defvar org-table-last-highlighted-reference nil)org-table-last-highlighted-reference445,17807
(defvar org-table-formula-history nil)org-table-formula-history447,17858
(defvar org-table-column-names nilorg-table-column-names449,17898
(defvar org-table-column-name-regexp nilorg-table-column-name-regexp453,18046
(defvar org-table-local-parameters nilorg-table-local-parameters457,18202
(defvar org-table-named-field-locations nilorg-table-named-field-locations461,18357
(defvar org-table-current-line-types nilorg-table-current-line-types469,18717
(defvar org-table-current-begin-pos nilorg-table-current-begin-pos473,18853
(defvar org-table-current-ncol nilorg-table-current-ncol477,18997
(defvar org-table-dlines nilorg-table-dlines481,19129
(defvar org-table-hlines nilorg-table-hlines486,19333
(defconst org-table-range-regexporg-table-range-regexp491,19533
(defconst org-table-range-regexp2org-table-range-regexp2496,19824
(defconst org-table-translate-regexporg-table-translate-regexp503,20115
(defconst org-table-separator-spaceorg-table-separator-space507,20301
(defmacro org-table-save-field (&rest body)org-table-save-field513,20539
(defmacro org-table-with-shrunk-columns (&rest body)org-table-with-shrunk-columns529,21108
(defun org-table-create-with-table.el ()org-table-create-with-table.el544,21691
(defun org-table-create-or-convert-from-region (arg)org-table-create-or-convert-from-region561,22195
(defun org-table-create (&optional size)org-table-create574,22762
(defun org-table-convert-region (beg0 end0 &optional separator)org-table-convert-region606,23798
(defun org-table-import (file separator)org-table-import677,26565
(defun org-table-export (&optional file format)org-table-export704,27506
(defvar org-table-aligned-begin-marker (make-marker)org-table-aligned-begin-marker776,30401
(defvar org-table-aligned-end-marker (make-marker)org-table-aligned-end-marker779,30583
(defvar org-table-last-alignment nilorg-table-last-alignment782,30757
(defvar org-table-last-column-widths nilorg-table-last-column-widths785,30938
(defvar-local org-table-formula-debug nilorg-table-formula-debug788,31099
(defvar-local org-table-overlay-coordinates nilorg-table-overlay-coordinates791,31237
(defvar org-last-recalc-line nil)org-last-recalc-line794,31340
(defun org-table--align-field (field width align)org-table--align-field796,31375
(defun org-table-align ()org-table-align813,31918
(defun org-table-begin (&optional table-type)org-table-begin903,35029
(defun org-table-end (&optional table-type)org-table-end916,35504
(defun org-table-justify-field-maybe (&optional new)org-table-justify-field-maybe938,36379
(defun org-table-next-field ()org-table-next-field986,38148
(defun org-table-previous-field ()org-table-previous-field1016,39068
(defun org-table-beginning-of-field (&optional n)org-table-beginning-of-field1040,39795
(defun org-table-end-of-field (&optional n)org-table-end-of-field1056,40415
(defun org-table-next-row ()org-table-next-row1073,41036
(defun org-table-copy-down (n)org-table-copy-down1094,41742
(defun org-table-check-inside-data-field (&optional noerror assume-table)org-table-check-inside-data-field1180,45108
(defvar org-table-clip nilorg-table-clip1193,45684
(defun org-table-get (line column)org-table-get1196,45746
(defun org-table-put (line column value &optional align)org-table-put1208,46246
(defun org-table-current-line ()org-table-current-line1218,46653
(defun org-table-goto-line (N)org-table-goto-line1228,46977
(defun org-table-blank-field ()org-table-blank-field1238,47316
(defun org-table-get-field (&optional n replace)org-table-get-field1255,47907
(defun org-table-field-info (_arg)org-table-field-info1275,48621
(defun org-table-current-column ()org-table-current-column1322,50313
(defun org-table-current-dline ()org-table-current-dline1334,50669
(defun org-table-goto-column (n &optional on-delim force)org-table-goto-column1347,51019
(defun org-table-insert-column ()org-table-insert-column1370,51816
(defun org-table-find-dataline ()org-table-find-dataline1405,53073
(defun org-table-line-to-dline (line &optional above)org-table-line-to-dline1420,53583
(defun org-table-delete-column ()org-table-delete-column1447,54495
(defun org-table-move-column-right ()org-table-move-column-right1484,55832
(defun org-table-move-column-left ()org-table-move-column-left1490,55963
(defun org-table-move-column (&optional left)org-table-move-column1496,56094
(defun org-table-move-row-down ()org-table-move-row-down1549,58125
(defun org-table-move-row-up ()org-table-move-row-up1555,58244
(defun org-table-move-row (&optional up)org-table-move-row1561,58359
(defun org-table-insert-row (&optional arg)org-table-insert-row1599,59818
(defun org-table-insert-hline (&optional above)org-table-insert-hline1624,61012
(defun org-table-hline-and-move (&optional same-column)org-table-hline-and-move1648,62007
(defun org-table-clean-line (s)org-table-clean-line1661,62462
(defun org-table-kill-row ()org-table-kill-row1675,63007
(defun org-table-sort-linesorg-table-sort-lines1693,63741
(defun org-table-cut-region (beg end)org-table-cut-region1820,68593
(defun org-table-copy-region (beg end &optional cut)org-table-copy-region1829,68948
(defun org-table-paste-rectangle ()org-table-paste-rectangle1867,70370
(defun org-table-convert ()org-table-convert1895,71374
(defun org-table-transpose-table-at-point ()org-table-transpose-table-at-point1940,73139
(defun org-table-wrap-region (arg)org-table-wrap-region1983,74146
(defvar org-field-marker nil)org-field-marker2047,76729
(defun org-table-edit-field (arg)org-table-edit-field2050,76775
(defun org-table-finish-edit-field ()org-table-finish-edit-field2101,78836
(define-minor-mode org-table-follow-field-modeorg-table-follow-field-mode2124,79645
(defun org-table-follow-fields-with-editor ()org-table-follow-fields-with-editor2142,80448
(defvar org-timecnt) ; dynamically scoped parameterorg-timecnt2153,80852
(defun org-table-sum (&optional beg end nlast)org-table-sum2156,80920
(defun org-table-get-number-for-summing (s)org-table-get-number-for-summing2213,83045
(defun org-table-current-field-formula (&optional key noerror)org-table-current-field-formula2233,83813
(defun org-table-get-formula (&optional equation named)org-table-get-formula2259,84816
(defun org-table-store-formulas (alist &optional location)org-table-store-formulas2307,86711
(defsubst org-table-formula-make-cmp-string (a)org-table-formula-make-cmp-string2330,87534
(defun org-table-formula-less-p (a b)org-table-formula-less-p2349,88263
(defun org-table-get-stored-formulas (&optional noerror location)org-table-get-stored-formulas2356,88497
(defun org-table-fix-formulas (key replace &optional limit delta remove)org-table-fix-formulas2398,89992
(defun org-table-maybe-eval-formula ()org-table-maybe-eval-formula2435,91462
(defvar org-recalc-commands nilorg-recalc-commands2449,92088
(defvar org-recalc-marksorg-recalc-marks2453,92224
(defun org-table-rotate-recalc-marks (&optional newchar)org-table-rotate-recalc-marks2463,92773
(defun org-table-analyze ()org-table-analyze2533,95446
(defun org-table-goto-field (ref &optional create-column-p)org-table-goto-field2636,99580
(defun org-table-maybe-recalculate-line ()org-table-maybe-recalculate-line2668,100820
(defvar org-tbl-calc-modes) ;; Dynamically bound in `org-table-eval-formula'org-tbl-calc-modes2678,101264
(defsubst org-set-calc-mode (var &optional value)org-set-calc-mode2679,101341
(defun org-table-eval-formula (&optional arg equationorg-table-eval-formula2692,101790
(defun org-table-put-field-property (prop value)org-table-put-field-property2988,112770
(defun org-table-get-range (desc &optional tbeg col highlight corners-only)org-table-get-range2994,112978
(defun org-table--descriptor-line (desc cline)org-table--descriptor-line3070,116057
(defun org-table--row-type (type n i backwards relative desc)org-table--row-type3102,117397
(defun org-table--error-on-old-row-references (s)org-table--error-on-old-row-references3132,118597
(defun org-table-make-reference (elements keep-empty numbers lispp)org-table-make-reference3136,118773
(defun org-table-message-once-per-second (t1 &rest args)org-table-message-once-per-second3187,120636
(defun org-table-recalculate (&optional all noalign)org-table-recalculate3199,121102
(defun org-table-iterate (&optional arg)org-table-iterate3370,127643
(defun org-table-recalculate-buffer-tables ()org-table-recalculate-buffer-tables3393,128428
(defun org-table-iterate-buffer-tables ()org-table-iterate-buffer-tables3407,128840
(defun org-table-calc-current-TBLFM (&optional arg)org-table-calc-current-TBLFM3428,129545
(defun org-table-TBLFM-begin ()org-table-TBLFM-begin3451,130364
(defun org-table-expand-lhs-ranges (equations)org-table-expand-lhs-ranges3459,130672
(defun org-table-formula-handle-first/last-rc (s)org-table-formula-handle-first/last-rc3499,132036
(defun org-table-formula-substitute-names (f)org-table-formula-substitute-names3528,133303
(defun org-table-get-constant (const)org-table-get-constant3558,134359
(defvar org-table-fedit-maporg-table-fedit-map3569,134862
(defvar org-pos)org-pos3621,137353
(defvar org-table--fedit-source nilorg-table--fedit-source3622,137370
(defun org-table-edit-formulas ()org-table-edit-formulas3626,137468
(defun org-table-fedit-post-command ()org-table-fedit-post-command3687,140003
(defun org-table-formula-to-user (s)org-table-formula-to-user3694,140227
(defun org-table-formula-from-user (s)org-table-formula-from-user3700,140419
(defun org-table-convert-refs-to-rc (s)org-table-convert-refs-to-rc3706,140606
(defun org-table-convert-refs-to-an (s)org-table-convert-refs-to-an3738,141766
(defun org-letters-to-number (s)org-letters-to-number3756,142406
(defun org-number-to-letters (n)org-number-to-letters3766,142688
(defun org-table-time-string-to-seconds (s)org-table-time-string-to-seconds3775,142946
(defun org-table-time-seconds-to-string (secs &optional output-format)org-table-time-seconds-to-string3802,144073
(defun org-table--shrunk-field ()org-table--shrunk-field3833,144975
(defun org-table--list-shrunk-columns ()org-table--list-shrunk-columns3845,145363
(defun org-table--make-shrinking-overlay (start end display field &optional pre)org-table--make-shrinking-overlay3876,146559
(defun org-table--shrink-field (width align start end contents)org-table--shrink-field3910,148035
(defun org-table--read-column-selection (select max)org-table--read-column-selection4042,153061
(defun org-table--shrink-columns (columns beg end)org-table--shrink-columns4072,154009
(defun org-table-toggle-column-width (&optional arg)org-table-toggle-column-width4121,155764
(defun org-table-shrink (&optional begin end)org-table-shrink4179,157917
(defun org-table-expand (&optional begin end)org-table-expand4204,158881
(defun org-table-fedit-convert-buffer (function)org-table-fedit-convert-buffer4219,159369
(defun org-table-fedit-toggle-ref-type ()org-table-fedit-toggle-ref-type4230,159794
(defun org-table-fedit-ref-up ()org-table-fedit-ref-up4240,160220
(defun org-table-fedit-ref-down ()org-table-fedit-ref-down4244,160361
(defun org-table-fedit-ref-left ()org-table-fedit-ref-left4248,160508
(defun org-table-fedit-ref-right ()org-table-fedit-ref-right4252,160658
(defun org-table-fedit-shift-reference (dir)org-table-fedit-shift-reference4257,160812
(defun org-rematch-and-replace (n &optional decr hline)org-rematch-and-replace4275,161529
(defun org-table-shift-refpart (ref &optional decr hline)org-table-shift-refpart4283,161909
(defun org-table-fedit-toggle-coordinates ()org-table-fedit-toggle-coordinates4315,163021
(defun org-table-fedit-finish (&optional arg)org-table-fedit-finish4324,163319
(defun org-table-fedit-abort ()org-table-fedit-abort4359,164607
(defun org-table-fedit-lisp-indent ()org-table-fedit-lisp-indent4370,165009
(defvar org-show-positions nil)org-show-positions4409,166312
(defun org-table-show-reference (&optional local)org-table-show-reference4411,166345
(defun org-table-force-dataline ()org-table-force-dataline4542,171458
(defun org-table-fedit-line-up ()org-table-fedit-line-up4559,172143
(defun org-table-fedit-line-down ()org-table-fedit-line-down4564,172296
(defun org-table-fedit-move (command)org-table-fedit-move4569,172449
(defun org-table-fedit-scroll (N)org-table-fedit-scroll4584,173027
(defun org-table-fedit-scroll-down (N)org-table-fedit-scroll-down4589,173174
(defvar org-table-rectangle-overlays nil)org-table-rectangle-overlays4593,173268
(defun org-table-add-rectangle-overlay (beg end &optional face)org-table-add-rectangle-overlay4595,173311
(defun org-table-highlight-rectangle (&optional beg end face)org-table-highlight-rectangle4601,173539
(defun org-table-remove-rectangle-highlight (&rest _ignore)org-table-remove-rectangle-highlight4636,174932
(defvar-local org-table-coordinate-overlays nilorg-table-coordinate-overlays4643,175251
(defun org-table-overlay-coordinates ()org-table-overlay-coordinates4646,175373
(defun org-table-toggle-coordinate-overlays ()org-table-toggle-coordinate-overlays4676,176550
(defun org-table-toggle-formula-debugger ()org-table-toggle-formula-debugger4689,177096
(defvar orgtbl-mode-map (make-keymap)orgtbl-mode-map4726,178847
(defvar org-old-auto-fill-inhibit-regexp nilorg-old-auto-fill-inhibit-regexp4729,178917
(defconst orgtbl-line-start-regexporgtbl-line-start-regexp4732,179006
(defconst orgtbl-extra-font-lock-keywordsorgtbl-extra-font-lock-keywords4736,179142
(define-minor-mode orgtbl-modeorgtbl-mode4746,179479
(defun orgtbl-make-binding (fun n &rest keys)orgtbl-make-binding4785,181165
(defun orgtbl-error ()orgtbl-error4810,182000
(defun orgtbl-setup ()orgtbl-setup4815,182158
(defun orgtbl-ctrl-c-ctrl-c (arg)orgtbl-ctrl-c-ctrl-c4962,188859
(defun orgtbl-create-or-convert-from-region (_arg)orgtbl-create-or-convert-from-region4993,189922
(defun orgtbl-tab (arg)orgtbl-tab5003,190343
(defun orgtbl-ret ()orgtbl-ret5010,190542
(defun orgtbl-self-insert-command (N)orgtbl-self-insert-command5018,190726
(defvar orgtbl-exp-regexp "^\\([-+]?[0-9][0-9.]*\\)[eE]\\([-+]?[0-9]+\\)$"orgtbl-exp-regexp5065,192434
(defun orgtbl-gather-send-defs ()orgtbl-gather-send-defs5068,192577
(defun orgtbl-send-replace-tbl (name text)orgtbl-send-replace-tbl5085,193209
(defun org-table-to-lisp (&optional txt)org-table-to-lisp5105,193984
(defun orgtbl-send-table (&optional maybe)orgtbl-send-table5119,194642
(defun org-remove-by-index (list indices &optional i0)org-remove-by-index5148,195808
(defun orgtbl-toggle-comment ()orgtbl-toggle-comment5160,196187
(defun orgtbl-insert-radio-table ()orgtbl-insert-radio-table5181,196925
(defun orgtbl-to-generic (table params)orgtbl-to-generic5197,197459
(defun org-table--generic-apply (value name &optional with-cons &rest args)org-table--generic-apply5390,204283
(defun org-table--to-generic-table (params)org-table--to-generic-table5405,204875
(defun org-table--to-generic-row (params)org-table--to-generic-row5421,205522
(defun org-table--to-generic-cell (params)org-table--to-generic-cell5515,208671
(defun orgtbl-to-tsv (table params)orgtbl-to-tsv5584,211421
(defun orgtbl-to-csv (table params)orgtbl-to-csv5589,211604
(defun orgtbl-to-latex (table params)orgtbl-to-latex5597,211888
(defun orgtbl-to-html (table params)orgtbl-to-html5630,212933
(defun orgtbl-to-texinfo (table params)orgtbl-to-texinfo5661,213952
(defun orgtbl-to-orgtbl (table params)orgtbl-to-orgtbl5692,214973
(defun orgtbl-to-table.el (table params)orgtbl-to-table.el5707,215619
(defun orgtbl-to-unicode (table params)orgtbl-to-unicode5721,216183
(defun orgtbl-ascii-draw (value min max &optional width characters)orgtbl-ascii-draw5757,217413
(defun orgtbl-ascii-plot (&optional ask)orgtbl-ascii-plot5781,218550
(defun orgtbl-uc-draw-grid (value min max &optional width)orgtbl-uc-draw-grid5837,220448
(defun orgtbl-uc-draw-cont (value min max &optional width)orgtbl-uc-draw-cont5847,220907
(defun org-table-get-remote-range (name-or-id form)org-table-get-remote-range5855,221266
(defun org-table-remote-reference-indirection (form)org-table-remote-reference-indirection5911,223570
(defmacro org-define-lookup-function (mode)org-define-lookup-function5934,224398

elpa/org-plus-contrib-20191021/org-info.el,629
(defvar Info-current-file)Info-current-file39,1418
(defvar Info-current-node)Info-current-node40,1445
(defun org-info-store-link ()org-info-store-link49,1641
(defun org-info-open (path)org-info-open62,2083
(defun org-info-follow-link (name)org-info-follow-link67,2201
(defconst org-info-emacs-documentsorg-info-emacs-documents85,2915
(defconst org-info-other-documentsorg-info-other-documents97,3630
(defun org-info-map-html-url (filename)org-info-map-html-url104,3970
(defun org-info--expand-node-name (node)org-info--expand-node-name116,4582
(defun org-info-export (path desc format)org-info-export129,5061

elpa/org-plus-contrib-20191021/org-colview.el,7950
(defvar org-agenda-columns-add-appointments-to-effort-sum)org-agenda-columns-add-appointments-to-effort-sum45,1918
(defvar org-agenda-columns-compute-summary-properties)org-agenda-columns-compute-summary-properties46,1977
(defvar org-agenda-columns-show-summaries)org-agenda-columns-show-summaries47,2032
(defvar org-agenda-view-columns-initially)org-agenda-view-columns-initially48,2075
(defvar org-inlinetask-min-level)org-inlinetask-min-level49,2118
(defcustom org-columns-modify-value-for-display-function nilorg-columns-modify-value-for-display-function54,2174
(defcustom org-columns-summary-types nilorg-columns-summary-types67,2699
(defvar-local org-columns-overlays nilorg-columns-overlays109,4165
(defvar-local org-columns-current-fmt nilorg-columns-current-fmt112,4253
(defvar-local org-columns-current-fmt-compiled nilorg-columns-current-fmt-compiled115,4359
(defvar-local org-columns-current-maxwidths nilorg-columns-current-maxwidths119,4518
(defvar-local org-columns-begin-marker nilorg-columns-begin-marker122,4625
(defvar-local org-columns-top-level-marker nilorg-columns-top-level-marker125,4746
(defvar org-columns--time 0.0org-columns--time128,4859
(defvar org-columns-map (make-sparse-keymap)org-columns-map131,4958
(defconst org-columns-summary-types-defaultorg-columns-summary-types-default134,5045
(defun org-columns-content ()org-columns-content154,5912
(defun org-columns--displayed-value (spec value &optional no-star)org-columns--displayed-value236,9377
(defun org-columns--collect-values (&optional compiled-fmt)org-columns--collect-values263,10402
(defun org-columns--set-widths (cache)org-columns--set-widths296,11764
(defun org-columns--new-overlay (beg end &optional string face)org-columns--new-overlay316,12494
(defun org-columns--summarize (operator)org-columns--summarize324,12795
(defun org-columns--collect (operator)org-columns--collect333,13218
(defun org-columns--overlay-text (value fmt width property original)org-columns--overlay-text343,13689
(defun org-columns--display-here (columns &optional dateline)org-columns--display-here364,14654
(defun org-columns-add-ellipses (string width)org-columns-add-ellipses438,17587
(defvar org-columns-full-header-line-format nilorg-columns-full-header-line-format447,17938
(defvar org-previous-header-line-format nilorg-previous-header-line-format449,18062
(defvar org-columns-inhibit-recalculation nilorg-columns-inhibit-recalculation451,18168
(defvar org-columns-flyspell-was-active nilorg-columns-flyspell-was-active453,18274
(defvar header-line-format)header-line-format458,18485
(defvar org-columns-previous-hscroll 0)org-columns-previous-hscroll459,18513
(defun org-columns--display-here-title ()org-columns--display-here-title461,18554
(defun org-columns-hscroll-title ()org-columns-hscroll-title482,19439
(defvar org-colview-initial-truncate-line-value nilorg-colview-initial-truncate-line-value495,20019
(defun org-columns-remove-overlays ()org-columns-remove-overlays499,20147
(defun org-columns-compact-links (s)org-columns-compact-links520,21119
(defun org-columns-show-value ()org-columns-show-value528,21367
(defvar org-agenda-columns-active) ;; defined in org-agenda.elorg-agenda-columns-active534,21567
(defun org-columns-quit ()org-columns-quit536,21631
(defun org-columns-check-computed ()org-columns-check-computed549,22129
(defun org-columns-todo (&optional _arg)org-columns-todo557,22468
(defun org-columns-set-tags-or-toggle (&optional _arg)org-columns-set-tags-or-toggle562,22611
(defvar org-overriding-columns-format nilorg-overriding-columns-format570,22923
(defvar-local org-local-columns-format nilorg-local-columns-format575,23127
(defun org-columns-edit-value (&optional key)org-columns-edit-value580,23359
(defun org-columns-edit-allowed ()org-columns-edit-allowed657,26241
(defun org-columns--call (fun)org-columns--call678,27046
(defun org-columns-previous-allowed-value ()org-columns-previous-allowed-value688,27403
(defun org-columns-next-allowed-value (&optional previous nth)org-columns-next-allowed-value693,27561
(defun org-colview-construct-allowed-dates (s)org-colview-construct-allowed-dates751,30011
(defun org-columns-open-link (&optional arg)org-columns-open-link772,31050
(defun org-columns-get-format-and-top-level ()org-columns-get-format-and-top-level778,31239
(defun org-columns-get-format (&optional fmt-string)org-columns-get-format783,31370
(defun org-columns-goto-top-level ()org-columns-goto-top-level807,32203
(defun org-columns (&optional global columns-fmt-string)org-columns820,32700
(defun org-columns-new (&optional spec &rest attributes)org-columns-new871,34801
(defun org-columns-delete ()org-columns-delete916,36299
(defun org-columns-edit-attributes ()org-columns-edit-attributes932,37045
(defun org-columns-widen (arg)org-columns-widen937,37224
(defun org-columns-narrow (arg)org-columns-narrow948,37629
(defun org-columns-move-right ()org-columns-move-right953,37761
(defun org-columns-move-left ()org-columns-move-left977,38817
(defun org-columns-store-format ()org-columns-store-format987,39099
(defun org-columns-update (property)org-columns-update1017,40474
(defun org-columns-redo ()org-columns-redo1044,41528
(defun org-columns-uncompile-format (compiled)org-columns-uncompile-format1059,42065
(defun org-columns-compile-format (fmt)org-columns-compile-format1076,42587
(defun org-columns--age-to-minutes (s)org-columns--age-to-minutes1112,44088
(defun org-columns--format-age (minutes)org-columns--format-age1125,44569
(defun org-columns--summary-apply-times (fun times)org-columns--summary-apply-times1131,44780
(defun org-columns--compute-spec (spec &optional update)org-columns--compute-spec1147,45342
(defun org-columns-compute (property)org-columns-compute1217,48341
(defun org-columns-compute-all ()org-columns-compute-all1231,48848
(defun org-columns--summary-sum (values printf)org-columns--summary-sum1244,49349
(defun org-columns--summary-currencies (values _)org-columns--summary-currencies1249,49558
(defun org-columns--summary-checkbox (check-boxes _)org-columns--summary-checkbox1253,49725
(defun org-columns--summary-checkbox-count (check-boxes _)org-columns--summary-checkbox-count1261,49979
(defun org-columns--summary-checkbox-percent (check-boxes _)org-columns--summary-checkbox-percent1269,50257
(defun org-columns--summary-min (values printf)org-columns--summary-min1276,50516
(defun org-columns--summary-max (values printf)org-columns--summary-max1282,50734
(defun org-columns--summary-mean (values printf)org-columns--summary-mean1288,50952
(defun org-columns--summary-sum-times (times _)org-columns--summary-sum-times1295,51200
(defun org-columns--summary-min-time (times _)org-columns--summary-min-time1299,51312
(defun org-columns--summary-max-time (times _)org-columns--summary-max-time1303,51452
(defun org-columns--summary-mean-time (times _)org-columns--summary-mean-time1307,51592
(defun org-columns--summary-min-age (ages _)org-columns--summary-min-age1313,51801
(defun org-columns--summary-max-age (ages _)org-columns--summary-max-age1318,51977
(defun org-columns--summary-mean-age (ages _)org-columns--summary-mean-age1323,52153
(defun org-columns--summary-estimate (estimates _)org-columns--summary-estimate1329,52357
(defun org-columns--capture-view (maxlevel match skip-empty format local)org-columns--capture-view1351,53050
(defun org-columns--clean-item (item)org-columns--clean-item1395,54714
(defun org-dblock-write:columnview (params)org-dblock-write:columnview1409,55286
(defun org-columns-insert-dblock ()org-columns-insert-dblock1544,59740
(defun org-agenda-columns ()org-agenda-columns1564,60291
(defun org-agenda-colview-summarize (cache)org-agenda-colview-summarize1623,62491
(defun org-agenda-colview-compute (fmt)org-agenda-colview-compute1688,64728

elpa/org-plus-contrib-20191021/org-indent.el,2740
(defvar org-inlinetask-show-first-star)org-inlinetask-show-first-star48,1748
(defgroup org-indent nilorg-indent50,1789
(defvar org-indent-inlinetask-first-star (org-add-props "*" '(face org-warning))org-indent-inlinetask-first-star55,1910
(defvar org-indent-agent-timer nilorg-indent-agent-timer57,2043
(defvar org-indent-agentized-buffers nilorg-indent-agentized-buffers59,2119
(defvar org-indent-agent-resume-timer nilorg-indent-agent-resume-timer61,2214
(defvar org-indent-agent-active-delay '(0 2 0)org-indent-agent-active-delay63,2328
(defvar org-indent-agent-passive-delay '(0 0 400000)org-indent-agent-passive-delay66,2493
(defvar org-indent-agent-resume-delay '(0 0 100000)org-indent-agent-resume-delay69,2667
(defvar org-indent--initial-marker nilorg-indent--initial-marker71,2794
(defvar org-hide-leading-stars-before-indent-mode nilorg-hide-leading-stars-before-indent-mode74,2938
(defvar org-indent-modified-headline-flag nilorg-indent-modified-headline-flag76,3011
(defcustom org-indent-boundary-char ?\sorg-indent-boundary-char81,3177
(defcustom org-indent-mode-turns-off-org-adapt-indentation torg-indent-mode-turns-off-org-adapt-indentation89,3528
(defcustom org-indent-mode-turns-on-hiding-stars torg-indent-mode-turns-on-hiding-stars96,3780
(defcustom org-indent-indentation-per-level 2org-indent-indentation-per-level102,3969
(defface org-indent '((t (:inherit org-hide)))org-indent107,4106
(defvar org-indent--text-line-prefixes nilorg-indent--text-line-prefixes113,4324
(defvar org-indent--heading-line-prefixes nilorg-indent--heading-line-prefixes116,4431
(defvar org-indent--inlinetask-line-prefixes nilorg-indent--inlinetask-line-prefixes119,4536
(defconst org-indent--deepest-level 50org-indent--deepest-level122,4647
(defun org-indent--compute-prefixes ()org-indent--compute-prefixes125,4728
(defsubst org-indent-remove-properties (beg end)org-indent-remove-properties159,6000
(define-minor-mode org-indent-modeorg-indent-mode165,6213
(defun org-indent-indent-buffer ()org-indent-indent-buffer234,9305
(defun org-indent-remove-properties-from-string (string)org-indent-remove-properties-from-string244,9731
(defun org-indent-initialize-agent ()org-indent-initialize-agent250,9938
(defun org-indent-initialize-buffer (buffer delay)org-indent-initialize-buffer271,10901
(defun org-indent-set-line-properties (level indentation &optional heading)org-indent-set-line-properties295,11748
(defun org-indent-add-properties (beg end &optional delay)org-indent-add-properties320,12725
(defun org-indent-notify-modified-headline (beg end)org-indent-notify-modified-headline370,14890
(defun org-indent-refresh-maybe (beg end _)org-indent-refresh-maybe388,15516

elpa/org-plus-contrib-20191021/org-goto.el,1865
(defvar org-complex-heading-regexp)org-complex-heading-regexp38,1534
(defvar org-startup-align-all-tables)org-startup-align-all-tables39,1570
(defvar org-startup-folded)org-startup-folded40,1608
(defvar org-startup-truncated)org-startup-truncated41,1636
(defvar org-special-ctrl-a/e)org-special-ctrl-a/e42,1667
(defvar org-refile-target-verify-function)org-refile-target-verify-function43,1697
(defvar org-refile-use-outline-path)org-refile-use-outline-path44,1740
(defvar org-refile-targets)org-refile-targets45,1777
(defvar org-goto-exit-command nil)org-goto-exit-command47,1806
(defvar org-goto-map nil)org-goto-map48,1841
(defvar org-goto-marker nil)org-goto-marker49,1867
(defvar org-goto-selected-point nil)org-goto-selected-point50,1896
(defvar org-goto-start-pos nil)org-goto-start-pos51,1933
(defvar org-goto-window-configuration nil)org-goto-window-configuration52,1965
(defconst org-goto-local-auto-isearch-map (make-sparse-keymap))org-goto-local-auto-isearch-map54,2009
(defconst org-goto-helporg-goto-help57,2143
(defgroup org-goto nilorg-goto66,2393
(defcustom org-goto-interface 'outlineorg-goto-interface71,2504
(defcustom org-goto-max-level 5org-goto-max-level91,3080
(defcustom org-goto-auto-isearch torg-goto-auto-isearch96,3222
(defun org-goto--set-map ()org-goto--set-map113,3693
(defun org-goto--local-search-headings (string bound noerror)org-goto--local-search-headings158,5737
(defun org-goto-local-auto-isearch ()org-goto-local-auto-isearch172,6254
(defun org-goto-ret (&optional _arg)org-goto-ret182,6576
(defun org-goto-left ()org-goto-left189,6787
(defun org-goto-right ()org-goto-right200,7074
(defun org-goto-quit ()org-goto-quit210,7340
(defun org-goto-location (&optional _buf help)org-goto-location222,7555
(defun org-goto (&optional alternative-interface)org-goto268,9326

elpa/org-plus-contrib-20191021/ob-spice.el,221
(defun ob-spice-concat (wordlist)ob-spice-concat39,1271
(defun org-babel-expand-body:spice (body params)org-babel-expand-body:spice48,1737
(defun org-babel-execute:spice (body params)org-babel-execute:spice123,5252

elpa/org-plus-contrib-20191021/ob-forth.el,280
(defvar org-babel-default-header-args:forth '((:session . "yes"))org-babel-default-header-args:forth40,1305
(defun org-babel-execute:forth (body params)org-babel-execute:forth43,1425
(defun org-babel-forth-session-execute (body params)org-babel-forth-session-execute53,1913

elpa/org-plus-contrib-20191021/org-pcomplete.el,3681
(defvar org-current-tag-alist)org-current-tag-alist50,2177
(defvar org-default-priority)org-default-priority51,2208
(defvar org-drawer-regexp)org-drawer-regexp52,2238
(defvar org-element-affiliated-keywords)org-element-affiliated-keywords53,2265
(defvar org-entities)org-entities54,2306
(defvar org-export-default-language)org-export-default-language55,2328
(defvar org-export-exclude-tags)org-export-exclude-tags56,2365
(defvar org-export-select-tags)org-export-select-tags57,2398
(defvar org-file-tags)org-file-tags58,2430
(defvar org-highest-priority)org-highest-priority59,2453
(defvar org-link-abbrev-alist)org-link-abbrev-alist60,2483
(defvar org-link-abbrev-alist-local)org-link-abbrev-alist-local61,2514
(defvar org-lowest-priority)org-lowest-priority62,2551
(defvar org-options-keywords)org-options-keywords63,2580
(defvar org-outline-regexp)org-outline-regexp64,2610
(defvar org-property-re)org-property-re65,2638
(defvar org-startup-options)org-startup-options66,2663
(defvar org-tag-re)org-tag-re67,2692
(defvar org-time-stamp-formats)org-time-stamp-formats68,2712
(defvar org-todo-keywords-1)org-todo-keywords-169,2744
(defvar org-todo-line-regexp)org-todo-line-regexp70,2773
(defun org-thing-at-point ()org-thing-at-point75,2830
(defun org-pcomplete-case-double (list)org-pcomplete-case-double144,5522
(defun org-command-at-point ()org-command-at-point154,5790
(defun org-parse-arguments ()org-parse-arguments167,6283
(defun org-pcomplete-initial ()org-pcomplete-initial185,6831
(defun pcomplete/org-mode/file-option ()pcomplete/org-mode/file-option195,7101
(defun pcomplete/org-mode/file-option/author ()pcomplete/org-mode/file-option/author222,8023
(defun pcomplete/org-mode/file-option/date ()pcomplete/org-mode/file-option/date226,8167
(defun pcomplete/org-mode/file-option/email ()pcomplete/org-mode/file-option/email230,8342
(defun pcomplete/org-mode/file-option/exclude_tags ()pcomplete/org-mode/file-option/exclude_tags234,8487
(defun pcomplete/org-mode/file-option/filetags ()pcomplete/org-mode/file-option/filetags241,8728
(defun pcomplete/org-mode/file-option/language ()pcomplete/org-mode/file-option/language245,8914
(defun pcomplete/org-mode/file-option/priorities ()pcomplete/org-mode/file-option/priorities252,9129
(defun pcomplete/org-mode/file-option/select_tags ()pcomplete/org-mode/file-option/select_tags259,9360
(defun pcomplete/org-mode/file-option/startup ()pcomplete/org-mode/file-option/startup266,9597
(defun pcomplete/org-mode/file-option/tags ()pcomplete/org-mode/file-option/tags279,10088
(defun pcomplete/org-mode/file-option/title ()pcomplete/org-mode/file-option/title284,10264
(defun pcomplete/org-mode/file-option/options ()pcomplete/org-mode/file-option/options294,10608
(defun pcomplete/org-mode/file-option/infojs_opt ()pcomplete/org-mode/file-option/infojs_opt313,11363
(defun pcomplete/org-mode/file-option/bind ()pcomplete/org-mode/file-option/bind320,11636
(defun pcomplete/org-mode/link ()pcomplete/org-mode/link327,11893
(defun pcomplete/org-mode/tex ()pcomplete/org-mode/tex336,12163
(defun pcomplete/org-mode/todo ()pcomplete/org-mode/todo343,12407
(defun pcomplete/org-mode/searchhead ()pcomplete/org-mode/searchhead347,12566
(defun pcomplete/org-mode/tag ()pcomplete/org-mode/tag363,13142
(defun pcomplete/org-mode/drawer ()pcomplete/org-mode/drawer380,13684
(defun pcomplete/org-mode/prop ()pcomplete/org-mode/prop397,14344
(defun pcomplete/org-mode/block-option/src ()pcomplete/org-mode/block-option/src410,14764
(defun pcomplete/org-mode/block-option/clocktable ()pcomplete/org-mode/block-option/clocktable427,15373

elpa/org-plus-contrib-20191021/org-passwords.el,2202
(define-derived-mode org-passwords-mode org-modeorg-passwords-mode95,3565
(defgroup org-passwords nilorg-passwords100,3676
(defcustom org-passwords-password-property "PASSWORD"org-passwords-password-property104,3757
(defcustom org-passwords-username-property "USERNAME"org-passwords-username-property109,3898
(defcustom org-passwords-url-property "URL"org-passwords-url-property114,4040
(defcustom org-passwords-file nilorg-passwords-file119,4166
(defcustom org-passwords-time-opened "1 min"org-passwords-time-opened124,4304
(defcustom org-passwords-default-password-size "20"org-passwords-default-password-size130,4489
(defcustom org-passwords-random-words-dictionary nilorg-passwords-random-words-dictionary136,4679
(defcustom org-passwords-default-random-words-number "5"org-passwords-default-random-words-number143,4931
(defvar org-passwords-random-words-separator "-"org-passwords-random-words-separator149,5116
(defvar org-passwords-random-words-substitutionsorg-passwords-random-words-substitutions152,5231
(defun org-passwords-copy-password ()org-passwords-copy-password161,5506
(defun org-passwords-copy-username ()org-passwords-copy-username172,5946
(defun org-passwords-open-url ()org-passwords-open-url184,6393
(defun org-passwords (&optional arg)org-passwords193,6617
(defun org-passwords-set-up-kill-password-buffer ()org-passwords-set-up-kill-password-buffer222,7714
(defun org-passwords-generate-password (arg)org-passwords-generate-password236,8118
(defun org-passwords-generate-password-with-symbols (previous-string nums-of-chars)org-passwords-generate-password-with-symbols255,8747
(defun org-passwords-generate-password-without-symbols (previous-string nums-of-chars)org-passwords-generate-password-without-symbols266,9181
(defun org-passwords-random-words (arg)org-passwords-random-words297,10482
(defun org-passwords-random-words-attach-number-of-wordsorg-passwords-random-words-attach-number-of-words335,11735
(defun org-passwords-substitute (string-to-change list-of-substitutions)org-passwords-substitute350,12297
(defun org-passwords-concat-this-with-string (this list-of-strings)org-passwords-concat-this-with-string370,13080

elpa/org-plus-contrib-20191021/org-macs.el,6853
(defvar org-ts-regexp0)org-ts-regexp039,1435
(defmacro org-with-gensyms (symbols &rest body)org-with-gensyms44,1474
(defmacro org-unmodified (&rest body)org-unmodified53,1814
(defmacro org-without-partial-completion (&rest body)org-without-partial-completion64,2187
(defmacro org-with-point-at (pom &rest body)org-with-point-at76,2513
(defmacro org-with-remote-undo (buffer &rest body)org-with-remote-undo87,2888
(defmacro org-no-read-only (&rest body)org-no-read-only112,3875
(defmacro org-save-outline-visibility (use-markers &rest body)org-save-outline-visibility117,4016
(defmacro org-with-wide-buffer (&rest body)org-with-wide-buffer150,5340
(defmacro org-with-limited-levels (&rest body)org-with-limited-levels158,5542
(defmacro org-eval-in-environment (environment form)org-eval-in-environment172,6075
(defmacro org-load-noerror-mustsuffix (file)org-load-noerror-mustsuffix177,6230
(defmacro org-preserve-local-variables (&rest body)org-preserve-local-variables181,6384
(defmacro org-no-popups (&rest body)org-no-popups207,7309
(defmacro org-table-with-shrunk-field (&rest body)org-table-with-shrunk-field212,7452
(defun org-base-buffer (buffer)org-base-buffer226,7996
(defun org-find-base-buffer-visiting (file)org-find-base-buffer-visiting232,8169
(defun org-switch-to-buffer-other-window (&rest args)org-switch-to-buffer-other-window239,8410
(defun org-fit-window-to-buffer (&optional window max-height min-heightorg-fit-window-to-buffer245,8668
(defun org-file-newer-than-p (file time)org-file-newer-than-p266,9590
(defun org-compile-file (source process ext &optional err-msg log-buf spec)org-compile-file278,10126
(defun org-do-remove-indentation (&optional n)org-do-remove-indentation337,12587
(defun org-read-function (prompt &optional allow-empty?)org-read-function368,13596
(defun org-completing-read (&rest args)org-completing-read378,13966
(defun org--mks-read-key (allowed-keys prompt)org--mks-read-key389,14468
(defun org-mks (table title &optional prompt specials)org-mks402,14889
(defsubst org-get-alist-option (option key)org-get-alist-option492,18398
(defsubst org-last (list)org-last499,18616
(defsubst org-uniquify (list)org-uniquify503,18701
(defun org-uniquify-alist (alist)org-uniquify-alist507,18847
(defun org-delete-all (elts list)org-delete-all527,19342
(defun org-plist-delete (plist property)org-plist-delete535,19605
(defun org-combine-plists (&rest plists)org-combine-plists545,19890
(defconst org-unique-local-variablesorg-unique-local-variables563,20401
(defun org-get-local-variables ()org-get-local-variables571,20673
(defun org-clone-local-variables (from-buffer &optional regexp)org-clone-local-variables589,21245
(defsubst org-call-with-arg (command arg)org-call-with-arg602,21742
(defsubst org-check-external-command (cmd &optional use no-error)org-check-external-command606,21914
(defun org-display-warning (message)org-display-warning618,22429
(defun org-unlogged-message (&rest args)org-unlogged-message622,22554
(defun org-let (list &rest body)org-let627,22726
(defun org-let2 (list1 list2 &rest body)org-let2631,22838
(defun org-eval (form)org-eval635,22992
(defvar org-outline-regexp) ; defined in org.elorg-outline-regexp641,23137
(defvar org-odd-levels-only) ; defined in org.elorg-odd-levels-only642,23185
(defvar org-inlinetask-min-level) ; defined in org-inlinetask.elorg-inlinetask-min-level643,23234
(defun org-get-limited-outline-regexp ()org-get-limited-outline-regexp644,23299
(defsubst org-goto-line (N)org-goto-line662,23778
(defsubst org-current-line (&optional pos)org-current-line668,23895
(defun org-overlay-display (ovl text &optional face evap)org-overlay-display678,24129
(defun org-overlay-before-string (ovl text &optional face evap)org-overlay-before-string684,24361
(defun org-find-overlays (prop &optional pos delete)org-find-overlays690,24612
(defun org-flag-region (from to flag spec)org-flag-region699,24944
(defsubst org-pos-in-match-range (pos n)org-pos-in-match-range715,25504
(defun org-skip-whitespace ()org-skip-whitespace720,25641
(defun org-match-line (regexp)org-match-line724,25756
(defun org-match-any-p (re list)org-match-any-p730,25911
(defun org-in-regexp (regexp &optional nlines visually)org-in-regexp734,26051
(defun org-point-in-group (point group &optional context)org-point-in-group756,26936
(defun org-string< (a b)org-string<772,27420
(defun org-string<= (a b)org-string<=775,27480
(defun org-string>= (a b)org-string>=778,27560
(defun org-string> (a b)org-string>781,27627
(defun org-string<> (a b)org-string<>785,27726
(defsubst org-trim (s &optional keep-lead)org-trim788,27776
(defun org-string-nw-p (s)org-string-nw-p796,28157
(defun org-reverse-string (string)org-reverse-string803,28341
(defun org-split-string (string &optional separators)org-split-string807,28466
(defun org--string-from-props (s property beg end)org--string-from-props829,29280
(defun org-string-width (string)org-string-width885,31263
(defun org-not-nil (v)org-not-nil894,31682
(defun org-unbracket-string (pre post string)org-unbracket-string899,31829
(defun org-strip-quotes (string)org-strip-quotes910,32240
(defsubst org-current-line-string (&optional to-here)org-current-line-string915,32406
(defun org-shorten-string (s maxlength)org-shorten-string922,32685
(defun org-remove-tabs (s &optional width)org-remove-tabs939,33505
(defun org-wrap (string &optional width lines)org-wrap951,33867
(defun org--do-wrap (words width)org--do-wrap976,34808
(defun org-remove-indentation (code &optional n)org-remove-indentation986,35167
(defconst org-rm-props '(invisible t face t keymap t intangible t mouse-face torg-rm-props998,35500
(defsubst org-no-properties (s &optional restricted)org-no-properties1003,35721
(defun org-add-props (string plist &rest props)org-add-props1010,36022
(defun org-make-parameter-alist (flat)org-make-parameter-alist1019,36405
(defsubst org-get-at-bol (property)org-get-at-bol1028,36721
(defun org-get-at-eol (property n)org-get-at-eol1032,36862
(defun org-find-text-property-in-string (prop s)org-find-text-property-in-string1036,37020
(defun org-invisible-p (&optional pos)org-invisible-p1042,37255
(defun org-truely-invisible-p ()org-truely-invisible-p1047,37435
(defun org-invisible-p2 ()org-invisible-p21054,37677
(defun org-2ft (s)org-2ft1066,37997
(defun org-time= (a b)org-time=1079,38342
(defun org-time< (a b)org-time<1084,38444
(defun org-time<= (a b)org-time<=1089,38546
(defun org-time> (a b)org-time>1094,38650
(defun org-time>= (a b)org-time>=1099,38752
(defun org-time<> (a b)org-time<>1104,38856
(defun org-parse-time-string (s &optional nodefault)org-parse-time-string1109,38960
(defun org-matcher-time (s)org-matcher-time1134,39834

elpa/org-plus-contrib-20191021/ob-lob.el,481
(defvar org-babel-library-of-babel nilorg-babel-library-of-babel36,1349
(defvar org-babel-default-lob-header-args '((:exports . "results"))org-babel-default-lob-header-args41,1545
(defun org-babel-lob-ingest (&optional file)org-babel-lob-ingest48,1913
(defun org-babel-lob-execute-maybe ()org-babel-lob-execute-maybe72,2773
(defun org-babel-lob--src-info (ref)org-babel-lob--src-info82,3129
(defun org-babel-lob-get-info (&optional datum)org-babel-lob-get-info117,4588

elpa/org-plus-contrib-20191021/ob-makefile.el,281
(defvar org-babel-default-header-args:makefile '())org-babel-default-header-args:makefile32,1058
(defun org-babel-execute:makefile (body _params)org-babel-execute:makefile34,1111
(defun org-babel-prep-session:makefile (_session _params)org-babel-prep-session:makefile39,1265

elpa/org-plus-contrib-20191021/ob-keys.el,270
(defvar org-babel-key-prefix "\C-c\C-v"org-babel-key-prefix34,1215
(defvar org-babel-map (make-sparse-keymap)org-babel-map40,1471
(defun org-babel-describe-bindings ()org-babel-describe-bindings44,1579
(defvar org-babel-key-bindingsorg-babel-key-bindings49,1738

elpa/org-plus-contrib-20191021/ob-octave.el,2118
(defvar org-babel-default-header-args:matlab '())org-babel-default-header-args:matlab38,1192
(defvar org-babel-default-header-args:octave '())org-babel-default-header-args:octave39,1242
(defvar org-babel-matlab-shell-command "matlab -nosplash"org-babel-matlab-shell-command41,1293
(defvar org-babel-octave-shell-command "octave -q"org-babel-octave-shell-command43,1408
(defvar org-babel-matlab-with-emacs-link nilorg-babel-matlab-with-emacs-link46,1517
(defvar org-babel-matlab-emacs-link-wrapper-methodorg-babel-matlab-emacs-link-wrapper-method51,1717
(defvar org-babel-octave-wrapper-methodorg-babel-octave-wrapper-method58,1901
(defvar org-babel-octave-eoe-indicator "'org_babel_eoe'")org-babel-octave-eoe-indicator64,2069
(defvar org-babel-octave-eoe-output "ans = org_babel_eoe")org-babel-octave-eoe-output66,2128
(defun org-babel-execute:matlab (body params)org-babel-execute:matlab68,2188
(defun org-babel-execute:octave (body params &optional matlabp)org-babel-execute:octave72,2332
(defun org-babel-prep-session:matlab (session params)org-babel-prep-session:matlab103,3378
(defun org-babel-variable-assignments:octave (params)org-babel-variable-assignments:octave107,3532
(defalias 'org-babel-variable-assignments:matlaborg-babel-variable-assignments:matlab116,3810
(defun org-babel-octave-var-to-octave (var)org-babel-octave-var-to-octave119,3902
(defun org-babel-prep-session:octave (session params &optional matlabp)org-babel-prep-session:octave132,4329
(defun org-babel-matlab-initiate-session (&optional session params)org-babel-matlab-initiate-session142,4836
(defun org-babel-octave-initiate-session (&optional session _params matlabp)org-babel-octave-initiate-session148,5119
(defun org-babel-octave-evaluateorg-babel-octave-evaluate165,5893
(defun org-babel-octave-evaluate-external-process (body result-type matlabp)org-babel-octave-evaluate-external-process175,6362
(defun org-babel-octave-evaluate-sessionorg-babel-octave-evaluate-session190,6964
(defun org-babel-octave-import-elisp-from-file (file-name)org-babel-octave-import-elisp-from-file247,9081

elpa/org-plus-contrib-20191021/org-attach.el,2944
(defgroup org-attach nilorg-attach47,1684
(defcustom org-attach-directory "data/"org-attach-directory52,1799
(defcustom org-attach-commit torg-attach-commit60,2050
(defcustom org-attach-git-annex-cutoff (* 32 1024)org-attach-git-annex-cutoff68,2275
(defcustom org-attach-auto-tag "ATTACH"org-attach-auto-tag77,2546
(defcustom org-attach-file-list-property "Attachments"org-attach-file-list-property84,2755
(defcustom org-attach-method 'cporg-attach-method94,3163
(defcustom org-attach-expert nilorg-attach-expert111,3744
(defcustom org-attach-allow-inheritance torg-attach-allow-inheritance116,3893
(defvar org-attach-inherited nilorg-attach-inherited121,4036
(defcustom org-attach-store-link-p nilorg-attach-store-link-p124,4147
(defcustom org-attach-archive-delete nilorg-attach-archive-delete133,4447
(defcustom org-attach-annex-auto-get 'askorg-attach-annex-auto-get144,4824
(defun org-attach ()org-attach156,5261
(defun org-attach-dir (&optional create-if-not-exists-p)org-attach-dir227,8534
(defun org-attach-check-absolute-path (dir)org-attach-check-absolute-path268,10293
(defun org-attach-set-directory (&optional arg)org-attach-set-directory279,10894
(defun org-attach-set-inherit ()org-attach-set-inherit304,11937
(defun org-attach-use-annex ()org-attach-use-annex313,12347
(defun org-attach-annex-get-maybe (path)org-attach-annex-get-maybe320,12671
(defun org-attach-commit ()org-attach-commit342,13598
(defun org-attach-tag (&optional off)org-attach-tag370,14762
(defun org-attach-untag ()org-attach-untag377,14991
(defun org-attach-store-link (file)org-attach-store-link381,15070
(defun org-attach-url (url)org-attach-url389,15354
(defun org-attach-attach (file &optional visit-dir method)org-attach-attach393,15459
(defun org-attach-attach-cp ()org-attach-attach-cp431,17058
(defun org-attach-attach-mv ()org-attach-attach-mv435,17213
(defun org-attach-attach-ln ()org-attach-attach-ln439,17378
(defun org-attach-attach-lns ()org-attach-attach-lns445,17684
(defun org-attach-new (file)org-attach-new453,18002
(defun org-attach-delete-one (&optional file)org-attach-delete-one465,18496
(defun org-attach-delete-all (&optional force)org-attach-delete-all483,19040
(defun org-attach-sync ()org-attach-sync501,19767
(defun org-attach-file-list (dir)org-attach-file-list519,20465
(defun org-attach-reveal (&optional if-exists)org-attach-reveal526,20709
(defun org-attach-reveal-in-emacs ()org-attach-reveal-in-emacs533,21005
(defun org-attach-open (&optional in-emacs)org-attach-open539,21189
(defun org-attach-open-in-emacs ()org-attach-open-in-emacs556,21887
(defun org-attach-expand (file)org-attach-expand562,22038
(defun org-attach-expand-link (file)org-attach-expand-link567,22244
(defun org-attach-archive-delete-maybe ()org-attach-archive-delete-maybe573,22487
(defun org-attach-dired-to-subtree (files)org-attach-dired-to-subtree592,23059

elpa/org-plus-contrib-20191021/org-version.el,164
(defun org-release ()org-release5,83
(defun org-git-version ()org-git-version11,262
(defvar org-odt-data-dir "/usr/share/emacs/etc/org"org-odt-data-dir17,468

elpa/org-plus-contrib-20191021/org-attach-embedded-images.el,358
(defun org-attach-embedded-images--next-property-display-data (position limit)org-attach-embedded-images--next-property-display-data59,1661
(defun org-attach-embedded-images--attach-with-sha1-name (data)org-attach-embedded-images--attach-with-sha1-name72,2265
(defun org-attach-embedded-images-in-subtree ()org-attach-embedded-images-in-subtree91,2901

elpa/org-plus-contrib-20191021/ob-clojure.el,895
(defvar nrepl-sync-request-timeout)nrepl-sync-request-timeout55,2071
(defvar cider-buffer-ns)cider-buffer-ns56,2107
(defvar org-babel-tangle-lang-exts)org-babel-tangle-lang-exts58,2133
(defvar org-babel-default-header-args:clojure '())org-babel-default-header-args:clojure61,2233
(defvar org-babel-header-args:clojure '((package . :any)))org-babel-header-args:clojure62,2284
(defcustom org-babel-clojure-sync-nrepl-timeout 10org-babel-clojure-sync-nrepl-timeout64,2344
(defcustom org-babel-clojure-backendorg-babel-clojure-backend73,2603
(defcustom org-babel-clojure-default-ns "user"org-babel-clojure-default-ns82,2838
(defun org-babel-clojure-cider-current-ns ()org-babel-clojure-cider-current-ns87,2994
(defun org-babel-expand-body:clojure (body params)org-babel-expand-body:clojure94,3266
(defun org-babel-execute:clojure (body params)org-babel-execute:clojure121,4078

elpa/org-plus-contrib-20191021/org-element.el,18097
(defvar org-element-paragraph-separate nilorg-element-paragraph-separate76,2826
(defvar org-element--object-regexp nilorg-element--object-regexp82,3106
(defun org-element--set-regexps ()org-element--set-regexps89,3432
(defun org-element-update-syntax ()org-element-update-syntax171,6103
(defconst org-element-all-elementsorg-element-all-elements177,6248
(defconst org-element-greater-elementsorg-element-greater-elements186,6708
(defconst org-element-all-objectsorg-element-all-objects192,6964
(defconst org-element-recursive-objectsorg-element-recursive-objects199,7291
(defconst org-element-object-containersorg-element-object-containers204,7483
(defconst org-element-affiliated-keywordsorg-element-affiliated-keywords208,7672
(defconst org-element-keyword-translation-alistorg-element-keyword-translation-alist215,8009
(defconst org-element-multiple-keywords '("CAPTION" "HEADER")org-element-multiple-keywords223,8411
(defconst org-element-parsed-keywords '("CAPTION")org-element-parsed-keywords235,8891
(defconst org-element--parsed-properties-alistorg-element--parsed-properties-alist244,9191
(defconst org-element-dual-keywords '("CAPTION" "RESULTS")org-element-dual-keywords251,9460
(defconst org-element--affiliated-reorg-element--affiliated-re263,9901
(defconst org-element-object-restrictionsorg-element-object-restrictions287,10646
(defconst org-element-secondary-value-alistorg-element-secondary-value-alist333,12735
(defconst org-element--pair-round-tableorg-element--pair-round-table339,12911
(defconst org-element--pair-square-tableorg-element--pair-square-table348,13262
(defconst org-element--pair-curly-tableorg-element--pair-curly-table357,13615
(defun org-element--parse-paired-brackets (char)org-element--parse-paired-brackets366,13966
(defsubst org-element-type (element)org-element-type405,15516
(defsubst org-element-property (property element)org-element-property417,15931
(defsubst org-element-contents (element)org-element-contents422,16143
(defsubst org-element-restriction (element)org-element-restriction428,16320
(defsubst org-element-put-property (element property value)org-element-put-property435,16612
(defsubst org-element-set-contents (element &rest contents)org-element-set-contents442,16887
(defun org-element-secondary-p (object)org-element-secondary-p450,17169
(defsubst org-element-class (datum &optional parent)org-element-class461,17605
(defsubst org-element-adopt-elements (parent &rest children)org-element-adopt-elements487,18677
(defun org-element-extract-element (element)org-element-extract-element509,19471
(defun org-element-insert-before (element location)org-element-insert-before525,20101
(defun org-element-set-element (old new)org-element-set-element556,21527
(defun org-element-create (type &optional props &rest children)org-element-create579,22615
(defun org-element-copy (datum)org-element-copy586,22923
(defun org-element-center-block-parser (limit affiliated)org-element-center-block-parser637,24815
(defun org-element-center-block-interpreter (_ contents)org-element-center-block-interpreter679,26370
(defun org-element-drawer-parser (limit affiliated)org-element-drawer-parser687,26589
(defun org-element-drawer-interpreter (drawer contents)org-element-drawer-interpreter731,28235
(defun org-element-dynamic-block-parser (limit affiliated)org-element-dynamic-block-parser741,28484
(defun org-element-dynamic-block-interpreter (dynamic-block contents)org-element-dynamic-block-interpreter789,30207
(defconst org-element--footnote-separatororg-element--footnote-separator801,30601
(defun org-element-footnote-definition-parser (limit affiliated)org-element-footnote-definition-parser807,30802
(defun org-element-footnote-definition-interpreter (footnote-definition contents)org-element-footnote-definition-interpreter870,32957
(defun org-element--get-node-properties ()org-element--get-node-properties889,33738
(defun org-element--get-time-properties ()org-element--get-time-properties907,34462
(defun org-element-headline-parser (limit &optional raw-secondary-p)org-element-headline-parser925,35186
(defun org-element-headline-interpreter (headline contents)org-element-headline-interpreter1027,38670
(defun org-element-inlinetask-parser (limit &optional raw-secondary-p)org-element-inlinetask-parser1073,40129
(defun org-element-inlinetask-interpreter (inlinetask contents)org-element-inlinetask-interpreter1168,43334
(defun org-element-item-parser (_ struct &optional raw-secondary-p)org-element-item-parser1208,44600
(defun org-element-item-interpreter (item contents)org-element-item-interpreter1289,47250
(defun org-element--list-struct (limit)org-element--list-struct1333,48651
(defun org-element-plain-list-parser (limit affiliated structure)org-element-plain-list-parser1412,51454
(defun org-element-plain-list-interpreter (_ contents)org-element-plain-list-interpreter1457,53042
(defun org-element-property-drawer-parser (limit)org-element-property-drawer-parser1469,53324
(defun org-element-property-drawer-interpreter (_ contents)org-element-property-drawer-interpreter1497,54335
(defun org-element-quote-block-parser (limit affiliated)org-element-quote-block-parser1505,54559
(defun org-element-quote-block-interpreter (_ contents)org-element-quote-block-interpreter1547,56066
(defun org-element-section-parser (_)org-element-section-parser1555,56280
(defun org-element-section-interpreter (_ contents)org-element-section-interpreter1577,57039
(defun org-element-special-block-parser (limit affiliated)org-element-special-block-parser1585,57211
(defun org-element-special-block-interpreter (special-block contents)org-element-special-block-interpreter1632,58880
(defun org-element-babel-call-parser (limit affiliated)org-element-babel-call-parser1653,59626
(defun org-element-babel-call-interpreter (babel-call _)org-element-babel-call-interpreter1702,61283
(defun org-element-clock-parser (limit)org-element-clock-parser1715,61717
(defun org-element-clock-interpreter (clock _)org-element-clock-interpreter1749,62817
(defun org-element-comment-parser (limit affiliated)org-element-comment-parser1764,63210
(defun org-element-comment-interpreter (comment _)org-element-comment-interpreter1809,64606
(defun org-element-comment-block-parser (limit affiliated)org-element-comment-block-parser1817,64818
(defun org-element-comment-block-interpreter (comment-block _)org-element-comment-block-interpreter1856,66190
(defun org-element-diary-sexp-parser (limit affiliated)org-element-diary-sexp-parser1866,66482
(defun org-element-diary-sexp-interpreter (diary-sexp _)org-element-diary-sexp-interpreter1894,67451
(defun org-element-example-block-parser (limit affiliated)org-element-example-block-parser1901,67614
(defun org-element-example-block-interpreter (example-block _)org-element-example-block-interpreter1982,70399
(defun org-element-export-block-parser (limit affiliated)org-element-export-block-parser2005,71225
(defun org-element-export-block-interpreter (export-block _)org-element-export-block-interpreter2051,72867
(defun org-element-fixed-width-parser (limit affiliated)org-element-fixed-width-parser2060,73137
(defun org-element-fixed-width-interpreter (fixed-width _)org-element-fixed-width-interpreter2096,74322
(defun org-element-horizontal-rule-parser (limit affiliated)org-element-horizontal-rule-parser2104,74573
(defun org-element-horizontal-rule-interpreter (&rest _)org-element-horizontal-rule-interpreter2129,75430
(defun org-element-keyword-parser (limit affiliated)org-element-keyword-parser2136,75567
(defun org-element-keyword-interpreter (keyword _)org-element-keyword-interpreter2170,76833
(defconst org-element--latex-begin-environmentorg-element--latex-begin-environment2179,77069
(defconst org-element--latex-end-environmentorg-element--latex-end-environment2186,77314
(defun org-element-latex-environment-parser (limit affiliated)org-element-latex-environment-parser2191,77495
(defun org-element-latex-environment-interpreter (latex-environment _)org-element-latex-environment-interpreter2227,78853
(defun org-element-node-property-parser (limit)org-element-node-property-parser2234,79052
(defun org-element-node-property-interpreter (node-property _)org-element-node-property-interpreter2260,79750
(defun org-element-paragraph-parser (limit affiliated)org-element-paragraph-parser2269,80030
(defun org-element-paragraph-interpreter (_ contents)org-element-paragraph-interpreter2336,82445
(defun org-element-planning-parser (limit)org-element-planning-parser2344,82616
(defun org-element-planning-interpreter (planning _)org-element-planning-interpreter2380,83795
(defun org-element-src-block-parser (limit affiliated)org-element-src-block-parser2402,84501
(defun org-element-src-block-interpreter (src-block _)org-element-src-block-interpreter2499,87770
(defun org-element-table-parser (limit affiliated)org-element-table-parser2526,88746
(defun org-element-table-interpreter (table contents)org-element-table-interpreter2577,90507
(defun org-element-table-row-parser (_)org-element-table-row-parser2592,91029
(defun org-element-table-row-interpreter (table-row contents)org-element-table-row-interpreter2619,91907
(defun org-element-verse-block-parser (limit affiliated)org-element-verse-block-parser2628,92168
(defun org-element-verse-block-interpreter (_ contents)org-element-verse-block-interpreter2666,93528
(defun org-element-bold-parser ()org-element-bold-parser2690,94302
(defun org-element-bold-interpreter (_ contents)org-element-bold-interpreter2715,95085
(defun org-element-code-parser ()org-element-code-parser2723,95256
(defun org-element-code-interpreter (code _)org-element-code-interpreter2745,95932
(defun org-element-entity-parser ()org-element-entity-parser2752,96087
(defun org-element-entity-interpreter (entity _)org-element-entity-interpreter2785,97277
(defun org-element-export-snippet-parser ()org-element-export-snippet-parser2794,97509
(defun org-element-export-snippet-interpreter (export-snippet _)org-element-export-snippet-interpreter2823,98453
(defun org-element-footnote-reference-parser ()org-element-footnote-reference-parser2832,98719
(defun org-element-footnote-reference-interpreter (footnote-reference contents)org-element-footnote-reference-interpreter2861,99742
(defun org-element-inline-babel-call-parser ()org-element-inline-babel-call-parser2871,100078
(defun org-element-inline-babel-call-interpreter (inline-babel-call _)org-element-inline-babel-call-interpreter2912,101587
(defun org-element-inline-src-block-parser ()org-element-inline-src-block-parser2925,102071
(defun org-element-inline-src-block-interpreter (inline-src-block _)org-element-inline-src-block-interpreter2956,103178
(defun org-element-italic-parser ()org-element-italic-parser2968,103607
(defun org-element-italic-interpreter (_ contents)org-element-italic-interpreter2993,104402
(defun org-element-latex-fragment-parser ()org-element-latex-fragment-parser3001,104587
(defun org-element-latex-fragment-interpreter (latex-fragment _)org-element-latex-fragment-interpreter3046,106027
(defun org-element-line-break-parser ()org-element-line-break-parser3052,106209
(defun org-element-line-break-interpreter (&rest _)org-element-line-break-interpreter3067,106678
(defun org-element-link-parser ()org-element-link-parser3074,106802
(defun org-element-link-interpreter (link contents)org-element-link-interpreter3202,111753
(defun org-element-macro-parser ()org-element-macro-parser3244,113192
(defun org-element-macro-interpreter (macro _)org-element-macro-interpreter3273,114115
(defun org-element-radio-target-parser ()org-element-radio-target-parser3284,114418
(defun org-element-radio-target-interpreter (_ contents)org-element-radio-target-interpreter3310,115253
(defun org-element-statistics-cookie-parser ()org-element-statistics-cookie-parser3318,115452
(defun org-element-statistics-cookie-interpreter (statistics-cookie _)org-element-statistics-cookie-interpreter3340,116200
(defun org-element-strike-through-parser ()org-element-strike-through-parser3347,116399
(defun org-element-strike-through-interpreter (_ contents)org-element-strike-through-interpreter3372,117236
(defun org-element-subscript-parser ()org-element-subscript-parser3380,117432
(defun org-element-subscript-interpreter (subscript contents)org-element-subscript-interpreter3408,118372
(defun org-element-superscript-parser ()org-element-superscript-parser3418,118635
(defun org-element-superscript-interpreter (superscript contents)org-element-superscript-interpreter3446,119580
(defun org-element-table-cell-parser ()org-element-table-cell-parser3456,119850
(defun org-element-table-cell-interpreter (_ contents)org-element-table-cell-interpreter3473,120392
(defun org-element-target-parser ()org-element-target-parser3481,120587
(defun org-element-target-interpreter (target _)org-element-target-interpreter3502,121199
(defconst org-element--timestamp-regexporg-element--timestamp-regexp3509,121367
(defun org-element-timestamp-parser ()org-element-timestamp-parser3517,121598
(defun org-element-timestamp-interpreter (timestamp _)org-element-timestamp-interpreter3618,125348
(defun org-element-underline-parser ()org-element-underline-parser3715,129064
(defun org-element-underline-interpreter (_ contents)org-element-underline-interpreter3740,129878
(defun org-element-verbatim-parser ()org-element-verbatim-parser3748,130063
(defun org-element-verbatim-interpreter (verbatim _)org-element-verbatim-interpreter3770,130764
(defun org-element--current-element (limit &optional granularity mode structure)org-element--current-element3788,131426
(defun org-element--collect-affiliated-keywords (limit)org-element--collect-affiliated-keywords3943,137641
(defun org-element-parse-buffer (&optional granularity visible-only)org-element-parse-buffer4026,140868
(defun org-element-parse-secondary-string (string restriction &optional parent)org-element-parse-secondary-string4079,143088
(defun org-element-maporg-element-map4107,144149
(defsubst org-element--next-mode (type parentp)org-element--next-mode4274,150874
(defun org-element--parse-elementsorg-element--parse-elements4295,151559
(defun org-element--object-lex (restriction)org-element--object-lex4366,154437
(defun org-element--parse-objects (beg end acc restriction &optional parent)org-element--parse-objects4470,158593
(defun org-element-interpret-data (data)org-element-interpret-data4533,161041
(defun org-element--interpret-affiliated-keywords (element)org-element--interpret-affiliated-keywords4603,163550
(defun org-element-normalize-string (s)org-element-normalize-string4657,165641
(defun org-element-normalize-contents (element &optional ignore-first)org-element-normalize-contents4669,166040
(defvar org-element-use-cache nilorg-element-use-cache4812,171712
(defvar org-element-cache-sync-idle-time 0.6org-element-cache-sync-idle-time4819,171965
(defvar org-element-cache-sync-duration 0.04org-element-cache-sync-duration4822,172071
(defvar org-element-cache-sync-break 0.3org-element-cache-sync-break4828,172316
(defvar org-element--cache nilorg-element--cache4835,172511
(defvar org-element--cache-sync-requests nilorg-element--cache-sync-requests4841,172726
(defvar org-element--cache-sync-timer nilorg-element--cache-sync-timer4872,173961
(defvar org-element--cache-sync-keys nilorg-element--cache-sync-keys4875,174047
(defsubst org-element--cache-key (element)org-element--cache-key4879,174199
(defun org-element--cache-generate-key (lower upper)org-element--cache-generate-key4910,175483
(defsubst org-element--cache-key-less-p (a b)org-element--cache-key-less-p4980,177744
(defun org-element--cache-compare (a b)org-element--cache-compare4999,178479
(defsubst org-element--cache-root ()org-element--cache-root5004,178670
(defsubst org-element--cache-active-p ()org-element--cache-active-p5012,178883
(defun org-element--cache-find (pos &optional side)org-element--cache-find5018,179068
(defun org-element--cache-put (element)org-element--cache-put5077,180997
(defsubst org-element--cache-remove (element)org-element--cache-remove5095,181786
(defsubst org-element--cache-set-timer (buffer)org-element--cache-set-timer5103,181995
(defsubst org-element--cache-interrupt-p (time-limit)org-element--cache-interrupt-p5116,182433
(defsubst org-element--cache-shift-positions (element offset &optional props)org-element--cache-shift-positions5123,182674
(defun org-element--cache-sync (buffer &optional threshold future-change)org-element--cache-sync5148,183818
(defun org-element--cache-process-requestorg-element--cache-process-request5191,185530
(defun org-element--parse-to (pos &optional syncp time-limit)org-element--parse-to5380,192838
(defconst org-element--cache-sensitive-reorg-element--cache-sensitive-re5514,198444
(defvar org-element--cache-change-warning nilorg-element--cache-change-warning5529,199005
(defun org-element--cache-before-change (beg end)org-element--cache-before-change5533,199155
(defun org-element--cache-after-change (beg end pre)org-element--cache-after-change5551,199866
(defun org-element--cache-for-removal (beg end offset)org-element--cache-for-removal5590,201450
(defun org-element--cache-submit-request (beg end offset)org-element--cache-submit-request5639,203362
(defun org-element-cache-reset (&optional all)org-element-cache-reset5710,206441
(defun org-element-cache-refresh (pos)org-element-cache-refresh5731,207291
(defun org-element-at-point ()org-element-at-point5758,208278
(defun org-element-context (&optional element)org-element-context5797,209747
(defun org-element-lineage (datum &optional types with-self)org-element-lineage5925,214968
(defun org-element-nested-p (elem-A elem-B)org-element-nested-p5949,215924
(defun org-element-swap-A-B (elem-A elem-B)org-element-swap-A-B5958,216305

elpa/org-plus-contrib-20191021/ob-core.el,13426
(defconst org-babel-exeextorg-babel-exeext31,1033
(defvar org-babel-library-of-babel)org-babel-library-of-babel36,1130
(defvar org-edit-src-content-indentation)org-edit-src-content-indentation37,1166
(defvar org-link-file-path-type)org-link-file-path-type38,1208
(defvar org-src-lang-modes)org-src-lang-modes39,1241
(defvar org-src-preserve-indentation)org-src-preserve-indentation40,1269
(defgroup org-babel nilorg-babel87,4143
(defcustom org-confirm-babel-evaluate torg-confirm-babel-evaluate92,4264
(defcustom org-babel-no-eval-on-ctrl-c-ctrl-c nilorg-babel-no-eval-on-ctrl-c-ctrl-c118,5479
(defcustom org-babel-results-keyword "RESULTS"org-babel-results-keyword125,5683
(defcustom org-babel-noweb-wrap-start "<<"org-babel-noweb-wrap-start138,6056
(defcustom org-babel-noweb-wrap-end ">>"org-babel-noweb-wrap-end144,6234
(defcustom org-babel-inline-result-wrap "=%s="org-babel-inline-result-wrap150,6410
(defcustom org-babel-hash-show-time nilorg-babel-hash-show-time161,6761
(defcustom org-babel-uppercase-example-markers nilorg-babel-uppercase-example-markers169,6992
(defun org-babel-noweb-wrap (&optional regexp)org-babel-noweb-wrap177,7229
(defvar org-babel-src-name-regexporg-babel-src-name-regexp187,7591
(defvar org-babel-multi-line-header-regexporg-babel-multi-line-header-regexp191,7711
(defvar org-babel-src-block-regexporg-babel-src-block-regexp195,7866
(defun org-babel--get-vars (params)org-babel--get-vars207,8245
(defvar org-babel-exp-reference-buffer nilorg-babel-exp-reference-buffer216,8577
(defun org-babel-check-confirm-evaluate (info)org-babel-check-confirm-evaluate221,8794
(defun org-babel-check-evaluate (info)org-babel-check-evaluate246,9703
(defvar org-babel-confirm-evaluate-answer-no)org-babel-confirm-evaluate-answer-no259,10236
(defun org-babel-confirm-evaluate (info)org-babel-confirm-evaluate261,10283
(defun org-babel-execute-safely-maybe ()org-babel-execute-safely-maybe295,11452
(defun org-babel-execute-maybe ()org-babel-execute-maybe300,11586
(defmacro org-babel-when-in-src-block (&rest body)org-babel-when-in-src-block305,11717
(defun org-babel-execute-src-block-maybe ()org-babel-execute-src-block-maybe316,11998
(defun org-babel-view-src-block-info ()org-babel-view-src-block-info326,12337
(defun org-babel-expand-src-block-maybe ()org-babel-expand-src-block-maybe358,13743
(defun org-babel-load-in-session-maybe ()org-babel-load-in-session-maybe367,14045
(defun org-babel-pop-to-session-maybe ()org-babel-pop-to-session-maybe378,14417
(defconst org-babel-common-header-args-w-valuesorg-babel-common-header-args-w-values388,14762
(defconst org-babel-header-arg-namesorg-babel-header-arg-names425,15840
(defconst org-babel-safe-header-argsorg-babel-safe-header-args431,16077
(defmacro org-babel-header-args-safe-fn (safe-list)org-babel-header-args-safe-fn448,16930
(defvar org-babel-default-header-argsorg-babel-default-header-args467,17560
(defvar org-babel-default-inline-header-argsorg-babel-default-inline-header-args474,17921
(defconst org-babel-name-regexporg-babel-name-regexp481,18259
(defconst org-babel-result-regexporg-babel-result-regexp487,18451
(defconst org-babel-result-w-name-regexporg-babel-result-w-name-regexp497,18853
(defvar org-babel-min-lines-for-block-output 10org-babel-min-lines-for-block-output502,19041
(defvar org-babel-noweb-error-all-langs nilorg-babel-noweb-error-all-langs510,19438
(defvar org-babel-noweb-error-langs nilorg-babel-noweb-error-langs515,19634
(defvar org-babel-hash-show 4org-babel-hash-show522,19971
(defvar org-babel-after-execute-hook nilorg-babel-after-execute-hook525,20070
(defun org-babel-named-src-block-regexp-for-name (&optional name)org-babel-named-src-block-regexp-for-name528,20185
(defun org-babel-named-data-regexp-for-name (name)org-babel-named-data-regexp-for-name539,20655
(defun org-babel--normalize-body (datum)org-babel--normalize-body543,20830
(defvar org-babel-current-src-block-location nilorg-babel-current-src-block-location562,21624
(defvar *this*)*this*569,21958
(defun org-babel-get-src-block-info (&optional light datum)org-babel-get-src-block-info571,21975
(defun org-babel-execute-src-block (&optional arg info params)org-babel-execute-src-block624,24100
(defun org-babel-expand-body:generic (body params &optional var-lines)org-babel-expand-body:generic734,28363
(defun org-babel-expand-src-block (&optional _arg info params)org-babel-expand-src-block750,28936
(defun org-babel-edit-distance (s1 s2)org-babel-edit-distance777,30124
(defun org-babel-combine-header-arg-lists (original &rest others)org-babel-combine-header-arg-lists798,30887
(defun org-babel-check-src-block ()org-babel-check-src-block811,31305
(defun org-babel-insert-header-arg (&optional header-arg value)org-babel-insert-header-arg833,32242
(defun org-babel-header-arg-expand ()org-babel-header-arg-expand872,33590
(defun org-babel-enter-header-arg-w-completion (&optional lang)org-babel-enter-header-arg-w-completion877,33846
(defun org-babel-load-in-session (&optional _arg info)org-babel-load-in-session896,34783
(defun org-babel-initiate-session (&optional arg info)org-babel-initiate-session922,35778
(defun org-babel-switch-to-session (&optional arg info)org-babel-switch-to-session951,37073
(defalias 'org-babel-pop-to-session 'org-babel-switch-to-session)org-babel-pop-to-session960,37424
(defvar org-src-window-setup)org-src-window-setup962,37491
(defun org-babel-switch-to-session-with-code (&optional arg _info)org-babel-switch-to-session-with-code965,37537
(defmacro org-babel-do-in-edit-buffer (&rest body)org-babel-do-in-edit-buffer982,38131
(defun org-babel-do-key-sequence-in-edit-buffer (key)org-babel-do-key-sequence-in-edit-buffer1004,39077
(defvar org-bracket-link-regexp)org-bracket-link-regexp1018,39755
(defun org-babel-active-location-p ()org-babel-active-location-p1020,39789
(defun org-babel-open-src-block-result (&optional re-run)org-babel-open-src-block-result1025,39972
(defmacro org-babel-map-src-blocks (file &rest body)org-babel-map-src-blocks1054,41069
(def-edebug-spec org-babel-map-src-blocks (form body))org-babel-map-src-blocks1114,43735
(defmacro org-babel-map-inline-src-blocks (file &rest body)org-babel-map-inline-src-blocks1117,43806
(defmacro org-babel-map-call-lines (file &rest body)org-babel-map-call-lines1145,44872
(defmacro org-babel-map-executables (file &rest body)org-babel-map-executables1174,45961
(defun org-babel-execute-buffer (&optional arg)org-babel-execute-buffer1205,47125
(defun org-babel-execute-subtree (&optional arg)org-babel-execute-subtree1219,47616
(defun org-babel-sha1-hash (&optional info context)org-babel-sha1-hash1231,47951
(defun org-babel-current-result-hash (&optional info)org-babel-current-result-hash1290,50266
(defun org-babel-set-current-result-hash (hash info)org-babel-set-current-result-hash1299,50582
(defun org-babel-hide-hash ()org-babel-hide-hash1312,51065
(defun org-babel-hide-all-hashes ()org-babel-hide-all-hashes1330,51792
(defun org-babel-hash-at-point (&optional point)org-babel-hash-at-point1343,52290
(defun org-babel-result-hide-spec ()org-babel-result-hide-spec1354,52733
(defvar org-babel-hide-result-overlays nilorg-babel-hide-result-overlays1361,53010
(defun org-babel-result-hide-all ()org-babel-result-hide-all1364,53084
(defun org-babel-show-result-all ()org-babel-show-result-all1373,53407
(defun org-babel-hide-result-toggle-maybe ()org-babel-hide-result-toggle-maybe1379,53606
(defun org-babel-hide-result-toggle (&optional force)org-babel-hide-result-toggle1390,53983
(defun org-babel-params-from-properties (&optional lang no-eval)org-babel-params-from-properties1437,55948
(defun org-babel-balanced-split (string alts)org-babel-balanced-split1459,56763
(defun org-babel-join-splits-near-ch (ch list)org-babel-join-splits-near-ch1533,59568
(defun org-babel-parse-header-arguments (string &optional no-eval)org-babel-parse-header-arguments1545,60026
(defun org-babel-parse-multiple-vars (header-arguments)org-babel-parse-multiple-vars1565,60760
(defun org-babel-process-params (params)org-babel-process-params1582,61288
(defun org-babel-del-hlines (table)org-babel-del-hlines1621,62707
(defun org-babel-get-colnames (table)org-babel-get-colnames1625,62803
(defun org-babel-get-rownames (table)org-babel-get-rownames1634,63120
(defun org-babel-put-colnames (table colnames)org-babel-put-colnames1650,63624
(defun org-babel-put-rownames (table rownames)org-babel-put-rownames1654,63772
(defun org-babel-pick-name (names selector)org-babel-pick-name1663,64033
(defun org-babel-disassemble-tables (vars hlines colnames rownames)org-babel-disassemble-tables1677,64550
(defun org-babel-reassemble-table (table colnames rownames)org-babel-reassemble-table1705,65805
(defun org-babel-where-is-src-block-head (&optional src-block)org-babel-where-is-src-block-head1717,66388
(defun org-babel-goto-src-block-head ()org-babel-goto-src-block-head1739,67315
(defun org-babel-goto-named-src-block (name)org-babel-goto-named-src-block1746,67564
(defun org-babel-find-named-block (name)org-babel-find-named-block1778,68809
(defun org-babel-src-block-names (&optional file)org-babel-src-block-names1791,69337
(defun org-babel-goto-named-result (name)org-babel-goto-named-result1806,69906
(defun org-babel-find-named-result (name)org-babel-find-named-result1818,70343
(defun org-babel-result-names (&optional file)org-babel-result-names1836,70987
(defun org-babel-next-src-block (&optional arg)org-babel-next-src-block1846,71371
(defun org-babel-previous-src-block (&optional arg)org-babel-previous-src-block1853,71617
(defvar org-babel-load-languages)org-babel-load-languages1859,71857
(defun org-babel-mark-block ()org-babel-mark-block1862,71907
(defun org-babel-demarcate-block (&optional arg)org-babel-demarcate-block1873,72228
(defun org-babel--insert-results-keyword (name hash)org-babel--insert-results-keyword1933,74586
(defun org-babel--clear-results-maybe (hash)org-babel--clear-results-maybe1961,75519
(defun org-babel-where-is-src-block-result (&optional insert _info hash)org-babel-where-is-src-block-result1990,76538
(defun org-babel-read-element (element)org-babel-read-element2079,79935
(defun org-babel-read-result ()org-babel-read-result2118,81389
(defun org-babel-read-table ()org-babel-read-table2125,81614
(defun org-babel-read-list ()org-babel-read-list2132,81888
(defvar org-link-types-re)org-link-types-re2137,82056
(defun org-babel-read-link ()org-babel-read-link2138,82083
(defun org-babel-format-result (result &optional sep)org-babel-format-result2154,82685
(defun org-babel-insert-result (result &optional result-params info hash lang)org-babel-insert-result2164,83015
(defun org-babel-remove-result (&optional info keep-keyword)org-babel-remove-result2436,93806
(defun org-babel-remove-inline-result (&optional datum)org-babel-remove-inline-result2451,94354
(defun org-babel-remove-result-one-or-many (x)org-babel-remove-result-one-or-many2475,95306
(defun org-babel-result-end ()org-babel-result-end2484,95602
(defun org-babel-result-to-file (result &optional description)org-babel-result-to-file2502,96277
(defun org-babel-examplify-region (beg end &optional results-switches inline)org-babel-examplify-region2522,97120
(defun org-babel-update-block-body (new-body)org-babel-update-block-body2552,98197
(defun org-babel-merge-params (&rest plists)org-babel-merge-params2579,99199
(defun org-babel-noweb-p (params context)org-babel-noweb-p2685,103266
(defun org-babel-expand-noweb-references (&optional info parent-buffer)org-babel-expand-noweb-references2695,103705
(defun org-babel--script-escape-inner (str)org-babel--script-escape-inner2835,109103
(defun org-babel-script-escape (str &optional force)org-babel-script-escape2899,111245
(defun org-babel-read (cell &optional inhibit-lisp-eval)org-babel-read2928,112339
(defun org-babel--string-to-number (string)org-babel--string-to-number2944,113050
(defun org-babel-import-elisp-from-file (file-name &optional separator)org-babel-import-elisp-from-file2950,113262
(defun org-babel-string-read (cell)org-babel-string-read2972,113944
(defun org-babel-chomp (string &optional regexp)org-babel-chomp2979,114209
(defun org-babel-process-file-name (name &optional no-quote-p)org-babel-process-file-name2989,114628
(defvar org-babel-temporary-directory)org-babel-temporary-directory2999,115166
(defcustom org-babel-remote-temporary-directory "/tmp/"org-babel-remote-temporary-directory3010,115642
(defmacro org-babel-result-cond (result-params scalar-form &rest table-forms)org-babel-result-cond3015,115791
(def-edebug-spec org-babel-result-cond (form form body))org-babel-result-cond3035,116494
(defun org-babel-temp-file (prefix &optional suffix)org-babel-temp-file3037,116552
(defun org-babel-remove-temporary-directory ()org-babel-remove-temporary-directory3055,117350
(defun org-babel-one-header-arg-safe-p (pair safe-list)org-babel-one-header-arg-safe-p3081,118359
(defun org-babel-generate-file-param (src-name params)org-babel-generate-file-param3099,118926
(defun org-babel-graphical-output-file (params)org-babel-graphical-output-file3134,120362
(defun org-babel-make-language-alias (new old)org-babel-make-language-alias3147,120924

elpa/org-plus-contrib-20191021/org-entities.el,496
(defgroup org-entities nilorg-entities33,1224
(defun org-entities--user-safe-p (v)org-entities--user-safe-p38,1334
(defcustom org-entities-user nilorg-entities-user49,1676
(defconst org-entitiesorg-entities81,3032
(defsubst org-entity-get (name)org-entity-get530,27557
(defun org-entities-create-table ()org-entities-create-table538,27854
(defvar org-pretty-entities) ;; declare defcustom from orgorg-pretty-entities560,28622
(defun org-entities-help ()org-entities-help561,28681

elpa/org-plus-contrib-20191021/org-plus-contrib-autoloads.el,174
(defvar ob-clojure-literate-auto-jackin-p nil "\ob-clojure-literate-auto-jackin-p83,2473
(defvar org-odt-data-dir "/usr/share/emacs/etc/org" "\org-odt-data-dir2245,73739

elpa/org-plus-contrib-20191021/ob-C.el,2265
(defvar org-babel-tangle-lang-exts)org-babel-tangle-lang-exts41,1298
(defvar org-babel-default-header-args:C '())org-babel-default-header-args:C45,1449
(defconst org-babel-header-args:C '((includes . :any)org-babel-header-args:C47,1495
(defconst org-babel-header-args:C++org-babel-header-args:C++55,1714
(defcustom org-babel-C-compiler "gcc"org-babel-C-compiler60,1848
(defcustom org-babel-C++-compiler "g++"org-babel-C++-compiler69,2142
(defcustom org-babel-D-compiler "rdmd"org-babel-D-compiler78,2440
(defvar org-babel-c-variant nilorg-babel-c-variant87,2737
(defun org-babel-execute:cpp (body params)org-babel-execute:cpp91,2873
(defun org-babel-expand-body:cpp (body params)org-babel-expand-body:cpp96,3039
(defun org-babel-execute:C++ (body params)org-babel-execute:C++101,3211
(defun org-babel-expand-body:C++ (body params)org-babel-expand-body:C++106,3433
(defun org-babel-execute:D (body params)org-babel-execute:D111,3637
(defun org-babel-expand-body:D (body params)org-babel-expand-body:D116,3853
(defun org-babel-execute:C (body params)org-babel-execute:C121,4049
(defun org-babel-expand-body:C (body params)org-babel-expand-body:C126,4265
(defun org-babel-C-execute (body params)org-babel-C-execute131,4461
(defun org-babel-C-expand-C++ (body params)org-babel-C-expand-C++198,6669
(defun org-babel-C-expand-C (body params)org-babel-C-expand-C203,6838
(defun org-babel-C-expand-D (body params)org-babel-C-expand-D260,8469
(defun org-babel-C-ensure-main-wrap (body)org-babel-C-ensure-main-wrap292,9496
(defun org-babel-prep-session:C (_session _params)org-babel-prep-session:C298,9733
(defun org-babel-load-session:C (_session _body _params)org-babel-load-session:C303,9939
(defun org-babel-C-format-val (type val)org-babel-C-format-val310,10172
(defun org-babel-C-val-to-C-type (val)org-babel-C-val-to-C-type317,10409
(defun org-babel-C-val-to-base-type (val)org-babel-C-val-to-base-type362,11963
(defun org-babel-C-var-to-C (pair)org-babel-C-var-to-C384,12590
(defun org-babel-C-table-sizes-to-C (pair)org-babel-C-table-sizes-to-C405,13177
(defun org-babel-C-utility-header-to-C ()org-babel-C-utility-header-to-C417,13659
(defun org-babel-C-header-to-C (head)org-babel-C-header-to-C441,14172

elpa/org-plus-contrib-20191021/org-mac-link.el,6373
(defgroup org-mac-link nilorg-mac-link103,3944
(defcustom org-mac-grab-Finder-app-p torg-mac-grab-Finder-app-p108,4068
(defcustom org-mac-grab-Mail-app-p torg-mac-grab-Mail-app-p114,4240
(defcustom org-mac-grab-Outlook-app-p torg-mac-grab-Outlook-app-p120,4404
(defcustom org-mac-outlook-path "/Applications/Microsoft Outlook.app"org-mac-outlook-path126,4600
(defcustom org-mac-grab-devonthink-app-p torg-mac-grab-devonthink-app-p132,4876
(defcustom org-mac-grab-Addressbook-app-p torg-mac-grab-Addressbook-app-p138,5086
(defcustom org-mac-grab-Safari-app-p torg-mac-grab-Safari-app-p144,5278
(defcustom org-mac-grab-Firefox-app-p torg-mac-grab-Firefox-app-p150,5450
(defcustom org-mac-grab-Firefox+Vimperator-p nilorg-mac-grab-Firefox+Vimperator-p156,5626
(defcustom org-mac-grab-Chrome-app-p torg-mac-grab-Chrome-app-p162,5855
(defcustom org-mac-grab-Brave-app-p torg-mac-grab-Brave-app-p168,6041
(defcustom org-mac-grab-Together-app-p nilorg-mac-grab-Together-app-p174,6209
(defcustom org-mac-grab-Skim-app-porg-mac-grab-Skim-app-p180,6391
(defcustom org-mac-Skim-highlight-selection-p nilorg-mac-Skim-highlight-selection-p188,6692
(defcustom org-mac-grab-Acrobat-app-p torg-mac-grab-Acrobat-app-p194,6896
(defgroup org-mac-flagged-mail nilorg-mac-flagged-mail200,7082
(defcustom org-mac-mail-account nilorg-mac-mail-account205,7217
(defcustom org-mac-grab-Evernote-app-porg-mac-grab-Evernote-app-p210,7368
(defcustom org-mac-evernote-path (replace-regexp-in-string (rx (* (any " \t\n")) eos)org-mac-evernote-path218,7677
(defun org-mac-grab-link ()org-mac-grab-link244,8874
(defun org-mac-paste-applescript-links (as-link-list)org-mac-paste-applescript-links287,11024
(defun org-as-mac-firefox-get-frontmost-url ()org-as-mac-firefox-get-frontmost-url327,12744
(defun org-mac-firefox-get-frontmost-url ()org-mac-firefox-get-frontmost-url353,13643
(defun org-mac-firefox-insert-frontmost-url ()org-mac-firefox-insert-frontmost-url359,13845
(defun org-as-mac-vimperator-get-frontmost-url ()org-as-mac-vimperator-get-frontmost-url368,14116
(defun org-mac-vimperator-get-frontmost-url ()org-mac-vimperator-get-frontmost-url393,14958
(defun org-mac-vimperator-insert-frontmost-url ()org-mac-vimperator-insert-frontmost-url399,15169
(defun org-as-mac-chrome-get-frontmost-url ()org-as-mac-chrome-get-frontmost-url408,15463
(defun org-mac-chrome-get-frontmost-url ()org-mac-chrome-get-frontmost-url425,16092
(defun org-mac-chrome-insert-frontmost-url ()org-mac-chrome-insert-frontmost-url431,16291
(defun org-as-mac-brave-get-frontmost-url ()org-as-mac-brave-get-frontmost-url441,16570
(defun org-mac-brave-get-frontmost-url ()org-mac-brave-get-frontmost-url458,17190
(defun org-mac-brave-insert-frontmost-url ()org-mac-brave-insert-frontmost-url464,17386
(defun org-as-mac-safari-get-frontmost-url ()org-as-mac-safari-get-frontmost-url472,17568
(defun org-mac-safari-get-frontmost-url ()org-mac-safari-get-frontmost-url482,17865
(defun org-mac-safari-insert-frontmost-url ()org-mac-safari-insert-frontmost-url489,18068
(defun org-mac-together-item-open (uid)org-mac-together-item-open497,18296
(defun as-get-selected-together-items ()as-get-selected-together-items501,18471
(defun org-mac-together-get-selected ()org-mac-together-get-selected515,18937
(defun org-mac-together-insert-selected ()org-mac-together-insert-selected521,19131
(defun as-get-selected-finder-items ()as-get-selected-finder-items528,19270
(defun org-mac-finder-item-get-selected ()org-mac-finder-item-get-selected542,19744
(defun org-mac-finder-insert-selected ()org-mac-finder-insert-selected548,19938
(defun org-mac-addressbook-item-open (uid)org-mac-addressbook-item-open556,20163
(defun as-get-selected-addressbook-items ()as-get-selected-addressbook-items560,20332
(defun org-mac-addressbook-item-get-selected ()org-mac-addressbook-item-get-selected574,20806
(defun org-mac-addressbook-insert-selected ()org-mac-addressbook-insert-selected580,21016
(defun org-mac-skim-open (uri)org-mac-skim-open591,21296
(defun as-get-skim-page-link ()as-get-skim-page-link606,21773
(defun org-mac-skim-get-page ()org-mac-skim-get-page632,22756
(defun org-mac-skim-insert-page ()org-mac-skim-insert-page638,22934
(defun org-mac-acrobat-open (uri)org-mac-acrobat-open650,23258
(defun org-mac-as-get-acrobat-page-link ()org-mac-as-get-acrobat-page-link670,23916
(defun org-mac-acrobat-get-page ()org-mac-acrobat-get-page685,24525
(defun org-mac-acrobat-insert-page ()org-mac-acrobat-insert-page691,24720
(defun org-mac-outlook-message-open (msgid)org-mac-outlook-message-open700,24940
(defun org-as-get-selected-outlook-mail ()org-as-get-selected-outlook-mail709,25201
(defun org-sh-get-flagged-outlook-mail ()org-sh-get-flagged-outlook-mail730,25971
(defun org-mac-outlook-message-get-links (&optional select-or-flag)org-mac-outlook-message-get-links755,26675
(defun org-mac-outlook-message-insert-selected ()org-mac-outlook-message-insert-selected773,27584
(defun org-mac-outlook-message-insert-flagged (org-buffer org-heading)org-mac-outlook-message-insert-flagged782,27932
(defun org-mac-evernote-note-open (noteid)org-mac-evernote-note-open812,29350
(defun org-as-get-selected-evernote-notes ()org-as-get-selected-evernote-notes827,29911
(defun org-mac-evernote-note-insert-selected ()org-mac-evernote-note-insert-selected849,30748
(defun org-devonthink-item-open (uid)org-devonthink-item-open863,31268
(defun org-as-get-selected-devonthink-item ()org-as-get-selected-devonthink-item867,31444
(defun org-mac-devonthink-get-links ()org-mac-devonthink-get-links889,32212
(defun org-mac-devonthink-item-insert-selected ()org-mac-devonthink-item-insert-selected899,32706
(defun org-mac-message-open (message-id)org-mac-message-open911,33138
(defun org-as-get-selected-mail ()org-as-get-selected-mail917,33409
(defun org-as-get-flagged-mail ()org-as-get-flagged-mail936,34079
(defun org-mac-message-get-links (&optional select-or-flag)org-mac-message-get-links959,34956
(defun org-mac-message-insert-selected ()org-mac-message-insert-selected976,35817
(defalias 'org-mac-message-insert-link 'org-mac-message-insert-selected)org-mac-message-insert-link984,36160
(defun org-mac-message-insert-flagged (org-buffer org-heading)org-mac-message-insert-flagged987,36249

elpa/org-plus-contrib-20191021/ob-sass.el,256
(defvar org-babel-default-header-args:sass '())org-babel-default-header-args:sass43,1487
(defun org-babel-execute:sass (body params)org-babel-execute:sass45,1536
(defun org-babel-prep-session:sass (_session _params)org-babel-prep-session:sass62,2305

elpa/org-plus-contrib-20191021/ob-mscgen.el,263
(defvar org-babel-default-header-args:mscgenorg-babel-default-header-args:mscgen59,1868
(defun org-babel-execute:mscgen (body params)org-babel-execute:mscgen63,2031
(defun org-babel-prep-session:mscgen (_session _params)org-babel-prep-session:mscgen76,2673

elpa/org-plus-contrib-20191021/ox-org.el,1080
(defvar htmlize-output-type)htmlize-output-type29,992
(defgroup org-export-org nilorg-export-org31,1022
(defcustom org-org-htmlized-css-url nilorg-org-htmlized-css-url38,1199
(defun org-org--add-missing-sections (tree _backend _info)org-org--add-missing-sections113,4093
(defun org-org-export-block (export-block _contents _info)org-org-export-block132,4812
(defun org-org-identity (blob contents _info)org-org-identity138,5074
(defun org-org-headline (headline contents info)org-org-headline146,5404
(defun org-org-keyword (keyword _contents _info)org-org-keyword160,6098
(defun org-org-link (link contents _info)org-org-link168,6427
(defun org-org-template (contents info)org-org-template175,6742
(defun org-org-timestamp (timestamp _contents _info)org-org-timestamp209,8113
(defun org-org-section (section contents info)org-org-section213,8281
(defun org-org-export-as-orgorg-org-export-as-org240,9347
(defun org-org-export-to-orgorg-org-export-to-org275,10523
(defun org-org-publish-to-org (plist filename pub-dir)org-org-publish-to-org309,11616

elpa/org-plus-contrib-20191021/org-ctags.el,2140
(defgroup org-ctags nilorg-ctags143,5919
(defvar org-ctags-enabled-p torg-ctags-enabled-p148,6036
(defvar org-ctags-tag-regexp "/<<([^>]+)>>/\\1/d,definition/"org-ctags-tag-regexp151,6108
(defcustom org-ctags-path-to-ctagsorg-ctags-path-to-ctags157,6368
(defcustom org-ctags-open-link-functionsorg-ctags-open-link-functions164,6565
(defvar org-ctags-tag-list nilorg-ctags-tag-list182,7209
(defcustom org-ctags-new-topic-templateorg-ctags-new-topic-template186,7332
(defadvice visit-tags-table (after org-ctags-load-tag-list activate compile)visit-tags-table210,8198
(defun org-ctags-enable ()org-ctags-enable216,8409
(defun org-ctags-get-filename-for-tag (tag)org-ctags-get-filename-for-tag226,8754
(defun org-ctags-all-tags-in-current-tags-table ()org-ctags-all-tags-in-current-tags-table253,9883
(defun org-ctags-string-search-and-replace (search replace string)org-ctags-string-search-and-replace270,10499
(defun org-ctags-open-file (name &optional title)org-ctags-open-file278,10780
(defadvice xref-find-definitionsxref-find-definitions298,11417
(defun org-ctags-find-tag-at-point ()org-ctags-find-tag-at-point307,11713
(defun org-ctags-find-tag (name)org-ctags-find-tag346,13054
(defun org-ctags-visit-buffer-or-file (name &optional create)org-ctags-visit-buffer-or-file365,13697
(defun org-ctags-ask-visit-buffer-or-file (name)org-ctags-ask-visit-buffer-or-file397,14987
(defun org-ctags-append-topic (name &optional narrowp)org-ctags-append-topic404,15257
(defun org-ctags-ask-append-topic (name &optional narrowp)org-ctags-ask-append-topic425,15974
(defun org-ctags-rebuild-tags-file-then-find-tag (name)org-ctags-rebuild-tags-file-then-find-tag435,16347
(defun org-ctags-ask-rebuild-tags-file-then-find-tag (name)org-ctags-ask-rebuild-tags-file-then-find-tag446,16733
(defun org-ctags-fail-silently (_name)org-ctags-fail-silently459,17179
(defun org-ctags-create-tags (&optional directory-name)org-ctags-create-tags469,17479
(defvar org-ctags-find-tag-history nilorg-ctags-find-tag-history504,19012
(defun org-ctags-find-tag-interactive ()org-ctags-find-tag-interactive507,19116

elpa/org-plus-contrib-20191021/org-vm.el,432
(defvar vm-message-pointer)vm-message-pointer54,2364
(defvar vm-folder-directory)vm-folder-directory55,2392
(defun org-vm-store-link ()org-vm-store-link62,2609
(defun org-vm-open (path)org-vm-open97,4209
(defun org-vm-follow-link (&optional folder article readonly)org-vm-follow-link107,4598
(defun org-vm-imap-open (path)org-vm-imap-open129,5417
(defun org-vm-select-message (message-id)org-vm-select-message148,6316

elpa/org-plus-contrib-20191021/ox-taskjuggler.el,3922
(defgroup org-export-taskjuggler nilorg-export-taskjuggler156,5999
(defcustom org-taskjuggler-extension ".tjp"org-taskjuggler-extension161,6145
(defcustom org-taskjuggler-project-tag "taskjuggler_project"org-taskjuggler-project-tag166,6276
(defcustom org-taskjuggler-resource-tag "taskjuggler_resource"org-taskjuggler-resource-tag173,6497
(defcustom org-taskjuggler-report-tag "taskjuggler_report"org-taskjuggler-report-tag180,6728
(defcustom org-taskjuggler-target-version 3.0org-taskjuggler-target-version187,6951
(defcustom org-taskjuggler-default-project-version "1.0"org-taskjuggler-default-project-version199,7471
(defcustom org-taskjuggler-default-project-duration 280org-taskjuggler-default-project-duration206,7731
(defcustom org-taskjuggler-default-reportsorg-taskjuggler-default-reports214,8040
(defcustom org-taskjuggler-default-global-header ""org-taskjuggler-default-global-header279,9947
(defcustom org-taskjuggler-default-global-propertiesorg-taskjuggler-default-global-properties286,10187
(defcustom org-taskjuggler-valid-task-attributesorg-taskjuggler-valid-task-attributes303,10779
(defcustom org-taskjuggler-valid-project-attributesorg-taskjuggler-valid-project-attributes316,11359
(defcustom org-taskjuggler-valid-resource-attributesorg-taskjuggler-valid-resource-attributes329,11951
(defcustom org-taskjuggler-valid-report-attributesorg-taskjuggler-valid-report-attributes337,12281
(defcustom org-taskjuggler-process-commandorg-taskjuggler-process-command345,12625
(defcustom org-taskjuggler-reports-directory "reports"org-taskjuggler-reports-directory357,13116
(defcustom org-taskjuggler-keep-project-as-task torg-taskjuggler-keep-project-as-task370,13637
(defvar org-taskjuggler-final-hook nilorg-taskjuggler-final-hook381,13950
(defun org-taskjuggler-assign-task-ids (tasks info)org-taskjuggler-assign-task-ids410,14856
(defun org-taskjuggler-assign-resource-ids (resources info)org-taskjuggler-assign-resource-ids430,15685
(defun org-taskjuggler-get-project (info)org-taskjuggler-get-project447,16191
(defun org-taskjuggler-get-id (item info)org-taskjuggler-get-id462,16761
(defun org-taskjuggler-get-name (item)org-taskjuggler-get-name468,17004
(defun org-taskjuggler-get-start (item)org-taskjuggler-get-start475,17256
(defun org-taskjuggler-get-end (item)org-taskjuggler-get-end485,17685
(defun org-taskjuggler--indent-string (s)org-taskjuggler--indent-string496,18020
(defun org-taskjuggler--build-attributes (item attributes)org-taskjuggler--build-attributes501,18223
(defun org-taskjuggler--build-unique-id (item unique-ids)org-taskjuggler--build-unique-id513,18700
(defun org-taskjuggler--clean-id (id)org-taskjuggler--clean-id534,19740
(defun org-taskjuggler-resolve-dependencies (task info)org-taskjuggler-resolve-dependencies547,20066
(defun org-taskjuggler-format-dependencies (dependencies task info)org-taskjuggler-format-dependencies588,21979
(defun org-taskjuggler-project-plan (contents info)org-taskjuggler-project-plan629,23576
(defun org-taskjuggler--build-project (project info)org-taskjuggler--build-project728,28282
(defun org-taskjuggler--build-resource (resource info)org-taskjuggler--build-resource756,29387
(defun org-taskjuggler--build-report (report info)org-taskjuggler--build-report789,30568
(defun org-taskjuggler--build-task (task info)org-taskjuggler--build-task813,31335
(defun org-taskjuggler-export (&optional async subtreep visible-only)org-taskjuggler-export888,34296
(defun org-taskjuggler-export-and-process (&optional subtreep visible-only)org-taskjuggler-export-and-process930,35812
(defun org-taskjuggler-export-process-and-open (&optional subtreep visible-only)org-taskjuggler-export-process-and-open964,37022
(defun org-taskjuggler-compile (file)org-taskjuggler-compile984,37830
(defun org-taskjuggler--collect-errors (buffer)org-taskjuggler--collect-errors1015,38974

elpa/org-plus-contrib-20191021/org-agenda.el,44299
(defvar calendar-mode-map)calendar-mode-map86,4196
(defvar org-clock-current-task)org-clock-current-task87,4223
(defvar org-current-tag-alist)org-current-tag-alist88,4255
(defvar org-mobile-force-id-on-agenda-items)org-mobile-force-id-on-agenda-items89,4286
(defvar org-habit-show-habits)org-habit-show-habits90,4331
(defvar org-habit-show-habits-only-for-today)org-habit-show-habits-only-for-today91,4362
(defvar org-habit-show-all-today)org-habit-show-all-today92,4408
(defvar org-agenda-buffer-name "*Org Agenda*")org-agenda-buffer-name95,4506
(defvar org-agenda-overriding-header nil)org-agenda-overriding-header96,4553
(defvar org-agenda-title-append nil)org-agenda-title-append97,4595
(defvar original-date) ; dynamically scoped, calendar.el does scope thisoriginal-date100,4764
(defvar org-agenda-undo-list nilorg-agenda-undo-list102,4838
(defvar org-agenda-pending-undo-list nilorg-agenda-pending-undo-list104,4938
(defcustom org-agenda-confirm-kill 1org-agenda-confirm-kill107,5057
(defcustom org-agenda-compact-blocks nilorg-agenda-compact-blocks117,5457
(defcustom org-agenda-block-separator ?=org-agenda-block-separator124,5701
(defgroup org-agenda-export nilorg-agenda-export136,6174
(defcustom org-agenda-with-colors torg-agenda-with-colors141,6315
(defcustom org-agenda-exporter-settings nilorg-agenda-exporter-settings146,6444
(defcustom org-agenda-before-write-hook '(org-agenda-add-entry-text)org-agenda-before-write-hook161,6992
(defcustom org-agenda-add-entry-text-maxlines 0org-agenda-add-entry-text-maxlines168,7289
(defcustom org-agenda-add-entry-text-descriptive-links torg-agenda-add-entry-text-descriptive-links182,7925
(defcustom org-agenda-export-html-style nilorg-agenda-export-html-style190,8268
(defcustom org-agenda-persistent-filter nilorg-agenda-persistent-filter233,9628
(defgroup org-agenda-custom-commands nilorg-agenda-custom-commands238,9773
(defconst org-sorting-choiceorg-sorting-choice243,9922
(defvaralias 'org-agenda-filter-preset 'org-agenda-tag-filter-preset)org-agenda-filter-preset263,10736
(defvaralias 'org-agenda-filter 'org-agenda-tag-filter)org-agenda-filter264,10806
(defvar org-agenda-entry-types '(:deadline :scheduled :timestamp :sexp)org-agenda-entry-types266,10863
(defconst org-agenda-custom-commands-local-optionsorg-agenda-custom-commands-local-options305,12557
(defcustom org-agenda-custom-commandsorg-agenda-custom-commands439,17060
(defcustom org-agenda-query-register ?oorg-agenda-query-register576,23178
(defcustom org-stuck-projectsorg-stuck-projects583,23450
(defgroup org-agenda-skip nilorg-agenda-skip621,25409
(defcustom org-agenda-skip-function-global nilorg-agenda-skip-function-global626,25542
(defgroup org-agenda-daily/weekly nilorg-agenda-daily/weekly642,26314
(defgroup org-agenda-todo-list nilorg-agenda-todo-list646,26455
(defgroup org-agenda-match-view nilorg-agenda-match-view650,26599
(defgroup org-agenda-search-view nilorg-agenda-search-view654,26761
(defvar org-agenda-archives-mode nilorg-agenda-archives-mode659,26900
(defcustom org-agenda-restriction-lock-highlight-subtree torg-agenda-restriction-lock-highlight-subtree666,27237
(defcustom org-agenda-skip-comment-trees torg-agenda-skip-comment-trees673,27547
(defcustom org-agenda-todo-list-sublevels torg-agenda-todo-list-sublevels679,27760
(defcustom org-agenda-todo-ignore-with-date nilorg-agenda-todo-ignore-with-date687,28064
(defcustom org-agenda-todo-ignore-timestamp nilorg-agenda-todo-ignore-timestamp699,28627
(defcustom org-agenda-todo-ignore-scheduled nilorg-agenda-todo-ignore-scheduled736,30278
(defcustom org-agenda-todo-ignore-deadlines nilorg-agenda-todo-ignore-deadlines769,31646
(defcustom org-agenda-todo-ignore-time-comparison-use-seconds nilorg-agenda-todo-ignore-time-comparison-use-seconds812,33399
(defcustom org-agenda-tags-todo-honor-ignore-options nilorg-agenda-tags-todo-honor-ignore-options828,34083
(defcustom org-agenda-skip-scheduled-if-done nilorg-agenda-skip-scheduled-if-done844,34742
(defcustom org-agenda-skip-scheduled-if-deadline-is-shown nilorg-agenda-skip-scheduled-if-deadline-is-shown853,35167
(defcustom org-agenda-skip-timestamp-if-deadline-is-shown nilorg-agenda-skip-timestamp-if-deadline-is-shown879,36137
(defcustom org-agenda-skip-deadline-if-done nilorg-agenda-skip-deadline-if-done894,36761
(defcustom org-agenda-skip-deadline-prewarning-if-scheduled nilorg-agenda-skip-deadline-prewarning-if-scheduled904,37234
(defcustom org-agenda-skip-scheduled-delay-if-deadline nilorg-agenda-skip-scheduled-delay-if-deadline925,38375
(defcustom org-agenda-skip-additional-timestamps-same-entry nilorg-agenda-skip-additional-timestamps-same-entry941,39162
(defcustom org-agenda-skip-timestamp-if-done nilorg-agenda-skip-timestamp-if-done948,39471
(defcustom org-agenda-dim-blocked-tasks torg-agenda-dim-blocked-tasks954,39673
(defgroup org-agenda-startup nilorg-agenda-startup977,40744
(defcustom org-agenda-menu-show-matcher torg-agenda-menu-show-matcher982,40895
(defcustom org-agenda-menu-two-columns nilorg-agenda-menu-two-columns992,41342
(defcustom org-agenda-finalize-hook nilorg-agenda-finalize-hook1000,41602
(defcustom org-agenda-mouse-1-follows-link nilorg-agenda-mouse-1-follows-link1010,41977
(defcustom org-agenda-start-with-follow-mode nilorg-agenda-start-with-follow-mode1017,42229
(defcustom org-agenda-follow-indirect nilorg-agenda-follow-indirect1022,42397
(defcustom org-agenda-show-outline-path torg-agenda-show-outline-path1029,42602
(defcustom org-agenda-start-with-entry-text-mode nilorg-agenda-start-with-entry-text-mode1034,42760
(defcustom org-agenda-entry-text-maxlines 5org-agenda-entry-text-maxlines1039,42936
(defcustom org-agenda-entry-text-exclude-regexps nilorg-agenda-entry-text-exclude-regexps1048,43257
(defcustom org-agenda-entry-text-leaders "    > "org-agenda-entry-text-leaders1055,43543
(defvar org-agenda-entry-text-cleanup-hook nilorg-agenda-entry-text-cleanup-hook1062,43740
(defvar org-agenda-include-inactive-timestamps nilorg-agenda-include-inactive-timestamps1070,44178
(defgroup org-agenda-windows nilorg-agenda-windows1074,44309
(defcustom org-agenda-window-setup 'reorganize-frameorg-agenda-window-setup1079,44460
(defcustom org-agenda-window-frame-fractions '(0.5 . 0.75)org-agenda-window-frame-fractions1099,45299
(defcustom org-agenda-restore-windows-after-quit nilorg-agenda-restore-windows-after-quit1106,45675
(defcustom org-agenda-span 'weekorg-agenda-span1116,46130
(defcustom org-agenda-start-on-weekday 1org-agenda-start-on-weekday1128,46558
(defcustom org-agenda-show-all-dates torg-agenda-show-all-dates1137,46926
(defcustom org-agenda-format-date 'org-agenda-format-date-alignedorg-agenda-format-date1143,47151
(defun org-agenda-format-date-aligned (date)org-agenda-format-date-aligned1154,47638
(defcustom org-agenda-time-leading-zero nilorg-agenda-time-leading-zero1177,48413
(defcustom org-agenda-timegrid-use-ampm nilorg-agenda-timegrid-use-ampm1184,48651
(defun org-agenda-time-of-day-to-ampm (time)org-agenda-time-of-day-to-ampm1190,48812
(defun org-agenda-time-of-day-to-ampm-maybe (time)org-agenda-time-of-day-to-ampm-maybe1207,49373
(defcustom org-agenda-weekend-days '(6 0)org-agenda-weekend-days1213,49603
(defcustom org-agenda-move-date-from-past-immediately-to-today torg-agenda-move-date-from-past-immediately-to-today1226,50032
(defcustom org-agenda-include-diary nilorg-agenda-include-diary1236,50463
(defcustom org-agenda-include-deadlines torg-agenda-include-deadlines1242,50697
(defcustom org-agenda-show-future-repeats torg-agenda-show-future-repeats1249,50942
(defcustom org-agenda-prefer-last-repeat nilorg-agenda-prefer-last-repeat1261,51393
(defcustom org-scheduled-past-days 10000org-scheduled-past-days1287,52416
(defcustom org-deadline-past-days 10000org-deadline-past-days1296,52756
(defcustom org-agenda-log-mode-items '(closed clock)org-agenda-log-mode-items1307,53137
(defcustom org-agenda-clock-consistency-checksorg-agenda-clock-consistency-checks1321,53774
(defcustom org-agenda-log-mode-add-notes torg-agenda-log-mode-add-notes1365,55827
(defcustom org-agenda-start-with-log-mode nilorg-agenda-start-with-log-mode1373,56154
(defcustom org-agenda-start-with-clockreport-mode nilorg-agenda-start-with-clockreport-mode1387,56840
(defcustom org-agenda-clockreport-parameter-plist '(:link t :maxlevel 2)org-agenda-clockreport-parameter-plist1393,57052
(defvaralias 'org-agenda-search-view-search-words-onlyorg-agenda-search-view-search-words-only1404,57617
(defcustom org-agenda-search-view-always-boolean nilorg-agenda-search-view-always-boolean1407,57715
(defcustom org-agenda-search-view-force-full-words nilorg-agenda-search-view-force-full-words1435,58971
(defcustom org-agenda-search-view-max-outline-level 0org-agenda-search-view-max-outline-level1442,59209
(defgroup org-agenda-time-grid nilorg-agenda-time-grid1452,59578
(defcustom org-agenda-search-headline-for-time torg-agenda-search-headline-for-time1457,59722
(defcustom org-agenda-use-time-grid torg-agenda-use-time-grid1468,60244
(defcustom org-agenda-time-gridorg-agenda-time-grid1478,60687
(defcustom org-agenda-show-current-time-in-grid torg-agenda-show-current-time-in-grid1517,62204
(defcustom org-agenda-current-time-stringorg-agenda-current-time-string1523,62380
(defgroup org-agenda-sorting nilorg-agenda-sorting1530,62605
(defcustom org-agenda-sorting-strategyorg-agenda-sorting-strategy1535,62739
(defcustom org-agenda-cmp-user-defined nilorg-agenda-cmp-user-defined1607,66487
(defcustom org-sort-agenda-notime-is-late torg-sort-agenda-notime-is-late1617,66912
(defcustom org-sort-agenda-noeffort-is-high torg-sort-agenda-noeffort-is-high1627,67386
(defgroup org-agenda-line-format nilorg-agenda-line-format1636,67779
(defcustom org-agenda-prefix-formatorg-agenda-prefix-format1641,67938
(defvar org-prefix-format-compiled nilorg-prefix-format-compiled1709,71005
(defcustom org-agenda-todo-keyword-format "%-1s"org-agenda-todo-keyword-format1715,71270
(defcustom org-agenda-diary-sexp-prefix nilorg-agenda-diary-sexp-prefix1722,71533
(defcustom org-agenda-timerange-leaders '("" "(%d/%d): ")org-agenda-timerange-leaders1732,71904
(defcustom org-agenda-scheduled-leaders '("Scheduled: " "Sched.%2dx: ")org-agenda-scheduled-leaders1746,72503
(defcustom org-agenda-inactive-leader "["org-agenda-inactive-leader1761,73233
(defcustom org-agenda-deadline-leaders '("Deadline:  " "In %3d d.: " "%2d d. ago: ")org-agenda-deadline-leaders1768,73475
(defcustom org-agenda-remove-times-when-in-prefix torg-agenda-remove-times-when-in-prefix1782,74107
(defcustom org-agenda-remove-timeranges-from-blocks nilorg-agenda-remove-timeranges-from-blocks1799,74944
(defcustom org-agenda-default-appointment-duration nilorg-agenda-default-appointment-duration1806,75165
(defcustom org-agenda-show-inherited-tags torg-agenda-show-inherited-tags1815,75531
(defcustom org-agenda-use-tag-inheritance '(todo search agenda)org-agenda-use-tag-inheritance1841,76487
(defcustom org-agenda-hide-tags-regexp nilorg-agenda-hide-tags-regexp1866,77476
(defvaralias 'org-agenda-remove-tags-when-in-prefixorg-agenda-remove-tags-when-in-prefix1876,77877
(defcustom org-agenda-remove-tags nilorg-agenda-remove-tags1879,77957
(defvaralias 'org-agenda-align-tags-to-column 'org-agenda-tags-column)org-agenda-align-tags-to-column1889,78341
(defcustom org-agenda-tags-column 'autoorg-agenda-tags-column1891,78413
(defcustom org-agenda-fontify-priorities 'cookiesorg-agenda-fontify-priorities1907,79006
(defcustom org-agenda-day-face-function nilorg-agenda-day-face-function1931,80092
(defcustom org-agenda-category-icon-alist nilorg-agenda-category-icon-alist1940,80461
(defgroup org-agenda-column-view nilorg-agenda-column-view1979,81760
(defcustom org-agenda-view-columns-initially nilorg-agenda-view-columns-initially1984,81902
(defcustom org-agenda-columns-show-summaries torg-agenda-columns-show-summaries1992,82148
(defcustom org-agenda-columns-compute-summary-properties torg-agenda-columns-compute-summary-properties1997,82322
(defcustom org-agenda-columns-add-appointments-to-effort-sum nilorg-agenda-columns-add-appointments-to-effort-sum2008,82847
(defcustom org-agenda-auto-exclude-function nilorg-agenda-auto-exclude-function2018,83346
(defcustom org-agenda-bulk-custom-functions nilorg-agenda-bulk-custom-functions2031,83997
(defmacro org-agenda-with-point-at-orig-entry (string &rest body)org-agenda-with-point-at-orig-entry2045,84500
(def-edebug-spec org-agenda-with-point-at-orig-entry (form body))org-agenda-with-point-at-orig-entry2057,85052
(defun org-add-agenda-custom-command (entry)org-add-agenda-custom-command2059,85119
(defmacro org-agenda--insert-overriding-header (default)org-agenda--insert-overriding-header2068,85523
(defvaralias 'org-agenda-keymap 'org-agenda-mode-map)org-agenda-keymap2087,86277
(defvar org-agenda-mode-map (make-sparse-keymap)org-agenda-mode-map2088,86331
(defvar org-agenda-menu) ; defined later in this file.org-agenda-menu2091,86416
(defvar org-agenda-restrict nil) ; defined later in this file.org-agenda-restrict2092,86471
(defvar org-agenda-follow-mode nil)org-agenda-follow-mode2093,86534
(defvar org-agenda-entry-text-mode nil)org-agenda-entry-text-mode2094,86570
(defvar org-agenda-clockreport-mode nil)org-agenda-clockreport-mode2095,86610
(defvar org-agenda-show-log nilorg-agenda-show-log2096,86651
(defvar org-agenda-redo-command nil)org-agenda-redo-command2100,86813
(defvar org-agenda-query-string nil)org-agenda-query-string2101,86850
(defvar org-agenda-mode-hook nilorg-agenda-mode-hook2102,86887
(defvar org-agenda-type nil)org-agenda-type2105,87027
(defvar org-agenda-force-single-file nil)org-agenda-force-single-file2106,87056
(defvar org-agenda-bulk-marked-entries nilorg-agenda-bulk-marked-entries2107,87098
(defvar org-agenda-current-date nilorg-agenda-current-date2109,87206
(defcustom org-agenda-sticky nilorg-agenda-sticky2114,87323
(defun org-toggle-sticky-agenda (&optional arg)org-toggle-sticky-agenda2124,87617
(defvar org-agenda-buffer nilorg-agenda-buffer2140,88229
(defvar org-agenda-last-prefix-arg nil)org-agenda-last-prefix-arg2143,88306
(defvar org-agenda-this-buffer-name nil)org-agenda-this-buffer-name2144,88346
(defvar org-agenda-doing-sticky-redo nil)org-agenda-doing-sticky-redo2145,88387
(defvar org-agenda-this-buffer-is-sticky nil)org-agenda-this-buffer-is-sticky2146,88429
(defvar org-agenda-last-indirect-buffer nilorg-agenda-last-indirect-buffer2147,88475
(defconst org-agenda-local-varsorg-agenda-local-vars2150,88585
(defun org-agenda-mode ()org-agenda-mode2180,89512
(define-key org-agenda-mode-map "?" 'org-agenda-show-the-flagging-note)org-agenda-mode-map2399,101383
(define-key org-agenda-mode-map [remap forward-paragraph] 'org-agenda-forward-block)org-agenda-mode-map2407,101792
(define-key org-agenda-mode-map [remap backward-paragraph] 'org-agenda-backward-block)org-agenda-mode-map2408,101877
(defvar org-agenda-allow-remote-undo torg-agenda-allow-remote-undo2567,109199
(defvar org-agenda-undo-has-started-in nilorg-agenda-undo-has-started-in2569,109299
(defun org-agenda-undo ()org-agenda-undo2572,109422
(defun org-verify-change-for-undo (l1 l2)org-verify-change-for-undo2606,110740
(defvar org-agenda-restrict-begin (make-marker))org-agenda-restrict-begin2614,111007
(defvar org-agenda-restrict-end (make-marker))org-agenda-restrict-end2615,111056
(defvar org-agenda-last-dispatch-buffer nil)org-agenda-last-dispatch-buffer2616,111103
(defvar org-agenda-overriding-restriction nil)org-agenda-overriding-restriction2617,111148
(defcustom org-agenda-custom-commands-contexts nilorg-agenda-custom-commands-contexts2619,111196
(defcustom org-agenda-max-entries nilorg-agenda-max-entries2668,113000
(defcustom org-agenda-max-todos nilorg-agenda-max-todos2686,113569
(defcustom org-agenda-max-tags nilorg-agenda-max-tags2704,114130
(defcustom org-agenda-max-effort nilorg-agenda-max-effort2722,114717
(defvar org-agenda-keep-restricted-file-list nil)org-agenda-keep-restricted-file-list2740,115318
(defvar org-keys nil)org-keys2741,115368
(defvar org-match nil)org-match2742,115390
(defun org-agenda (&optional arg org-keys restriction)org-agenda2744,115428
(defvar org-agenda-multi)org-agenda-multi2922,123275
(defun org-agenda-append-agenda ()org-agenda-append-agenda2924,123302
(defun org-agenda-normalize-custom-commands (cmds)org-agenda-normalize-custom-commands2938,123786
(defun org-agenda-get-restriction-and-command (prefix-descriptions)org-agenda-get-restriction-and-command2949,124077
(defun org-agenda-fit-window-to-buffer ()org-agenda-fit-window-to-buffer3139,130625
(defvar org-cmd nil)org-cmd3151,131125
(defvar org-agenda-overriding-cmd nil)org-agenda-overriding-cmd3152,131146
(defvar org-agenda-overriding-arguments nil)org-agenda-overriding-arguments3153,131185
(defvar org-agenda-overriding-cmd-arguments nil)org-agenda-overriding-cmd-arguments3154,131230
(defun org-agenda-run-series (name series)org-agenda-run-series3155,131279
(defmacro org-batch-agenda (cmd-key &rest parameters)org-batch-agenda3214,133349
(defvar org-agenda-info nil)org-agenda-info3229,134015
(defmacro org-batch-agenda-csv (cmd-key &rest parameters)org-batch-agenda-csv3232,134060
(defun org-fix-agenda-info (props)org-fix-agenda-info3284,136457
(defun org-agenda-export-csv-mapper (prop)org-agenda-export-csv-mapper3315,137907
(defun org-store-agenda-views (&rest parameters)org-store-agenda-views3325,138174
(defmacro org-batch-store-agenda-views (&rest parameters)org-batch-store-agenda-views3331,138326
(defvar org-agenda-current-span nilorg-agenda-current-span3365,139619
(defun org-agenda-mark-header-line (pos)org-agenda-mark-header-line3367,139740
(defvar org-mobile-creating-agendas) ; defined in org-mobile.elorg-mobile-creating-agendas3377,140117
(defvar org-agenda-write-buffer-name "Agenda View")org-agenda-write-buffer-name3378,140181
(defun org-agenda-write (file &optional open nosettings agenda-bufname)org-agenda-write3379,140233
(defun org-agenda-remove-marked-text (property &optional value)org-agenda-remove-marked-text3479,144271
(defun org-agenda-add-entry-text ()org-agenda-add-entry-text3490,144641
(defun org-agenda-get-some-entry-text (marker n-lines &optional indentorg-agenda-get-some-entry-text3509,145396
(defun org-check-for-org-mode ()org-check-for-org-mode3594,148469
(defvar org-agenda-multi nil)  ; dynamically scopedorg-agenda-multi3602,148714
(defvar org-agenda-pre-window-conf nil)org-agenda-pre-window-conf3603,148766
(defvar org-agenda-columns-active nil)org-agenda-columns-active3604,148806
(defvar org-agenda-name nil)org-agenda-name3605,148845
(defvar org-agenda-tag-filter nil)org-agenda-tag-filter3606,148874
(defvar org-agenda-category-filter nil)org-agenda-category-filter3607,148909
(defvar org-agenda-regexp-filter nil)org-agenda-regexp-filter3608,148949
(defvar org-agenda-effort-filter nil)org-agenda-effort-filter3609,148987
(defvar org-agenda-top-headline-filter nil)org-agenda-top-headline-filter3610,149025
(defvar org-agenda-tag-filter-preset nilorg-agenda-tag-filter-preset3611,149069
(defvar org-agenda-category-filter-preset nilorg-agenda-category-filter-preset3621,149635
(defvar org-agenda-regexp-filter-preset nilorg-agenda-regexp-filter-preset3631,150215
(defvar org-agenda-effort-filter-preset nilorg-agenda-effort-filter-preset3641,150789
(defun org-agenda-use-sticky-p ()org-agenda-use-sticky-p3651,151366
(defun org-agenda-prepare-window (abuf filter-alist)org-agenda-prepare-window3672,152109
(defun org-agenda-prepare (&optional name)org-agenda-prepare3705,153591
(defvar org-overriding-columns-format)org-overriding-columns-format3768,156186
(defvar org-local-columns-format)org-local-columns-format3769,156225
(defun org-agenda-finalize ()org-agenda-finalize3770,156259
(defun org-agenda-mark-clocking-task ()org-agenda-mark-clocking-task3844,159389
(defun org-agenda-unmark-clocking-task ()org-agenda-unmark-clocking-task3866,160269
(defun org-agenda-fontify-priorities ()org-agenda-fontify-priorities3873,160494
(defvar org-depend-tag-blocked)org-depend-tag-blocked3908,161763
(defun org-agenda-dim-blocked-tasks (&optional invisible)org-agenda-dim-blocked-tasks3910,161796
(defun org-agenda--mark-blocked-entry (entry)org-agenda--mark-blocked-entry3939,162934
(defvar org-agenda-skip-function nilorg-agenda-skip-function3968,164039
(defun org-agenda-skip ()org-agenda-skip3981,164773
(defun org-agenda-skip-eval (form)org-agenda-skip-eval4000,165501
(defvar org-agenda-markers nilorg-agenda-markers4015,165952
(defvar org-agenda-last-marker-time (float-time)org-agenda-last-marker-time4017,166050
(defun org-agenda-new-marker (&optional pos)org-agenda-new-marker4020,166146
(defun org-agenda-reset-markers ()org-agenda-reset-markers4032,166592
(defun org-agenda-save-markers-for-cut-and-paste (beg end)org-agenda-save-markers-for-cut-and-paste4037,166748
(defun org-agenda-entry-text-show-here ()org-agenda-entry-text-show-here4048,167142
(defun org-agenda-entry-text-show ()org-agenda-entry-text-show4064,167797
(defun org-agenda-entry-text-hide ()org-agenda-entry-text-hide4075,168102
(defun org-agenda-get-day-face (date)org-agenda-get-day-face4083,168339
(defvar org-agenda-show-log-scoped)org-agenda-show-log-scoped4092,168702
(defvar org-agenda-start-day nil  ; dynamically scoped parameterorg-agenda-start-day4096,168764
(defvar org-starting-day nil) ; local variable in the agenda bufferorg-starting-day4102,169104
(defvar org-arg-loc nil) ; local variableorg-arg-loc4103,169172
(defvar org-agenda-buffer-tmp-name nil)org-agenda-buffer-tmp-name4105,169215
(defun org-agenda-list (&optional arg start-day span with-hour)org-agenda-list4107,169270
(defun org-agenda-ndays-to-span (n)org-agenda-ndays-to-span4305,177215
(defun org-agenda-span-to-ndays (span &optional start-day)org-agenda-span-to-ndays4313,177410
(defun org-agenda-span-name (span)org-agenda-span-name4327,177946
(defvar org-agenda-search-history nil)org-agenda-search-history4337,178146
(defvar org-search-syntax-table nilorg-search-syntax-table4339,178186
(defvar org-mode-syntax-table) ; From org.elorg-mode-syntax-table4344,178406
(defun org-search-syntax-table ()org-search-syntax-table4345,178451
(defvar org-agenda-last-search-view-search-was-boolean nil)org-agenda-last-search-view-search-was-boolean4352,178739
(defun org-search-view (&optional todo-only string edit-at)org-search-view4355,178815
(defun org-agenda-propertize-selected-todo-keywords (keywords)org-agenda-propertize-selected-todo-keywords4649,190564
(defvar org-select-this-todo-keyword nil)org-select-this-todo-keyword4661,190943
(defvar org-last-arg nil)org-last-arg4662,190985
(defun org-todo-list (&optional arg)org-todo-list4665,191027
(defun org-tags-view (&optional todo-only match)org-tags-view4752,194657
(defvar org-agenda-skip-regexp nilorg-agenda-skip-regexp4849,198283
(defvar org-agenda-overriding-header nilorg-agenda-overriding-header4854,198522
(defun org-agenda-skip-entry-if (&rest conditions)org-agenda-skip-entry-if4862,198918
(defun org-agenda-skip-subtree-if (&rest conditions)org-agenda-skip-subtree-if4867,199092
(defun org-agenda-skip-if (subtree conditions)org-agenda-skip-if4872,199268
(defun org-agenda-skip-if-todo (args end)org-agenda-skip-if-todo4948,202370
(defun org-agenda-list-stuck-projects (&rest ignore)org-agenda-list-stuck-projects4986,203774
(defvar org-disable-agenda-to-diary nil)          ;Dynamically-scoped param.org-disable-agenda-to-diary5042,205883
(defvar diary-list-entries-hook)diary-list-entries-hook5043,205960
(defvar diary-time-regexp)diary-time-regexp5044,205993
(defun org-get-entries-from-diary (date)org-get-entries-from-diary5045,206020
(defvar org-agenda-cleanup-fancy-diary-hook nilorg-agenda-cleanup-fancy-diary-hook5095,207936
(defun org-agenda-cleanup-fancy-diary ()org-agenda-cleanup-fancy-diary5098,208042
(defun org-modify-diary-entry-string (string)org-modify-diary-entry-string5120,208916
(defun org-diary-default-entry ()org-diary-default-entry5131,209308
(defun org-add-to-diary-list (&rest args)org-add-to-diary-list5141,209708
(defvar org-diary-last-run-time nil)org-diary-last-run-time5146,209862
(defun org-diary (&rest args)org-diary5149,209915
(defun org-agenda--timestamp-to-absolute (&rest args)org-agenda--timestamp-to-absolute5209,212307
(defun org-agenda-get-day-entries (file date &rest args)org-agenda-get-day-entries5219,212679
(defsubst org-em (x y list)org-em5281,215266
(defvar org-heading-keyword-regexp-format) ; defined in org.elorg-heading-keyword-regexp-format5285,215363
(defvar org-agenda-sorting-strategy-selected nil)org-agenda-sorting-strategy-selected5286,215426
(defun org-agenda-entry-get-agenda-timestamp (pom)org-agenda-entry-get-agenda-timestamp5288,215477
(defun org-agenda-get-todos ()org-agenda-get-todos5322,216866
(defun org-agenda-todo-custom-ignore-p (time n)org-agenda-todo-custom-ignore-p5395,219703
(defun org-agenda-check-for-timestamp-as-reason-to-ignore-todo-itemorg-agenda-check-for-timestamp-as-reason-to-ignore-todo-item5407,220148
(defun org-agenda-get-timestamps (&optional deadlines)org-agenda-get-timestamps5475,223137
(defun org-agenda-get-sexps ()org-agenda-get-sexps5618,228596
(defun org-anniversary (year month day &optional mark)org-anniversary5677,230820
(defun org-cyclic (N year month day &optional mark)org-cyclic5682,231053
(defun org-block (Y1 M1 D1 Y2 M2 D2 &optional mark)org-block5687,231275
(defun org-date (year month day &optional mark)org-date5692,231496
(defun org-class (y1 m1 d1 y2 m2 d2 dayname &rest skip-weeks)org-class5699,231744
(defalias 'org-get-closed 'org-agenda-get-progress)org-get-closed5723,232847
(defun org-agenda-get-progress ()org-agenda-get-progress5724,232899
(defun org-agenda-show-clocking-issues ()org-agenda-show-clocking-issues5831,237122
(defun org-agenda-check-clock-gap (t1 t2 ok-list)org-agenda-check-clock-gap5914,240149
(defun org-agenda-get-deadlines (&optional with-hour)org-agenda-get-deadlines5946,241380
(defun org-agenda-deadline-face (fraction)org-agenda-deadline-face6098,247390
(defun org-agenda-get-scheduled (&optional deadlines with-hour)org-agenda-get-scheduled6103,247607
(defun org-agenda-get-blocks ()org-agenda-get-blocks6294,254943
(defvar org-prefix-has-time nilorg-prefix-has-time6396,258373
(defvar org-prefix-has-tag nilorg-prefix-has-tag6399,258520
(defvar org-prefix-has-effort nilorg-prefix-has-effort6402,258666
(defvar org-prefix-has-breadcrumbs nilorg-prefix-has-breadcrumbs6405,258815
(defvar org-prefix-category-length nilorg-prefix-category-length6408,258969
(defvar org-prefix-category-max-length nilorg-prefix-category-max-length6410,259087
(defun org-agenda-get-category-icon (category)org-agenda-get-category-icon6413,259210
(defun org-agenda-format-item (extra txt &optional level category tags dotimeorg-agenda-format-item6421,259549
(defun org-agenda-fix-displayed-tags (txt tags add-inherited hide-re)org-agenda-fix-displayed-tags6591,266468
(defun org-downcase-keep-props (s)org-downcase-keep-props6623,267438
(defvar org-agenda-sorting-strategy) ;; because the def is in a let formorg-agenda-sorting-strategy6629,267597
(defun org-agenda-add-time-grid-maybe (list ndays todayp)org-agenda-add-time-grid-maybe6631,267671
(defun org-compile-prefix-format (key)org-compile-prefix-format6675,269369
(defun org-set-sorting-strategy (key)org-set-sorting-strategy6738,271902
(defun org-get-time-of-day (s &optional string mod24)org-get-time-of-day6747,272298
(defvar org-agenda-before-sorting-filter-function nilorg-agenda-before-sorting-filter-function6777,273531
(defun org-agenda-finalize-entries (list &optional type)org-agenda-finalize-entries6797,274476
(defun org-agenda-limit-entries (list prop limit &optional fn)org-agenda-limit-entries6834,276047
(defun org-agenda-limit-interactively (remove)org-agenda-limit-interactively6852,276555
(defun org-agenda-highlight-todo (x)org-agenda-highlight-todo6878,277597
(defsubst org-cmp-values (a b property)org-cmp-values6926,279521
(defsubst org-cmp-effort (a b)org-cmp-effort6933,279803
(defsubst org-cmp-category (a b)org-cmp-category6947,280292
(defsubst org-cmp-todo-state (a b)org-cmp-todo-state6954,280598
(defsubst org-cmp-alpha (a b)org-cmp-alpha6976,281481
(defsubst org-cmp-tag (a b)org-cmp-tag6999,282356
(defsubst org-cmp-time (a b)org-cmp-time7009,282679
(defsubst org-cmp-ts (a b type)org-cmp-ts7017,282976
(defsubst org-cmp-habit-p (a b)org-cmp-habit-p7033,283657
(defun org-entries-lessp (a b)org-entries-lessp7040,283894
(defvar org-agenda-restriction-lock-overlay (make-overlay 1 1)org-agenda-restriction-lock-overlay7102,286832
(defun org-agenda-set-restriction-lock-from-agenda (arg)org-agenda-set-restriction-lock-from-agenda7110,287231
(defun org-agenda-set-restriction-lock (&optional type)org-agenda-set-restriction-lock7127,287908
(defun org-agenda-remove-restriction-lock (&optional noupdate)org-agenda-remove-restriction-lock7176,289850
(defun org-agenda-maybe-redo ()org-agenda-maybe-redo7192,290519
(defun org-agenda-check-type (error &rest types)org-agenda-check-type7209,291040
(defun org-agenda-Quit ()org-agenda-Quit7220,291450
(defun org-agenda-quit ()org-agenda-quit7227,291649
(defun org-agenda--quit (&optional bury)org-agenda--quit7241,292009
(defun org-agenda-exit ()org-agenda-exit7276,293281
(defun org-agenda-kill-all-agenda-buffers ()org-agenda-kill-all-agenda-buffers7288,293743
(defun org-agenda-execute (arg)org-agenda-execute7298,294061
(defun org-agenda-redo (&optional all)org-agenda-redo7306,294333
(defun org-agenda-redo-all (&optional exhaustive)org-agenda-redo-all7374,297418
(defvar org-global-tags-completion-table nil)org-global-tags-completion-table7385,297795
(defvar org-agenda-filter-form nil)org-agenda-filter-form7386,297841
(defvar org-agenda-filtered-by-category nil)org-agenda-filtered-by-category7387,297877
(defsubst org-agenda-get-category ()org-agenda-get-category7389,297923
(defun org-agenda-filter-by-category (strip)org-agenda-filter-by-category7393,298039
(defun org-find-top-headline (&optional pos)org-find-top-headline7413,298835
(defvar org-agenda-filtered-by-top-headline nil)org-agenda-filtered-by-top-headline7424,299275
(defun org-agenda-filter-by-top-headline (strip)org-agenda-filter-by-top-headline7425,299324
(defvar org-agenda-regexp-filter nil)org-agenda-regexp-filter7438,299908
(defun org-agenda-filter-by-regexp (strip)org-agenda-filter-by-regexp7439,299946
(defvar org-agenda-effort-filter nil)org-agenda-effort-filter7458,300669
(defun org-agenda-filter-by-effort (strip)org-agenda-filter-by-effort7459,300707
(defun org-agenda-filter-remove-all ()org-agenda-filter-remove-all7501,302291
(defun org-agenda-filter-by-tag (arg &optional char exclude)org-agenda-filter-by-tag7516,302796
(defun org-agenda-get-represented-tags ()org-agenda-get-represented-tags7596,305909
(defun org-agenda-filter-make-matcher (filter type &optional expand)org-agenda-filter-make-matcher7608,306261
(defun org-agenda-filter-make-matcher-tag-exp (tags op)org-agenda-filter-make-matcher-tag-exp7658,307904
(defun org-agenda-filter-effort-form (e)org-agenda-filter-effort-form7676,308679
(defun org-agenda-compare-effort (op value)org-agenda-compare-effort7689,309108
(defun org-agenda-filter-expand-tags (filter &optional no-operator)org-agenda-filter-expand-tags7699,309570
(defun org-agenda-filter-apply (filter type &optional expand)org-agenda-filter-apply7717,310166
(defun org-agenda-filter-top-headline-apply (hl &optional negative)org-agenda-filter-top-headline-apply7746,311394
(defun org-agenda-filter-hide-line (type)org-agenda-filter-hide-line7763,312042
(defun org-agenda-remove-filter (type)org-agenda-remove-filter7771,312328
(defun org-agenda-filter-show-all-tag nilorg-agenda-filter-show-all-tag7787,312939
(defun org-agenda-filter-show-all-re nilorg-agenda-filter-show-all-re7789,313016
(defun org-agenda-filter-show-all-effort nilorg-agenda-filter-show-all-effort7791,313095
(defun org-agenda-filter-show-all-cat nilorg-agenda-filter-show-all-cat7793,313178
(defun org-agenda-filter-show-all-top-filter nilorg-agenda-filter-show-all-top-filter7795,313260
(defun org-agenda-manipulate-query-add ()org-agenda-manipulate-query-add7798,313354
(defun org-agenda-manipulate-query-subtract ()org-agenda-manipulate-query-subtract7803,313600
(defun org-agenda-manipulate-query-add-re ()org-agenda-manipulate-query-add-re7808,313851
(defun org-agenda-manipulate-query-subtract-re ()org-agenda-manipulate-query-subtract-re7813,314099
(defun org-agenda-manipulate-query (char)org-agenda-manipulate-query7818,314352
(defun org-add-to-string (var string)org-add-to-string7845,315334
(defun org-agenda-goto-date (span)org-agenda-goto-date7848,315421
(defun org-agenda-goto-today ()org-agenda-goto-today7880,316686
(defun org-agenda-find-same-or-today-or-agenda (&optional cnt)org-agenda-find-same-or-today-or-agenda7898,317338
(defun org-agenda-backward-block ()org-agenda-backward-block7907,317764
(defun org-agenda-forward-block (&optional backward)org-agenda-forward-block7912,317896
(defun org-agenda-later (arg)org-agenda-later7939,318943
(defun org-agenda-earlier (arg)org-agenda-earlier7979,320501
(defun org-agenda-view-mode-dispatch ()org-agenda-view-mode-dispatch7985,320692
(defun org-agenda-reset-view ()org-agenda-reset-view8017,322261
(defun org-agenda-day-view (&optional day-of-month)org-agenda-day-view8022,322398
(defun org-agenda-week-view (&optional iso-week)org-agenda-week-view8028,322620
(defun org-agenda-fortnight-view (&optional iso-week)org-agenda-fortnight-view8038,323084
(defun org-agenda-month-view (&optional month)org-agenda-month-view8048,323563
(defun org-agenda-year-view (&optional year)org-agenda-year-view8058,324001
(defun org-agenda-change-time-span (span &optional n)org-agenda-change-time-span8070,324456
(defun org-agenda-compute-starting-span (sd span &optional n)org-agenda-compute-starting-span8091,325304
(defun org-agenda-next-date-line (&optional arg)org-agenda-next-date-line8135,326651
(defun org-agenda-previous-date-line (&optional arg)org-agenda-previous-date-line8147,327131
(defvar org-hl (make-overlay 1 1))org-hl8156,327473
(defun org-highlight (begin end &optional buffer)org-highlight8159,327547
(defun org-unhighlight ()org-unhighlight8163,327699
(defun org-unhighlight-once ()org-unhighlight-once8167,327779
(defvar org-agenda-pre-follow-window-conf nil)org-agenda-pre-follow-window-conf8172,327965
(defun org-agenda-follow-mode ()org-agenda-follow-mode8173,328012
(defun org-agenda-entry-text-mode (&optional arg)org-agenda-entry-text-mode8187,328517
(defun org-agenda-clockreport-mode ()org-agenda-clockreport-mode8209,329407
(defun org-agenda-log-mode (&optional special)org-agenda-log-mode8219,329751
(defun org-agenda-archives-mode (&optional with-files)org-agenda-archives-mode8241,330460
(defun org-agenda-toggle-diary ()org-agenda-toggle-diary8260,331161
(defun org-agenda-toggle-deadlines ()org-agenda-toggle-deadlines8270,331496
(defun org-agenda-toggle-time-grid ()org-agenda-toggle-time-grid8280,331872
(defun org-agenda-set-mode-name ()org-agenda-set-mode-name8290,332199
(defun org-agenda-update-agenda-type ()org-agenda-update-agenda-type8369,334861
(defun org-agenda-next-line ()org-agenda-next-line8375,335099
(defun org-agenda-previous-line ()org-agenda-previous-line8381,335284
(defun org-agenda-next-item (n)org-agenda-next-item8387,335481
(defun org-agenda-previous-item (n)org-agenda-previous-item8398,335842
(defun org-agenda-do-context-action ()org-agenda-do-context-action8410,336199
(defun org-agenda-show-tags ()org-agenda-show-tags8421,336624
(defun org-agenda-goto (&optional highlight)org-agenda-goto8430,336911
(defvar org-agenda-after-show-hook nilorg-agenda-after-show-hook8451,337655
(defun org-agenda-kill ()org-agenda-kill8455,337812
(defvar org-archive-default-command) ; defined in org-archive.elorg-archive-default-command8490,339162
(defun org-agenda-archive-default ()org-agenda-archive-default8491,339227
(defun org-agenda-archive-default-with-confirmation ()org-agenda-archive-default-with-confirmation8497,339435
(defun org-agenda-archive ()org-agenda-archive8503,339670
(defun org-agenda-archive-to-archive-sibling ()org-agenda-archive-to-archive-sibling8508,339838
(defun org-agenda-archive-with (cmd &optional confirm)org-agenda-archive-with8513,340007
(defun org-remove-subtree-entries-from-agenda (&optional buf beg end)org-remove-subtree-entries-from-agenda8536,340798
(defun org-agenda-refile (&optional goto rfloc no-update)org-agenda-refile8561,341698
(defun org-agenda-open-link (&optional arg)org-agenda-open-link8599,342900
(defun org-agenda-copy-local-variable (var)org-agenda-copy-local-variable8641,344431
(defun org-agenda-switch-to (&optional delete-other-windows)org-agenda-switch-to8649,344745
(defun org-agenda-goto-mouse (ev)org-agenda-goto-mouse8671,345628
(defun org-agenda-show (&optional full-entry)org-agenda-show8677,345794
(defvar org-agenda-show-window nil)org-agenda-show-window8687,346138
(defun org-agenda-show-and-scroll-up (&optional arg)org-agenda-show-and-scroll-up8688,346174
(defun org-agenda-show-scroll-down ()org-agenda-show-scroll-down8713,347007
(defun org-agenda-show-1 (&optional more)org-agenda-show-18722,347301
(defvar org-agenda-cycle-counter nil)org-agenda-cycle-counter8772,348911
(defun org-agenda-cycle-show (&optional n)org-agenda-cycle-show8773,348949
(defun org-agenda-recenter (arg)org-agenda-recenter8797,349859
(defun org-agenda-show-mouse (ev)org-agenda-show-mouse8805,350087
(defun org-agenda-check-no-diary ()org-agenda-check-no-diary8811,350255
(defun org-agenda-error ()org-agenda-error8816,350422
(defun org-agenda-tree-to-indirect-buffer (arg)org-agenda-tree-to-indirect-buffer8820,350565
(defun org-agenda-do-tree-to-indirect-buffer (arg)org-agenda-do-tree-to-indirect-buffer8850,351929
(defvar org-last-heading-marker (make-marker)org-last-heading-marker8862,352339
(defun org-agenda-todo-nextset ()org-agenda-todo-nextset8866,352493
(defun org-agenda-todo-previousset ()org-agenda-todo-previousset8871,352614
(defun org-agenda-todo (&optional arg)org-agenda-todo8876,352747
(defun org-agenda-add-note (&optional arg)org-agenda-add-note8920,354371
(defun org-agenda-change-all-lines (newhead hdmarkerorg-agenda-change-all-lines8936,354856
(defun org-agenda-align-tags (&optional line)org-agenda-align-tags9005,357578
(defun org-agenda-priority-up ()org-agenda-priority-up9040,358902
(defun org-agenda-priority-down ()org-agenda-priority-down9045,359043
(defun org-agenda-priority (&optional force-direction)org-agenda-priority9050,359188
(defun org-agenda-set-tags (&optional tag onoff)org-agenda-set-tags9081,360347
(defun org-agenda-set-property ()org-agenda-set-property9106,361145
(defun org-agenda-set-effort ()org-agenda-set-effort9123,361627
(defun org-agenda-toggle-archive-tag ()org-agenda-toggle-archive-tag9143,362218
(defun org-agenda-do-date-later (arg)org-agenda-do-date-later9164,362863
(defun org-agenda-do-date-earlier (arg)org-agenda-do-date-earlier9180,363413
(defun org-agenda-date-later (arg &optional what)org-agenda-date-later9196,363975
(defun org-agenda-date-earlier (arg &optional what)org-agenda-date-earlier9232,365399
(defun org-agenda-date-later-minutes (arg)org-agenda-date-later-minutes9237,365568
(defun org-agenda-date-earlier-minutes (arg)org-agenda-date-earlier-minutes9243,365812
(defun org-agenda-date-later-hours (arg)org-agenda-date-later-hours9249,366060
(defun org-agenda-date-earlier-hours (arg)org-agenda-date-earlier-hours9254,366208
(defun org-agenda-show-new-time (marker stamp &optional prefix)org-agenda-show-new-time9259,366360
(defun org-agenda-date-prompt (arg)org-agenda-date-prompt9277,367075
(defun org-agenda-schedule (arg &optional time)org-agenda-schedule9297,367921
(defun org-agenda-deadline (arg &optional time)org-agenda-deadline9318,368583
(defun org-agenda-clock-in (&optional arg)org-agenda-clock-in9337,369164
(defun org-agenda-clock-out ()org-agenda-clock-out9359,369879
(defun org-agenda-clock-cancel (&optional arg)org-agenda-clock-cancel9378,370536
(defun org-agenda-clock-goto ()org-agenda-clock-goto9386,370806
(defun org-agenda-diary-entry-in-org-file ()org-agenda-diary-entry-in-org-file9403,371517
(defcustom org-agenda-insert-diary-strategy 'date-treeorg-agenda-insert-diary-strategy9445,373432
(defcustom org-agenda-insert-diary-extract-time nilorg-agenda-insert-diary-extract-time9458,373955
(defcustom org-agenda-bulk-mark-char ">"org-agenda-bulk-mark-char9464,374136
(defun org-agenda-add-entry-to-org-agenda-diary-file (type text &optional d1 d2)org-agenda-add-entry-to-org-agenda-diary-file9470,374293
(defun org-agenda-insert-diary-as-top-level (text)org-agenda-insert-diary-as-top-level9547,377370
(defun org-agenda-insert-diary-make-new-entry (text)org-agenda-insert-diary-make-new-entry9560,377816
(defun org-agenda-diary-entry ()org-agenda-diary-entry9584,378694
(defun org-agenda-execute-calendar-command (cmd)org-agenda-execute-calendar-command9630,380568
(defun org-agenda-phases-of-moon ()org-agenda-phases-of-moon9652,381413
(defun org-agenda-holidays ()org-agenda-holidays9657,381606
(defvar calendar-longitude)      ; defined in calendar.elcalendar-longitude9662,381784
(defvar calendar-latitude)       ; defined in calendar.elcalendar-latitude9663,381842
(defvar calendar-location-name)  ; defined in calendar.elcalendar-location-name9664,381900
(defun org-agenda-sunrise-sunset (arg)org-agenda-sunrise-sunset9666,381959
(defun org-agenda-goto-calendar ()org-agenda-goto-calendar9679,382543
(defun org-calendar-goto-agenda ()org-calendar-goto-agenda9693,383052
(defun org-agenda-convert-date ()org-agenda-convert-date9705,383524
(defun org-agenda-bulk-marked-p ()org-agenda-bulk-marked-p9735,384913
(defun org-agenda-bulk-mark (&optional arg)org-agenda-bulk-mark9740,385088
(defun org-agenda-bulk-mark-all ()org-agenda-bulk-mark-all9776,386412
(defun org-agenda-bulk-mark-regexp (regexp)org-agenda-bulk-mark-regexp9781,386553
(defun org-agenda-bulk-unmark (&optional arg)org-agenda-bulk-unmark9799,387277
(defun org-agenda-bulk-toggle-all ()org-agenda-bulk-toggle-all9820,388060
(defun org-agenda-bulk-toggle ()org-agenda-bulk-toggle9829,388330
(defun org-agenda-bulk-remove-overlays (&optional beg end)org-agenda-bulk-remove-overlays9836,388519
(defun org-agenda-bulk-unmark-all ()org-agenda-bulk-unmark-all9848,388995
(defcustom org-agenda-persistent-marks nilorg-agenda-persistent-marks9857,389330
(defun org-agenda-bulk-action (&optional arg)org-agenda-bulk-action9865,389581
(defun org-agenda-capture (&optional with-time)org-agenda-capture10057,396061
(defun org-agenda-reapply-filters ()org-agenda-reapply-filters10070,396548
(defun org-agenda-drag-line-forward (arg &optional backward)org-agenda-drag-line-forward10083,397111
(defun org-agenda-drag-line-backward (arg)org-agenda-drag-line-backward10105,397944
(defun org-agenda-show-the-flagging-note ()org-agenda-show-the-flagging-note10112,398115
(defun org-agenda-remove-flag (marker)org-agenda-remove-flag10145,399346
(defun org-agenda-get-any-marker (&optional pos)org-agenda-get-any-marker10155,399704
(defvar appt-time-msg-list) ; defined in appt.elappt-time-msg-list10161,399910
(defun org-agenda-to-appt (&optional refresh filter &rest args)org-agenda-to-appt10164,399975
(defun org-agenda-today-p (date)org-agenda-today-p10257,404100
(defun org-agenda-todo-yesterday (&optional arg)org-agenda-todo-yesterday10266,404466

elpa/org-plus-contrib-20191021/ob-mathomatic.el,840
(defvar org-babel-tangle-lang-exts)org-babel-tangle-lang-exts40,1253
(defvar org-babel-default-header-args:mathomatic '())org-babel-default-header-args:mathomatic43,1357
(defcustom org-babel-mathomatic-commandorg-babel-mathomatic-command45,1412
(defun org-babel-mathomatic-expand (body params)org-babel-mathomatic-expand50,1592
(defun org-babel-execute:mathomatic (body params)org-babel-execute:mathomatic84,2711
(defun org-babel-prep-session:mathomatic (session params)org-babel-prep-session:mathomatic117,4057
(defun org-babel-mathomatic-var-to-mathomatic (pair)org-babel-mathomatic-var-to-mathomatic120,4166
(defun org-babel-mathomatic-graphical-output-file (params)org-babel-mathomatic-graphical-output-file132,4580
(defun org-babel-mathomatic-elisp-to-mathomatic (val)org-babel-mathomatic-elisp-to-mathomatic137,4804

elpa/org-plus-contrib-20191021/ob-csharp.el,395
(defvar org-babel-tangle-lang-exts)org-babel-tangle-lang-exts32,1136
(defcustom org-babel-csharp-command "mono"org-babel-csharp-command35,1234
(defcustom org-babel-csharp-compiler "mcs"org-babel-csharp-compiler44,1506
(defun org-babel-execute:csharp (body params)org-babel-execute:csharp53,1781
(defun org-babel-prep-session:csharp (session params)org-babel-prep-session:csharp75,2869

elpa/org-plus-contrib-20191021/org-tempo.el,740
(defvar org-structure-template-alist)org-structure-template-alist45,1595
(defgroup org-tempo nilorg-tempo48,1636
(defvar org-tempo-tags nilorg-tempo-tags53,1741
(defcustom org-tempo-keywords-alistorg-tempo-keywords-alist56,1799
(defun org-tempo-setup ()org-tempo-setup79,2448
(defun org-tempo--keys ()org-tempo--keys85,2666
(defun org-tempo--update-maybe ()org-tempo--update-maybe91,2884
(defun org-tempo-add-templates ()org-tempo-add-templates100,3235
(defun org-tempo-add-block (entry)org-tempo-add-block118,4079
(defun org-tempo-add-keyword (entry)org-tempo-add-keyword132,4626
(defun org-tempo-complete-tag (&rest _)org-tempo-complete-tag142,4983
(defun org-tempo--include-file ()org-tempo--include-file155,5421

elpa/org-plus-contrib-20191021/org-mobile.el,4262
(defvar org-agenda-keep-restricted-file-list)org-agenda-keep-restricted-file-list38,1524
(defgroup org-mobile nilorg-mobile42,1582
(defcustom org-mobile-files '(org-agenda-files)org-mobile-files47,1714
(defcustom org-mobile-files-exclude-regexp ""org-mobile-files-exclude-regexp69,2585
(defcustom org-mobile-directory ""org-mobile-directory75,2743
(defcustom org-mobile-allpriorities "A B C"org-mobile-allpriorities80,2896
(defcustom org-mobile-use-encryption nilorg-mobile-use-encryption87,3087
(defcustom org-mobile-encryption-tempfile "~/orgtmpcrypt"org-mobile-encryption-tempfile101,3543
(defcustom org-mobile-encryption-password ""org-mobile-encryption-password109,3876
(defvar org-mobile-encryption-password-session nil)org-mobile-encryption-password-session131,4821
(defun org-mobile-encryption-password ()org-mobile-encryption-password133,4874
(defcustom org-mobile-inbox-for-pull "~/org/from-mobile.org"org-mobile-inbox-for-pull139,5145
(defconst org-mobile-capture-file "mobileorg.org"org-mobile-capture-file148,5555
(defcustom org-mobile-index-file "index.org"org-mobile-index-file152,5754
(defcustom org-mobile-agendas 'allorg-mobile-agendas160,6063
(defcustom org-mobile-force-id-on-agenda-items torg-mobile-force-id-on-agenda-items178,6638
(defcustom org-mobile-force-mobile-change nilorg-mobile-force-mobile-change183,6780
(defcustom org-mobile-checksum-binary (or (executable-find "shasum")org-mobile-checksum-binary201,7454
(defvar org-mobile-pre-push-hook nilorg-mobile-pre-push-hook209,7724
(defvar org-mobile-post-push-hook nilorg-mobile-post-push-hook216,8045
(defvar org-mobile-pre-pull-hook nilorg-mobile-pre-pull-hook223,8385
(defvar org-mobile-post-pull-hook nilorg-mobile-post-pull-hook230,8713
(defconst org-mobile-action-alist '(("edit" . org-mobile-edit))org-mobile-action-alist237,9063
(defvar org-mobile-last-flagged-files nilorg-mobile-last-flagged-files256,9810
(defvar org-mobile-files-alist nil)org-mobile-files-alist259,9919
(defvar org-mobile-checksum-files nil)org-mobile-checksum-files260,9955
(defun org-mobile-prepare-file-lists ()org-mobile-prepare-file-lists262,9995
(defun org-mobile-files-alist ()org-mobile-files-alist266,10133
(defun org-mobile-push ()org-mobile-push315,11873
(defvar org-mobile-before-process-capture-hook nilorg-mobile-before-process-capture-hook350,13309
(defun org-mobile-pull ()org-mobile-pull356,13558
(defun org-mobile-check-setup ()org-mobile-check-setup381,14586
(defun org-mobile-create-index-file ()org-mobile-create-index-file418,16210
(defun org-mobile-copy-agenda-files ()org-mobile-copy-agenda-files471,18630
(defun org-mobile-write-checksums ()org-mobile-write-checksums508,20140
(defun org-mobile-sumo-agenda-command ()org-mobile-sumo-agenda-command520,20638
(defvar org-mobile-creating-agendas nil)org-mobile-creating-agendas597,23456
(defun org-mobile-write-agenda-for-mobile (file)org-mobile-write-agenda-for-mobile598,23497
(defun org-mobile-get-outline-path-link (pom)org-mobile-get-outline-path-link661,25635
(defun org-mobile-escape-olp (s)org-mobile-escape-olp672,25965
(defun org-mobile-create-sumo-agenda ()org-mobile-create-sumo-agenda676,26058
(defun org-mobile-encrypt-and-move (infile outfile)org-mobile-encrypt-and-move697,26775
(defun org-mobile-encrypt-file (infile outfile)org-mobile-encrypt-file707,27200
(defun org-mobile-decrypt-file (infile outfile)org-mobile-decrypt-file716,27606
(defun org-mobile-cleanup-encryption-tempfile ()org-mobile-cleanup-encryption-tempfile725,28015
(defun org-mobile-move-capture ()org-mobile-move-capture731,28270
(defun org-mobile-update-checksum-for-capture-file (buffer-string)org-mobile-update-checksum-for-capture-file772,29790
(defun org-mobile-apply (&optional beg end)org-mobile-apply787,30389
(defun org-mobile-timestamp-buffer (buf)org-mobile-timestamp-buffer910,34546
(defun org-mobile-smart-read ()org-mobile-smart-read927,35102
(defun org-mobile-locate-entry (link)org-mobile-locate-entry959,36532
(defun org-mobile-edit (what old new)org-mobile-edit984,37442
(defun org-mobile-tags-same-p (list1 list2)org-mobile-tags-same-p1107,41737
(defun org-mobile-bodies-same-p (a b)org-mobile-bodies-same-p1112,41894

elpa/org-plus-contrib-20191021/org-plot.el,917
(defvar org-plot/gnuplot-default-optionsorg-plot/gnuplot-default-options41,1365
(defvar org-plot-timestamp-fmt nil)org-plot-timestamp-fmt47,1525
(defun org-plot/add-options-to-plist (p options)org-plot/add-options-to-plist49,1562
(defun org-plot/goto-nearest-table ()org-plot/goto-nearest-table87,2710
(defun org-plot/collect-options (&optional params)org-plot/collect-options94,3005
(defun org-plot-quote-timestamp-field (s)org-plot-quote-timestamp-field104,3410
(defun org-plot-quote-tsv-field (s)org-plot-quote-tsv-field108,3599
(defun org-plot/gnuplot-to-data (table data-file params)org-plot/gnuplot-to-data115,3881
(defun org-plot/gnuplot-to-grid-data (table data-file params)org-plot/gnuplot-to-grid-data130,4348
(defun org-plot/gnuplot-script (data-file num-cols params &optional preface)org-plot/gnuplot-script181,6308
(defun org-plot/gnuplot (&optional params)org-plot/gnuplot273,9756

elpa/org-plus-contrib-20191021/org-feed.el,1884
(defgroup org-feed  nilorg-feed106,4132
(defcustom org-feed-alist nilorg-feed-alist111,4248
(defcustom org-feed-drawer "FEEDSTATUS"org-feed-drawer216,8850
(defcustom org-feed-default-template "\n* %h\n  %U\n  %description\n  %a\n"org-feed-default-template223,9102
(defcustom org-feed-save-after-adding torg-feed-save-after-adding241,9978
(defcustom org-feed-retrieve-method 'url-retrieve-synchronouslyorg-feed-retrieve-method246,10115
(defcustom org-feed-before-adding-hook nilorg-feed-before-adding-hook258,10636
(defcustom org-feed-after-adding-hook nilorg-feed-after-adding-hook265,10863
(defvar org-feed-buffer "*Org feed*"org-feed-buffer272,11088
(defun org-feed-update-all ()org-feed-update-all276,11182
(defun org-feed-update (feed &optional retrieve-only)org-feed-update296,11813
(defun org-feed-goto-inbox (feed)org-feed-goto-inbox428,16323
(defun org-feed-show-raw-feed (feed)org-feed-show-raw-feed440,16755
(defun org-feed-goto-inbox-internal (file heading)org-feed-goto-inbox-internal453,17198
(defun org-feed-read-previous-status (pos drawer)org-feed-read-previous-status468,17654
(defun org-feed-write-status (pos drawer status)org-feed-write-status480,18048
(defun org-feed-add-items (pos entries)org-feed-add-items498,18632
(defun org-feed-format-entry (entry template formatter)org-feed-format-entry514,19172
(defun org-feed-make-indented-block (s n)org-feed-make-indented-block584,21851
(defun org-feed-skip-http-headers (buffer)org-feed-skip-http-headers592,22111
(defun org-feed-get-feed (url)org-feed-get-feed602,22394
(defun org-feed-parse-rss-feed (buffer)org-feed-parse-rss-feed618,23061
(defun org-feed-parse-rss-entry (entry)org-feed-parse-rss-entry641,23884
(defun org-feed-parse-atom-feed (buffer)org-feed-parse-atom-feed657,24511
(defun org-feed-parse-atom-entry (entry)org-feed-parse-atom-entry675,25147

elpa/org-plus-contrib-20191021/org-wikinodes.el,1798
(defgroup org-wikinodes nilorg-wikinodes30,1102
(defconst org-wikinodes-camel-regexp "\\<[A-Z]+[a-z]+[A-Z]+[a-z]+[a-zA-Z]*\\>"org-wikinodes-camel-regexp35,1235
(defcustom org-wikinodes-active torg-wikinodes-active38,1365
(defcustom org-wikinodes-scope 'fileorg-wikinodes-scope44,1559
(defcustom org-wikinodes-create-targets 'queryorg-wikinodes-create-targets55,1946
(defun org-wikinodes-activate-links (limit)org-wikinodes-activate-links75,2648
(defun org-wikinodes-open-at-point ()org-wikinodes-open-at-point98,3424
(defun org-wikinodes-follow-link (target)org-wikinodes-follow-link107,3781
(defvar org-wikinodes-directory-targets-cache nil)org-wikinodes-directory-targets-cache178,6213
(defun org-wikinodes-clear-cache-when-on-target ()org-wikinodes-clear-cache-when-on-target180,6265
(defun org-wikinodes-clear-directory-targets-cache ()org-wikinodes-clear-directory-targets-cache189,6620
(defun org-wikinodes-get-targets ()org-wikinodes-get-targets195,6871
(defun org-wikinodes-get-links-for-directory (dir)org-wikinodes-get-links-for-directory209,7284
(defun org-wikinodes-add-target-to-cache (target &optional file)org-wikinodes-add-target-to-cache225,7926
(defun org-wikinodes-which-file (target &optional directory)org-wikinodes-which-file237,8481
(defvar target)target251,9106
(defvar target-alist)target-alist252,9122
(defvar last-section-target)last-section-target253,9144
(defvar org-export-target-aliases)org-export-target-aliases254,9173
(defun org-wikinodes-set-wiki-targets-during-export (_)org-wikinodes-set-wiki-targets-during-export255,9208
(defun org-wikinodes-process-links-for-export (_)org-wikinodes-process-links-for-export271,9802
(defun org-wikinodes-add-to-font-lock-keywords ()org-wikinodes-add-to-font-lock-keywords316,11408

elpa/org-plus-contrib-20191021/org-rmail.el,413
(defvar rmail-current-message)  ; From rmail.elrmail-current-message41,1632
(defvar rmail-header-style)     ; From rmail.elrmail-header-style42,1680
(defvar rmail-file-name)        ; From rmail.elrmail-file-name43,1728
(defun org-rmail-store-link ()org-rmail-store-link49,1910
(defun org-rmail-open (path)org-rmail-open78,3036
(defun org-rmail-follow-link (folder article)org-rmail-follow-link87,3363

elpa/org-plus-contrib-20191021/ob-dot.el,326
(defvar org-babel-default-header-args:dotorg-babel-default-header-args:dot43,1377
(defun org-babel-expand-body:dot (body params)org-babel-expand-body:dot47,1534
(defun org-babel-execute:dot (body params)org-babel-execute:dot64,1963
(defun org-babel-prep-session:dot (_session _params)org-babel-prep-session:dot84,2814

elpa/org-plus-contrib-20191021/ob-fortran.el,896
(defvar org-babel-tangle-lang-exts)org-babel-tangle-lang-exts38,1203
(defvar org-babel-default-header-args:fortran '())org-babel-default-header-args:fortran41,1303
(defvar org-babel-fortran-compiler "gfortran"org-babel-fortran-compiler43,1355
(defun org-babel-execute:fortran (body params)org-babel-execute:fortran47,1488
(defun org-babel-expand-body:fortran (body params)org-babel-expand-body:fortran78,2895
(defun org-babel-fortran-ensure-main-wrap (body params)org-babel-fortran-ensure-main-wrap107,3937
(defun org-babel-prep-session:fortran (_session _params)org-babel-prep-session:fortran115,4316
(defun org-babel-load-session:fortran (_session _body _params)org-babel-load-session:fortran120,4541
(defun org-babel-fortran-var-to-fortran (pair)org-babel-fortran-var-to-fortran127,4793
(defun org-babel-fortran-transform-list (val)org-babel-fortran-transform-list159,6022

elpa/org-plus-contrib-20191021/org-notify.el,2113
(defgroup org-notify nilorg-notify67,2604
(defcustom org-notify-audible torg-notify-audible72,2705
(defconst org-notify-actionsorg-notify-actions77,2826
(defconst org-notify-window-buffer-name "*org-notify-%s*"org-notify-window-buffer-name82,3010
(defvar org-notify-map nilorg-notify-map85,3131
(defvar org-notify-timer nilorg-notify-timer88,3207
(defvar org-notify-parse-file nilorg-notify-parse-file91,3276
(defvar org-notify-on-action-map nilorg-notify-on-action-map94,3383
(defun org-notify-string->seconds (str)org-notify-string->seconds97,3485
(defun org-notify-convert-deadline (orig)org-notify-convert-deadline111,4129
(defun org-notify-make-todo (heading &rest ignored)org-notify-make-todo119,4384
(defun org-notify-todo-list ()org-notify-todo-list136,5205
(defun org-notify-maybe-too-late (diff period heading)org-notify-maybe-too-late151,5746
(defun org-notify-process ()org-notify-process158,5999
(defun org-notify-add (name &rest params)org-notify-add189,7614
(defun org-notify-start (&optional secs)org-notify-start219,9048
(defun org-notify-stop ()org-notify-stop234,9697
(defun org-notify-on-action (plist key)org-notify-on-action240,9853
(defun org-notify-on-action-notify (id key)org-notify-on-action-notify266,10839
(defun org-notify-on-action-button (button)org-notify-on-action-button271,11050
(defun org-notify-delete-window (buffer)org-notify-delete-window278,11330
(defun org-notify-on-close (id reason)org-notify-on-close285,11515
(defun org-notify-action-message (plist)org-notify-action-message289,11675
(defun org-notify-action-ding (plist)org-notify-action-ding294,11840
(defun org-notify-body-text (plist)org-notify-body-text300,12041
(defun org-notify-action-email (plist)org-notify-action-email311,12436
(defun org-notify-select-highest-window ()org-notify-select-highest-window319,12732
(defun org-notify-action-window (plist)org-notify-action-window336,13574
(defun org-notify-action-notify (plist)org-notify-action-notify370,15359
(defun org-notify-action-notify/window (plist)org-notify-action-notify/window384,15954

elpa/org-plus-contrib-20191021/ob-perl.el,1248
(defvar org-babel-tangle-lang-exts)org-babel-tangle-lang-exts32,1041
(defvar org-babel-default-header-args:perl '())org-babel-default-header-args:perl35,1137
(defvar org-babel-perl-command "perl"org-babel-perl-command37,1186
(defun org-babel-execute:perl (body params)org-babel-execute:perl40,1278
(defun org-babel-prep-session:perl (_session _params)org-babel-prep-session:perl56,2068
(defun org-babel-variable-assignments:perl (params)org-babel-variable-assignments:perl60,2237
(defvar org-babel-perl-var-wrap "q(%s)"org-babel-perl-var-wrap69,2499
(defvar org-babel-perl--lvl)org-babel-perl--lvl72,2592
(defun org-babel-perl--var-to-perl (var &optional varn)org-babel-perl--var-to-perl73,2621
(defvar org-babel-perl-buffers '(:default . nil))org-babel-perl-buffers92,3337
(defun org-babel-perl-initiate-session (&optional _session _params)org-babel-perl-initiate-session94,3388
(defvar org-babel-perl-wrapper-method "{org-babel-perl-wrapper-method98,3523
(defvar org-babel-perl-preface nil)org-babel-perl-preface122,3990
(defvar org-babel-perl-pp-wrapper-methodorg-babel-perl-pp-wrapper-method124,4027
(defun org-babel-perl-evaluate (session ibody &optional result-type result-params)org-babel-perl-evaluate127,4076

elpa/org-plus-contrib-20191021/org-w3m.el,742
(defvar w3m-current-url)w3m-current-url46,1623
(defvar w3m-current-title)w3m-current-title47,1648
(defun org-w3m-store-link ()org-w3m-store-link50,1736
(defun org-w3m-copy-for-org-mode ()org-w3m-copy-for-org-mode59,1991
(defun org-w3m-get-anchor-start ()org-w3m-get-anchor-start114,4720
(defun org-w3m-get-anchor-end ()org-w3m-get-anchor-end120,4978
(defun org-w3m-get-next-link-start ()org-w3m-get-next-link-start126,5204
(defun org-w3m-get-prev-link-start ()org-w3m-get-prev-link-start137,5642
(defun org-w3m-no-next-link-p ()org-w3m-no-next-link-p148,6096
(defun org-w3m-no-prev-link-p ()org-w3m-no-prev-link-p154,6310
(defvar w3m-mode-map)w3m-mode-map161,6568
(defvar w3m-minor-mode-map)w3m-minor-mode-map162,6590

elpa/org-plus-contrib-20191021/org-notmuch.el,668
(defcustom org-notmuch-open-functionorg-notmuch-open-function45,1610
(defcustom org-notmuch-search-open-functionorg-notmuch-search-open-function55,1872
(defun org-notmuch-store-link ()org-notmuch-store-link72,2287
(defun org-notmuch-open (path)org-notmuch-open88,2934
(defun org-notmuch-follow-link (search)org-notmuch-follow-link92,3063
(defun org-notmuch-search-store-link ()org-notmuch-search-store-link105,3390
(defun org-notmuch-search-open (path)org-notmuch-search-open115,3773
(defun org-notmuch-search-follow-link (search)org-notmuch-search-follow-link120,3938
(defun org-notmuch-tree-follow-link (search)org-notmuch-tree-follow-link127,4108

elpa/org-plus-contrib-20191021/org-gnus.el,798
(defvar gnus-newsgroup-name)gnus-newsgroup-name56,2349
(defvar gnus-summary-buffer)gnus-summary-buffer57,2378
(defvar gnus-other-frame-object)gnus-other-frame-object58,2407
(defcustom org-gnus-prefer-web-links nilorg-gnus-prefer-web-links63,2472
(defcustom org-gnus-no-server nilorg-gnus-no-server71,2828
(defun org-gnus-group-link (group)org-gnus-group-link87,3148
(defun org-gnus-article-link (group newsgroups message-id x-no-archive)org-gnus-article-link105,3887
(defun org-gnus-store-link ()org-gnus-store-link126,4869
(defun org-gnus-open-nntp (path)org-gnus-open-nntp207,8371
(defun org-gnus-open (path)org-gnus-open217,8688
(defun org-gnus-follow-link (&optional group article)org-gnus-follow-link225,9027
(defun org-gnus-no-new-news ()org-gnus-no-new-news261,10340

elpa/org-plus-contrib-20191021/ob-lua.el,2235
(defvar org-babel-tangle-lang-exts)org-babel-tangle-lang-exts44,1521
(defvar org-babel-default-header-args:lua '())org-babel-default-header-args:lua47,1617
(defcustom org-babel-lua-command "lua"org-babel-lua-command49,1665
(defcustom org-babel-lua-mode 'lua-modeorg-babel-lua-mode56,1842
(defcustom org-babel-lua-hline-to "None"org-babel-lua-hline-to64,2067
(defcustom org-babel-lua-None-to 'hlineorg-babel-lua-None-to71,2271
(defun org-babel-execute:lua (body params)org-babel-execute:lua78,2462
(defun org-babel-prep-session:lua (session params)org-babel-prep-session:lua101,3480
(defun org-babel-load-session:lua (session body params)org-babel-load-session:lua113,3976
(defun org-babel-variable-assignments:lua (params)org-babel-variable-assignments:lua124,4335
(defun org-babel-lua-var-to-lua (var)org-babel-lua-var-to-lua133,4602
(defun org-babel-lua-table-or-string (results)org-babel-lua-table-or-string154,5424
(defvar org-babel-lua-buffers '((:default . "*Lua*")))org-babel-lua-buffers165,5835
(defun org-babel-lua-session-buffer (session)org-babel-lua-session-buffer167,5891
(defun org-babel-lua-with-earmuffs (session)org-babel-lua-with-earmuffs171,6032
(defun org-babel-lua-without-earmuffs (session)org-babel-lua-without-earmuffs178,6289
(defvar lua-default-interpreter)lua-default-interpreter185,6567
(defvar lua-which-bufname)lua-which-bufname186,6600
(defvar lua-shell-buffer-name)lua-shell-buffer-name187,6627
(defun org-babel-lua-initiate-session-by-key (&optional session)org-babel-lua-initiate-session-by-key188,6658
(defun org-babel-lua-initiate-session (&optional session _params)org-babel-lua-initiate-session223,8330
(defvar org-babel-lua-eoe-indicator "--eoe"org-babel-lua-eoe-indicator230,8643
(defvar org-babel-lua-wrapper-methodorg-babel-lua-wrapper-method233,8745
(defvar org-babel-lua-pp-wrapper-methodorg-babel-lua-pp-wrapper-method242,8868
(defun org-babel-lua-evaluateorg-babel-lua-evaluate275,9543
(defun org-babel-lua-evaluate-external-processorg-babel-lua-evaluate-external-process284,9861
(defun org-babel-lua-evaluate-sessionorg-babel-lua-evaluate-session316,10987
(defun org-babel-lua-read-string (string)org-babel-lua-read-string394,13769

elpa/org-plus-contrib-20191021/ob-arduino.el,424
(defgroup ob-arduino nilob-arduino38,1193
(defcustom ob-arduino:program "arduino"ob-arduino:program42,1267
(defcustom ob-arduino:port "/dev/ttyACM0"ob-arduino:port47,1380
(defcustom ob-arduino:board "arduino:avr:uno"ob-arduino:board52,1487
(defvar org-babel-default-header-args:sclang nil)org-babel-default-header-args:sclang58,1600
(defun org-babel-execute:arduino (body params)org-babel-execute:arduino61,1666

elpa/org-plus-contrib-20191021/ob-julia.el,2152
(defconst org-babel-header-args:juliaorg-babel-header-args:julia42,1670
(defvar org-babel-default-header-args:julia '())org-babel-default-header-args:julia53,2038
(defcustom org-babel-julia-command inferior-julia-program-nameorg-babel-julia-command55,2088
(defvar ess-local-process-name) ; dynamically scopedess-local-process-name62,2294
(defun org-babel-edit-prep:julia (info)org-babel-edit-prep:julia63,2347
(defun org-babel-expand-body:julia (body params &optional graphics-file)org-babel-expand-body:julia68,2583
(defun org-babel-execute:julia (body params)org-babel-execute:julia81,3006
(defun org-babel-prep-session:julia (session params)org-babel-prep-session:julia104,3965
(defun org-babel-load-session:julia (session body params)org-babel-load-session:julia114,4443
(defun org-babel-variable-assignments:julia (params)org-babel-variable-assignments:julia125,4806
(defun org-babel-julia-quote-csv-field (s)org-babel-julia-quote-csv-field143,5447
(defun org-babel-julia-assign-elisp (name value colnames-p rownames-p)org-babel-julia-assign-elisp149,5646
(defvar ess-ask-for-ess-directory) ; dynamically scopedess-ask-for-ess-directory173,6717
(defun org-babel-julia-initiate-session (session params)org-babel-julia-initiate-session175,6774
(defun org-babel-julia-associate-session (session)org-babel-julia-associate-session194,7388
(defun org-babel-julia-graphical-output-file (params)org-babel-julia-graphical-output-file202,7682
(defvar org-babel-julia-eoe-indicator "print(\"org_babel_julia_eoe\")")org-babel-julia-eoe-indicator207,7896
(defvar org-babel-julia-eoe-output "org_babel_julia_eoe")org-babel-julia-eoe-output208,7968
(defvar org-babel-julia-write-object-command "writecsv(\"%s\",%s)")org-babel-julia-write-object-command210,8027
(defun org-babel-julia-evaluateorg-babel-julia-evaluate216,8587
(defun org-babel-julia-evaluate-external-processorg-babel-julia-evaluate-external-process225,8964
(defun org-babel-julia-evaluate-sessionorg-babel-julia-evaluate-session247,9871
(defun org-babel-julia-process-value-result (result column-names-p)org-babel-julia-process-value-result292,11472

elpa/org-plus-contrib-20191021/org-license.el,802
(defvar org-license-images-directory "")org-license-images-directory43,1448
(defun org-license-cc-by (language)org-license-cc-by45,1490
(defun org-license-cc-by-sa (language)org-license-cc-by-sa107,5458
(defun org-license-cc-by-nd (language)org-license-cc-by-nd165,9382
(defun org-license-cc-by-nc (language)org-license-cc-by-nc224,13240
(defun org-license-cc-by-nc-sa (language)org-license-cc-by-nc-sa282,17133
(defun org-license-cc-by-nc-nd (language)org-license-cc-by-nc-nd340,21244
(defun org-license-gfdl (language)org-license-gfdl398,25318
(defun org-license-publicdomain-zero (language)org-license-publicdomain-zero419,26771
(defun org-license-publicdomain-mark (language)org-license-publicdomain-mark432,27552
(defun org-license-print-all ()org-license-print-all445,28347

elpa/org-plus-contrib-20191021/ob-exp.el,870
(defvar org-src-preserve-indentation)org-src-preserve-indentation38,1554
(defcustom org-export-use-babel torg-export-use-babel40,1593
(defmacro org-babel-exp--at-source (&rest body)org-babel-exp--at-source53,2045
(defun org-babel-exp-src-block ()org-babel-exp-src-block69,2754
(defcustom org-babel-exp-call-line-templateorg-babel-exp-call-line-template113,4260
(defun org-babel-exp-process-buffer ()org-babel-exp-process-buffer130,4773
(defun org-babel-exp-do-export (info type &optional hash)org-babel-exp-do-export287,10415
(defcustom org-babel-exp-code-templateorg-babel-exp-code-template304,11256
(defcustom org-babel-exp-inline-code-templateorg-babel-exp-inline-code-template324,12051
(defun org-babel-exp-code (info type)org-babel-exp-code346,12895
(defun org-babel-exp-results (info type &optional silent hash)org-babel-exp-results372,13886

elpa/org-plus-contrib-20191021/org-timer.el,2270
(defvar org-timer-start-time nilorg-timer-start-time43,1548
(defvar org-timer-pause-time nilorg-timer-pause-time46,1614
(defvar org-timer-countdown-timer nilorg-timer-countdown-timer49,1685
(defvar org-timer-countdown-timer-title nilorg-timer-countdown-timer-title55,1882
(defconst org-timer-re "\\([-+]?[0-9]+\\):\\([0-9]\\{2\\}\\):\\([0-9]\\{2\\}\\)"org-timer-re58,1992
(defcustom org-timer-format "%s "org-timer-format61,2126
(defcustom org-timer-default-timer "0"org-timer-default-timer68,2343
(defcustom org-timer-display 'mode-lineorg-timer-display76,2587
(defvar org-timer-start-hook nilorg-timer-start-hook92,3152
(defvar org-timer-stop-hook nilorg-timer-stop-hook95,3233
(defvar org-timer-pause-hook nilorg-timer-pause-hook98,3327
(defvar org-timer-continue-hook nilorg-timer-continue-hook101,3421
(defvar org-timer-set-hook nilorg-timer-set-hook104,3520
(defvar org-timer-done-hook nilorg-timer-done-hook107,3596
(defun org-timer-start (&optional offset)org-timer-start111,3694
(defun org-timer-pause-or-continue (&optional stop)org-timer-pause-or-continue151,5307
(defun org-timer-stop ()org-timer-stop184,6592
(defun org-timer (&optional restart no-insert)org-timer199,7036
(defun org-timer-value-string ()org-timer-value-string221,7844
(defun org-timer-change-times-in-region (beg end delta)org-timer-change-times-in-region230,8143
(defun org-timer-item (&optional arg)org-timer-item256,9051
(defun org-timer-fix-incomplete (hms)org-timer-fix-incomplete281,10015
(defun org-timer-hms-to-secs (hms)org-timer-hms-to-secs292,10512
(defun org-timer-secs-to-hms (s)org-timer-secs-to-hms306,11063
(defvar org-timer-mode-line-timer nil)org-timer-mode-line-timer316,11367
(defvar org-timer-mode-line-string nil)org-timer-mode-line-string317,11406
(defun org-timer-set-mode-line (value)org-timer-set-mode-line319,11447
(defun org-timer-update-mode-line ()org-timer-update-mode-line371,13674
(defun org-timer-show-remaining-time ()org-timer-show-remaining-time379,13925
(defun org-timer-set-timer (&optional opt)org-timer-set-timer393,14426
(defun org-timer--run-countdown-timer (secs title)org-timer--run-countdown-timer453,16898
(defun org-timer--get-timer-title ()org-timer--get-timer-title466,17352

elpa/org-plus-contrib-20191021/ox-icalendar.el,3502
(defgroup org-export-icalendar nilorg-export-icalendar42,1347
(defcustom org-icalendar-combined-agenda-file "~/org.ics"org-icalendar-combined-agenda-file47,1487
(defcustom org-icalendar-alarm-time 0org-icalendar-alarm-time54,1815
(defcustom org-icalendar-combined-name "OrgMode"org-icalendar-combined-name67,2245
(defcustom org-icalendar-combined-description ""org-icalendar-combined-description72,2419
(defcustom org-icalendar-exclude-tags nilorg-icalendar-exclude-tags77,2589
(defcustom org-icalendar-use-deadline '(event-if-not-todo todo-due)org-icalendar-use-deadline85,2882
(defcustom org-icalendar-use-scheduled '(todo-start)org-icalendar-use-scheduled102,3620
(defcustom org-icalendar-categories '(local-tags category)org-icalendar-categories122,4515
(defcustom org-icalendar-with-timestamps 'activeorg-icalendar-with-timestamps138,5178
(defcustom org-icalendar-include-todo nilorg-icalendar-include-todo154,5788
(defcustom org-icalendar-include-bbdb-anniversaries nilorg-icalendar-include-bbdb-anniversaries171,6384
(defcustom org-icalendar-include-sexps torg-icalendar-include-sexps177,6616
(defcustom org-icalendar-include-body torg-icalendar-include-body183,6849
(defcustom org-icalendar-store-UID nilorg-icalendar-store-UID194,7292
(defcustom org-icalendar-timezone (getenv "TZ")org-icalendar-timezone210,8018
(defcustom org-icalendar-date-time-format ":%Y%m%dT%H%M%S"org-icalendar-date-time-format219,8294
(defvar org-icalendar-after-save-hook nilorg-icalendar-after-save-hook237,8981
(defun org-icalendar-create-uid (file &optional bell)org-icalendar-create-uid287,10941
(defun org-icalendar-blocked-headline-p (headline info)org-icalendar-blocked-headline-p304,11506
(defun org-icalendar-use-UTC-date-time-p ()org-icalendar-use-UTC-date-time-p338,12730
(defvar org-agenda-default-appointment-duration) ; From org-agenda.el.org-agenda-default-appointment-duration343,12950
(defun org-icalendar-convert-timestamp (timestamp keyword &optional end tz)org-icalendar-convert-timestamp344,13021
(defun org-icalendar-dtstamp ()org-icalendar-dtstamp409,15723
(defun org-icalendar-get-categories (entry info)org-icalendar-get-categories413,15853
(defun org-icalendar-transcode-diary-sexp (sexp uid summary)org-icalendar-transcode-diary-sexp438,16637
(defun org-icalendar-cleanup-string (s)org-icalendar-cleanup-string452,17232
(defun org-icalendar-fold-string (s)org-icalendar-fold-string462,17545
(defun org-icalendar-clear-blank-lines (headline _back-end _info)org-icalendar-clear-blank-lines488,18389
(defun org-icalendar-entry (entry contents info)org-icalendar-entry509,19081
(defun org-icalendar--veventorg-icalendar--vevent640,24410
(defun org-icalendar--vtodoorg-icalendar--vtodo679,26118
(defun org-icalendar--valarm (entry timestamp summary)org-icalendar--valarm731,28160
(defun org-icalendar-template (contents info)org-icalendar-template762,29197
(defun org-icalendar--vcalendar (name owner tz description contents)org-icalendar--vcalendar781,29928
(defun org-icalendar-export-to-icsorg-icalendar-export-to-ics805,30626
(defun org-icalendar-export-agenda-files (&optional async)org-icalendar-export-agenda-files843,32017
(defun org-icalendar-combine-agenda-files (&optional async)org-icalendar-combine-agenda-files872,33162
(defun org-icalendar-export-current-agenda (file)org-icalendar-export-current-agenda892,33912
(defun org-icalendar--combine-files (&rest files)org-icalendar--combine-files928,35163

elpa/org-plus-contrib-20191021/ob-java.el,293
(defvar org-babel-tangle-lang-exts)org-babel-tangle-lang-exts32,1092
(defcustom org-babel-java-command "java"org-babel-java-command35,1190
(defcustom org-babel-java-compiler "javac"org-babel-java-compiler44,1458
(defun org-babel-execute:java (body params)org-babel-execute:java53,1732

elpa/org-plus-contrib-20191021/ob-matlab.el,0

elpa/org-plus-contrib-20191021/ox-html.el,14667
(defvar htmlize-css-name-prefix)htmlize-css-name-prefix46,1419
(defvar htmlize-output-type)htmlize-output-type47,1452
(defvar htmlize-output-type)htmlize-output-type48,1481
(defvar htmlize-css-name-prefix)htmlize-css-name-prefix49,1510
(defvar org-html-format-table-no-css)org-html-format-table-no-css188,8076
(defvar htmlize-buffer-places)  ; from htmlize.elhtmlize-buffer-places189,8114
(defvar org-html--pre/postamble-class "status"org-html--pre/postamble-class191,8165
(defconst org-html-doctype-alistorg-html-doctype-alist194,8251
(defconst org-html-html5-elementsorg-html-html5-elements215,9371
(defconst org-html-special-string-regexpsorg-html-special-string-regexps224,9700
(defconst org-html-scriptsorg-html-scripts231,9966
(defconst org-html-style-defaultorg-html-style-default280,11688
(defgroup org-export-html nilorg-export-html473,19187
(defvar org-html-infojs-opts-tableorg-html-infojs-opts-table480,19335
(defcustom org-html-use-infojs 'when-configuredorg-html-use-infojs494,19778
(defcustom org-html-infojs-optionsorg-html-infojs-options509,20397
(defcustom org-html-infojs-templateorg-html-infojs-template531,21259
(defun org-html-infojs-install-script (exp-plist _backend)org-html-infojs-install-script602,23871
(defcustom org-html-text-markup-alistorg-html-text-markup-alist687,27181
(defcustom org-html-indent nilorg-html-indent709,27979
(defcustom org-html-format-drawer-function (lambda (_name contents) contents)org-html-format-drawer-function719,28231
(defcustom org-html-footnotes-section "<div id=\"footnotes\">org-html-footnotes-section739,28818
(defcustom org-html-footnote-format "<sup>%s</sup>"org-html-footnote-format752,29220
(defcustom org-html-footnote-separator "<sup>, </sup>"org-html-footnote-separator758,29413
(defcustom org-html-toplevel-hlevel 2org-html-toplevel-hlevel765,29564
(defcustom org-html-format-headline-functionorg-html-format-headline-function776,30092
(defcustom org-html-allow-name-attribute-in-anchors nilorg-html-allow-name-attribute-in-anchors796,30726
(defcustom org-html-format-inlinetask-functionorg-html-format-inlinetask-function807,31049
(defcustom org-html-with-latex org-export-with-latexorg-html-with-latex828,31768
(defcustom org-html-link-org-files-as-html torg-html-link-org-files-as-html854,32662
(defcustom org-html-inline-images torg-html-inline-images868,33232
(defcustom org-html-inline-image-rulesorg-html-inline-image-rules877,33517
(defvar org-html-protect-char-alistorg-html-protect-char-alist893,34121
(defcustom org-html-htmlize-output-type 'inline-cssorg-html-htmlize-output-type901,34307
(defcustom org-html-htmlize-font-prefix "org-"org-html-htmlize-font-prefix921,35426
(defcustom org-html-table-default-attributesorg-html-table-default-attributes928,35597
(defcustom org-html-table-header-tags '("<th scope=\"%s\"%s>" . "</th>")org-html-table-header-tags941,36113
(defcustom org-html-table-data-tags '("<td%s>" . "</td>")org-html-table-data-tags951,36689
(defcustom org-html-table-row-open-tag "<tr>"org-html-table-row-open-tag960,37175
(defcustom org-html-table-row-close-tag "</tr>"org-html-table-row-close-tag993,38491
(defcustom org-html-table-align-individual-fields torg-html-table-align-individual-fields1005,38925
(defcustom org-html-table-use-header-tags-for-first-column nilorg-html-table-use-header-tags-for-first-column1013,39252
(defcustom org-html-table-caption-above torg-html-table-caption-above1019,39470
(defcustom org-html-tag-class-prefix ""org-html-tag-class-prefix1027,39672
(defcustom org-html-extension "html"org-html-extension1038,40082
(defcustom org-html-xml-declarationorg-html-xml-declaration1043,40206
(defcustom org-html-coding-system 'utf-8org-html-coding-system1059,40825
(defcustom org-html-doctype "xhtml-strict"org-html-doctype1067,41036
(defcustom org-html-html5-fancy nilorg-html-html5-fancy1079,41442
(defcustom org-html-container-element "div"org-html-container-element1093,41947
(defcustom org-html-divsorg-html-divs1105,42329
(defconst org-html-checkbox-typesorg-html-checkbox-types1129,43227
(defcustom org-html-checkbox-type 'asciiorg-html-checkbox-type1152,43988
(defcustom org-html-metadata-timestamp-format "%Y-%m-%d %a %H:%M"org-html-metadata-timestamp-format1164,44370
(defcustom org-html-mathjax-optionsorg-html-mathjax-options1174,44691
(defcustom org-html-mathjax-templateorg-html-mathjax-template1252,47937
(defcustom org-html-postamble 'autoorg-html-postamble1281,48867
(defcustom org-html-postamble-formatorg-html-postamble-format1303,49739
(defcustom org-html-validation-linkorg-html-validation-link1333,50790
(defcustom org-html-creator-stringorg-html-creator-string1339,50978
(defcustom org-html-preamble torg-html-preamble1352,51477
(defcustom org-html-preamble-format '(("en" ""))org-html-preamble-format1372,52242
(defcustom org-html-link-up ""org-html-link-up1401,53229
(defcustom org-html-link-home ""org-html-link-home1406,53387
(defcustom org-html-link-use-abs-url nilorg-html-link-use-abs-url1411,53549
(defcustom org-html-home/up-formatorg-html-home/up-format1418,53745
(defcustom org-html-head-include-scripts torg-html-head-include-scripts1434,54221
(defcustom org-html-head-include-default-style torg-html-head-include-default-style1445,54539
(defcustom org-html-head ""org-html-head1457,54982
(defcustom org-html-head-extra ""org-html-head-extra1494,56141
(defcustom org-html-viewport '((width "device-width")org-html-viewport1508,56552
(defcustom org-html-klipsify-src nilorg-html-klipsify-src1556,58201
(defcustom org-html-klipse-cssorg-html-klipse-css1562,58393
(defcustom org-html-klipse-jsorg-html-klipse-js1569,58633
(defcustom org-html-klipse-selection-scriptorg-html-klipse-selection-script1575,58838
(defcustom org-html-todo-kwd-class-prefix ""org-html-todo-kwd-class-prefix1590,59394
(defun org-html-xhtml-p (info)org-html-xhtml-p1602,59821
(defun org-html-html5-p (info)org-html-html5-p1606,59943
(defun org-html--html5-fancy-p (info)org-html--html5-fancy-p1610,60084
(defun org-html-close-tag (tag attr info)org-html-close-tag1616,60316
(defun org-html-doctype (info)org-html-doctype1624,60593
(defun org-html--make-attribute-string (attributes)org-html--make-attribute-string1633,60959
(defun org-html--wrap-image (contents info &optional caption label)org-html--wrap-image1646,61633
(defun org-html--format-image (source attributes info)org-html--format-image1664,62403
(defun org-html--svg-image (source attributes info)org-html--svg-image1684,63142
(defun org-html--textarea-block (element)org-html--textarea-block1707,64190
(defun org-html--has-caption-p (element &optional _info)org-html--has-caption-p1717,64622
(defun org-html-htmlize-region-for-paste (beg end)org-html-htmlize-region-for-paste1726,64975
(defun org-html-htmlize-generate-css ()org-html-htmlize-generate-css1740,65584
(defun org-html--make-string (n string)org-html--make-string1775,67042
(defun org-html-fix-class-name (kwd)	; audit callers of this functionorg-html-fix-class-name1779,67201
(defun org-html-footnote-section (info)org-html-footnote-section1784,67423
(defun org-html--build-meta-info (info)org-html--build-meta-info1824,68726
(defun org-html--build-head (info)org-html--build-head1902,71681
(defun org-html--build-mathjax-config (info)org-html--build-mathjax-config1919,72463
(defun org-html-format-spec (info)org-html-format-spec1939,73424
(defun org-html--build-pre/postamble (type info)org-html--build-pre/postamble1960,74426
(defun org-html-inner-template (contents info)org-html-inner-template2023,76811
(defun org-html-template (contents info)org-html-template2036,77227
(defun org-html--translate (s info)org-html--translate2116,80206
(defun org-html--anchor (id desc attributes info)org-html--anchor2123,80400
(defun org-html--todo (todo info)org-html--todo2133,80747
(defun org-html--priority (priority _info)org-html--priority2144,81057
(defun org-html--tags (tags info)org-html--tags2152,81319
(defun org-html-fontify-code (code lang)org-html-fontify-code2167,81716
(defun org-html-do-format-codeorg-html-do-format-code2223,83854
(defun org-html-format-code (element info)org-html-format-code2258,85116
(defun org-html-toc (depth info &optional scope)org-html-toc2276,85779
(defun org-html--toc-text (toc-entries)org-html--toc-text2304,86871
(defun org-html--format-toc-headline (headline info)org-html--format-toc-headline2328,87683
(defun org-html-list-of-listings (info)org-html-list-of-listings2357,88959
(defun org-html-list-of-tables (info)org-html-list-of-tables2396,90226
(defun org-html-bold (_bold contents info)org-html-bold2440,91513
(defun org-html-center-block (_center-block contents _info)org-html-center-block2449,91795
(defun org-html-clock (clock _contents _info)org-html-clock2457,92074
(defun org-html-code (code _contents info)org-html-code2473,92604
(defun org-html-drawer (drawer contents info)org-html-drawer2482,92913
(defun org-html-dynamic-block (_dynamic-block contents _info)org-html-dynamic-block2492,93239
(defun org-html-entity (entity _contents _info)org-html-entity2500,93498
(defun org-html-example-block (example-block _contents info)org-html-example-block2508,93740
(defun org-html-export-snippet (export-snippet _contents _info)org-html-export-snippet2526,94476
(defun org-html-export-block (export-block _contents _info)org-html-export-block2535,94796
(defun org-html-fixed-width (fixed-width _contents _info)org-html-fixed-width2543,95137
(defun org-html-footnote-reference (footnote-reference _contents info)org-html-footnote-reference2553,95494
(defun org-html-headline (headline contents info)org-html-headline2575,96322
(defun org-html-format-headline-default-functionorg-html-format-headline-default-function2640,99803
(defun org-html--container (headline info)org-html--container2652,100241
(defun org-html-horizontal-rule (_horizontal-rule _contents info)org-html-horizontal-rule2660,100469
(defun org-html-inline-src-block (inline-src-block _contents info)org-html-inline-src-block2667,100722
(defun org-html-inlinetask (inlinetask contents info)org-html-inlinetask2683,101367
(defun org-html-format-inlinetask-default-functionorg-html-format-inlinetask-default-function2699,102191
(defun org-html-italic (_italic contents info)org-html-italic2711,102612
(defun org-html-checkbox (checkbox info)org-html-checkbox2721,102899
(defun org-html-format-list-item (contents type checkbox infoorg-html-format-list-item2729,103185
(defun org-html-item (item contents info)org-html-item2770,104532
(defun org-html-keyword (keyword _contents info)org-html-keyword2785,105106
(defun org-html-format-latex (latex-frag processing-type info)org-html-format-latex2805,105888
(defun org-html--wrap-latex-environment (contents _ &optional caption label)org-html--wrap-latex-environment2840,107347
(defun org-html--math-environment-p (element &optional _)org-html--math-environment-p2854,108008
(defun org-html--unlabel-latex-environment (latex-frag)org-html--unlabel-latex-environment2863,108452
(defun org-html-latex-environment (latex-environment _contents info)org-html-latex-environment2874,108847
(defun org-html-latex-fragment (latex-fragment _contents info)org-html-latex-fragment2910,110417
(defun org-html-line-break (_line-break _contents info)org-html-line-break2927,111160
(defun org-html-image-link-filter (data _backend info)org-html-image-link-filter2934,111398
(defun org-html-inline-image-p (link info)org-html-inline-image-p2937,111527
(defvar org-html-standalone-image-predicate)org-html-standalone-image-predicate2960,112426
(defun org-html-standalone-image-p (element info)org-html-standalone-image-p2961,112471
(defun org-html-link (link desc info)org-html-link2999,113832
(defun org-html-node-property (node-property _contents _info)org-html-node-property3191,121868
(defun org-html-paragraph (paragraph contents info)org-html-paragraph3202,122256
(defun org-html-plain-list (plain-list contents _info)org-html-plain-list3249,124102
(defun org-html-convert-special-strings (string)org-html-convert-special-strings3273,124842
(defun org-html-encode-plain-text (text)org-html-encode-plain-text3280,125102
(defun org-html-plain-text (text info)org-html-plain-text3286,125397
(defun org-html-planning (planning _contents info)org-html-planning3312,126349
(defun org-html-property-drawer (_property-drawer contents _info)org-html-property-drawer3336,127168
(defun org-html-quote-block (quote-block contents _info)org-html-quote-block3345,127500
(defun org-html-section (section contents info)org-html-section3361,128105
(defun org-html-radio-target (radio-target text info)org-html-radio-target3386,129068
(defun org-html-special-block (special-block contents info)org-html-special-block3395,129381
(defun org-html-src-block (src-block _contents info)org-html-src-block3421,130571
(defun org-html-statistics-cookie (statistics-cookie _contents _info)org-html-statistics-cookie3464,132275
(defun org-html-strike-through (_strike-through contents info)org-html-strike-through3472,132610
(defun org-html-subscript (_subscript contents _info)org-html-subscript3483,132949
(defun org-html-superscript (_superscript contents _info)org-html-superscript3491,133199
(defun org-html-table-cell (table-cell contents info)org-html-table-cell3499,133454
(defun org-html-table-row (table-row contents info)org-html-table-row3533,134865
(defun org-html-table-first-row-data-cells (table info)org-html-table-first-row-data-cells3582,136784
(defun org-html-table--table.el-table (table _info)org-html-table--table.el-table3594,137268
(defun org-html-table (table contents info)org-html-table3611,137874
(defun org-html-target (target _contents info)org-html-target3669,140024
(defun org-html-timestamp (timestamp _contents info)org-html-timestamp3678,140298
(defun org-html-underline (_underline contents info)org-html-underline3688,140713
(defun org-html-verbatim (verbatim _contents info)org-html-verbatim3698,141023
(defun org-html-verse-block (_verse-block contents info)org-html-verse-block3707,141357
(defun org-html-final-function (contents _backend info)org-html-final-function3725,142090
(defun org-html-export-as-htmlorg-html-export-as-html3738,142459
(defun org-html-convert-region-to-html ()org-html-convert-region-to-html3774,143672
(defun org-html-export-to-htmlorg-html-export-to-html3783,144001
(defun org-html-publish-to-html (plist filename pub-dir)org-html-publish-to-html3821,145281

elpa/org-plus-contrib-20191021/org-protocol.el,2093
(defvar org-capture-link-is-already-stored)org-capture-link-is-already-stored124,4714
(defvar org-capture-templates)org-capture-templates125,4758
(defgroup org-protocol nilorg-protocol127,4790
(defconst org-protocol-protocol-alist-defaultorg-protocol-protocol-alist-default140,5165
(defconst org-protocol-the-protocol "org-protocol"org-protocol-the-protocol147,5574
(defcustom org-protocol-reverse-list-of-files torg-protocol-reverse-list-of-files156,5989
(defcustom org-protocol-project-alist nilorg-protocol-project-alist165,6388
(defcustom org-protocol-protocol-alist nilorg-protocol-protocol-alist216,8413
(defcustom org-protocol-default-template-key nilorg-protocol-default-template-key267,10648
(defcustom org-protocol-data-separator "/+\\|\\?"org-protocol-data-separator274,10886
(defun org-protocol-sanitize-uri (uri)org-protocol-sanitize-uri284,11130
(defun org-protocol-split-data (data &optional unhexify separator)org-protocol-split-data292,11461
(defun org-protocol-flatten-greedy (param-list &optional strip-path replacement)org-protocol-flatten-greedy305,12137
(defalias 'org-protocol-flattenorg-protocol-flatten351,13791
(defun org-protocol-parse-parameters (info &optional new-style default-order)org-protocol-parse-parameters366,14332
(defun org-protocol-assign-parameters (data default-order)org-protocol-assign-parameters391,15197
(defun org-protocol-store-link (fname)org-protocol-store-link411,15804
(defun org-protocol-capture (info)org-protocol-capture449,17207
(defun org-protocol-convert-query-to-plist (query)org-protocol-convert-query-to-plist510,19526
(defun org-protocol-open-source (fname)org-protocol-open-source518,19829
(defun org-protocol-check-filename-for-protocol (fname restoffiles _client)org-protocol-check-filename-for-protocol585,22559
(defadvice server-visit-files (before org-protocol-detect-protocol-server activate)server-visit-files644,25113
(defun org-protocol-create-for-org ()org-protocol-create-for-org666,26055
(defun org-protocol-create (&optional project-plist)org-protocol-create680,26624

elpa/org-plus-contrib-20191021/ob-asymptote.el,641
(defvar org-babel-tangle-lang-exts)org-babel-tangle-lang-exts47,1528
(defvar org-babel-default-header-args:asymptoteorg-babel-default-header-args:asymptote50,1630
(defun org-babel-execute:asymptote (body params)org-babel-execute:asymptote54,1793
(defun org-babel-prep-session:asymptote (_session _params)org-babel-prep-session:asymptote78,2659
(defun org-babel-variable-assignments:asymptote (params)org-babel-variable-assignments:asymptote83,2865
(defun org-babel-asymptote-var-to-asymptote (pair)org-babel-asymptote-var-to-asymptote88,3079
(defun org-babel-asymptote-define-type (data)org-babel-asymptote-define-type118,4176

elpa/org-plus-contrib-20191021/ob-sclang.el,216
(defgroup ob-sclang nilob-sclang65,2104
(defun org-babel-execute:sclang (body params)org-babel-execute:sclang70,2205
(defvar org-babel-default-header-args:sclang nil)org-babel-default-header-args:sclang77,2460

elpa/org-plus-contrib-20191021/ob-haskell.el,1161
(defvar org-babel-tangle-lang-exts)org-babel-tangle-lang-exts51,1770
(defvar org-babel-default-header-args:haskellorg-babel-default-header-args:haskell54,1869
(defvar org-babel-haskell-lhs2tex-command "lhs2tex")org-babel-haskell-lhs2tex-command57,1941
(defvar org-babel-haskell-eoe "\"org-babel-haskell-eoe\"")org-babel-haskell-eoe59,1995
(defvar haskell-prompt-regexp)haskell-prompt-regexp61,2055
(defun org-babel-execute:haskell (body params)org-babel-execute:haskell63,2087
(defun org-babel-haskell-initiate-session (&optional _session _params)org-babel-haskell-initiate-session99,3731
(defun org-babel-load-session:haskell (session body params)org-babel-load-session:haskell107,4082
(defun org-babel-prep-session:haskell (session params)org-babel-prep-session:haskell117,4479
(defun org-babel-variable-assignments:haskell (params)org-babel-variable-assignments:haskell128,4887
(defun org-babel-haskell-var-to-haskell (var)org-babel-haskell-var-to-haskell136,5171
(defvar org-export-copy-to-kill-ring)org-export-copy-to-kill-ring144,5498
(defun org-babel-haskell-export-to-lhs (&optional arg)org-babel-haskell-export-to-lhs149,5681

elpa/org-plus-contrib-20191021/org-archive.el,1740
(defcustom org-archive-default-command 'org-archive-subtreeorg-archive-default-command38,1379
(defcustom org-archive-reversed-order nilorg-archive-reversed-order46,1620
(defcustom org-archive-sibling-heading "Archive"org-archive-sibling-heading52,1802
(defcustom org-archive-mark-done nilorg-archive-mark-done59,2074
(defcustom org-archive-stamp-time torg-archive-stamp-time69,2441
(defcustom org-archive-file-header-format "\nArchived entries from file %s\n\n"org-archive-file-header-format76,2723
(defcustom org-archive-subtree-add-inherited-tags 'infileorg-archive-subtree-add-inherited-tags85,3060
(defcustom org-archive-save-context-info '(time file olpath category todo itags)org-archive-save-context-info94,3366
(defvar org-archive-hook nilorg-archive-hook124,4746
(defun org-add-archive-files (files)org-add-archive-files131,5031
(defun org-all-archive-files ()org-all-archive-files146,5421
(defun org-archive--compute-location (location)org-archive--compute-location159,5959
(defun org-archive-subtree (&optional find-done)org-archive-subtree179,6779
(defun org-archive-to-archive-sibling ()org-archive-to-archive-sibling388,15303
(defun org-archive-all-done (&optional tag)org-archive-all-done463,17792
(defun org-archive-all-old (&optional tag)org-archive-all-old475,18276
(defun org-archive-all-matches (predicate &optional tag)org-archive-all-matches494,19012
(defun org-toggle-archive-tag (&optional find-done)org-toggle-archive-tag549,20878
(defun org-archive-set-tag ()org-archive-set-tag572,21811
(defun org-archive-subtree-default ()org-archive-subtree-default586,22319
(defun org-archive-subtree-default-with-confirmation ()org-archive-subtree-default-with-confirmation593,22568

elpa/org-plus-contrib-20191021/ob-mathematica.el,875
(defvar org-babel-tangle-lang-exts)org-babel-tangle-lang-exts24,646
(defvar org-babel-default-header-args:mathematica '())org-babel-default-header-args:mathematica27,748
(defvar org-babel-mathematica-command "MathematicaScript -script"org-babel-mathematica-command29,804
(defvar org-babel-mathematica-command-alt "math -noprompt"org-babel-mathematica-command-alt32,928
(defun org-babel-expand-body:mathematica (body params)org-babel-expand-body:mathematica35,1045
(defun org-babel-execute:mathematica (body params)org-babel-execute:mathematica46,1417
(defun org-babel-prep-session:mathematica (session params)org-babel-prep-session:mathematica65,2260
(defun org-babel-prep-session:mathematica (session body params)org-babel-prep-session:mathematica69,2405
(defun org-babel-mathematica-var-to-mathematica (var)org-babel-mathematica-var-to-mathematica73,2555

elpa/org-plus-contrib-20191021/ox-bibtex.el,1387
(defun org-bibtex-get-file (keyword)org-bibtex-get-file99,2903
(defun org-bibtex-get-style (keyword)org-bibtex-get-style108,3237
(defun org-bibtex-get-arguments (keyword)org-bibtex-get-arguments117,3574
(defun org-bibtex-citation-p (object)org-bibtex-citation-p137,4551
(defun org-bibtex-get-citation-key (citation)org-bibtex-get-citation-key144,4823
(defun org-bibtex-file nil "Org-mode file of bibtex entries.")org-bibtex-file157,5285
(defun org-bibtex-goto-citation (&optional citation)org-bibtex-goto-citation159,5349
(defun org-bibtex-process-bib-files (tree backend info)org-bibtex-process-bib-files177,5924
(defun org-bibtex-merge-contiguous-citations (tree backend info)org-bibtex-merge-contiguous-citations282,10166
(defadvice org-latex-keyword (around bibtex-keyword)org-latex-keyword348,12656
(defvar org-bibtex-html-entries-alist nil)  ; Dynamically scoped.org-bibtex-html-entries-alist367,13309
(defvar org-bibtex-html-keywords-alist nil) ; Dynamically scoped.org-bibtex-html-keywords-alist368,13375
(defadvice org-html-keyword (around bibtex-keyword)org-html-keyword373,13457
(defadvice org-html-latex-fragment (around bibtex-citation)org-html-latex-fragment382,13836
(defadvice org-ascii-keyword (around bibtex-keyword)org-ascii-keyword403,14496
(defadvice org-ascii-latex-fragment (around bibtex-citation)org-ascii-latex-fragment412,14878

elpa/org-plus-contrib-20191021/ob-vala.el,332
(defvar org-babel-default-header-args:vala '())org-babel-default-header-args:vala48,1456
(defcustom org-babel-vala-compiler "valac"org-babel-vala-compiler50,1505
(defun org-babel-execute:vala (body params)org-babel-execute:vala74,2417
(defun org-babel-prep-session:vala (_session _params)org-babel-prep-session:vala108,3801

elpa/org-plus-contrib-20191021/ob-calc.el,429
(defvar org-babel-default-header-args:calc nilorg-babel-default-header-args:calc39,1286
(defun org-babel-expand-body:calc (body _params)org-babel-expand-body:calc42,1393
(defvar org--var-syms) ; Dynamically scoped from org-babel-execute:calcorg--var-syms45,1512
(defun org-babel-execute:calc (body params)org-babel-execute:calc47,1585
(defun org-babel-calc-maybe-resolve-var (el)org-babel-calc-maybe-resolve-var96,3479

elpa/org-plus-contrib-20191021/ob-ruby.el,1601
(defvar inf-ruby-default-implementation)inf-ruby-default-implementation45,1510
(defvar inf-ruby-implementations)inf-ruby-implementations46,1551
(defvar org-babel-tangle-lang-exts)org-babel-tangle-lang-exts48,1586
(defvar org-babel-default-header-args:ruby '())org-babel-default-header-args:ruby51,1682
(defvar org-babel-ruby-command "ruby"org-babel-ruby-command53,1731
(defcustom org-babel-ruby-hline-to "nil"org-babel-ruby-hline-to56,1823
(defcustom org-babel-ruby-nil-to 'hlineorg-babel-ruby-nil-to63,2028
(defun org-babel-execute:ruby (body params)org-babel-execute:ruby70,2217
(defun org-babel-prep-session:ruby (session params)org-babel-prep-session:ruby96,3309
(defun org-babel-load-session:ruby (session body params)org-babel-load-session:ruby109,3909
(defun org-babel-variable-assignments:ruby (params)org-babel-variable-assignments:ruby120,4270
(defun org-babel-ruby-var-to-ruby (var)org-babel-ruby-var-to-ruby129,4539
(defun org-babel-ruby-table-or-string (results)org-babel-ruby-table-or-string139,4883
(defun org-babel-ruby-initiate-session (&optional session _params)org-babel-ruby-initiate-session150,5278
(defvar org-babel-ruby-eoe-indicator ":org_babel_ruby_eoe"org-babel-ruby-eoe-indicator167,5956
(defvar org-babel-ruby-f-writeorg-babel-ruby-f-write169,6070
(defvar org-babel-ruby-pp-f-writeorg-babel-ruby-pp-f-write171,6176
(defvar org-babel-ruby-wrapper-methodorg-babel-ruby-wrapper-method173,6285
(defvar org-babel-ruby-pp-wrapper-methodorg-babel-ruby-pp-wrapper-method181,6456
(defun org-babel-ruby-evaluateorg-babel-ruby-evaluate194,6612

elpa/org-plus-contrib-20191021/ob-org.el,400
(defvar org-babel-default-header-args:orgorg-babel-default-header-args:org35,1194
(defvar org-babel-org-default-headerorg-babel-org-default-header39,1347
(defun org-babel-expand-body:org (body params)org-babel-expand-body:org43,1479
(defun org-babel-execute:org (body params)org-babel-execute:org51,1712
(defun org-babel-prep-session:org (_session _params)org-babel-prep-session:org64,2300

elpa/org-plus-contrib-20191021/ob-hledger.el,269
(defvar org-babel-default-header-args:hledgerorg-babel-default-header-args:hledger36,1303
(defun org-babel-execute:hledger (body params)org-babel-execute:hledger40,1489
(defun org-babel-prep-session:hledger (_session _params)org-babel-prep-session:hledger62,2491

elpa/org-plus-contrib-20191021/org-habit.el,2361
(defgroup org-habit nilorg-habit35,1169
(defcustom org-habit-graph-column 40org-habit-graph-column40,1288
(defcustom org-habit-preceding-days 21org-habit-preceding-days46,1506
(defcustom org-habit-following-days 7org-habit-following-days51,1649
(defcustom org-habit-show-habits torg-habit-show-habits56,1790
(defcustom org-habit-show-habits-only-for-today torg-habit-show-habits-only-for-today61,1911
(defcustom org-habit-show-all-today nilorg-habit-show-all-today68,2180
(defcustom org-habit-today-glyph ?!org-habit-today-glyph74,2372
(defcustom org-habit-completed-glyph ?*org-habit-completed-glyph80,2511
(defcustom org-habit-show-done-always-green nilorg-habit-show-done-always-green86,2684
(defface org-habit-clear-faceorg-habit-clear-face92,2903
(defface org-habit-clear-future-faceorg-habit-clear-future-face98,3130
(defface org-habit-ready-faceorg-habit-ready-face105,3380
(defface org-habit-ready-future-faceorg-habit-ready-future-face111,3616
(defface org-habit-alert-faceorg-habit-alert-face118,3858
(defface org-habit-alert-future-faceorg-habit-alert-future-face124,4070
(defface org-habit-overdue-faceorg-habit-overdue-face131,4299
(defface org-habit-overdue-future-faceorg-habit-overdue-future-face137,4522
(defun org-habit-duration-to-days (ts)org-habit-duration-to-days144,4751
(defun org-is-habit-p (&optional pom)org-is-habit-p153,5085
(defun org-habit-parse-todo (&optional pom)org-habit-parse-todo157,5227
(defsubst org-habit-scheduled (habit)org-habit-scheduled229,8187
(defsubst org-habit-scheduled-repeat (habit)org-habit-scheduled-repeat231,8242
(defsubst org-habit-deadline (habit)org-habit-deadline233,8304
(defsubst org-habit-deadline-repeat (habit)org-habit-deadline-repeat240,8531
(defsubst org-habit-done-dates (habit)org-habit-done-dates243,8638
(defsubst org-habit-repeat-type (habit)org-habit-repeat-type245,8694
(defsubst org-habit-get-priority (habit &optional moment)org-habit-get-priority248,8752
(defun org-habit-get-faces (habit &optional now-days scheduled-days donep)org-habit-get-faces270,9594
(defun org-habit-build-graph (habit starting current ending)org-habit-build-graph305,11258
(defun org-habit-insert-consistency-graphs (&optional line)org-habit-insert-consistency-graphs405,14697
(defun org-habit-toggle-habits ()org-habit-toggle-habits428,15545

elpa/org-plus-contrib-20191021/ob-oz.el,1009
(defvar org-babel-oz-server-dirorg-babel-oz-server-dir120,5289
(defvar org-babel-oz-port 6001org-babel-oz-port131,5609
(defvar org-babel-oz-OPI-socket nilorg-babel-oz-OPI-socket133,5686
(defvar org-babel-oz-collected-result nilorg-babel-oz-collected-result136,5763
(defun org-babel-oz-filter (proc string)org-babel-oz-filter138,5888
(defun org-babel-oz-create-socket ()org-babel-oz-create-socket145,6127
(defun oz-send-string-expression (string &optional wait-time)oz-send-string-expression167,7054
(defun org-babel-expand-body:oz (body params)org-babel-expand-body:oz199,8528
(defun org-babel-execute:oz (body params)org-babel-execute:oz214,9023
(defun org-babel-prep-session:oz (session params)org-babel-prep-session:oz237,10111
(defun org-babel-oz-initiate-session (&optional session params)org-babel-oz-initiate-session267,11389
(defun org-babel-oz-var-to-oz (var)org-babel-oz-var-to-oz276,11742
(defun org-babel-oz-table-or-string (results)org-babel-oz-table-or-string287,12074

elpa/org-plus-contrib-20191021/ob-ref.el,600
(defvar org-babel-update-intermediate nilorg-babel-update-intermediate68,2450
(defun org-babel-ref-parse (assignment)org-babel-ref-parse71,2574
(defun org-babel-ref-goto-headline-id (id)org-babel-ref-goto-headline-id97,3619
(defun org-babel-ref-headline-body ()org-babel-ref-headline-body110,4017
(defvar org-babel-library-of-babel)org-babel-library-of-babel119,4237
(defun org-babel-ref-resolve (ref)org-babel-ref-resolve120,4273
(defun org-babel-ref-index-list (index lis)org-babel-ref-index-list200,7402
(defun org-babel-ref-split-args (arg-string)org-babel-ref-split-args239,9035

elpa/org-plus-contrib-20191021/ob-shen.el,323
(defvar org-babel-default-header-args:shen '()org-babel-default-header-args:shen41,1427
(defun org-babel-expand-body:shen (body params)org-babel-expand-body:shen44,1527
(defun org-babel-shen-var-to-shen (var)org-babel-shen-var-to-shen56,1903
(defun org-babel-execute:shen (body params)org-babel-execute:shen62,2096

elpa/org-plus-contrib-20191021/ob-stata.el,2174
(defconst org-babel-header-args:stataorg-babel-header-args:stata54,2009
(defvar org-babel-default-header-args:stata '((:results . "output")))org-babel-default-header-args:stata68,2590
(defcustom org-babel-stata-command inferior-STA-program-nameorg-babel-stata-command70,2661
(defvar ess-local-process-name) ; dynamically scopedess-local-process-name77,2865
(defun org-babel-edit-prep:stata (info)org-babel-edit-prep:stata78,2918
(defun org-babel-expand-body:stata (body params &optional graphics-file)org-babel-expand-body:stata83,3154
(defun org-babel-execute:stata (body params)org-babel-execute:stata96,3577
(defun org-babel-prep-session:stata (session params)org-babel-prep-session:stata119,4536
(defun org-babel-load-session:stata (session body params)org-babel-load-session:stata129,5014
(defun org-babel-variable-assignments:stata (params)org-babel-variable-assignments:stata140,5377
(defun org-babel-stata-quote-csv-field (s)org-babel-stata-quote-csv-field158,6018
(defun org-babel-stata-assign-elisp (name value colnames-p rownames-p)org-babel-stata-assign-elisp164,6217
(defvar ess-ask-for-ess-directory) ; dynamically scopedess-ask-for-ess-directory188,7298
(defun org-babel-stata-initiate-session (session params)org-babel-stata-initiate-session190,7355
(defun org-babel-stata-associate-session (session)org-babel-stata-associate-session209,7969
(defun org-babel-stata-graphical-output-file (params)org-babel-stata-graphical-output-file217,8263
(defvar org-babel-stata-eoe-indicator "display \"org_babel_stata_eoe\"")org-babel-stata-eoe-indicator222,8477
(defvar org-babel-stata-eoe-output "org_babel_stata_eoe")org-babel-stata-eoe-output223,8550
(defvar org-babel-stata-write-object-command "outsheet using \"%s\"")org-babel-stata-write-object-command225,8609
(defun org-babel-stata-evaluateorg-babel-stata-evaluate227,8680
(defun org-babel-stata-evaluate-external-processorg-babel-stata-evaluate-external-process236,9057
(defun org-babel-stata-evaluate-sessionorg-babel-stata-evaluate-session258,9964
(defun org-babel-stata-process-value-result (result column-names-p)org-babel-stata-process-value-result303,11565

elpa/org-plus-contrib-20191021/ob-lilypond.el,3581
(defalias 'lilypond-mode 'LilyPond-mode)lilypond-mode39,1378
(defvar org-babel-default-header-args:lilypond '()org-babel-default-header-args:lilypond43,1484
(defvar org-babel-lilypond-compile-post-tangle torg-babel-lilypond-compile-post-tangle48,1695
(defvar org-babel-lilypond-display-pdf-post-tangle torg-babel-lilypond-display-pdf-post-tangle55,2019
(defvar org-babel-lilypond-play-midi-post-tangle torg-babel-lilypond-play-midi-post-tangle61,2323
(defvar org-babel-lilypond-ly-command ""org-babel-lilypond-ly-command67,2621
(defvar org-babel-lilypond-pdf-command ""org-babel-lilypond-pdf-command70,2785
(defvar org-babel-lilypond-midi-command ""org-babel-lilypond-midi-command73,2949
(defcustom org-babel-lilypond-commandsorg-babel-lilypond-commands76,3115
(defvar org-babel-lilypond-gen-png nilorg-babel-lilypond-gen-png103,4059
(defvar org-babel-lilypond-gen-svg nilorg-babel-lilypond-gen-svg106,4166
(defvar org-babel-lilypond-gen-html nilorg-babel-lilypond-gen-html109,4276
(defvar org-babel-lilypond-gen-pdf nilorg-babel-lilypond-gen-pdf112,4377
(defvar org-babel-lilypond-use-eps nilorg-babel-lilypond-use-eps115,4479
(defvar org-babel-lilypond-arrange-mode nilorg-babel-lilypond-arrange-mode118,4576
(defun org-babel-expand-body:lilypond (body params)org-babel-expand-body:lilypond126,4857
(defun org-babel-execute:lilypond (body params)org-babel-execute:lilypond141,5283
(defun org-babel-lilypond-tangle ()org-babel-lilypond-tangle152,5811
(defun org-babel-lilypond-process-basic (body params)org-babel-lilypond-process-basic160,6118
(defun org-babel-prep-session:lilypond (_session _params)org-babel-prep-session:lilypond186,6855
(defun org-babel-lilypond-execute-tangled-ly ()org-babel-lilypond-execute-tangled-ly190,7053
(defun org-babel-lilypond-compile-lilyfile (file-name &optional test)org-babel-lilypond-compile-lilyfile214,8285
(defun org-babel-lilypond-check-for-compile-error (file-name &optional test)org-babel-lilypond-check-for-compile-error236,9327
(defun org-babel-lilypond-process-compile-error (file-name)org-babel-lilypond-process-compile-error249,9842
(defun org-babel-lilypond-mark-error-line (file-name line)org-babel-lilypond-mark-error-line257,10246
(defun org-babel-lilypond-parse-line-num (&optional buffer)org-babel-lilypond-parse-line-num274,10834
(defun org-babel-lilypond-parse-error-line (file-name lineNo)org-babel-lilypond-parse-error-line290,11330
(defun org-babel-lilypond-attempt-to-open-pdf (file-name &optional test)org-babel-lilypond-attempt-to-open-pdf304,11802
(defun org-babel-lilypond-attempt-to-play-midi (file-name &optional test)org-babel-lilypond-attempt-to-play-midi322,12528
(defun org-babel-lilypond-toggle-midi-play ()org-babel-lilypond-toggle-midi-play340,13298
(defun org-babel-lilypond-toggle-pdf-display ()org-babel-lilypond-toggle-pdf-display349,13708
(defun org-babel-lilypond-toggle-png-generation ()org-babel-lilypond-toggle-png-generation358,14130
(defun org-babel-lilypond-toggle-html-generation ()org-babel-lilypond-toggle-html-generation365,14459
(defun org-babel-lilypond-toggle-pdf-generation ()org-babel-lilypond-toggle-pdf-generation372,14782
(defun org-babel-lilypond-toggle-arrange-mode ()org-babel-lilypond-toggle-arrange-mode379,15099
(defun org-babel-lilypond-switch-extension (file-name ext)org-babel-lilypond-switch-extension387,15428
(defun org-babel-lilypond-get-header-args (mode)org-babel-lilypond-get-header-args392,15618
(defun org-babel-lilypond-set-header-args (mode)org-babel-lilypond-set-header-args405,16048

elpa/org-plus-contrib-20191021/org-expiry.el,1719
(defgroup org-expiry nilorg-expiry79,2696
(defcustom org-expiry-inactive-timestamps nilorg-expiry-inactive-timestamps84,2781
(defcustom org-expiry-created-property-name "CREATED"org-expiry-created-property-name89,2930
(defcustom org-expiry-expiry-property-name "EXPIRY"org-expiry-expiry-property-name94,3083
(defcustom org-expiry-keyword "EXPIRED"org-expiry-keyword99,3238
(defcustom org-expiry-wait "+1y"org-expiry-wait104,3371
(defcustom org-expiry-created-date "+0d"org-expiry-created-date116,3859
(defcustom org-expiry-handler-function 'org-toggle-archive-tagorg-expiry-handler-function130,4381
(defcustom org-expiry-confirm-flag torg-expiry-confirm-flag140,4649
(defcustom org-expiry-advised-functionsorg-expiry-advised-functions149,4955
(defadvice org-schedule (after org-schedule-update-created)org-schedule159,5263
(defadvice org-deadline (after org-deadline-update-created)org-deadline163,5422
(defadvice org-time-stamp (after org-time-stamp-update-created)org-time-stamp167,5581
(defun org-expiry-insinuate (&optional arg)org-expiry-insinuate171,5746
(defun org-expiry-deinsinuate (&optional arg)org-expiry-deinsinuate192,6585
(defun org-expiry-expired-p ()org-expiry-expired-p215,7483
(defun org-expiry-process-entry (&optional force)org-expiry-process-entry236,8324
(defun org-expiry-process-entries (beg end)org-expiry-process-entries259,9200
(defun org-expiry-insert-created (&optional arg)org-expiry-insert-created285,10082
(defun org-expiry-insert-expiry (&optional today)org-expiry-insert-expiry312,11183
(defun org-expiry-archive-subtree ()org-expiry-archive-subtree336,12048
(defun org-expiry-add-keyword (&optional keyword)org-expiry-add-keyword345,12313

elpa/org-plus-contrib-20191021/ob-sed.el,368
(defvar org-babel-sed-command "sed"org-babel-sed-command46,1536
(defvar org-babel-tangle-lang-exts)org-babel-tangle-lang-exts49,1614
(defconst org-babel-header-args:sedorg-babel-header-args:sed52,1710
(defvar org-babel-default-header-args:sed '()org-babel-default-header-args:sed57,1830
(defun org-babel-execute:sed (body params)org-babel-execute:sed60,1935

elpa/org-plus-contrib-20191021/ob.el,0

elpa/org-plus-contrib-20191021/ox.el,23632
(defvar org-publish-project-alist)org-publish-project-alist87,3500
(defvar org-table-number-fraction)org-table-number-fraction88,3535
(defvar org-table-number-regexp)org-table-number-regexp89,3570
(defconst org-export-max-depth 19org-export-max-depth98,3825
(defconst org-export-options-alistorg-export-options-alist101,3919
(defconst org-export-special-keywords '("FILETAGS" "SETUPFILE" "OPTIONS")org-export-special-keywords174,7641
(defconst org-export-filters-alistorg-export-filters-alist180,7933
(defconst org-export-default-inline-image-ruleorg-export-default-inline-image-rule247,12027
(defconst org-export-ignored-local-variablesorg-export-ignored-local-variables261,12598
(defvar org-export-async-debug nilorg-export-async-debug271,13106
(defvar org-export-stack-contents nilorg-export-stack-contents281,13473
(defvar org-export-registered-backends nilorg-export-registered-backends290,13895
(defvar org-export-dispatch-last-action nilorg-export-dispatch-last-action295,14103
(defvar org-export-dispatch-last-position (make-marker)org-export-dispatch-last-position300,14300
(defvar org-export-current-backend nilorg-export-current-backend306,14623
(defgroup org-export nilorg-export326,15255
(defgroup org-export-general nilorg-export-general331,15358
(defcustom org-export-with-archived-trees 'headlineorg-export-with-archived-trees336,15481
(defcustom org-export-with-author torg-export-with-author353,16075
(defcustom org-export-with-clocks nilorg-export-with-clocks361,16314
(defcustom org-export-with-creator nilorg-export-with-creator369,16528
(defcustom org-export-with-date torg-export-with-date383,16897
(defcustom org-export-date-timestamp-format nilorg-export-date-timestamp-format391,17127
(defcustom org-export-creator-stringorg-export-creator-string405,17603
(defcustom org-export-with-drawers '(not "LOGBOOK")org-export-with-drawers415,17953
(defcustom org-export-with-email nilorg-export-with-email442,18850
(defcustom org-export-with-emphasize torg-export-with-emphasize450,19088
(defcustom org-export-exclude-tags '("noexport")org-export-exclude-tags463,19470
(defcustom org-export-with-fixed-width torg-export-with-fixed-width475,19934
(defcustom org-export-with-footnotes torg-export-with-footnotes485,20216
(defcustom org-export-with-latex torg-export-with-latex493,20444
(defcustom org-export-headline-levels 3org-export-headline-levels511,21047
(defcustom org-export-default-language "en"org-export-default-language523,21395
(defcustom org-export-preserve-breaks nilorg-export-preserve-breaks533,21787
(defcustom org-export-with-entities torg-export-with-entities541,22025
(defcustom org-export-with-inlinetasks torg-export-with-inlinetasks556,22434
(defcustom org-export-with-planning nilorg-export-with-planning566,22719
(defcustom org-export-with-priority nilorg-export-with-priority580,23113
(defcustom org-export-with-properties nilorg-export-with-properties588,23344
(defcustom org-export-with-section-numbers torg-export-with-section-numbers607,23932
(defcustom org-export-select-tags '("export")org-export-select-tags619,24296
(defcustom org-export-with-smart-quotes nilorg-export-with-smart-quotes632,24819
(defcustom org-export-with-special-strings torg-export-with-special-strings648,25311
(defcustom org-export-with-statistics-cookies torg-export-with-statistics-cookies666,25832
(defcustom org-export-with-sub-superscripts torg-export-with-sub-superscripts676,26127
(defcustom org-export-with-toc torg-export-with-toc714,27680
(defcustom org-export-with-tables torg-export-with-tables738,28449
(defcustom org-export-with-tags torg-export-with-tags748,28707
(defcustom org-export-with-tasks torg-export-with-tasks764,29211
(defcustom org-export-with-title torg-export-with-title788,30046
(defcustom org-export-time-stamp-file torg-export-time-stamp-file798,30328
(defcustom org-export-with-timestamps torg-export-with-timestamps806,30624
(defcustom org-export-with-todo-keywords torg-export-with-todo-keywords829,31390
(defcustom org-export-allow-bind-keywords nilorg-export-allow-bind-keywords836,31660
(defcustom org-export-with-broken-links nilorg-export-with-broken-links845,32003
(defcustom org-export-snippet-translation-alist nilorg-export-snippet-translation-alist866,32670
(defcustom org-export-global-macros nilorg-export-global-macros886,33352
(defcustom org-export-coding-system nilorg-export-coding-system909,34079
(defcustom org-export-copy-to-kill-ring nilorg-export-copy-to-kill-ring916,34266
(defcustom org-export-initial-scope 'bufferorg-export-initial-scope927,34644
(defcustom org-export-show-temporary-export-buffer torg-export-show-temporary-export-buffer935,34956
(defcustom org-export-in-background nilorg-export-in-background945,35380
(defcustom org-export-async-init-file nilorg-export-async-init-file954,35720
(defcustom org-export-dispatch-use-expert-ui nilorg-export-dispatch-use-expert-ui972,36376
(defun org-export-get-backend (name)org-export-get-backend1023,38470
(defun org-export-register-backend (backend)org-export-register-backend1029,38724
(defun org-export-barf-if-invalid-backend (backend)org-export-barf-if-invalid-backend1046,39641
(defun org-export-derived-backend-p (backend &rest backends)org-export-derived-backend-p1051,39846
(defun org-export-get-all-transcoders (backend)org-export-get-all-transcoders1066,40509
(defun org-export-get-all-options (backend)org-export-get-all-options1087,41306
(defun org-export-get-all-filters (backend)org-export-get-all-filters1107,42048
(defun org-export-define-backend (backend transcoders &rest body)org-export-define-backend1125,42778
(defun org-export-define-derived-backend (child parent &rest body)org-export-define-derived-backend1251,47308
(defun org-export-get-environment (&optional backend subtreep ext-plist)org-export-get-environment1360,50958
(defun org-export--parse-option-keyword (options &optional backend)org-export--parse-option-keyword1387,52031
(defun org-export--get-subtree-options (&optional backend)org-export--get-subtree-options1411,52914
(defun org-export--get-inbuffer-options (&optional backend)org-export--get-inbuffer-options1462,54971
(defun org-export--get-export-attributesorg-export--get-export-attributes1587,59292
(defun org-export--get-buffer-attributes ()org-export--get-buffer-attributes1601,59875
(defun org-export--get-global-options (&optional backend)org-export--get-global-options1606,60096
(defun org-export--list-bound-variables ()org-export--list-bound-variables1630,60917
(defsubst org-export-get-parent (blob)org-export-get-parent1677,62715
(defun org-export--collect-tree-properties (data info)org-export--collect-tree-properties1697,63530
(defun org-export--get-min-level (data options)org-export--get-min-level1738,64952
(defun org-export--collect-headline-numbering (data options)org-export--collect-headline-numbering1754,65698
(defun org-export--selected-trees (data info)org-export--selected-trees1780,66700
(defun org-export--skip-p (datum options selected excluded)org-export--skip-p1819,68256
(defun org-export-transcoder (blob info)org-export-transcoder1931,73297
(defun org-export-data (data info)org-export-data1940,73716
(defun org-export-data-with-backend (data backend info)org-export-data-with-backend2047,77486
(defun org-export-expand (blob contents &optional with-affiliated)org-export-expand2076,78712
(defvar org-export-before-processing-hook nilorg-export-before-processing-hook2153,81868
(defvar org-export-before-parsing-hook nilorg-export-before-parsing-hook2164,82299
(defvar org-export-filter-options-functions nilorg-export-filter-options-functions2178,82748
(defvar org-export-filter-parse-tree-functions nilorg-export-filter-parse-tree-functions2184,83015
(defvar org-export-filter-plain-text-functions nilorg-export-filter-plain-text-functions2191,83345
(defvar org-export-filter-body-functions nilorg-export-filter-body-functions2198,83629
(defvar org-export-filter-final-output-functions nilorg-export-filter-final-output-functions2205,83912
(defvar org-export-filter-babel-call-functions nilorg-export-filter-babel-call-functions2215,84260
(defvar org-export-filter-center-block-functions nilorg-export-filter-center-block-functions2221,84552
(defvar org-export-filter-clock-functions nilorg-export-filter-clock-functions2227,84848
(defvar org-export-filter-diary-sexp-functions nilorg-export-filter-diary-sexp-functions2233,85130
(defvar org-export-filter-drawer-functions nilorg-export-filter-drawer-functions2239,85422
(defvar org-export-filter-dynamic-block-functions nilorg-export-filter-dynamic-block-functions2245,85706
(defvar org-export-filter-example-block-functions nilorg-export-filter-example-block-functions2251,86004
(defvar org-export-filter-export-block-functions nilorg-export-filter-export-block-functions2257,86302
(defvar org-export-filter-fixed-width-functions nilorg-export-filter-fixed-width-functions2263,86598
(defvar org-export-filter-footnote-definition-functions nilorg-export-filter-footnote-definition-functions2269,86892
(defvar org-export-filter-headline-functions nilorg-export-filter-headline-functions2275,87202
(defvar org-export-filter-horizontal-rule-functions nilorg-export-filter-horizontal-rule-functions2281,87490
(defvar org-export-filter-inlinetask-functions nilorg-export-filter-inlinetask-functions2287,87792
(defvar org-export-filter-item-functions nilorg-export-filter-item-functions2293,88084
(defvar org-export-filter-keyword-functions nilorg-export-filter-keyword-functions2299,88364
(defvar org-export-filter-latex-environment-functions nilorg-export-filter-latex-environment-functions2305,88650
(defvar org-export-filter-node-property-functions nilorg-export-filter-node-property-functions2311,88956
(defvar org-export-filter-paragraph-functions nilorg-export-filter-paragraph-functions2317,89254
(defvar org-export-filter-plain-list-functions nilorg-export-filter-plain-list-functions2323,89544
(defvar org-export-filter-planning-functions nilorg-export-filter-planning-functions2329,89836
(defvar org-export-filter-property-drawer-functions nilorg-export-filter-property-drawer-functions2335,90124
(defvar org-export-filter-quote-block-functions nilorg-export-filter-quote-block-functions2341,90426
(defvar org-export-filter-section-functions nilorg-export-filter-section-functions2348,90726
(defvar org-export-filter-special-block-functions nilorg-export-filter-special-block-functions2354,91012
(defvar org-export-filter-src-block-functions nilorg-export-filter-src-block-functions2360,91310
(defvar org-export-filter-table-functions nilorg-export-filter-table-functions2366,91600
(defvar org-export-filter-table-cell-functions nilorg-export-filter-table-cell-functions2372,91882
(defvar org-export-filter-table-row-functions nilorg-export-filter-table-row-functions2378,92174
(defvar org-export-filter-verse-block-functions nilorg-export-filter-verse-block-functions2384,92464
(defvar org-export-filter-bold-functions nilorg-export-filter-bold-functions2393,92781
(defvar org-export-filter-code-functions nilorg-export-filter-code-functions2399,93064
(defvar org-export-filter-entity-functions nilorg-export-filter-entity-functions2405,93347
(defvar org-export-filter-export-snippet-functions nilorg-export-filter-export-snippet-functions2411,93631
(defvar org-export-filter-footnote-reference-functions nilorg-export-filter-footnote-reference-functions2417,93931
(defvar org-export-filter-inline-babel-call-functions nilorg-export-filter-inline-babel-call-functions2423,94239
(defvar org-export-filter-inline-src-block-functions nilorg-export-filter-inline-src-block-functions2429,94545
(defvar org-export-filter-italic-functions nilorg-export-filter-italic-functions2435,94849
(defvar org-export-filter-latex-fragment-functions nilorg-export-filter-latex-fragment-functions2441,95136
(defvar org-export-filter-line-break-functions nilorg-export-filter-line-break-functions2447,95436
(defvar org-export-filter-link-functions nilorg-export-filter-link-functions2453,95728
(defvar org-export-filter-radio-target-functions nilorg-export-filter-radio-target-functions2459,96008
(defvar org-export-filter-statistics-cookie-functions nilorg-export-filter-statistics-cookie-functions2465,96304
(defvar org-export-filter-strike-through-functions nilorg-export-filter-strike-through-functions2471,96610
(defvar org-export-filter-subscript-functions nilorg-export-filter-subscript-functions2477,96913
(defvar org-export-filter-superscript-functions nilorg-export-filter-superscript-functions2483,97203
(defvar org-export-filter-target-functions nilorg-export-filter-target-functions2489,97497
(defvar org-export-filter-timestamp-functions nilorg-export-filter-timestamp-functions2495,97781
(defvar org-export-filter-underline-functions nilorg-export-filter-underline-functions2501,98071
(defvar org-export-filter-verbatim-functions nilorg-export-filter-verbatim-functions2507,98364
(defun org-export-filter-apply-functions (filters value info)org-export-filter-apply-functions2525,99103
(defun org-export-install-filters (info)org-export-install-filters2548,100018
(defun org-export-copy-buffer ()org-export-copy-buffer2607,102378
(defmacro org-export-with-buffer-copy (&rest body)org-export-with-buffer-copy2618,102766
(defun org-export--generate-copy-script (buffer)org-export--generate-copy-script2636,103424
(defun org-export--delete-comment-trees ()org-export--delete-comment-trees2694,105587
(defun org-export--prune-tree (data info)org-export--prune-tree2707,106129
(defun org-export--missing-definitions (tree definitions)org-export--missing-definitions2774,109019
(defun org-export--install-footnote-definitions (definitions tree)org-export--install-footnote-definitions2848,111998
(defun org-export--remove-uninterpreted-data (data info)org-export--remove-uninterpreted-data2913,114238
(defun org-export-asorg-export-as2972,116327
(defun org-export-string-as (string backend &optional body-only ext-plist)org-export-string-as3123,122449
(defun org-export-replace-region-by (backend)org-export-replace-region-by3144,123155
(defun org-export-insert-default-template (&optional backend subtreep)org-export-insert-default-template3155,123598
(defun org-export-expand-include-keyword (&optional included dir footnotes)org-export-expand-include-keyword3239,126961
(defun org-export--inclusion-absolute-lines (file location only-contents lines)org-export--inclusion-absolute-lines3380,132272
(defun org-export--update-included-link (file-dir includer-dir)org-export--update-included-link3442,134626
(defun org-export--prepare-file-contentsorg-export--prepare-file-contents3468,135716
(defun org-export--copy-to-kill-ring-p ()org-export--copy-to-kill-ring-p3642,142622
(defun org-export-read-attribute (attribute element &optional property)org-export-read-attribute3668,143539
(defun org-export-get-caption (element &optional shortp)org-export-get-caption3704,144933
(defun org-export-with-backend (backend data &optional contents info)org-export-with-backend3725,145713
(defun org-export-snippet-backend (export-snippet)org-export-snippet-backend3762,147403
(defun org-export-get-footnote-definition (footnote-reference info)org-export-get-footnote-definition3787,148352
(defun org-export--footnote-reference-maporg-export--footnote-reference-map3820,149732
(defun org-export-collect-footnote-definitions (info &optional data body-first)org-export-collect-footnote-definitions3865,151598
(defun org-export-footnote-first-reference-porg-export-footnote-first-reference-p3893,152734
(defun org-export-get-footnote-number (footnote info &optional data body-first)org-export-get-footnote-number3919,153787
(defun org-export-get-relative-level (headline info)org-export-get-relative-level3974,156034
(defun org-export-low-level-p (headline info)org-export-low-level-p3980,156291
(defun org-export-get-headline-number (headline info)org-export-get-headline-number3995,156854
(defun org-export-numbered-headline-p (headline info)org-export-numbered-headline-p4001,157140
(defun org-export-number-to-roman (n)org-export-number-to-roman4009,157562
(defun org-export-get-tags (element info &optional tags inherited)org-export-get-tags4025,158030
(defun org-export-get-node-property (property datum &optional inherited)org-export-get-node-property4049,159109
(defun org-export-get-category (blob info)org-export-get-category4069,159856
(defun org-export-get-alt-title (headline _)org-export-get-alt-title4087,160552
(defun org-export-first-sibling-p (blob info)org-export-first-sibling-p4095,160939
(defun org-export-last-sibling-p (datum info)org-export-last-sibling-p4103,161295
(defun org-export-get-date (info &optional fmt)org-export-get-date4120,161887
(defun org-export-custom-protocol-maybe (link desc backend)org-export-custom-protocol-maybe4172,163795
(defun org-export-get-coderef-format (path desc)org-export-get-coderef-format4193,164536
(defun org-export-inline-image-p (link &optional rules)org-export-inline-image-p4202,164843
(defun org-export-insert-image-links (data info &optional rules)org-export-insert-image-links4224,165667
(defun org-export-resolve-coderef (ref info)org-export-resolve-coderef4269,167315
(defun org-export-search-cells (datum)org-export-search-cells4293,168275
(defun org-export-string-to-search-cell (s)org-export-string-to-search-cell4335,169613
(defun org-export-match-search-cell-p (datum cells)org-export-match-search-cell-p4346,170099
(defun org-export-resolve-fuzzy-link (link info)org-export-resolve-fuzzy-link4353,170435
(defun org-export-resolve-id-link (link info)org-export-resolve-id-link4402,172092
(defun org-export-resolve-radio-link (link info)org-export-resolve-radio-link4422,172903
(defun org-export-file-uri (filename)org-export-file-uri4441,173529
(defun org-export-new-reference (references)org-export-new-reference4462,174306
(defun org-export-format-reference (reference)org-export-format-reference4476,174997
(defun org-export-get-reference (datum info)org-export-get-reference4482,175215
(defun org-export-get-ordinal (element info &optional types predicate)org-export-get-ordinal4538,177583
(defun org-export-get-loc (element info)org-export-get-loc4615,180935
(defun org-export-unravel-code (element)org-export-unravel-code4645,182093
(defun org-export-format-code (code fun &optional num-lines ref-alist)org-export-format-code4681,183393
(defun org-export-format-code-default (element info)org-export-format-code-default4711,184598
(defun org-export-table-has-special-column-p (table)org-export-table-has-special-column-p4786,187435
(defun org-export-table-has-header-p (table info)org-export-table-has-header-p4806,188270
(defun org-export-table-row-is-special-p (table-row _)org-export-table-row-is-special-p4835,189180
(defun org-export-table-row-group (table-row info)org-export-table-row-group4866,190512
(defun org-export-table-cell-width (table-cell info)org-export-table-cell-width4893,191535
(defun org-export-table-cell-alignment (table-cell info)org-export-table-cell-alignment4937,193319
(defun org-export-table-cell-borders (table-cell info)org-export-table-cell-borders5022,196701
(defun org-export-table-cell-starts-colgroup-p (table-cell info)org-export-table-cell-starts-colgroup-p5107,200264
(defun org-export-table-cell-ends-colgroup-p (table-cell info)org-export-table-cell-ends-colgroup-p5118,200794
(defun org-export-table-row-starts-rowgroup-p (table-row info)org-export-table-row-starts-rowgroup-p5128,201247
(defun org-export-table-row-ends-rowgroup-p (table-row info)org-export-table-row-ends-rowgroup-p5137,201705
(defun org-export-table-row-in-header-p (table-row info)org-export-table-row-in-header-p5146,202158
(defun org-export-table-row-starts-header-p (table-row info)org-export-table-row-starts-header-p5154,202529
(defun org-export-table-row-ends-header-p (table-row info)org-export-table-row-ends-header-p5160,202822
(defun org-export-table-row-number (table-row info)org-export-table-row-number5166,203110
(defun org-export-table-dimensions (table info)org-export-table-dimensions5188,204029
(defun org-export-table-cell-address (table-cell info)org-export-table-cell-address5208,204709
(defun org-export-get-table-cell-at (address table info)org-export-get-table-cell-at5227,205408
(defun org-export-collect-headlines (info &optional n scope)org-export-collect-headlines5267,206853
(defun org-export-collect-elements (type info &optional predicate)org-export-collect-elements5303,208357
(defun org-export-collect-tables (info)org-export-collect-tables5323,209095
(defun org-export-collect-figures (info predicate)org-export-collect-figures5330,209307
(defun org-export-collect-listings (info)org-export-collect-listings5345,209867
(defun org-export-excluded-from-toc-p (headline info)org-export-excluded-from-toc-p5353,210099
(defun org-export-toc-entry-backend (parent &rest transcoders)org-export-toc-entry-backend5367,210752
(defconst org-export-smart-quotes-alistorg-export-smart-quotes-alist5403,211944
(defun org-export--smart-quote-status (s info)org-export--smart-quote-status5556,219206
(defun org-export-activate-smart-quotes (s encoding info &optional original)org-export-activate-smart-quotes5635,222047
(defun org-export-get-parent-headline (blob)org-export-get-parent-headline5674,223512
(defun org-export-get-parent-element (object)org-export-get-parent-element5679,223688
(defun org-export-get-parent-table (object)org-export-get-parent-table5684,223877
(defun org-export-get-previous-element (blob info &optional n)org-export-get-previous-element5689,224066
(defun org-export-get-next-element (blob info &optional n)org-export-get-next-element5714,225012
(defconst org-export-dictionaryorg-export-dictionary5747,226177
(defun org-export-translate (s encoding info)org-export-translate6120,242983
(defmacro org-export-async-start  (fun &rest body)org-export-async-start6165,244816
(defun org-export-to-bufferorg-export-to-buffer6252,248995
(defun org-export-to-fileorg-export-to-file6317,251424
(defun org-export-output-file-name (extension &optional subtreep pub-dir)org-export-output-file-name6379,253919
(defun org-export-add-to-stack (source backend &optional process)org-export-add-to-stack6432,255952
(defun org-export-stack ()org-export-stack6445,256453
(defun org-export-stack-clear ()org-export-stack-clear6455,256792
(defun org-export-stack-refresh ()org-export-stack-refresh6460,256924
(defun org-export-stack-remove (&optional source)org-export-stack-remove6465,257034
(defun org-export-stack-view (&optional in-emacs)org-export-stack-view6474,257398
(defvar org-export-stack-mode-maporg-export-stack-mode-map6485,257844
(define-derived-mode org-export-stack-mode tabulated-list-mode "Org-Stack"org-export-stack-mode6501,258441
(defun org-export--stack-generate ()org-export--stack-generate6528,259450
(defun org-export--stack-num-predicate (a b)org-export--stack-num-predicate6562,260567
(defun org-export--stack-source-at-point ()org-export--stack-source-at-point6566,260701
(defun org-export-dispatch (&optional arg)org-export-dispatch6591,261661
(defun org-export--dispatch-ui (options first-key expertp)org-export--dispatch-ui6669,264562
(defun org-export--dispatch-actionorg-export--dispatch-action6844,271277

elpa/org-plus-contrib-20191021/org-elisp-symbol.el,140
(defun org-elisp-symbol-open (path)org-elisp-symbol-open85,2953
(defun org-elisp-symbol-store-link ()org-elisp-symbol-store-link92,3214

elpa/org-plus-contrib-20191021/ox-confluence.el,2280
(defcustom org-confluence-lang-alistorg-confluence-lang-alist65,2399
(defun org-confluence-bold (bold contents info)org-confluence-bold71,2610
(defun org-confluence-empty (empty contents info)org-confluence-empty74,2687
(defun org-confluence-example-block (example-block contents info)org-confluence-example-block77,2744
(defun org-confluence-italic (italic contents info)org-confluence-italic82,2997
(defun org-confluence-item (item contents info)org-confluence-item85,3078
(defun org-confluence-fixed-width (fixed-width contents info)org-confluence-fixed-width101,3640
(defun org-confluence-verbatim (verbatim contents info)org-confluence-verbatim107,3812
(defun org-confluence-code (code contents info)org-confluence-code110,3933
(defun org-confluence-headline (headline contents info)org-confluence-headline113,4042
(defun org-confluence-link (link desc info)org-confluence-link127,4618
(defun org-confluence-paragraph (paragraph contents info)org-confluence-paragraph138,4999
(defun org-confluence-property-drawer (property-drawer contents info)org-confluence-property-drawer144,5204
(defun org-confluence-quote-block (quote-block contents info)org-confluence-quote-block148,5349
(defun org-confluence-section (section contents info)org-confluence-section151,5454
(defun org-confluence-src-block (src-block contents info)org-confluence-src-block154,5521
(defun org-confluence-strike-through (strike-through contents info)org-confluence-strike-through161,5894
(defun org-confluence-table (table contents info)org-confluence-table164,5991
(defun org-confluence-table-row  (table-row contents info)org-confluence-table-row167,6054
(defun org-confluence-table-cell  (table-cell contents info)org-confluence-table-cell174,6264
(defun org-confluence-template (contents info)org-confluence-template180,6517
(defun org-confluence-timestamp (timestamp _contents _info)org-confluence-timestamp184,6660
(defun org-confluence-underline (underline contents info)org-confluence-underline192,6992
(defun org-confluence--block (language theme contents)org-confluence--block195,7079
(defun org-confluence--li-depth (item)org-confluence--li-depth202,7286
(defun org-confluence-export-as-confluenceorg-confluence-export-as-confluence219,7879

elpa/org-plus-contrib-20191021/org-static-mathjax.el,490
(defcustom org-static-mathjax-app-ini-pathorg-static-mathjax-app-ini-path60,2373
(defcustom org-static-mathjax-xulrunner-pathorg-static-mathjax-xulrunner-path70,2782
(defcustom org-static-mathjax-local-mathjax-pathorg-static-mathjax-local-mathjax-path75,2893
(defvar org-static-mathjax-debugorg-static-mathjax-debug84,3164
(defun org-static-mathjax-hook-installer ()org-static-mathjax-hook-installer88,3271
(defun org-static-mathjax-process ()org-static-mathjax-process110,4320

elpa/org-plus-contrib-20191021/org-inlinetask.el,1955
(defgroup org-inlinetask nilorg-inlinetask83,3125
(defcustom org-inlinetask-min-level 15org-inlinetask-min-level88,3255
(defcustom org-inlinetask-show-first-star nilorg-inlinetask-show-first-star102,3862
(defvar org-odd-levels-only)org-odd-levels-only109,4097
(defvar org-keyword-time-regexp)org-keyword-time-regexp110,4126
(defvar org-complex-heading-regexp)org-complex-heading-regexp111,4159
(defvar org-property-end-re)org-property-end-re112,4195
(defcustom org-inlinetask-default-state nilorg-inlinetask-default-state114,4225
(defun org-inlinetask-insert-task (&optional no-state)org-inlinetask-insert-task124,4580
(define-key org-mode-map "\C-c\C-xt" 'org-inlinetask-insert-task)org-mode-map152,5747
(defun org-inlinetask-outline-regexp ()org-inlinetask-outline-regexp154,5814
(defun org-inlinetask-end-p ()org-inlinetask-end-p162,6136
(defun org-inlinetask-at-task-p ()org-inlinetask-at-task-p167,6341
(defun org-inlinetask-in-task-p ()org-inlinetask-in-task-p172,6555
(defun org-inlinetask-goto-beginning ()org-inlinetask-goto-beginning181,6879
(defun org-inlinetask-goto-end ()org-inlinetask-goto-end190,7196
(defun org-inlinetask-get-task-level ()org-inlinetask-get-task-level214,7880
(defun org-inlinetask-promote ()org-inlinetask-promote222,8158
(defun org-inlinetask-demote ()org-inlinetask-demote248,9096
(defun org-inlinetask-get-current-indentation ()org-inlinetask-get-current-indentation271,9842
(defvar org-indent-indentation-per-level) ; defined in org-indent.elorg-indent-indentation-per-level282,10164
(defface org-inlinetask '((t :inherit shadow))org-inlinetask284,10234
(defun org-inlinetask-fontify (limit)org-inlinetask-fontify288,10338
(defun org-inlinetask-toggle-visibility ()org-inlinetask-toggle-visibility313,11384
(defun org-inlinetask-hide-tasks (state)org-inlinetask-hide-tasks329,11925
(defun org-inlinetask-remove-END-maybe ()org-inlinetask-remove-END-maybe348,12561

elpa/org-plus-contrib-20191021/org-sudoku.el,896
(defvar org-sudoku-size 9org-sudoku-size45,1470
(defvar org-sudoku-timeout 2.0org-sudoku-timeout50,1672
(defun org-sudoku-create (nfilled)org-sudoku-create57,1867
(defun org-sudoku-solve ()org-sudoku-solve98,3240
(defun org-sudoku-solve-field ()org-sudoku-solve-field113,3681
(defun org-sudoku-get-game ()org-sudoku-get-game137,4372
(defun org-sudoku-build-allowed (game)org-sudoku-build-allowed162,4972
(defun org-sudoku-find-next-constrained-field (game)org-sudoku-find-next-constrained-field189,5690
(defun org-sudoku-solve-game (game &optional random stop-at)org-sudoku-solve-game206,6200
(defun org-sudoku-unknown-field-p (game)org-sudoku-unknown-field-p241,7355
(defun org-sudoku-deep-copy (game)org-sudoku-deep-copy245,7513
(defun org-sudoku-set-field (game field value)org-sudoku-set-field251,7723
(defun org-sudoku-rel-fields (i j)org-sudoku-rel-fields267,8182

elpa/org-plus-contrib-20191021/ob-plantuml.el,533
(defvar org-babel-default-header-args:plantumlorg-babel-default-header-args:plantuml39,1298
(defcustom org-plantuml-jar-path ""org-plantuml-jar-path43,1457
(defun org-babel-variable-assignments:plantuml (params)org-babel-variable-assignments:plantuml49,1584
(defun org-babel-plantuml-make-body (body params)org-babel-plantuml-make-body61,2055
(defun org-babel-execute:plantuml (body params)org-babel-execute:plantuml74,2598
(defun org-babel-prep-session:plantuml (_session _params)org-babel-prep-session:plantuml118,4409

elpa/org-plus-contrib-20191021/org-checklist.el,599
(defgroup org-checklist nilorg-checklist50,1901
(defcustom org-checklist-export-time-format "%Y%m%d%H%M"org-checklist-export-time-format55,2008
(defcustom org-checklist-export-function 'org-export-as-asciiorg-checklist-export-function62,2251
(defcustom org-checklist-export-params nilorg-checklist-export-params70,2632
(defcustom org-checklist-a2ps-params nilorg-checklist-a2ps-params75,2780
(defun org-reset-checkbox-state-maybe ()org-reset-checkbox-state-maybe80,2906
(defun org-make-checklist-export ()org-make-checklist-export87,3142
(defun org-checklist ()org-checklist132,4774

elpa/org-plus-contrib-20191021/org-man.el,293
(defcustom org-man-command 'manorg-man-command33,1123
(defun org-man-open (path)org-man-open38,1276
(defun org-man-store-link ()org-man-store-link43,1431
(defun org-man-get-page-name ()org-man-get-page-name55,1832
(defun org-man-export (link description format)org-man-export62,2109

elpa/org-plus-contrib-20191021/org-faces.el,6353
(defgroup org-faces nilorg-faces31,1100
(defface org-default '((t :inherit default))org-default36,1193
(defface org-hideorg-hide40,1292
(defface org-level-1 '((t :inherit outline-1))org-level-148,1568
(defface org-level-2 '((t :inherit outline-2))org-level-252,1674
(defface org-level-3 '((t :inherit outline-3))org-level-356,1780
(defface org-level-4 '((t :inherit outline-4))org-level-460,1886
(defface org-level-5 '((t :inherit outline-5))org-level-564,1992
(defface org-level-6 '((t :inherit outline-6))org-level-668,2098
(defface org-level-7 '((t :inherit outline-7))org-level-772,2204
(defface org-level-8 '((t :inherit outline-8))org-level-876,2310
(defface org-special-keyword '((t :inherit font-lock-keyword-face))org-special-keyword80,2416
(defface org-drawer	   ;Copied from `font-lock-function-name-face'org-drawer84,2542
(defface org-property-value nilorg-property-value94,3070
(defface org-columnorg-column98,3167
(defface org-column-titleorg-column-title133,4716
(defface org-agenda-column-dateline '((t :inherit org-column))org-agenda-column-dateline144,5171
(defface org-warning '((t :inherit font-lock-warning-face))org-warning148,5322
(defface org-archived '((t :inherit shadow))org-archived152,5446
(defface org-link '((t :inherit link))org-link156,5557
(defface org-footnoteorg-footnote160,5638
(defface org-ellipsisorg-ellipsis167,5881
(defface org-targetorg-target174,6164
(defface org-dateorg-date181,6368
(defface org-date-selectedorg-date-selected188,6614
(defface org-sexp-dateorg-sexp-date199,7222
(defface org-tag '((t (:bold t)))org-tag206,7466
(defface org-list-dt '((t (:bold t)))org-list-dt212,7641
(defface org-todo		 ;Copied from `font-lock-warning-face'org-todo216,7749
(defface org-done		    ;Copied from `font-lock-type-face'org-done225,8237
(defface org-agenda-done	    ;Copied from `font-lock-type-face'org-agenda-done233,8636
(defface org-headline-done	  ;Copied from `font-lock-string-face'org-headline-done246,9353
(defcustom org-faces-easy-propertiesorg-faces-easy-properties255,9855
(defcustom org-todo-keyword-faces nilorg-todo-keyword-faces269,10403
(defface org-priority '((t :inherit font-lock-keyword-face))org-priority287,11062
(defcustom org-priority-faces nilorg-priority-faces291,11181
(defvar org-tags-special-faces-re nil)org-tags-special-faces-re308,11790
(defun org-set-tag-faces (var value)org-set-tag-faces309,11829
(defface org-checkbox '((t :inherit bold))org-checkbox316,12041
(defface org-checkbox-statistics-todo '((t (:inherit org-todo)))org-checkbox-statistics-todo320,12131
(defface org-checkbox-statistics-done '((t (:inherit org-done)))org-checkbox-statistics-done324,12268
(defcustom org-tag-faces nilorg-tag-faces328,12403
(defface org-table	   ;Copied from `font-lock-function-name-face'org-table348,13133
(defface org-formulaorg-formula358,13709
(defface org-code '((t :inherit shadow))org-code367,14123
(defface org-meta-line '((t :inherit font-lock-comment-face))org-meta-line372,14254
(defface org-document-titleorg-document-title377,14402
(defface org-document-infoorg-document-info384,14719
(defface org-document-info-keyword '((t :inherit shadow))org-document-info-keyword392,15035
(defface org-block '((t :inherit shadow))org-block396,15180
(defface org-block-begin-line '((t (:inherit org-meta-line)))org-block-begin-line402,15363
(defface org-block-end-line '((t (:inherit org-block-begin-line)))org-block-end-line406,15513
(defface org-verbatim '((t (:inherit shadow)))org-verbatim410,15666
(defface org-quote '((t (:inherit org-block)))org-quote415,15802
(defface org-verse '((t (:inherit org-block)))org-verse420,15979
(defcustom org-fontify-quote-and-verse-blocks nilorg-fontify-quote-and-verse-blocks425,16156
(defface org-clock-overlay	    ;Copied from `secondary-selection'org-clock-overlay433,16476
(defface org-agenda-structure ;Copied from `font-lock-function-name-face'org-agenda-structure448,17153
(defface org-agenda-date '((t (:inherit org-agenda-structure)))org-agenda-date458,17709
(defface org-agenda-date-todayorg-agenda-date-today462,17836
(defface org-agenda-clocking '((t (:inherit secondary-selection)))org-agenda-clocking467,17983
(defface org-agenda-date-weekend '((t (:inherit org-agenda-date :weight bold)))org-agenda-date-weekend471,18127
(defface org-scheduledorg-scheduled478,18369
(defface org-scheduled-todayorg-scheduled-today486,18715
(defface org-agenda-dimmed-todo-faceorg-agenda-dimmed-todo-face494,19067
(defface org-scheduled-previouslyorg-scheduled-previously500,19276
(defface org-upcoming-deadlineorg-upcoming-deadline509,19737
(defface org-upcoming-distant-deadline '((t :inherit org-default))org-upcoming-distant-deadline519,20233
(defcustom org-agenda-deadline-facesorg-agenda-deadline-faces523,20420
(defface org-agenda-restriction-lockorg-agenda-restriction-lock548,21439
(defface org-agenda-filter-tags '((t :inherit mode-line))org-agenda-filter-tags558,21978
(defface org-agenda-filter-regexp '((t :inherit mode-line))org-agenda-filter-regexp562,22122
(defface org-agenda-filter-category '((t :inherit mode-line))org-agenda-filter-category566,22271
(defface org-agenda-filter-effort '((t :inherit mode-line))org-agenda-filter-effort570,22423
(defface org-time-grid	   ;Copied from `font-lock-variable-name-face'org-time-grid574,22569
(defface org-agenda-current-time '((t (:inherit org-time-grid)))org-agenda-current-time581,22940
(defface org-agenda-diary '((t :inherit default))org-agenda-diary585,23084
(defface org-agenda-calendar-event '((t :inherit default))org-agenda-calendar-event589,23221
(defface org-agenda-calendar-sexp '((t :inherit default))org-agenda-calendar-sexp593,23363
(defconst org-level-facesorg-level-faces597,23502
(defcustom org-n-level-faces (length org-level-faces)org-n-level-faces601,23633
(defcustom org-cycle-level-faces torg-cycle-level-faces608,23928
(defface org-latex-and-relatedorg-latex-and-related618,24259
(defface org-macro '((t :inherit org-latex-and-related))org-macro636,24897
(defface org-tag-group '((t :inherit org-tag))org-tag-group642,25049
(defface org-mode-line-clock '((t (:inherit mode-line)))org-mode-line-clock648,25195
(defface org-mode-line-clock-overrunorg-mode-line-clock-overrun652,25320

elpa/org-plus-contrib-20191021/ob-abc.el,326
(defvar org-babel-default-header-args:abcorg-babel-default-header-args:abc37,1306
(defun org-babel-expand-body:abc (body params)org-babel-expand-body:abc41,1464
(defun org-babel-execute:abc (body params)org-babel-execute:abc56,1887
(defun org-babel-prep-session:abc (_session _params)org-babel-prep-session:abc85,3311

elpa/org-plus-contrib-20191021/ob-emacs-lisp.el,405
(defconst org-babel-header-args:emacs-lisp '((lexical . :any))org-babel-header-args:emacs-lisp37,1320
(defvar org-babel-default-header-args:emacs-lisp '((:lexical . "no"))org-babel-default-header-args:emacs-lisp40,1427
(defun org-babel-expand-body:emacs-lisp (body params)org-babel-expand-body:emacs-lisp48,1770
(defun org-babel-execute:emacs-lisp (body params)org-babel-execute:emacs-lisp61,2177

elpa/org-plus-contrib-20191021/org-choose.el,1355
(defvar org-choose-mark-dataorg-choose-mark-data83,2633
(defun org-choose-filter-one (i)org-choose-filter-one92,2853
(defun org-choose-setup-vars (bot-lower-range top-upper-rangeorg-choose-setup-vars140,4017
(defun org-choose-filter-tail (raw)org-choose-filter-tail182,5292
(defun org-choose-setup-filter (raw)org-choose-setup-filter214,6216
(defun org-choose-conform-after-promotion (entry-pos keywords highest-ok-ix)org-choose-conform-after-promotion222,6437
(defun org-choose-conform-after-demotion (entry-pos keywordsorg-choose-conform-after-demotion244,7202
(defun org-choose-keep-sensible (change-plist)org-choose-keep-sensible269,7904
(defun org-choose-get-index-in-keywords (ix all-keywords)org-choose-get-index-in-keywords357,10218
(defun org-choose-get-entry-index (all-keywords)org-choose-get-entry-index364,10411
(defun org-choose-get-fn-map-group ()org-choose-get-fn-map-group372,10644
(defun org-choose-get-highest-mark-index (keywords)org-choose-get-highest-mark-index389,11152
(defun org-choose-highest-other-ok (ix data)org-choose-highest-other-ok408,11618
(defun org-choose-get-default-mark-index (data)org-choose-get-default-mark-index429,12224
(defun org-choose-get-mark-N (n data)org-choose-get-mark-N443,12651
(defun org-choose-get-default-mark (new-mark old-mark)org-choose-get-default-mark452,12863

elpa/org-plus-contrib-20191021/org-panel.el,2934
(defvar orgpan-minor-mode-version t)orgpan-minor-mode-version65,2041
(defface orgpan-fieldorgpan-field67,2079
(defvar orgpan-field-face 'orgpan-field)orgpan-field-face71,2172
(defface orgpan-active-fieldorgpan-active-field73,2214
(defvar orgpan-active-field-face 'orgpan-active-field)orgpan-active-field-face77,2311
(defface orgpan-spacelineorgpan-spaceline79,2367
(defcustom orgpan-panel-buttons nilorgpan-panel-buttons84,2461
(defconst orgpan-org-mode-commands nil)orgpan-org-mode-commands102,3049
(defconst orgpan-org-commandsorgpan-org-commands103,3089
(defun orgpan-delete-panel ()orgpan-delete-panel134,3695
(defvar orgpan-last-command-was-from-panel nil)orgpan-last-command-was-from-panel148,4183
(defun orgpan-mode-pre-command ()orgpan-mode-pre-command149,4231
(defun orgpan-mode-post-command ()orgpan-mode-post-command183,5927
(defun orgpan-last-buffer ()orgpan-last-buffer226,7667
(defun orgpan-switch-buffer ()orgpan-switch-buffer240,8125
(defun orgpan-paste-subtree ()orgpan-paste-subtree258,8894
(defun orgpan-cut-subtree ()orgpan-cut-subtree264,9041
(defun orgpan-copy-subtree ()orgpan-copy-subtree274,9373
(defvar orgpan-ovl-help nil)orgpan-ovl-help288,9777
(defun orgpan-check-panel-mode ()orgpan-check-panel-mode290,9807
(defun orgpan-display-bindings-help ()orgpan-display-bindings-help294,9937
(defun orgpan-forward-field ()orgpan-forward-field305,10362
(defun orgpan-backward-field ()orgpan-backward-field318,10739
(defconst orgpan-mode-maporgpan-mode-map333,11113
(defun orgpan-occur ()orgpan-occur370,12556
(defvar orgpan-panel-window nilorgpan-panel-window379,12807
(defvar orgpan-panel-buffer nilorgpan-panel-buffer382,12886
(defvar orgpan-org-window nil)orgpan-org-window386,12988
(defvar orgpan-org-buffer nil)orgpan-org-buffer390,13087
(defvar orgpan-last-org-buffer nil)orgpan-last-org-buffer393,13169
(defvar orgpan-point nil)orgpan-point396,13261
(defvar viper-emacs-state-mode-list)viper-emacs-state-mode-list399,13333
(defvar viper-new-major-mode-buffer-list)viper-new-major-mode-buffer-list400,13370
(defun orgpan-avoid-viper-in-buffer ()orgpan-avoid-viper-in-buffer402,13413
(define-derived-mode orgpan-mode nil "Org-Panel"orgpan-mode408,13700
(defun orgpan-insert-field (text keymap explain)orgpan-insert-field421,14106
(defconst orgpan-with-keymaporgpan-with-keymap431,14413
(defconst orgpan-without-keymaporgpan-without-keymap442,14869
(defun orgpan-make-panel-without-buttons (buf)orgpan-make-panel-without-buttons468,15973
(defun orgpan-make-panel-with-buttons (buf)orgpan-make-panel-with-buttons486,16675
(defun orgpan-make-panel-buffer ()orgpan-make-panel-buffer538,19017
(defun orgpan-help ()orgpan-help551,19504
(defun orgpan-panel ()orgpan-panel561,19823
(defun orgpan-minor-post-command ()orgpan-minor-post-command610,21826
(define-minor-mode orgpan-panel-minor-modeorgpan-panel-minor-mode627,22466

elpa/org-plus-contrib-20191021/ob-awk.el,377
(defvar org-babel-tangle-lang-exts)org-babel-tangle-lang-exts40,1369
(defvar org-babel-awk-command "awk"org-babel-awk-command43,1465
(defun org-babel-expand-body:awk (body _params)org-babel-expand-body:awk46,1543
(defun org-babel-execute:awk (body params)org-babel-execute:awk50,1663
(defun org-babel-awk-var-to-awk (var &optional sep)org-babel-awk-var-to-awk97,3462

elpa/org-plus-contrib-20191021/ob-eval.el,521
(defvar org-babel-error-buffer-name "*Org-Babel Error Output*")org-babel-error-buffer-name32,1085
(defun org-babel-eval-error-notify (exit-code stderr)org-babel-eval-error-notify35,1225
(defun org-babel-eval (cmd body)org-babel-eval44,1609
(defun org-babel-eval-read-file (file)org-babel-eval-read-file69,2553
(defun org-babel--shell-command-on-region (start end command error-buffer)org-babel--shell-command-on-region74,2710
(defun org-babel-eval-wipe-error-buffer ()org-babel-eval-wipe-error-buffer138,5222

elpa/org-plus-contrib-20191021/org-mouse.el,4522
(defvar org-agenda-allow-remote-undo)org-agenda-allow-remote-undo142,4222
(defvar org-agenda-undo-list)org-agenda-undo-list143,4260
(defvar org-agenda-custom-commands)org-agenda-custom-commands144,4290
(defvar org-mouse-main-buffer nilorg-mouse-main-buffer152,4698
(defvar org-mouse-plain-list-regexp "\\([ \t]*\\)\\([-+*]\\|[0-9]+[.)]\\) "org-mouse-plain-list-regexp154,4773
(defvar org-mouse-direct torg-mouse-direct156,4900
(defgroup org-mouse nilorg-mouse163,5200
(defcustom org-mouse-punctuation ":"org-mouse-punctuation168,5291
(defcustom org-mouse-featuresorg-mouse-features173,5425
(defun org-mouse-re-search-line (regexp)org-mouse-re-search-line186,6087
(defun org-mouse-end-headline ()org-mouse-end-headline191,6258
(defvar-local org-mouse-context-menu-function nilorg-mouse-context-menu-function200,6542
(defun org-mouse-show-context-menu (event prefix)org-mouse-show-context-menu205,6735
(defun org-mouse-line-position ()org-mouse-line-position229,7746
(defun org-mouse-empty-line ()org-mouse-empty-line241,8149
(defun org-mouse-next-heading ()org-mouse-next-heading245,8303
(defun org-mouse-insert-heading ()org-mouse-insert-heading254,8574
(defun org-mouse-timestamp-today (&optional shift units)org-mouse-timestamp-today267,9010
(defun org-mouse-keyword-menu (keywords function &optional selected itemformat)org-mouse-keyword-menu275,9270
(defun org-mouse-remove-match-and-spaces ()org-mouse-remove-match-and-spaces310,10665
(defvar org-mouse-rest)org-mouse-rest316,10827
(defun org-mouse-replace-match-and-surroundorg-mouse-replace-match-and-surround317,10851
(defun org-mouse-keyword-replace-menu (keywords &optional group itemformatorg-mouse-keyword-replace-menu327,11225
(defun org-mouse-show-headlines ()org-mouse-show-headlines359,12471
(defun org-mouse-show-overview ()org-mouse-show-overview368,12736
(defun org-mouse-set-priority (priority)org-mouse-set-priority374,12924
(defvar org-mouse-priority-regexp "\\[#\\([A-Z]\\)\\]"org-mouse-priority-regexp378,13051
(defun org-mouse-get-priority (&optional default)org-mouse-get-priority383,13245
(defun org-mouse-delete-timestamp ()org-mouse-delete-timestamp391,13565
(defun org-mouse-looking-at (regexp skipchars &optional movechars)org-mouse-looking-at400,13926
(defun org-mouse-priority-list ()org-mouse-priority-list409,14196
(defun org-mouse-todo-menu (state)org-mouse-todo-menu413,14326
(defun org-mouse-tag-menu ()		;todoorg-mouse-tag-menu422,14569
(defun org-mouse-set-tags (tags)org-mouse-set-tags441,15150
(defun org-mouse-insert-checkbox ()org-mouse-insert-checkbox444,15207
(defun org-mouse-agenda-type (type)org-mouse-agenda-type452,15406
(defun org-mouse-list-options-menu (alloptions &optional function)org-mouse-list-options-menu461,15625
(defun org-mouse-clip-text (text maxlength)org-mouse-clip-text481,16225
(defun org-mouse-popup-global-menu ()org-mouse-popup-global-menu486,16371
(defun org-mouse-get-context (contextlist context)org-mouse-get-context544,18437
(defun org-mouse-for-each-item (funct)org-mouse-for-each-item551,18666
(defun org-mouse-bolp ()org-mouse-bolp557,18931
(defun org-mouse-insert-item (text)org-mouse-insert-item563,19140
(defadvice dnd-insert-text (around org-mouse-dnd-insert-text activate)dnd-insert-text584,19788
(defadvice dnd-open-file (around org-mouse-dnd-open-file activate)dnd-open-file589,19943
(defun org-mouse-match-closure (function)org-mouse-match-closure594,20093
(defun org-mouse-yank-link (click)org-mouse-yank-link601,20275
(defun org-mouse-context-menu (&optional event)org-mouse-context-menu610,20586
(defun org-mouse-mark-active ()org-mouse-mark-active841,29234
(defun org-mouse-in-region-p (pos)org-mouse-in-region-p844,29308
(defun org-mouse-down-mouse (event)org-mouse-down-mouse849,29441
(defun org-mouse-move-tree-start (_event)org-mouse-move-tree-start907,31633
(defun org-mouse-make-marker (position)org-mouse-make-marker912,31779
(defun org-mouse-move-tree (event)org-mouse-move-tree916,31924
(defun org-mouse-transform-to-outline ()org-mouse-transform-to-outline966,33432
(defvar org-mouse-cmd) ;dynamically scoped from `org-with-remote-undo'.org-mouse-cmd983,34064
(defun org-mouse-do-remotely (command)org-mouse-do-remotely985,34137
(defun org-mouse-agenda-context-menu (&optional _event)org-mouse-agenda-context-menu1024,35555
(defun org-mouse-get-gesture (event)org-mouse-get-gesture1077,37611
(defvar org-agenda-mode-map)org-agenda-mode-map1084,37831

elpa/org-plus-contrib-20191021/org-collector.el,577
(defvar org-propview-default-value 0org-propview-default-value96,3969
(defun and-rest (list)and-rest101,4187
(defun org-dblock-write:propview (params)org-dblock-write:propview112,4429
(defun org-propview-eval-w-props (props body)org-propview-eval-w-props156,6188
(defun org-propview-get-with-inherited (&optional inherit)org-propview-get-with-inherited166,6511
(defun org-propview-collect (cols stringformat &optional conds match scope inherit colnames)org-propview-collect176,6766
(defun org-propview-to-table (results stringformat)org-propview-to-table221,8273

elpa/org-plus-contrib-20191021/ox-beamer.el,3479
(defgroup org-export-beamer nilorg-export-beamer48,1578
(defcustom org-beamer-frame-level 1org-beamer-frame-level54,1736
(defcustom org-beamer-frame-default-options ""org-beamer-frame-default-options74,2430
(defcustom org-beamer-column-view-formatorg-beamer-column-view-format80,2642
(defcustom org-beamer-theme "default"org-beamer-theme90,3042
(defcustom org-beamer-environments-extra nilorg-beamer-environments-extra99,3311
(defcustom org-beamer-outline-frame-title "Outline"org-beamer-outline-frame-title126,4341
(defcustom org-beamer-outline-frame-options ""org-beamer-outline-frame-options131,4520
(defcustom org-beamer-subtitle-format "\\subtitle{%s}"org-beamer-subtitle-format138,4760
(defconst org-beamer-column-widthsorg-beamer-column-widths150,5108
(defconst org-beamer-environments-specialorg-beamer-environments-special154,5267
(defconst org-beamer-environments-defaultorg-beamer-environments-default170,5865
(defconst org-beamer-verbatim-elementsorg-beamer-verbatim-elements187,6982
(defun org-beamer--normalize-argument (argument type)org-beamer--normalize-argument197,7269
(defun org-beamer--element-has-overlay-p (element)org-beamer--element-has-overlay-p214,8007
(defun org-beamer-bold (bold contents _info)org-beamer-bold271,10357
(defun org-beamer-export-block (export-block _contents _info)org-beamer-export-block282,10643
(defun org-beamer-export-snippet (export-snippet _contents info)org-beamer-export-snippet292,11004
(defun org-beamer--get-label (headline info)org-beamer--get-label322,12112
(defun org-beamer--frame-level (headline info)org-beamer--frame-level344,12961
(defun org-beamer--format-section (headline contents info)org-beamer--format-section369,14106
(defun org-beamer--format-frame (headline contents info)org-beamer--format-frame404,15350
(defun org-beamer--format-block (headline contents info)org-beamer--format-block482,18387
(defun org-beamer-headline (headline contents info)org-beamer-headline589,22607
(defun org-beamer-item (item contents info)org-beamer-item668,25706
(defun org-beamer-keyword (keyword contents info)org-beamer-keyword697,26727
(defun org-beamer-link (link contents info)org-beamer-link721,27646
(defun org-beamer-plain-list (plain-list contents info)org-beamer-plain-list742,28438
(defun org-beamer-radio-target (radio-target text info)org-beamer-radio-target775,29586
(defun org-beamer-template (contents info)org-beamer-template790,30073
(defvar org-beamer-mode-map (make-sparse-keymap)org-beamer-mode-map889,33678
(define-key org-beamer-mode-map "\C-c\C-b" 'org-beamer-select-environment)org-beamer-mode-map891,33766
(define-minor-mode org-beamer-modeorg-beamer-mode894,33857
(defface org-beamer-tag '((t (:box (:line-width 1 :color grey40))))org-beamer-tag904,34138
(defun org-beamer-property-changed (property value)org-beamer-property-changed908,34274
(defun org-beamer-allowed-property-values (property)org-beamer-allowed-property-values927,35045
(defun org-beamer-export-as-latexorg-beamer-export-as-latex951,35836
(defun org-beamer-export-to-latexorg-beamer-export-to-latex986,37064
(defun org-beamer-export-to-pdforg-beamer-export-to-pdf1020,38211
(defun org-beamer-select-environment ()org-beamer-select-environment1055,39400
(defun org-beamer-publish-to-latex (plist filename pub-dir)org-beamer-publish-to-latex1109,41583
(defun org-beamer-publish-to-pdf (plist filename pub-dir)org-beamer-publish-to-pdf1120,41953

elpa/org-plus-contrib-20191021/org-list.el,10733
(defvar org-M-RET-may-split-line)org-M-RET-may-split-line83,3252
(defvar org-auto-align-tags)org-auto-align-tags84,3286
(defvar org-blank-before-new-entry)org-blank-before-new-entry85,3315
(defvar org-clock-string)org-clock-string86,3351
(defvar org-closed-string)org-closed-string87,3377
(defvar org-deadline-string)org-deadline-string88,3404
(defvar org-description-max-indent)org-description-max-indent89,3433
(defvar org-done-keywords)org-done-keywords90,3469
(defvar org-drawer-regexp)org-drawer-regexp91,3496
(defvar org-element-all-objects)org-element-all-objects92,3523
(defvar org-inhibit-startup)org-inhibit-startup93,3556
(defvar org-loop-over-headlines-in-active-region)org-loop-over-headlines-in-active-region94,3585
(defvar org-odd-levels-only)org-odd-levels-only95,3635
(defvar org-outline-regexp-bol)org-outline-regexp-bol96,3664
(defvar org-scheduled-string)org-scheduled-string97,3696
(defvar org-todo-line-regexp)org-todo-line-regexp98,3726
(defvar org-ts-regexp)org-ts-regexp99,3756
(defvar org-ts-regexp-both)org-ts-regexp-both100,3779
(defgroup org-plain-lists nilorg-plain-lists152,6745
(defcustom org-cycle-include-plain-lists torg-cycle-include-plain-lists157,6874
(defcustom org-list-demote-modify-bullet nilorg-list-demote-modify-bullet180,7890
(defcustom org-plain-list-ordered-item-terminator torg-plain-list-ordered-item-terminator222,8832
(defcustom org-list-allow-alphabetical nilorg-list-allow-alphabetical238,9495
(defcustom org-list-two-spaces-after-bullet-regexp nilorg-list-two-spaces-after-bullet-regexp256,10157
(defcustom org-list-automatic-rules '((checkbox . t)org-list-automatic-rules268,10688
(defcustom org-list-use-circular-motion nilorg-list-use-circular-motion301,11765
(defvar org-checkbox-statistics-hook nilorg-checkbox-statistics-hook316,12213
(defcustom org-checkbox-hierarchical-statistics torg-checkbox-hierarchical-statistics323,12505
(defcustom org-list-description-max-indent 20org-list-description-max-indent331,12844
(defcustom org-list-indent-offset 0org-list-indent-offset339,13107
(defvar org-list-forbidden-blocks '("example" "verse" "src" "export")org-list-forbidden-blocks347,13363
(defvar org-list-export-context '(block inlinetask)org-list-export-context351,13513
(defconst org-list-end-re "^[ \t]*\n[ \t]*\n"org-list-end-re362,13808
(defconst org-list-full-item-reorg-list-full-item-re365,13900
(defun org-item-re ()org-item-re376,14322
(defsubst org-item-beginning-re ()org-item-beginning-re387,14802
(defun org-list-at-regexp-after-bullet-p (regexp)org-list-at-regexp-after-bullet-p391,14924
(defun org-list-in-valid-context-p ()org-list-in-valid-context-p405,15394
(defun org-in-item-p ()org-in-item-p409,15536
(defun org-at-item-p ()org-at-item-p474,18037
(defun org-at-item-bullet-p ()org-at-item-bullet-p480,18228
(defun org-at-item-timer-p ()org-at-item-timer-p486,18413
(defun org-at-item-description-p ()org-at-item-description-p491,18593
(defun org-at-item-checkbox-p ()org-at-item-checkbox-p495,18749
(defun org-at-item-counter-p ()org-at-item-counter-p499,18915
(defun org-list-context ()org-list-context509,19145
(defun org-list-struct ()org-list-struct574,21681
(defun org-list-struct-assoc-end (struct end-list)org-list-struct-assoc-end752,28446
(defun org-list-prevs-alist (struct)org-list-prevs-alist775,29123
(defun org-list-parents-alist (struct)org-list-parents-alist784,29425
(defun org-list--delete-metadata ()org-list--delete-metadata823,31030
(defsubst org-list-get-nth (n key struct)org-list-get-nth838,31454
(defun org-list-set-nth (n key struct new)org-list-set-nth842,31569
(defsubst org-list-get-ind (item struct)org-list-get-ind847,31738
(defun org-list-set-ind (item struct ind)org-list-set-ind851,31858
(defsubst org-list-get-bullet (item struct)org-list-get-bullet856,32020
(defun org-list-set-bullet (item struct bullet)org-list-set-bullet860,32138
(defsubst org-list-get-counter (item struct)org-list-get-counter865,32307
(defsubst org-list-get-checkbox (item struct)org-list-get-checkbox869,32427
(defun org-list-set-checkbox (item struct checkbox)org-list-set-checkbox873,32556
(defsubst org-list-get-tag (item struct)org-list-get-tag878,32735
(defun org-list-get-item-end (item struct)org-list-get-item-end882,32856
(defun org-list-get-item-end-before-blank (item struct)org-list-get-item-end-before-blank886,32979
(defun org-list-get-parent (item struct parents)org-list-get-parent894,33263
(defun org-list-has-child-p (item struct)org-list-has-child-p901,33548
(defun org-list-get-next-item (item _struct prevs)org-list-get-next-item913,33928
(defun org-list-get-prev-item (item _struct prevs)org-list-get-prev-item919,34171
(defun org-list-get-subtree (item struct)org-list-get-subtree925,34417
(defun org-list-get-all-items (item struct prevs)org-list-get-all-items938,34849
(defun org-list-get-children (item _struct parents)org-list-get-children951,35409
(defun org-list-get-top-point (struct)org-list-get-top-point961,35786
(defun org-list-get-bottom-point (struct)org-list-get-bottom-point966,35912
(defun org-list-get-list-begin (item struct prevs)org-list-get-list-begin972,36108
(defalias 'org-list-get-first-item 'org-list-get-list-begin)org-list-get-first-item981,36490
(defun org-list-get-last-item (item struct prevs)org-list-get-last-item983,36552
(defun org-list-get-list-end (item struct prevs)org-list-get-list-end992,36929
(defun org-list-get-list-type (item struct prevs)org-list-get-list-type998,37214
(defun org-list-get-item-number (item struct prevs parents)org-list-get-item-number1012,37781
(defun org-list-search-generic (search re bound noerr)org-list-search-generic1051,39179
(defun org-list-search-backward (regexp &optional bound noerror)org-list-search-backward1066,39765
(defun org-list-search-forward (regexp &optional bound noerror)org-list-search-forward1073,40084
(defsubst org-list-bullet-string (bullet)org-list-bullet-string1084,40429
(defun org-list-swap-items (beg-A beg-B struct)org-list-swap-items1098,40932
(defun org-list-separating-blank-lines-number (pos struct prevs)org-list-separating-blank-lines-number1184,44318
(defun org-list-insert-item (pos struct prevs &optional checkbox after-bullet)org-list-insert-item1240,46327
(defun org-list-delete-item (item struct)org-list-delete-item1373,51667
(defun org-list-send-item (item dest struct)org-list-send-item1409,52783
(defun org-list-struct-outdent (start end struct parents)org-list-struct-outdent1525,57026
(defun org-list-struct-indent (start end struct parents prevs)org-list-struct-indent1557,58106
(defun org-list-use-alpha-bul-p (first struct prevs)org-list-use-alpha-bul-p1619,60185
(defun org-list-inc-bullet-maybe (bullet)org-list-inc-bullet-maybe1643,61139
(defun org-list-struct-fix-bul (struct prevs)org-list-struct-fix-bul1660,61695
(defun org-list-struct-fix-ind (struct parents &optional bullet-size)org-list-struct-fix-ind1729,64335
(defun org-list-struct-fix-box (struct parents prevs &optional ordered)org-list-struct-fix-box1757,65381
(defun org-list-struct-fix-item-end (struct)org-list-struct-fix-item-end1821,67883
(defun org-list-struct-apply-struct (struct old-struct)org-list-struct-apply-struct1847,68867
(defun org-list-write-struct (struct parents &optional old-struct)org-list-write-struct1986,74367
(defun org-apply-on-list (function init-value &rest args)org-apply-on-list2022,75791
(defun org-list-set-item-visibility (item struct view)org-list-set-item-visibility2048,76697
(defun org-list-item-body-column (item)org-list-item-body-column2073,77637
(defalias 'org-list-get-item-begin 'org-in-item-p)org-list-get-item-begin2101,78496
(defun org-beginning-of-item ()org-beginning-of-item2103,78548
(defun org-beginning-of-item-list ()org-beginning-of-item-list2110,78770
(defun org-end-of-item-list ()org-end-of-item-list2122,79170
(defun org-end-of-item ()org-end-of-item2134,79551
(defun org-previous-item ()org-previous-item2145,79865
(defun org-next-item ()org-next-item2163,80487
(defun org-move-item-down ()org-move-item-down2181,81100
(defun org-move-item-up ()org-move-item-up2202,82010
(defun org-insert-item (&optional checkbox)org-insert-item2221,82819
(defun org-list-repair ()org-list-repair2262,84289
(defun org-cycle-list-bullet (&optional which)org-cycle-list-bullet2270,84580
(defun org-toggle-checkbox (&optional toggle-presence)org-toggle-checkbox2334,87249
(defun org-reset-checkbox-state-subtree ()org-reset-checkbox-state-subtree2436,91128
(defun org-update-checkbox-count (&optional all)org-update-checkbox-count2453,91622
(defun org-get-checkbox-statistics-face ()org-get-checkbox-statistics-face2579,96291
(defun org-update-checkbox-count-maybe (&optional all)org-update-checkbox-count-maybe2592,96775
(defvar org-last-indent-begin-marker (make-marker))org-last-indent-begin-marker2599,97091
(defvar org-last-indent-end-marker (make-marker))org-last-indent-end-marker2600,97143
(defun org-list-indent-item-generic (arg no-subtree struct)org-list-indent-item-generic2601,97193
(defun org-outdent-item ()org-outdent-item2695,100688
(defun org-indent-item ()org-indent-item2712,101299
(defun org-outdent-item-tree ()org-outdent-item-tree2729,101907
(defun org-indent-item-tree ()org-indent-item-tree2746,102526
(defvar org-tab-ind-state)org-tab-ind-state2763,103142
(defvar org-adapt-indentation)org-adapt-indentation2764,103169
(defun org-cycle-item-indentation ()org-cycle-item-indentation2765,103200
(defun org-sort-listorg-sort-list2810,105126
(defun org-toggle-item (arg)org-toggle-item2936,109619
(defun org-list-to-lisp (&optional delete)org-list-to-lisp3091,115304
(defun org-list-make-subtree ()org-list-make-subtree3179,118093
(defun org-list-to-generic (list params)org-list-to-generic3187,118386
(defun org-list--depth (element)org-list--depth3316,122894
(defun org-list--trailing-newlines (string)org-list--trailing-newlines3322,123156
(defun org-list--generic-eval (value &rest args)org-list--generic-eval3329,123389
(defun org-list--to-generic-plain-list (params)org-list--to-generic-plain-list3338,123712
(defun org-list--to-generic-item (params)org-list--to-generic-item3378,125031
(defun org-list-to-latex (list &optional params)org-list-to-latex3451,127697
(defun org-list-to-html (list &optional params)org-list-to-html3459,128061
(defun org-list-to-texinfo (list &optional params)org-list-to-texinfo3467,128421
(defun org-list-to-org (list &optional params)org-list-to-org3475,128793
(defun org-list-to-subtree (list &optional params)org-list-to-subtree3494,129441

elpa/org-plus-contrib-20191021/org-depend.el,485
(defcustom org-depend-tag-blocked torg-depend-tag-blocked161,5794
(defcustom org-depend-find-next-optionsorg-depend-find-next-options166,5924
(defmacro org-depend-act-on-sibling (trigger-val &rest rest)org-depend-act-on-sibling172,6083
(defvar org-depend-doing-chain-find-next nil)org-depend-doing-chain-find-next188,6670
(defun org-depend-trigger-todo (change-plist)org-depend-trigger-todo190,6717
(defun org-depend-block-todo (change-plist)org-depend-block-todo357,13003

elpa/org-plus-contrib-20191021/ob-picolisp.el,530
(defvar org-babel-tangle-lang-exts) ;; Autoloadedorg-babel-tangle-lang-exts60,2437
(defvar org-babel-picolisp-eoe "org-babel-picolisp-eoe"org-babel-picolisp-eoe71,2866
(defcustom org-babel-picolisp-cmd "pil"org-babel-picolisp-cmd74,2978
(defun org-babel-expand-body:picolisp (body params)org-babel-expand-body:picolisp80,3128
(defun org-babel-execute:picolisp (body params)org-babel-execute:picolisp96,3663
(defun org-babel-picolisp-initiate-session (&optional session-name)org-babel-picolisp-initiate-session168,7214

elpa/org-plus-contrib-20191021/org.el,95452
(defvar org-inhibit-highlight-removal nil) ; dynamically scoped paramorg-inhibit-highlight-removal66,2771
(defvar-local org-table-formula-constants-local nilorg-table-formula-constants-local67,2841
(defvar org-inlinetask-min-level)org-inlinetask-min-level69,2946
(defvar org-outline-regexp "\\*+ "org-outline-regexp97,3725
(defvar org-outline-regexp-bol "^\\*+ "org-outline-regexp-bol100,3797
(defvar org-heading-regexp "^\\(\\*+\\)\\(?: +\\(.*?\\)\\)?[ \t]*$"org-heading-regexp105,3984
(defvar ffap-url-regexp)ffap-url-regexp224,12177
(defvar org-element-paragraph-separate)org-element-paragraph-separate225,12202
(defvar org-indent-indentation-per-level)org-indent-indentation-per-level226,12242
(defvar org-babel-load-languages)org-babel-load-languages229,12348
(defun org-babel-do-load-languages (sym value)org-babel-do-load-languages232,12398
(defun org-babel-load-file (file &optional compile)org-babel-load-file246,12930
(defcustom org-babel-load-languages '((emacs-lisp . t))org-babel-load-languages275,14153
(defcustom org-clone-delete-id nilorg-clone-delete-id345,16424
(defun org-version (&optional here full message)org-version358,16742
(defconst org-version (org-version))org-version391,18044
(defconst org-block-regexporg-block-regexp398,18118
(defconst org-dblock-start-reorg-dblock-start-re402,18280
(defconst org-dblock-end-re "^[ \t]*#\\+\\(?:END\\|end\\)\\([: \t\r\n]\\|$\\)"org-dblock-end-re406,18452
(defconst org-clock-string "CLOCK:"org-clock-string411,18598
(defvar org-closed-string "CLOSED:"org-closed-string414,18709
(defvar org-deadline-string "DEADLINE:"org-deadline-string417,18822
(defvar org-scheduled-string "SCHEDULED:"org-scheduled-string424,19090
(defconst org-ds-keyword-lengthorg-ds-keyword-length431,19366
(defconst org-planning-line-reorg-planning-line-re439,19603
(defconst org-clock-line-reorg-clock-line-re447,19819
(defconst org-deadline-regexp (concat "\\<" org-deadline-string)org-deadline-regexp451,19923
(defconst org-deadline-time-regexporg-deadline-time-regexp454,20024
(defconst org-deadline-time-hour-regexporg-deadline-time-hour-regexp458,20177
(defconst org-deadline-line-regexporg-deadline-line-regexp463,20392
(defconst org-scheduled-regexp (concat "\\<" org-scheduled-string)org-scheduled-regexp467,20536
(defconst org-scheduled-time-regexporg-scheduled-time-regexp470,20640
(defconst org-scheduled-time-hour-regexporg-scheduled-time-hour-regexp474,20796
(defconst org-closed-time-regexporg-closed-time-regexp479,21014
(defconst org-keyword-time-regexporg-keyword-time-regexp483,21165
(defconst org-keyword-time-not-clock-regexporg-keyword-time-not-clock-regexp492,21423
(defconst org-maybe-keyword-time-regexporg-maybe-keyword-time-regexp500,21670
(defconst org-all-time-keywordsorg-all-time-keywords512,22013
(defconst org-drawer-regexp "^[ \t]*:\\(\\(?:\\w\\|[-_]\\)+\\):[ \t]*$"org-drawer-regexp520,22218
(defconst org-property-start-re "^[ \t]*:PROPERTIES:[ \t]*$"org-property-start-re524,22385
(defconst org-property-end-re "^[ \t]*:END:[ \t]*$"org-property-end-re527,22517
(defconst org-clock-drawer-start-re "^[ \t]*:CLOCK:[ \t]*$"org-clock-drawer-start-re530,22639
(defconst org-clock-drawer-end-re "^[ \t]*:END:[ \t]*$"org-clock-drawer-end-re533,22767
(defconst org-property-drawer-reorg-property-drawer-re536,22890
(defconst org-clock-drawer-reorg-clock-drawer-re542,23078
(defconst org-heading-keyword-regexp-formatorg-heading-keyword-regexp-format549,23258
(defconst org-heading-keyword-maybe-regexp-formatorg-heading-keyword-maybe-regexp-format556,23610
(defconst org-archive-tag "ARCHIVE"org-archive-tag563,23959
(defconst org-tag-re "[[:alnum:]_@#%]+"org-tag-re568,24152
(defconst org-tag-group-re "[ \t]+\\(:\\([[:alnum:]_@#%:]+\\):\\)[ \t]*$"org-tag-group-re571,24228
(defconst org-tag-line-reorg-tag-line-re576,24476
(defconst org-latex-regexpsorg-latex-regexps592,24970
(defconst org-effort-property "Effort"org-effort-property605,25785
(defconst org-table-any-line-regexp "^[ \t]*\\(|\\|\\+-[-+]\\)"org-table-any-line-regexp611,25979
(defconst org-table-line-regexp "^[ \t]*|"org-table-line-regexp614,26089
(defconst org-table-dataline-regexp "^[ \t]*|[^-]"org-table-dataline-regexp617,26169
(defconst org-table-hline-regexp "^[ \t]*|-"org-table-hline-regexp620,26257
(defconst org-table1-hline-regexp "^[ \t]*\\+-[-+]"org-table1-hline-regexp623,26340
(defconst org-table-any-border-regexp "^[ \t]*[^|+ \t]"org-table-any-border-regexp626,26431
(defconst org-TBLFM-regexp "^[ \t]*#\\+TBLFM: "org-TBLFM-regexp630,26595
(defconst org-ts-regexp "<\\([0-9]\\{4\\}-[0-9]\\{2\\}-[0-9]\\{2\\} ?[^\r\n>]*?\\)>"org-ts-regexp635,26688
(defconst org-ts-regexp-inactiveorg-ts-regexp-inactive638,26828
(defconst org-ts-regexp-both "[[<]\\([0-9]\\{4\\}-[0-9]\\{2\\}-[0-9]\\{2\\} ?[^]\r\n>]*?\\)[]>]"org-ts-regexp-both642,26992
(defconst org-ts-regexp0org-ts-regexp0645,27144
(defconst org-ts-regexp1 "\\(\\([0-9]\\{4\\}\\)-\\([0-9]\\{2\\}\\)-\\([0-9]\\{2\\}\\) *\\([^]+0-9>\r\n -]*\\)\\( \\([0-9]\\{1,2\\}\\):\\([0-9]\\{2\\}\\)\\)?\\)"org-ts-regexp1651,27496
(defconst org-ts-regexp2 (concat "<" org-ts-regexp1 "[^>\n]\\{0,16\\}>")org-ts-regexp2654,27718
(defconst org-ts-regexp3 (concat "[[<]" org-ts-regexp1 "[^]>\n]\\{0,16\\}[]>]")org-ts-regexp3657,27851
(defconst org-tr-regexp (concat org-ts-regexp "--?-?" org-ts-regexp)org-tr-regexp660,28003
(defconst org-tr-regexp-bothorg-tr-regexp-both663,28126
(defconst org-tsr-regexp (concat org-ts-regexp "\\(--?-?"org-tsr-regexp667,28266
(defconst org-tsr-regexp-bothorg-tsr-regexp-both671,28419
(defconst org-repeat-reorg-repeat-re677,28637
(defconst org-time-stamp-formats '("<%Y-%m-%d %a>" . "<%Y-%m-%d %a %H:%M>")org-time-stamp-formats683,28872
(defgroup org nilorg689,29047
(defcustom org-mode-hook nilorg-mode-hook695,29168
(defcustom org-load-hook nilorg-load-hook700,29289
(defcustom org-log-buffer-setup-hook nilorg-log-buffer-setup-hook705,29399
(defvar org-modules)  ; defined beloworg-modules711,29545
(defvar org-modules-loaded nilorg-modules-loaded712,29583
(defun org-load-modules-maybe (&optional force)org-load-modules-maybe715,29658
(defun org-set-modules (var value)org-set-modules723,29974
(defcustom org-modules '(org-w3m org-bbdb org-bibtex org-docview org-gnus org-info org-irc org-mhe org-rmail org-eww)org-modules730,30201
(defvar org-export-registered-backends) ; From ox.el.org-export-registered-backends807,35692
(defcustom org-export-backends '(ascii html icalendar latex odt)org-export-backends810,35884
(defcustom org-support-shift-select nilorg-support-shift-select907,40356
(defcustom org-loop-over-headlines-in-active-region nilorg-loop-over-headlines-in-active-region951,42482
(defcustom org-startup-folded torg-startup-folded978,43623
(defcustom org-startup-truncated torg-startup-truncated999,44376
(defcustom org-startup-indented nilorg-startup-indented1015,45148
(defcustom org-use-sub-superscripts torg-use-sub-superscripts1027,45526
(defcustom org-startup-with-beamer-mode nilorg-startup-with-beamer-mode1060,46960
(defcustom org-startup-align-all-tables nilorg-startup-align-all-tables1070,47250
(defcustom org-startup-shrink-all-tables nilorg-startup-shrink-all-tables1079,47543
(defcustom org-startup-with-inline-images nilorg-startup-with-inline-images1090,47894
(defcustom org-startup-with-latex-preview nilorg-startup-with-latex-preview1100,48230
(defcustom org-insert-mode-line-in-empty-file nilorg-insert-mode-line-in-empty-file1112,48606
(defvaralias 'org-CUA-compatible 'org-replace-disputed-keys)org-CUA-compatible1122,49076
(defcustom org-replace-disputed-keys nilorg-replace-disputed-keys1124,49138
(defcustom org-use-extra-keys nilorg-use-extra-keys1140,49834
(defcustom org-disputed-keysorg-disputed-keys1148,50121
(defun org-key (key)org-key1165,50809
(defun org-defkey (keymap key def)org-defkey1175,51168
(defcustom org-ellipsis nilorg-ellipsis1179,51310
(defvar org-display-table nilorg-display-table1193,51819
(defgroup org-keywords nilorg-keywords1196,51922
(defcustom org-closed-keep-when-no-todo nilorg-closed-keep-when-no-todo1201,52013
(defgroup org-structure nilorg-structure1209,52241
(defgroup org-reveal-location nilorg-reveal-location1214,52367
(defcustom org-show-context-detail '((agenda . local)org-show-context-detail1219,52517
(defcustom org-indirect-buffer-display 'other-windoworg-indirect-buffer-display1295,55374
(defcustom org-use-speed-commands nilorg-use-speed-commands1316,56270
(defcustom org-speed-commands-user nilorg-speed-commands-user1332,56860
(defcustom org-bookmark-names-plistorg-bookmark-names-plist1354,57823
(defgroup org-cycle nilorg-cycle1369,58383
(defcustom org-cycle-skip-children-state-if-no-children torg-cycle-skip-children-state-if-no-children1374,58507
(defcustom org-cycle-max-level nilorg-cycle-max-level1379,58674
(defcustom org-hide-block-startup nilorg-hide-block-startup1394,59332
(defcustom org-cycle-global-at-bob nilorg-cycle-global-at-bob1404,59583
(defcustom org-cycle-level-after-item/entry-creation torg-cycle-level-after-item/entry-creation1420,60183
(defcustom org-cycle-emulate-tab torg-cycle-emulate-tab1435,60904
(defcustom org-cycle-separator-lines 2org-cycle-separator-lines1451,61612
(defcustom org-pre-cycle-hook nilorg-pre-cycle-hook1469,62440
(defcustom org-cycle-hook '(org-cycle-hide-archived-subtreesorg-cycle-hook1479,62911
(defgroup org-edit-structure nilorg-edit-structure1493,63564
(defcustom org-odd-levels-only nilorg-odd-levels-only1498,63705
(defcustom org-adapt-indentation torg-adapt-indentation1514,64301
(defvaralias 'org-special-ctrl-a 'org-special-ctrl-a/e)org-special-ctrl-a1541,65406
(defcustom org-special-ctrl-a/e nilorg-special-ctrl-a/e1543,65463
(defcustom org-special-ctrl-k nilorg-special-ctrl-k1581,67085
(defcustom org-ctrl-k-protect-subtree nilorg-ctrl-k-protect-subtree1593,67606
(defcustom org-special-ctrl-o torg-special-ctrl-o1606,68221
(defcustom org-catch-invisible-edits nilorg-catch-invisible-edits1611,68355
(defcustom org-yank-folded-subtrees torg-yank-folded-subtrees1634,69522
(defcustom org-yank-adjusted-subtrees nilorg-yank-adjusted-subtrees1643,69946
(defcustom org-M-RET-may-split-line '((default . t))org-M-RET-may-split-line1650,70196
(defcustom org-insert-heading-respect-content nilorg-insert-heading-respect-content1677,70974
(defcustom org-blank-before-new-entry '((heading . auto)org-blank-before-new-entry1687,71380
(defcustom org-insert-heading-hook nilorg-insert-heading-hook1705,72109
(defcustom org-enable-fixed-width-editor torg-enable-fixed-width-editor1710,72243
(defgroup org-sparse-trees nilorg-sparse-trees1717,72519
(defcustom org-highlight-sparse-tree-matches torg-highlight-sparse-tree-matches1722,72651
(defcustom org-remove-highlights-with-change torg-remove-highlights-with-change1729,72911
(defcustom org-occur-case-fold-search torg-occur-case-fold-search1741,73382
(defcustom org-occur-hook '(org-first-headline-recenter)org-occur-hook1752,73796
(defgroup org-table nilorg-table1759,74052
(defcustom org-self-insert-cluster-for-undo nilorg-self-insert-cluster-for-undo1764,74154
(defcustom org-table-tab-recognizes-table.el torg-table-tab-recognizes-table.el1772,74491
(defgroup org-link nilorg-link1779,74753
(defvar-local org-link-abbrev-alist-local nilorg-link-abbrev-alist-local1784,74852
(defcustom org-link-parametersorg-link-parameters1788,75014
(defun org-link-get-parameter (type key)org-link-get-parameter1841,77044
(defun org-link-set-parameters (type &rest parameters)org-link-set-parameters1848,77231
(defun org-link-types ()org-link-types1857,77612
(defcustom org-link-abbrev-alist nilorg-link-abbrev-alist1861,77715
(defcustom org-descriptive-links torg-descriptive-links1892,78936
(defcustom org-link-file-path-type 'adaptiveorg-link-file-path-type1904,79393
(defvaralias 'org-activate-links 'org-highlight-links)org-activate-links1921,80020
(defcustom org-highlight-links '(bracket angle plain radio tag date footnote)org-highlight-links1922,80075
(defcustom org-make-link-description-function nilorg-make-link-description-function1956,81480
(defgroup org-link-store nilorg-link-store1965,81842
(defcustom org-url-hexify-p torg-url-hexify-p1970,81966
(defcustom org-email-link-description-format "Email %c: %.30s"org-email-link-description-format1976,82109
(defcustom org-from-is-user-regexporg-from-is-user-regexp1997,82912
(defcustom org-context-in-file-links torg-context-in-file-links2009,83474
(defcustom org-keep-stored-link-after-insertion nilorg-keep-stored-link-after-insertion2024,84157
(defgroup org-link-follow nilorg-link-follow2039,84762
(defcustom org-link-translation-function nilorg-link-translation-function2044,84890
(defcustom org-follow-link-hook nilorg-follow-link-hook2058,85600
(defcustom org-tab-follows-link nilorg-tab-follows-link2063,85731
(defcustom org-return-follows-link nilorg-return-follows-link2071,85993
(defcustom org-mouse-1-follows-linkorg-mouse-1-follows-link2077,86185
(defcustom org-mark-ring-length 4org-mark-ring-length2090,86740
(defcustom org-link-search-must-match-exact-headline 'query-to-createorg-link-search-must-match-exact-headline2096,86942
(defcustom org-link-frame-setuporg-link-frame-setup2114,87585
(defcustom org-display-internal-link-with-indirect-buffer nilorg-display-internal-link-with-indirect-buffer2169,89160
(defcustom org-open-non-existing-files nilorg-open-non-existing-files2181,89753
(defcustom org-open-directory-means-index-dot-org nilorg-open-directory-means-index-dot-org2190,90124
(defcustom org-confirm-shell-link-function 'yes-or-no-porg-confirm-shell-link-function2197,90394
(defcustom org-confirm-shell-link-not-regexp ""org-confirm-shell-link-not-regexp2217,91223
(defcustom org-confirm-elisp-link-function 'yes-or-no-porg-confirm-elisp-link-function2223,91384
(defcustom org-confirm-elisp-link-not-regexp ""org-confirm-elisp-link-not-regexp2243,92238
(defconst org-file-apps-defaults-gnuorg-file-apps-defaults-gnu2249,92399
(defconst org-file-apps-defaults-macosxorg-file-apps-defaults-macosx2256,92583
(defconst org-file-apps-defaults-windowsntorg-file-apps-defaults-windowsnt2269,92999
(defcustom org-file-appsorg-file-apps2279,93369
(defcustom org-doi-server-url "https://doi.org/"org-doi-server-url2381,98293
(defgroup org-refile nilorg-refile2387,98435
(defcustom org-directory "~/org"org-directory2392,98549
(defcustom org-default-notes-file (convert-standard-filename "~/.notes")org-default-notes-file2408,99138
(defcustom org-reverse-note-order nilorg-reverse-note-order2416,99402
(defcustom org-log-refile nilorg-log-refile2429,99887
(defcustom org-refile-targets nilorg-refile-targets2457,100707
(defcustom org-refile-target-verify-function nilorg-refile-target-verify-function2504,103033
(defcustom org-refile-use-cache nilorg-refile-use-cache2520,103721
(defcustom org-refile-use-outline-path nilorg-refile-use-outline-path2535,104352
(defcustom org-outline-path-complete-in-steps torg-outline-path-complete-in-steps2554,105060
(defcustom org-refile-allow-creating-parent-nodes nilorg-refile-allow-creating-parent-nodes2566,105655
(defcustom org-refile-active-region-within-subtree nilorg-refile-active-region-within-subtree2583,106378
(defgroup org-todo nilorg-todo2594,106784
(defgroup org-progress nilorg-progress2599,106888
(defvar org-todo-interpretation-widgetsorg-todo-interpretation-widgets2604,107011
(defcustom org-todo-keywords '((sequence "TODO" "DONE"))org-todo-keywords2610,107290
(defvar-local org-todo-keywords-1 nilorg-todo-keywords-12674,110106
(defvar org-todo-keywords-for-agenda nil)org-todo-keywords-for-agenda2676,110196
(defvar org-done-keywords-for-agenda nil)org-done-keywords-for-agenda2677,110238
(defvar org-todo-keyword-alist-for-agenda nil)org-todo-keyword-alist-for-agenda2678,110280
(defvar org-tag-alist-for-agenda nilorg-tag-alist-for-agenda2679,110327
(defvar org-tag-groups-alist-for-agenda nilorg-tag-groups-alist-for-agenda2681,110410
(defvar-local org-tag-groups-alist nil)org-tag-groups-alist2683,110515
(defvar org-agenda-contributing-files nil)org-agenda-contributing-files2684,110555
(defvar-local org-current-tag-alist nilorg-current-tag-alist2685,110598
(defvar-local org-not-done-keywords nil)org-not-done-keywords2689,110802
(defvar-local org-done-keywords nil)org-done-keywords2690,110843
(defvar-local org-todo-heads nil)org-todo-heads2691,110880
(defvar-local org-todo-sets nil)org-todo-sets2692,110914
(defvar-local org-todo-log-states nil)org-todo-log-states2693,110947
(defvar-local org-todo-kwd-alist nil)org-todo-kwd-alist2694,110986
(defvar-local org-todo-key-alist nil)org-todo-key-alist2695,111024
(defvar-local org-todo-key-trigger nil)org-todo-key-trigger2696,111062
(defcustom org-todo-interpretation 'sequenceorg-todo-interpretation2698,111103
(defcustom org-use-fast-todo-selection torg-use-fast-todo-selection2709,111500
(defcustom org-provide-todo-statistics torg-provide-todo-statistics2735,112484
(defcustom org-hierarchical-todo-statistics torg-hierarchical-todo-statistics2758,113478
(defcustom org-after-todo-state-change-hook nilorg-after-todo-state-change-hook2767,113867
(defvar org-blocker-hook nilorg-blocker-hook2774,114116
(defvar org-trigger-hook nilorg-trigger-hook2784,114466
(defcustom org-enforce-todo-dependencies nilorg-enforce-todo-dependencies2804,115068
(defcustom org-enforce-todo-checkbox-dependencies nilorg-enforce-todo-checkbox-dependencies2820,115702
(defcustom org-treat-insert-todo-heading-as-state-change nilorg-treat-insert-todo-heading-as-state-change2838,116463
(defcustom org-treat-S-cursor-todo-selection-as-state-change torg-treat-S-cursor-todo-selection-as-state-change2846,116828
(defcustom org-todo-state-tags-triggers nilorg-todo-state-tags-triggers2854,117159
(defcustom org-log-done nilorg-log-done2875,117877
(defcustom org-log-reschedule nilorg-log-reschedule2905,118784
(defcustom org-log-redeadline nilorg-log-redeadline2932,119616
(defcustom org-log-note-clock-out nilorg-log-note-clock-out2959,120447
(defcustom org-log-done-with-time torg-log-done-with-time2970,120782
(defcustom org-log-note-headingsorg-log-note-headings2976,120970
(defvaralias 'org-log-state-notes-into-drawer 'org-log-into-drawer)org-log-state-notes-into-drawer3022,122958
(defcustom org-log-into-drawer nilorg-log-into-drawer3024,123027
(defun org-log-into-drawer ()org-log-into-drawer3055,124064
(defcustom org-log-state-notes-insert-after-drawers nilorg-log-state-notes-insert-after-drawers3068,124561
(defcustom org-log-states-order-reversed torg-log-states-order-reversed3081,125024
(defcustom org-todo-repeat-to-state nilorg-todo-repeat-to-state3093,125394
(defcustom org-log-repeat 'timeorg-log-repeat3107,125996
(defcustom org-todo-repeat-hook nilorg-todo-repeat-hook3134,127044
(defgroup org-priorities nilorg-priorities3140,127202
(defcustom org-enable-priority-commands torg-enable-priority-commands3145,127304
(defcustom org-highest-priority ?Aorg-highest-priority3152,127528
(defcustom org-lowest-priority ?Corg-lowest-priority3158,127740
(defcustom org-default-priority ?Borg-default-priority3164,127950
(defcustom org-priority-start-cycle-with-default torg-priority-start-cycle-with-default3177,128631
(defcustom org-get-priority-function nilorg-get-priority-function3185,128962
(defgroup org-time nilorg-time3198,129465
(defcustom org-time-stamp-rounding-minutes '(0 5)org-time-stamp-rounding-minutes3203,129584
(defcustom org-display-custom-times nilorg-display-custom-times3234,130866
(defcustom org-time-stamp-custom-formatsorg-time-stamp-custom-formats3244,131248
(defun org-time-stamp-format (&optional long inactive)org-time-stamp-format3254,131732
(defcustom org-deadline-warning-days 14org-deadline-warning-days3262,131984
(defcustom org-scheduled-delay-days 0org-scheduled-delay-days3273,132444
(defcustom org-read-date-prefer-future torg-read-date-prefer-future3288,133000
(defcustom org-agenda-jump-prefer-future 'org-read-date-prefer-futureorg-agenda-jump-prefer-future3317,134083
(defcustom org-read-date-force-compatible-dates torg-read-date-force-compatible-dates3331,134629
(defcustom org-read-date-display-live torg-read-date-display-live3362,136047
(defvaralias 'org-popup-calendar-for-date-promptorg-popup-calendar-for-date-prompt3368,136250
(defcustom org-read-date-popup-calendar torg-read-date-popup-calendar3371,136333
(defcustom org-extend-today-until 0org-extend-today-until3379,136670
(defcustom org-use-effective-time nilorg-use-effective-time3394,137411
(defcustom org-use-last-clock-out-time-as-effective-time nilorg-use-last-clock-out-time-as-effective-time3403,137748
(defcustom org-edit-timestamp-down-means-later nilorg-edit-timestamp-down-means-later3412,138078
(defcustom org-calendar-follow-timestamp-change torg-calendar-follow-timestamp-change3418,138262
(defgroup org-tags nilorg-tags3425,138518
(defcustom org-tag-alist nilorg-tag-alist3430,138616
(defcustom org-tag-persistent-alist nilorg-tag-persistent-alist3467,139876
(defcustom org-complete-tags-always-offer-all-agenda-tags nilorg-complete-tags-always-offer-all-agenda-tags3502,141108
(defvar org-file-tags nilorg-file-tags3515,141540
(defcustom org-use-fast-tag-selection 'autoorg-use-fast-tag-selection3521,141775
(defcustom org-fast-tag-selection-single-key nilorg-fast-tag-selection-single-key3536,142436
(defvar org-fast-tag-selection-include-todo nilorg-fast-tag-selection-include-todo3548,142921
(defcustom org-tags-column -77org-tags-column3552,143108
(defcustom org-auto-align-tags torg-auto-align-tags3562,143517
(defcustom org-use-tag-inheritance torg-use-tag-inheritance3570,143850
(defcustom org-tags-exclude-from-inheritance nilorg-tags-exclude-from-inheritance3590,144837
(defun org-tag-inherit-p (tag)org-tag-inherit-p3598,145170
(defcustom org-tags-match-list-sublevels torg-tags-match-list-sublevels3610,145621
(defcustom org-tags-sort-function nilorg-tags-sort-function3632,146606
(defvar org-tags-history nilorg-tags-history3641,146947
(defvar org-last-tags-completion-table nilorg-last-tags-completion-table3643,147019
(defvar org-after-tags-change-hook nilorg-after-tags-change-hook3645,147108
(defgroup org-properties nilorg-properties3648,147209
(defcustom org-property-format "%-10s %s"org-property-format3653,147325
(defcustom org-properties-postprocess-alist nilorg-properties-postprocess-alist3661,147655
(defcustom org-use-property-inheritance nilorg-use-property-inheritance3685,148626
(defun org-property-inherit-p (property)org-property-inherit-p3715,149933
(defcustom org-columns-default-format "%25ITEM %TODO %3PRIORITY %TAGS"org-columns-default-format3726,150405
(defcustom org-columns-ellipses ".."org-columns-ellipses3734,150680
(defconst org-global-properties-fixedorg-global-properties-fixed3744,151190
(defcustom org-global-properties nilorg-global-properties3757,151765
(defvar-local org-file-properties nilorg-file-properties3774,152304
(defgroup org-agenda nilorg-agenda3779,152493
(defvar-local org-category nilorg-category3784,152603
(defcustom org-agenda-files nilorg-agenda-files3798,153020
(defcustom org-agenda-file-regexp "\\`[^.].*\\.org\\'"org-agenda-file-regexp3817,153805
(defvaralias 'org-agenda-multi-occur-extra-filesorg-agenda-multi-occur-extra-files3825,154142
(defcustom org-agenda-text-search-extra-files nilorg-agenda-text-search-extra-files3828,154231
(defcustom org-agenda-skip-unavailable-files nilorg-agenda-skip-unavailable-files3845,155057
(defcustom org-agenda-diary-file 'diary-fileorg-agenda-diary-file3851,155284
(defgroup org-latex nilorg-latex3861,155762
(defcustom org-format-latex-optionsorg-format-latex-options3866,155873
(defcustom org-format-latex-signal-error torg-format-latex-signal-error3892,157324
(defcustom org-latex-to-mathml-jar-file nilorg-latex-to-mathml-jar-file3899,157538
(defcustom org-latex-to-mathml-convert-command nilorg-latex-to-mathml-convert-command3911,157921
(defcustom org-preview-latex-default-process 'dvipngorg-preview-latex-default-process3934,158716
(defcustom org-preview-latex-process-alistorg-preview-latex-process-alist3943,159033
(defcustom org-preview-latex-image-directory "ltximg/"org-preview-latex-image-directory4034,163520
(defun org-format-latex-mathml-available-p ()org-format-latex-mathml-available-p4044,163855
(defcustom org-format-latex-header "\\documentclass{article}org-format-latex-header4057,164358
(defun org-set-packages-alist (var val)org-set-packages-alist4084,165422
(defun org-get-packages-alist (var)org-get-packages-alist4092,165664
(defcustom org-latex-default-packages-alistorg-latex-default-packages-alist4100,165900
(defcustom org-latex-packages-alist nilorg-latex-packages-alist4173,168427
(defgroup org-appearance nilorg-appearance4212,169681
(defcustom org-level-color-stars-only nilorg-level-color-stars-only4217,169788
(defcustom org-hide-leading-stars nilorg-hide-leading-stars4225,170081
(defcustom org-hidden-keywords nilorg-hidden-keywords4241,170668
(defcustom org-custom-properties nilorg-custom-properties4252,171112
(defcustom org-fontify-done-headline nilorg-fontify-done-headline4261,171447
(defcustom org-fontify-emphasized-text torg-fontify-emphasized-text4269,171790
(defcustom org-fontify-whole-heading-line nilorg-fontify-whole-heading-line4275,172008
(defcustom org-highlight-latex-and-related nilorg-highlight-latex-and-related4282,172227
(defcustom org-hide-emphasis-markers nilorg-hide-emphasis-markers4299,172888
(defcustom org-hide-macro-markers nilorg-hide-macro-markers4305,173063
(defcustom org-pretty-entities nilorg-pretty-entities4310,173218
(defcustom org-pretty-entities-include-sub-superscripts torg-pretty-entities-include-sub-superscripts4317,173416
(defvar org-emph-re nilorg-emph-re4323,173615
(defvar org-verbatim-re nilorg-verbatim-re4334,174186
(defvar org-emphasis-regexp-components) ; defined just beloworg-emphasis-regexp-components4337,174267
(defvar org-emphasis-alist) ; defined just beloworg-emphasis-alist4338,174328
(defun org-set-emph-re (var val)org-set-emph-re4339,174377
(defvar org-emphasis-regexp-componentsorg-emphasis-regexp-components4360,175292
(defcustom org-emphasis-alistorg-emphasis-alist4378,176290
(defvar org-protecting-blocks '("src" "example" "export")org-protecting-blocks4404,177097
(defvar mark-active)mark-active4410,177365
(defvar align-mode-rules-list)align-mode-rules-list4455,179441
(defvar calc-embedded-close-formula)calc-embedded-close-formula4456,179472
(defvar calc-embedded-open-formula)calc-embedded-open-formula4457,179509
(defvar calc-embedded-open-mode)calc-embedded-open-mode4458,179545
(defvar font-lock-unfontify-region-function)font-lock-unfontify-region-function4459,179578
(defvar iswitchb-temp-buflist)iswitchb-temp-buflist4460,179623
(defvar org-agenda-tags-todo-honor-ignore-options)org-agenda-tags-todo-honor-ignore-options4461,179654
(defvar remember-data-file)remember-data-file4462,179705
(defvar texmathp-why)texmathp-why4463,179733
(defun turn-on-orgtbl ()turn-on-orgtbl4466,179771
(defun org-at-table-p (&optional table-type)org-at-table-p4471,179882
(defun org-at-table.el-p ()org-at-table.el-p4480,180297
(defun org-at-table-hline-p ()org-at-table-hline-p4487,180566
(defun org-table-map-tables (function &optional quietly)org-table-map-tables4492,180730
(defun org-at-TBLFM-p (&optional pos)org-at-TBLFM-p4515,181766
(defvar org-clock-start-time)org-clock-start-time4523,182059
(defvar org-clock-marker (make-marker)org-clock-marker4524,182089
(defvar org-clock-hd-marker (make-marker)org-clock-hd-marker4526,182169
(defvar org-clock-heading ""org-clock-heading4528,182279
(defun org-clock-is-active ()org-clock-is-active4530,182353
(defun org-check-running-clock ()org-check-running-clock4535,182515
(defun org-clocktable-try-shift (dir n)org-clocktable-try-shift4545,182930
(defun org-clock-persistence-insinuate ()org-clock-persistence-insinuate4551,183160
(defgroup org-archive nilorg-archive4557,183357
(defcustom org-archive-location "%s_archive::"org-archive-location4562,183476
(defcustom org-agenda-skip-archived-trees torg-agenda-skip-archived-trees4621,185887
(defcustom org-columns-skip-archived-trees torg-columns-skip-archived-trees4630,186285
(defcustom org-cycle-open-archived-trees nilorg-cycle-open-archived-trees4636,186463
(defcustom org-sparse-tree-open-archived-trees nilorg-sparse-tree-open-archived-trees4645,186830
(defcustom org-sparse-tree-default-date-type nilorg-sparse-tree-default-date-type4653,187118
(defun org-cycle-hide-archived-subtrees (state)org-cycle-hide-archived-subtrees4674,187950
(defun org-force-cycle-archived ()org-force-cycle-archived4691,188702
(defun org-hide-archived-subtrees (beg end)org-hide-archived-subtrees4698,188910
(defun org-flag-subtree (flag)org-flag-subtree4711,189413
(defalias 'org-advertized-archive-subtree 'org-archive-subtree)org-advertized-archive-subtree4719,189609
(defvar org-id-track-globally)org-id-track-globally4731,190007
(defvar-local org-todo-regexp nilorg-todo-regexp4735,190109
(defvar-local org-not-done-regexp nilorg-not-done-regexp4740,190314
(defvar-local org-not-done-heading-regexp nilorg-not-done-heading-regexp4745,190543
(defvar-local org-todo-line-regexp nilorg-todo-line-regexp4750,190762
(defvar-local org-complex-heading-regexp nilorg-complex-heading-regexp4755,190996
(defvar-local org-complex-heading-regexp-format nilorg-complex-heading-regexp-format4767,191336
(defvar-local org-todo-line-tags-regexp nilorg-todo-line-tags-regexp4773,191610
(defconst org-plain-time-of-day-regexporg-plain-time-of-day-regexp4777,191772
(defconst org-plain-time-extension-regexporg-plain-time-extension-regexp4792,192306
(defconst org-stamp-time-of-day-regexporg-stamp-time-of-day-regexp4804,192756
(defconst org-startup-optionsorg-startup-options4817,193305
(defcustom org-group-tags torg-group-tags4882,196275
(defvar org-inhibit-startup nil)        ; Dynamically-scoped param.org-inhibit-startup4889,196471
(defun org-toggle-tags-groups ()org-toggle-tags-groups4891,196540
(defun org--tag-add-to-alist (alist1 alist2)org--tag-add-to-alist4905,197025
(defun org-set-regexps-and-options (&optional tags-only)org-set-regexps-and-options4939,198086
(defun org--setup-collect-keywords (regexp &optional files alist)org--setup-collect-keywords5100,204511
(defun org-tag-string-to-alist (s)org-tag-string-to-alist5204,208772
(defun org-tag-alist-to-string (alist &optional skip-key)org-tag-alist-to-string5241,210116
(defun org-tag-alist-to-groups (alist)org-tag-alist-to-groups5270,210937
(defvar org--file-cache (make-hash-table :test #'equal)org--file-cache5291,211805
(defun org-reset-file-cache ()org-reset-file-cache5295,211990
(defun org-file-url-p (file)org-file-url-p5299,212115
(defun org-file-contents (file &optional noerror nocache)org-file-contents5304,212234
(defun org-extract-log-state-settings (x)org-extract-log-state-settings5350,213771
(defun org-remove-keyword-keys (list)org-remove-keyword-keys5362,214301
(defun org-assign-fast-keys (alist)org-assign-fast-keys5370,214523
(defvar org-window-configuration nilorg-window-configuration5392,215213
(defvar org-selected-window nilorg-selected-window5394,215311
(defvar org-finish-function nilorg-finish-function5396,215404
(defvar org-last-state)org-last-state5399,215544
(defvar org-entities)     ;; defined in org-entities.elorg-entities5402,215632
(defvar org-struct-menu)org-struct-menu5403,215688
(defvar org-org-menu)org-org-menu5404,215713
(defvar org-tbl-menu)org-tbl-menu5405,215735
(defvar org-table-may-need-update torg-table-may-need-update5411,215864
(defun org-before-change-function (_beg _end)org-before-change-function5415,216043
(defvar org-mode-map)org-mode-map5418,216189
(defvar org-inhibit-startup-visibility-stuff nil) ; Dynamically-scoped param.org-inhibit-startup-visibility-stuff5419,216211
(defvar org-agenda-keep-modes nil)      ; Dynamically-scoped param.org-agenda-keep-modes5420,216289
(defvar org-inhibit-logging nil)        ; Dynamically-scoped param.org-inhibit-logging5421,216357
(defvar org-inhibit-blocking nil)       ; Dynamically-scoped param.org-inhibit-blocking5422,216425
(defvar org-table-buffer-is-an nil)org-table-buffer-is-an5423,216493
(defvar bidi-paragraph-direction)bidi-paragraph-direction5425,216530
(defvar buffer-face-mode-face)buffer-face-mode-face5426,216564
(define-derived-mode org-mode outline-mode "Org"org-mode5451,217159
(defvar org-mode-transpose-word-syntax-tableorg-mode-transpose-word-syntax-table5609,223683
(defun org-find-invisible-foreground ()org-find-invisible-foreground5618,224013
(defun org-current-time (&optional rounding-minutes past)org-current-time5632,224496
(defun org-today ()org-today5649,225154
(defvar org-mouse-map (make-sparse-keymap))org-mouse-map5656,225354
(defconst org-non-link-chars "]\t\n\r<>")org-non-link-chars5667,225777
(defvar org-link-types-re nilorg-link-types-re5668,225819
(defvar org-link-re-with-space nilorg-link-re-with-space5670,225911
(defvar org-link-re-with-space2 nilorg-link-re-with-space25672,226016
(defvar org-link-re-with-space3 nilorg-link-re-with-space35674,226122
(defvar org-angle-link-re nilorg-angle-link-re5676,226232
(defvar org-plain-link-re nilorg-plain-link-re5678,226323
(defvar org-bracket-link-regexp nilorg-bracket-link-regexp5680,226394
(defvar org-bracket-link-analytic-regexp nilorg-bracket-link-analytic-regexp5682,226470
(defvar org-bracket-link-analytic-regexp++ nilorg-bracket-link-analytic-regexp++5690,226658
(defvar org-any-link-re nilorg-any-link-re5692,226786
(defconst org-match-sexp-depth 3org-match-sexp-depth5695,226858
(defun org-create-multibrace-regexp (left right n)org-create-multibrace-regexp5698,226952
(defconst org-match-substring-regexporg-match-substring-regexp5716,227755
(defconst org-match-substring-with-braces-regexporg-match-substring-with-braces-regexp5726,228120
(defun org-make-link-regexps ()org-make-link-regexps5732,228358
(defvar org-emph-face nil)org-emph-face5785,229946
(defun org-do-emphasis-faces (limit)org-do-emphasis-faces5787,229974
(defun org-emphasize (&optional char)org-emphasize5835,231944
(defconst org-nonsticky-propsorg-nonsticky-props5880,233628
(defsubst org-rear-nonsticky-at (pos)org-rear-nonsticky-at5883,233753
(defun org-activate-links (limit)org-activate-links5886,233873
(defun org-activate-code (limit)org-activate-code5953,236550
(defcustom org-src-fontify-natively torg-src-fontify-natively5960,236843
(defcustom org-allow-promoting-top-level-subtree nilorg-allow-promoting-top-level-subtree5969,237075
(defun org-fontify-meta-lines-and-blocks (limit)org-fontify-meta-lines-and-blocks5977,237313
(defun org-fontify-meta-lines-and-blocks-1 (limit)org-fontify-meta-lines-and-blocks-15984,237552
(defun org-fontify-drawers (limit)org-fontify-drawers6083,241794
(defun org-fontify-macros (limit)org-fontify-macros6092,242105
(defun org-activate-footnote-links (limit)org-activate-footnote-links6110,242783
(defun org-activate-dates (limit)org-activate-dates6133,243529
(defvar-local org-target-link-regexp nilorg-target-link-regexp6149,244225
(defconst org-target-regexp (let ((border "[^<>\n\r \t]"))org-target-regexp6152,244329
(defconst org-radio-target-regexp (format "<%s>" org-target-regexp)org-radio-target-regexp6157,244519
(defconst org-any-target-regexporg-any-target-regexp6160,244637
(defun org-activate-target-links (limit)org-activate-target-links6164,244778
(defun org-update-radio-target-regexp ()org-update-radio-target-regexp6181,245424
(defvar org-latex-and-related-regexp nilorg-latex-and-related-regexp6234,247187
(defun org-compute-latex-and-related-regexp ()org-compute-latex-and-related-regexp6237,247307
(defun org-do-latex-and-related (limit)org-do-latex-and-related6266,248502
(defun org-restart-font-lock ()org-restart-font-lock6309,250133
(defun org-activate-tags (limit)org-activate-tags6315,250325
(defun org-outline-level ()org-outline-level6324,250659
(defvar org-font-lock-keywords nil)org-font-lock-keywords6337,251127
(defsubst org-re-property (property &optional literal allow-null value)org-re-property6339,251164
(defconst org-property-reorg-property-re6364,252110
(defvar org-font-lock-hook nilorg-font-lock-hook6374,252475
(defvar org-font-lock-extra-keywords nil) ;Dynamically scoped.org-font-lock-extra-keywords6377,252564
(defvar org-font-lock-set-keywords-hook nilorg-font-lock-set-keywords-hook6379,252628
(defun org-font-lock-hook (limit)org-font-lock-hook6385,252960
(defun org-set-font-lock-defaults ()org-set-font-lock-defaults6389,253088
(defun org-toggle-pretty-entities ()org-toggle-pretty-entities6497,257068
(defvar-local org-custom-properties-overlays nilorg-custom-properties-overlays6509,257513
(defun org-toggle-custom-properties-visibility ()org-toggle-custom-properties-visibility6512,257613
(defun org-fontify-entities (limit)org-fontify-entities6539,258857
(defun org-fontify-like-in-org-mode (s &optional odd-levels)org-fontify-like-in-org-mode6565,259743
(defvar org-m nil)org-m6574,259994
(defvar org-l nil)org-l6575,260013
(defvar org-f nil)org-f6576,260032
(defun org-get-level-face (n)org-get-level-face6577,260051
(defun org-face-from-face-or-color (context inherit face-or-color)org-face-from-face-or-color6589,260581
(defun org-get-todo-face (kwd)org-get-todo-face6598,260930
(defun org-get-priority-face (priority)org-get-priority-face6607,261288
(defun org-get-tag-face (tag)org-get-tag-face6614,261521
(defun org-font-lock-add-priority-faces (limit)org-font-lock-add-priority-faces6622,261797
(defun org-font-lock-add-tag-faces (limit)org-font-lock-add-tag-faces6630,262121
(defun org-unfontify-region (beg end &optional _maybe_loudly)org-unfontify-region6639,262472
(defconst org-script-display  '(((raise -0.3) (height 0.7))org-script-display6653,263044
(defun org-remove-font-lock-display-properties (beg end)org-remove-font-lock-display-properties6659,263240
(defun org-raise-scripts (limit)org-raise-scripts6671,263728
(defun org-remove-empty-overlays-at (pos)org-remove-empty-overlays-at6706,265198
(defun org-show-empty-lines-in-parent ()org-show-empty-lines-in-parent6714,265506
(defun org-files-list ()org-files-list6720,265753
(defsubst org-entry-beginning-position ()org-entry-beginning-position6732,266219
(defsubst org-entry-end-position ()org-entry-end-position6736,266370
(defun org-subtree-end-visible-p ()org-subtree-end-visible-p6740,266508
(defun org-first-headline-recenter ()org-first-headline-recenter6745,266672
(defun org-show-entry ()org-show-entry6758,267071
(defun org-show-children (&optional level)org-show-children6775,267518
(defun org-show-subtree ()org-show-subtree6812,268830
(defun org-hide-block-toggle-maybe ()org-hide-block-toggle-maybe6820,269042
(defun org-hide-block-toggle (&optional force)org-hide-block-toggle6827,269308
(defun org-hide-block-toggle-all ()org-hide-block-toggle-all6865,270873
(defun org-hide-block-all ()org-hide-block-all6869,271015
(defun org-cycle-hide-drawers (state &optional exceptions)org-cycle-hide-drawers6877,271204
(defun org-flag-drawer (flag &optional element)org-flag-drawer6902,272360
(defvar-local org-cycle-global-status nil)org-cycle-global-status6927,273321
(defvar-local org-cycle-subtree-status nil)org-cycle-subtree-status6929,273408
(defun org-show-all (&optional types)org-show-all6932,273498
(defun org-cycle (&optional arg)org-cycle6947,274087
(defun org-cycle-internal-global ()org-cycle-internal-global7117,280411
(defvar org-called-with-limited-levels nilorg-called-with-limited-levels7150,281807
(defun org-cycle-internal-local ()org-cycle-internal-local7153,281916
(defun org-global-cycle (&optional arg)org-global-cycle7253,285997
(defun org-set-startup-visibility ()org-set-startup-visibility7271,286689
(defun org-set-visibility-according-to-property ()org-set-visibility-according-to-property7288,287274
(defun org-overview ()org-overview7316,288046
(defun org-content (&optional arg)org-content7332,288647
(defun org-optimize-window-after-visibility-change (state)org-optimize-window-after-visibility-change7352,289285
(defun org-clean-visibility-after-subtree-move ()org-clean-visibility-after-subtree-move7363,289772
(defun org-cycle-show-empty-lines (state)org-cycle-show-empty-lines7393,290733
(defun org-show-context (&optional key)org-show-context7439,292412
(defun org-show-set-visibility (detail)org-show-set-visibility7449,292823
(defvar org-reveal-start-hook nilorg-reveal-start-hook7483,294133
(defun org-reveal (&optional siblings)org-reveal7486,294211
(defvar org-indirect-dedicated-frame nilorg-indirect-dedicated-frame7511,295101
(defvar org-last-indirect-buffer nil)org-last-indirect-buffer7513,295203
(defun org-tree-to-indirect-buffer (&optional arg)org-tree-to-indirect-buffer7515,295242
(defun org-get-indirect-buffer (&optional buffer heading)org-get-indirect-buffer7581,297934
(defun org-set-frame-title (title)org-set-frame-title7595,298415
(defun org--line-empty-p (n)org--line-empty-p7603,298632
(defun org-previous-line-empty-p ()org-previous-line-empty-p7614,298906
(defun org-next-line-empty-p ()org-next-line-empty-p7619,299058
(defun org--blank-before-heading-p (&optional parent)org--blank-before-heading-p7624,299206
(defun org-insert-heading (&optional arg invisible-ok top)org-insert-heading7647,300049
(defun org-N-empty-lines-before-current (n)org-N-empty-lines-before-current7743,303984
(defun org-get-heading (&optional no-tags no-todo no-priority no-comment)org-get-heading7756,304422
(defun org-heading-components ()org-heading-components7783,305460
(defun org-get-entry ()org-get-entry7802,306238
(defun org-edit-headline (&optional heading)org-edit-headline7808,306429
(defun org-insert-heading-after-current ()org-insert-heading-after-current7826,307068
(defun org-insert-heading-respect-content (&optional invisible-ok)org-insert-heading-respect-content7834,307296
(defun org-insert-todo-heading-respect-content (&optional force-state)org-insert-todo-heading-respect-content7839,307493
(defun org-insert-todo-heading (arg &optional force-heading)org-insert-todo-heading7844,307703
(defun org-insert-subheading (arg)org-insert-subheading7880,309057
(defun org-insert-todo-subheading (arg)org-insert-todo-subheading7889,309326
(defvar org-after-demote-entry-hook nilorg-after-demote-entry-hook7900,309663
(defvar org-after-promote-entry-hook nilorg-after-promote-entry-hook7905,309873
(defun org-promote-subtree ()org-promote-subtree7910,310086
(defun org-demote-subtree ()org-demote-subtree7918,310302
(defun org-do-promote ()org-do-promote7926,310527
(defun org-do-demote ()org-do-demote7937,310876
(defun org-fix-position-after-promote ()org-fix-position-after-promote7948,311221
(defun org-current-level ()org-current-level7959,311644
(defun org-get-previous-line-level ()org-get-previous-line-level7968,312047
(defun org-reduced-level (l)org-reduced-level7977,312404
(defun org-level-increment ()org-level-increment7985,312624
(defun org-get-valid-level (level &optional change)org-get-valid-level7991,312840
(defun org-promote ()org-promote8003,313464
(defun org-demote ()org-demote8023,314311
(defun org-cycle-level ()org-cycle-level8037,314913
(defun org-map-tree (fun)org-map-tree8073,316431
(defun org-map-region (fun beg end)org-map-region8085,316756
(defun org-fixup-indentation (diff)org-fixup-indentation8100,317169
(defun org-convert-to-odd-levels ()org-convert-to-odd-levels8206,321168
(defun org-convert-to-oddeven-levels ()org-convert-to-oddeven-levels8222,321747
(defun org-tr-level (n)org-tr-level8246,322738
(defun org-move-subtree-up (&optional arg)org-move-subtree-up8252,322893
(defun org-move-subtree-down (&optional arg)org-move-subtree-down8257,323085
(defvar org-subtree-clip ""org-subtree-clip8315,325141
(defvar org-subtree-clip-folded nilorg-subtree-clip-folded8320,325363
(defun org-cut-subtree (&optional n)org-cut-subtree8324,325491
(defun org-copy-subtree (&optional n cut force-store-markers nosubtrees)org-copy-subtree8331,325746
(defun org-paste-subtree (&optional level tree for-yank remove)org-paste-subtree8371,327410
(defun org-kill-is-subtree-p (&optional txt)org-kill-is-subtree-p8478,331651
(defvar org-markers-to-move nilorg-markers-to-move8503,332661
(defun org-save-markers-in-region (beg end)org-save-markers-in-region8508,332852
(defun org-check-and-save-marker (marker beg end)org-check-and-save-marker8522,333497
(defun org-reinstall-markers-in-region (beg)org-reinstall-markers-in-region8530,333835
(defun org-narrow-to-subtree ()org-narrow-to-subtree8536,334059
(defun org-toggle-narrow-to-subtree ()org-toggle-narrow-to-subtree8548,334412
(defun org-narrow-to-block ()org-narrow-to-block8555,334601
(defun org-clone-subtree-with-time-shift (n &optional shift)org-clone-subtree-with-time-shift8565,334901
(defun org-sort (&optional with-case)org-sort8678,339216
(defun org-sort-remove-invisible (s)org-sort-remove-invisible8688,339553
(defvar org-priority-regexp) ; defined later in the fileorg-priority-regexp8698,339951
(defvar org-after-sorting-entries-or-items-hook nilorg-after-sorting-entries-or-items-hook8700,340009
(defun org-sort-entriesorg-sort-entries8706,340330
(defun org-contextualize-keys (alist contexts)org-contextualize-keys8939,348893
(defun org-contextualize-validate-key (key contexts)org-contextualize-validate-key8991,350362
(defun org-string-collate-greaterp (s1 s2)org-string-collate-greaterp9018,351378
(defun org-run-like-in-org-mode (cmd)org-run-like-in-org-mode9023,351543
(defun org-get-category (&optional pos force-refresh)org-get-category9038,352115
(defun org-refresh-properties (dprop tprop)org-refresh-properties9049,352491
(defun org-refresh-property (tprop p &optional inherit)org-refresh-property9071,353458
(defun org-refresh-category-properties ()org-refresh-category-properties9089,354201
(defun org-refresh-stats-properties ()org-refresh-stats-properties9129,355653
(defun org-refresh-effort-properties ()org-refresh-effort-properties9145,356327
(defun org-link-expand-abbrev (link)org-link-expand-abbrev9156,356565
(defvar org-insert-link-history nilorg-insert-link-history9181,357403
(defvar org-stored-links nilorg-stored-links9184,357507
(defvar org-store-link-plist nilorg-store-link-plist9187,357591
(defun org-store-link-functions ()org-store-link-functions9190,357706
(defvar org-agenda-buffer-name) ; Defined in org-agenda.elorg-agenda-buffer-name9218,358917
(defvar org-id-link-to-org-use-id) ; Defined in org-id.elorg-id-link-to-org-use-id9219,358976
(defun org-store-link (arg &optional interactive?)org-store-link9222,359050
(defun org-store-link-props (&rest plist)org-store-link-props9486,368503
(defun org-add-link-props (&rest plist)org-add-link-props9518,369714
(defun org-email-link-description (&optional fmt)org-email-link-description9526,369975
(defun org-make-org-heading-search-string (&optional string)org-make-org-heading-search-string9552,371093
(defconst org-link-escape-charsorg-link-escape-chars9571,371888
(defun org-make-link-string (link &optional description)org-make-link-string9577,372091
(defun org-link-escape (text &optional table merge)org-link-escape9599,373003
(defun org-link-unescape (str)org-link-unescape9621,373824
(defun org-link-unescape-compound (hex)org-link-unescape-compound9630,374148
(defun org-link-unescape-single-byte-sequence (hex)org-link-unescape-single-byte-sequence9663,375225
(defun org-fixup-message-id-for-http (s)org-fixup-message-id-for-http9669,375457
(defun org-link-prettify (link)org-link-prettify9685,375944
(defun org-insert-link-global ()org-insert-link-global9694,376288
(defun org-insert-all-links (arg &optional pre post)org-insert-all-links9701,376521
(defun org-insert-last-stored-link (arg)org-insert-last-stored-link9724,377315
(defun org-link-fontify-links-to-this-file ()org-link-fontify-links-to-this-file9729,377470
(defvar org--links-history nil)org--links-history9751,378232
(defun org-insert-link (&optional complete-file link-location default-description)org-insert-link9752,378264
(defun org-link-try-special-completion (type)org-link-try-special-completion9956,386596
(defun org-file-complete-link (&optional arg)org-file-complete-link9963,386876
(defvar org-link-search-failed nil)org-link-search-failed9985,387598
(defvar org-open-link-functions nilorg-open-link-functions9987,387635
(defun org-next-link (&optional search-backward)org-next-link10004,388450
(defun org-previous-link ()org-previous-link10028,389373
(defun org-translate-link (s)org-translate-link10034,389521
(defun org-translate-link-from-planner (type path)org-translate-link-from-planner10040,389738
(defun org-find-file-at-mouse (ev)org-find-file-at-mouse10061,390680
(defun org-open-at-mouse (ev)org-open-at-mouse10067,390828
(defvar org-window-config-before-follow-link nilorg-window-config-before-follow-link10076,391119
(defun org-open-at-point-global ()org-open-at-point-global10081,391292
(defun org-open-link-from-string (s &optional arg reference-buffer)org-open-link-from-string10102,392192
(defvar org-open-at-point-functions nilorg-open-at-point-functions10117,392727
(defvar org-link-search-inhibit-query nil)org-link-search-inhibit-query10124,392978
(defvar clean-buffer-list-kill-buffer-names) ;Defined in midnight.elclean-buffer-list-kill-buffer-names10125,393021
(defun org--open-doi-link (path)org--open-doi-link10126,393090
(defun org--open-elisp-link (path)org--open-elisp-link10131,393267
(defun org--open-help-link (path)org--open-help-link10148,393872
(defun org--open-shell-link (path)org--open-shell-link10156,394192
(defun org-open-at-point (&optional arg reference-buffer)org-open-at-point10179,394950
(defun org-offer-links-in-entry (buffer marker &optional nth zero)org-offer-links-in-entry10350,401826
(defun org-open-file-with-system (path)org-open-file-with-system10408,404113
(defun org-open-file-with-emacs (path)org-open-file-with-emacs10411,404243
(defvar org-create-file-search-functions nilorg-create-file-search-functions10418,404364
(defvar org-execute-file-search-functions nilorg-execute-file-search-functions10440,405453
(defun org-search-radio-target (target)org-search-radio-target10462,406507
(defun org-link-search (s &optional avoid-pos stealth)org-link-search10482,407210
(defun org-get-buffer-for-internal-link (buffer)org-get-buffer-for-internal-link10646,413499
(defun org-do-occur (regexp &optional cleanup)org-do-occur10662,414151
(defvar org-mark-ring nilorg-mark-ring10684,414897
(defvar org-mark-ring-last-goto nilorg-mark-ring-last-goto10687,414979
(defun org-mark-ring-push (&optional pos buffer)org-mark-ring-push10698,415327
(defun org-mark-ring-goto (&optional n)org-mark-ring-goto10713,415971
(defun org-add-angle-brackets (s)org-add-angle-brackets10730,416716
(defvar org-agenda-buffer-tmp-name)org-agenda-buffer-tmp-name10737,416915
(defvar org-agenda-start-on-weekday)org-agenda-start-on-weekday10738,416951
(defun org-follow-timestamp-link ()org-follow-timestamp-link10739,416988
(defvar org-wait nil)org-wait10766,418076
(defun org-open-file (path &optional in-emacs line search)org-open-file10767,418098
(defun org-file-apps-entry-match-against-dlink-p (entry)org-file-apps-entry-match-against-dlink-p10923,424300
(defun org-default-apps ()org-default-apps10942,424966
(defun org-apps-regexp-alist (list &optional add-auto-mode)org-apps-regexp-alist10951,425236
(defun org-get-org-file ()org-get-org-file10972,425909
(defun org-notes-order-reversed-p ()org-notes-order-reversed-p10979,426182
(defvar org-refile-target-table nilorg-refile-target-table10990,426582
(defvar org-agenda-new-buffers nilorg-agenda-new-buffers10993,426677
(defvar org-refile-cache nilorg-refile-cache10996,426757
(defvar org-refile-markers nilorg-refile-markers10999,426818
(defun org-refile-marker (pos)org-refile-marker11002,426906
(defun org-refile-cache-clear ()org-refile-cache-clear11011,427141
(defun org-refile-cache-check-set (set)org-refile-cache-check-set11018,427392
(defun org-refile-cache-put (set &rest identifiers)org-refile-cache-put11030,427821
(defun org-refile-cache-get (&rest identifiers)org-refile-cache-get11038,428115
(defvar org-outline-path-cache nilorg-outline-path-cache11048,428490
(defun org-refile-get-targets (&optional default-buffer)org-refile-get-targets11055,428779
(defun org--get-outline-path-1 (&optional use-cache)org--get-outline-path-111155,432492
(defun org-get-outline-path (&optional with-self use-cache)org-get-outline-path11186,433684
(defun org-format-outline-path (path &optional width prefix separator)org-format-outline-path11209,434649
(defun org-display-outline-path (&optional file current separator just-return-string)org-display-outline-path11240,435780
(defvar org-refile-history nilorg-refile-history11268,436860
(defvar org-after-refile-insert-hook nilorg-after-refile-insert-hook11271,436930
(defvar org-capture-last-stored-marker)org-capture-last-stored-marker11276,437133
(defvar org-refile-keep nilorg-refile-keep11277,437173
(defun org-copy ()org-copy11280,437263
(defun org-refile (&optional arg default-buffer rfloc msg)org-refile11286,437399
(defun org-refile-goto-last-stored ()org-refile-goto-last-stored11472,444161
(defun org-refile--get-location (refloc tbl)org-refile--get-location11478,444396
(defun org-refile-get-location (&optional prompt default-buffer new-nodes)org-refile-get-location11489,444764
(defun org-refile-check-position (refile-pointer)org-refile-check-position11556,447508
(defun org-refile-new-child (parent-target child)org-refile-new-child11576,448258
(defun org-olpath-completing-read (prompt collection &rest args)org-olpath-completing-read11600,449085
(defun org-find-dblock (name)org-find-dblock11625,449831
(defun org-create-dblock (plist)org-create-dblock11637,450252
(defun org-prepare-dblock ()org-prepare-dblock11653,450844
(defun org-map-dblocks (&optional command)org-map-dblocks11678,451784
(defun org-dblock-update (&optional arg)org-dblock-update11693,452383
(defun org-update-dblock ()org-update-dblock11704,452721
(defun org-beginning-of-dblock ()org-beginning-of-dblock11735,453756
(defun org-update-all-dblocks ()org-update-all-dblocks11749,454192
(defun org-get-export-keywords ()org-get-export-keywords11760,454480
(defconst org-options-keywordsorg-options-keywords11774,455077
(defcustom org-structure-template-alistorg-structure-template-alist11781,455474
(defun org--check-org-structure-template-alist (&optional checklist)org--check-org-structure-template-alist11811,456548
(defun org--insert-structure-template-mks ()org--insert-structure-template-mks11840,457335
(defun org--insert-structure-template-unique-keys (keys)org--insert-structure-template-unique-keys11898,459514
(defun org-insert-structure-template (type)org-insert-structure-template11923,460495
(defun org-toggle-comment ()org-toggle-comment11967,462106
(defvar org-last-todo-state-is-todo nilorg-last-todo-state-is-todo11985,462724
(defvar org-todo-setup-filter-hook nilorg-todo-setup-filter-hook11990,462918
(defvar org-todo-get-default-hook nilorg-todo-get-default-hook11995,463111
(defvar org-agenda-headline-snapshot-before-repeat)org-agenda-headline-snapshot-before-repeat12000,463324
(defun org-current-effective-time ()org-current-effective-time12002,463377
(defun org-todo-yesterday (&optional arg)org-todo-yesterday12015,463828
(defvar org-block-entry-blocking ""org-block-entry-blocking12025,464200
(defun org-cancel-repeater ()org-cancel-repeater12028,464288
(defvar org-state)org-state12044,464827
(defvar org-blocked-by-checkboxes)org-blocked-by-checkboxes12045,464846
(defun org-todo (&optional arg)org-todo12046,464881
(defun org-block-todo-from-children-or-siblings-or-parent (change-plist)org-block-todo-from-children-or-siblings-or-parent12291,475020
(defcustom org-track-ordered-property-with-tag nilorg-track-ordered-property-with-tag12360,478005
(defun org-toggle-ordered-property ()org-toggle-ordered-property12379,478848
(defun org-block-todo-from-checkboxes (change-plist)org-block-todo-from-checkboxes12397,479550
(defun org-entry-blocked-p ()org-entry-blocked-p12430,480821
(defun org-update-statistics-cookies (all)org-update-statistics-cookies12441,481172
(defvar org-entry-property-inherited-from) ;; defined beloworg-entry-property-inherited-from12482,482598
(defun org-update-parent-todo-statistics ()org-update-parent-todo-statistics12483,482658
(defvar org-after-todo-statistics-hook nilorg-after-todo-statistics-hook12574,486417
(defvar org-todo-statistics-hook nilorg-todo-statistics-hook12590,487150
(defun org-todo-trigger-tag-changes (state)org-todo-trigger-tag-changes12595,487389
(defun org-local-logging (value)org-local-logging12610,488056
(defun org-get-todo-sequence-head (kwd)org-get-todo-sequence-head12626,488641
(defun org-fast-todo-selection ()org-fast-todo-selection12642,489211
(defun org-entry-is-todo-p ()org-entry-is-todo-p12711,491358
(defun org-entry-is-done-p ()org-entry-is-done-p12714,491444
(defun org-get-todo-state ()org-get-todo-state12717,491526
(defun org-at-date-range-p (&optional inactive-ok)org-at-date-range-p12725,491766
(defun org-get-repeat (&optional timestamp)org-get-repeat12750,492546
(defvar org-last-changed-timestamp)org-last-changed-timestamp12772,493319
(defvar org-last-inserted-timestamp)org-last-inserted-timestamp12773,493355
(defvar org-log-post-message)org-log-post-message12774,493392
(defvar org-log-note-purpose)org-log-note-purpose12775,493422
(defvar org-log-note-how nil)org-log-note-how12776,493452
(defvar org-log-note-extra)org-log-note-extra12777,493482
(defun org-auto-repeat-maybe (done-word)org-auto-repeat-maybe12778,493510
(defun org-show-todo-tree (arg)org-show-todo-tree12898,498289
(defun org--deadline-or-schedule (arg type time)org--deadline-or-schedule12923,499306
(defun org-deadline (arg &optional time)org-deadline13003,502381
(defun org-schedule (arg &optional time)org-schedule13020,503198
(defun org-get-scheduled-time (pom &optional inherit)org-get-scheduled-time13037,504018
(defun org-get-deadline-time (pom &optional inherit)org-get-deadline-time13045,504323
(defun org-remove-timestamp-with-keyword (keyword)org-remove-timestamp-with-keyword13053,504620
(defvar org-time-was-given) ; dynamically scoped parameterorg-time-was-given13071,505289
(defvar org-end-time-was-given) ; dynamically scoped parameterorg-end-time-was-given13072,505348
(defun org-at-planning-p ()org-at-planning-p13074,505412
(defun org-add-planning-info (what &optional time &rest remove)org-add-planning-info13088,505931
(defvar org-log-note-marker (make-marker)org-log-note-marker13188,509595
(defvar org-log-note-purpose nil)org-log-note-purpose13190,509705
(defvar org-log-note-state nil)org-log-note-state13191,509739
(defvar org-log-note-previous-state nil)org-log-note-previous-state13192,509771
(defvar org-log-note-extra nil)org-log-note-extra13193,509812
(defvar org-log-note-window-configuration nil)org-log-note-window-configuration13194,509844
(defvar org-log-note-return-to (make-marker))org-log-note-return-to13195,509891
(defvar org-log-note-effective-time nilorg-log-note-effective-time13196,509937
(defvar org-log-post-message nilorg-log-post-message13200,510098
(defun org-add-note ()org-add-note13204,510224
(defun org-log-beginning (&optional create)org-log-beginning13210,510390
(defun org-add-log-setup (&optional purpose state prev-state how extra)org-add-log-setup13252,511966
(defun org-skip-over-state-notes ()org-skip-over-state-notes13266,512603
(defun org-add-log-note (&optional _purpose)org-add-log-note13289,513394
(defvar org-note-abort nil) ; dynamically scopedorg-note-abort13322,514759
(defun org-store-log-note ()org-store-log-note13323,514808
(defun org-remove-empty-drawer-at (pos)org-remove-empty-drawer-at13414,518485
(defvar org-ts-type nil)org-ts-type13429,519103
(defun org-sparse-tree (&optional arg type)org-sparse-tree13430,519128
(defvar-local org-occur-highlights nilorg-occur-highlights13484,521504
(defvar-local org-occur-parameters nilorg-occur-parameters13486,521589
(defun org-occur (regexp &optional keep-previous callback)org-occur13497,522150
(defun org-occur-next-match (&optional n _reset)org-occur-next-match13544,524111
(defun org-highlight-new-match (beg end)org-highlight-new-match13570,524951
(defun org-remove-occur-highlights (&optional _beg _end noremove)org-remove-occur-highlights13577,525232
(defvar org-priority-regexp ".*?\\(\\[#\\([A-Z0-9]\\)\\] ?\\)"org-priority-regexp13592,525777
(defvar org-remove-priority-next-time nil)org-remove-priority-next-time13595,525898
(defun org-priority-up ()org-priority-up13597,525942
(defun org-priority-down ()org-priority-down13602,526054
(defun org-priority (&optional action show)org-priority13607,526170
(defun org-show-priority ()org-show-priority13699,529474
(defun org-get-priority (s)org-get-priority13713,529997
(defvar org-agenda-archives-mode)org-agenda-archives-mode13725,530374
(defvar org-map-continue-from nilorg-map-continue-from13726,530408
(defvar org-scanner-tags nilorg-scanner-tags13730,530569
(defvar org-trust-scanner-tags nilorg-trust-scanner-tags13733,530660
(defvar org--matcher-tags-todo-only nil)org--matcher-tags-todo-only13744,531234
(defun org-scan-tags (action matcher todo-only &optional start-level)org-scan-tags13746,531276
(defun org-remove-uninherited-tags (tags)org-remove-uninherited-tags13912,537515
(defun org-match-sparse-tree (&optional todo-only match)org-match-sparse-tree13933,538182
(defalias 'org-tags-sparse-tree 'org-match-sparse-tree)org-tags-sparse-tree13949,538839
(defvar org-cached-props nil)org-cached-props13951,538896
(defun org-cached-entry-get (pom property)org-cached-entry-get13952,538926
(defun org-global-tags-completion-table (&optional files)org-global-tags-completion-table13967,539572
(defun org-make-tags-matcher (match)org-make-tags-matcher13987,540180
(defun org--tags-expand-group (group tag-groups expanded)org--tags-expand-group14138,545927
(defun org-tags-expand (match &optional single-as-list downcased)org-tags-expand14151,546387
(defun org-op-to-function (op &optional stringp)org-op-to-function14236,549709
(defvar org-add-colon-after-tag-completion nil)  ;; dynamically scoped paramorg-add-colon-after-tag-completion14248,550255
(defvar org-tags-overlay (make-overlay 1 1))org-tags-overlay14249,550332
(defun org-add-prop-inherited (s)org-add-prop-inherited14252,550412
(defun org-toggle-tag (tag &optional onoff)org-toggle-tag14256,550506
(defun org--align-tags-here (to-col)org--align-tags-here14275,551122
(defun org-set-tags-command (&optional arg)org-set-tags-command14306,552334
(defun org-align-tags (&optional all)org-align-tags14366,554451
(defun org-set-tags (tags)org-set-tags14389,555242
(defun org-change-tag-in-region (beg end tag off)org-change-tag-in-region14426,556801
(defun org-tags-completion-function (string _predicate &optional flag)org-tags-completion-function14467,558337
(defun org-fast-tag-insert (kwd tags face &optional end)org-fast-tag-insert14493,559351
(defun org-fast-tag-show-exit (flag)org-fast-tag-show-exit14500,559609
(defun org-set-current-tags-overlay (current prefix)org-set-current-tags-overlay14510,559952
(defvar org-last-tag-selection-key nil)org-last-tag-selection-key14516,560235
(defun org-fast-tag-selection (current inherited table &optional todo-table)org-fast-tag-selection14517,560275
(defun org-make-tag-string (tags)org-make-tag-string14724,567554
(defun org--get-local-tags ()org--get-local-tags14730,567729
(defun org-get-tags (&optional pos local)org-get-tags14736,567957
(defun org-get-buffer-tags ()org-get-buffer-tags14768,569261
(defvar org-agenda-skip-comment-trees)org-agenda-skip-comment-trees14779,569621
(defvar org-agenda-skip-function)org-agenda-skip-function14780,569660
(defun org-map-entries (func &optional match scope &rest skip)org-map-entries14781,569694
(defconst org-special-propertiesorg-special-properties14918,575207
(defconst org-default-propertiesorg-default-properties14925,575528
(defun org--valid-property-p (property)org--valid-property-p14936,576106
(defun org--update-property-plist (key val props)org--update-property-plist14942,576283
(defun org-get-property-block (&optional beg force)org-get-property-block14952,576697
(defun org-at-property-p ()org-at-property-p14979,577761
(defun org-property-action ()org-property-action14990,578148
(defun org-inc-effort ()org-inc-effort15002,578652
(defvar org-clock-effort)       ; Defined in org-clock.el.org-clock-effort15007,578785
(defvar org-clock-current-task) ; Defined in org-clock.el.org-clock-current-task15008,578844
(defun org-set-effort (&optional increment value)org-set-effort15009,578903
(defun org-entry-properties (&optional pom which)org-entry-properties15044,580297
(defun org--property-local-values (property literal-nil)org--property-local-values15246,588255
(defun org--property-global-value (property literal-nil)org--property-global-value15271,589237
(defun org-entry-get (pom property &optional inherit literal-nil)org-entry-get15282,589734
(defun org-property-or-variable-value (var &optional inherit)org-property-or-variable-value15313,591218
(defun org-entry-delete (pom property)org-entry-delete15321,591581
(defun org-entry-add-to-multivalued-property (pom property value)org-entry-add-to-multivalued-property15344,592526
(defun org-entry-remove-from-multivalued-property (pom property value)org-entry-remove-from-multivalued-property15353,592958
(defun org-entry-member-in-multivalued-property (pom property value)org-entry-member-in-multivalued-property15362,593387
(defun org-entry-get-multivalued-property (pom property)org-entry-get-multivalued-property15369,593698
(defun org-entry-put-multivalued-property (pom property &rest values)org-entry-put-multivalued-property15375,593950
(defun org-entry-protect-space (s)org-entry-protect-space15383,594366
(defun org-entry-restore-space (s)org-entry-restore-space15391,594596
(defvar org-entry-property-inherited-from (make-marker)org-entry-property-inherited-from15399,594826
(defun org-entry-get-with-inheritance (property &optional literal-nil)org-entry-get-with-inheritance15407,595223
(defvar org-property-changed-functions nilorg-property-changed-functions15438,596416
(defun org-entry-put (pom property value)org-entry-put15443,596611
(defun org-buffer-property-keys (&optional specials defaults columns)org-buffer-property-keys15518,599650
(defun org-property-values (key)org-property-values15584,602056
(defun org-insert-property-drawer ()org-insert-property-drawer15595,602393
(defun org-insert-drawer (&optional arg drawer)org-insert-drawer15614,603182
(defvar org-property-set-functions-alist nilorg-property-set-functions-alist15672,605238
(defun org-set-property-function (property)org-set-property-function15681,605475
(defun org-read-property-value (property &optional pom)org-read-property-value15687,605735
(defvar org-last-set-property nil)org-last-set-property15715,606749
(defvar org-last-set-property-value nil)org-last-set-property-value15716,606784
(defun org-read-property-name ()org-read-property-name15717,606825
(defun org-set-property-and-value (use-last)org-set-property-and-value15730,607248
(defun org-set-property (property value)org-set-property15747,607879
(defun org-find-property (property &optional value)org-find-property15773,609170
(defun org-delete-property (property)org-delete-property15793,609944
(defun org-delete-property-globally (property)org-delete-property-globally15810,610539
(defvar org-columns-current-fmt-compiled) ; defined in org-colview.elorg-columns-current-fmt-compiled15827,611177
(defun org-compute-property-at-point ()org-compute-property-at-point15829,611248
(defvar org-property-allowed-value-functions nilorg-property-allowed-value-functions15842,611800
(defun org-property-get-allowed-values (pom property &optional table)org-property-get-allowed-values15851,612262
(defun org-property-previous-allowed-value (&optional _previous)org-property-previous-allowed-value15884,613486
(defun org-property-next-allowed-value (&optional previous)org-property-next-allowed-value15889,613663
(defun org-find-olp (path &optional this-buffer)org-find-olp15925,615068
(defun org-find-exact-headline-in-buffer (heading &optional buffer pos-only)org-find-exact-headline-in-buffer15969,616704
(defun org-find-exact-heading-in-directory (heading &optional dir)org-find-exact-heading-in-directory15987,617421
(defun org-find-entry-with-id (ident)org-find-entry-with-id16003,618132
(defvar org-last-changed-timestamp nil)org-last-changed-timestamp16018,618745
(defvar org-last-inserted-timestamp nilorg-last-inserted-timestamp16019,618785
(defun org-time-stamp (arg &optional inactive)org-time-stamp16022,618890
(defun org-get-compact-tod (s)org-get-compact-tod16092,621586
(defun org-time-stamp-inactive (&optional arg)org-time-stamp-inactive16108,622222
(defvar org-date-ovl (make-overlay 1 1))org-date-ovl16125,622958
(defvar org-ans1) ; dynamically scoped parameterorg-ans116129,623082
(defvar org-ans2) ; dynamically scoped parameterorg-ans216130,623131
(defvar org-plain-time-of-day-regexp) ; defined beloworg-plain-time-of-day-regexp16132,623181
(defvar org-overriding-default-time nil) ; dynamically scopedorg-overriding-default-time16134,623236
(defvar org-read-date-overlay nil)org-read-date-overlay16135,623298
(defvar org-dcst nil) ; dynamically scopedorg-dcst16136,623333
(defvar org-read-date-history nil)org-read-date-history16137,623376
(defvar org-read-date-final-answer nil)org-read-date-final-answer16138,623411
(defvar org-read-date-analyze-futurep nil)org-read-date-analyze-futurep16139,623451
(defvar org-read-date-analyze-forced-year nil)org-read-date-analyze-forced-year16140,623494
(defvar org-read-date-inactive)org-read-date-inactive16141,623541
(defvar org-read-date-minibuffer-local-maporg-read-date-minibuffer-local-map16143,623574
(defvar org-def)org-def16214,626813
(defvar org-defdecode)org-defdecode16215,626830
(defvar org-with-time)org-with-time16216,626853
(defvar calendar-setup)			; Dynamically scoped.calendar-setup16218,626877
(defun org-read-date (&optional with-time to-time from-string promptorg-read-date16219,626925
(defun org-read-date-display ()org-read-date-display16381,633566
(defun org-read-date-analyze (ans def defdecode)org-read-date-analyze16418,635035
(defvar parse-time-weekdays)parse-time-weekdays16631,643777
(defun org-read-date-get-relative (s today default)org-read-date-get-relative16632,643806
(defun org-order-calendar-date-args (arg1 arg2 arg3)org-order-calendar-date-args16670,645348
(defun org-eval-in-calendar (form &optional keepdate)org-eval-in-calendar16680,645815
(defun org-calendar-select ()org-calendar-select16695,646499
(defun org-insert-time-stamp (time &optional with-hm inactive pre post extra)org-insert-time-stamp16705,646956
(defun org-toggle-time-stamp-overlays ()org-toggle-time-stamp-overlays16732,648193
(defun org-display-custom-time (beg end)org-display-custom-time16751,648949
(defun org-fix-decoded-time (time)org-fix-decoded-time16769,649720
(defun org-time-stamp-to-now (timestamp-string &optional seconds)org-time-stamp-to-now16775,649923
(defun org-deadline-close-p (timestamp-string &optional ndays)org-deadline-close-p16782,650258
(defun org-get-wdays (ts &optional delay zero-delay)org-get-wdays16788,650540
(defun org-calendar-select-mouse (ev)org-calendar-select-mouse16812,651490
(defun org-check-deadlines (ndays)org-check-deadlines16823,651982
(defsubst org-re-timestamp (type)org-re-timestamp16844,652847
(defun org-check-before-date (d)org-check-before-date16869,653645
(defun org-check-after-date (d)org-check-after-date16891,654340
(defun org-check-dates-range (start-date end-date)org-check-dates-range16913,655034
(defun org-evaluate-time-range (&optional to-buffer)org-evaluate-time-range16939,655941
(defun org-make-tdiff-string (y d h m)org-make-tdiff-string17001,658196
(defun org-time-string-to-time (s)org-time-string-to-time17018,658704
(defun org-time-string-to-seconds (s)org-time-string-to-seconds17022,658842
(defun org-time-string-to-absolute (s &optional daynr prefer buffer pos)org-time-string-to-absolute17028,659058
(defun org-days-to-iso-week (days)org-days-to-iso-week17062,660292
(defun org-small-year-to-year (year)org-small-year-to-year17067,660424
(defun org-time-from-absolute (d)org-time-from-absolute17079,660945
(defvar org-agenda-current-date)org-agenda-current-date17085,661218
(defun org-calendar-holiday ()org-calendar-holiday17086,661251
(defun org-diary-sexp-entry (sexp entry d)org-diary-sexp-entry17092,661468
(defun org-diary-to-ical-string (frombuf)org-diary-to-ical-string17117,662246
(defun org-closest-date (start current prefer)org-closest-date17139,663038
(defun org-date-to-gregorian (d)org-date-to-gregorian17232,666346
(defun org-timestamp-up (&optional arg)org-timestamp-up17241,666703
(defun org-timestamp-down (&optional arg)org-timestamp-down17250,667098
(defun org-timestamp-up-day (&optional arg)org-timestamp-up-day17259,667499
(defun org-timestamp-down-day (&optional arg)org-timestamp-down-day17268,667813
(defun org-at-timestamp-p (&optional extended)org-at-timestamp-p17277,668135
(defun org-toggle-timestamp-type ()org-toggle-timestamp-type17351,670646
(defun org-at-clock-log-p ()org-at-clock-log-p17365,671168
(defvar org-clock-history)                     ; defined in org-clock.elorg-clock-history17370,671366
(defvar org-clock-adjust-closest nil)          ; defined in org-clock.elorg-clock-adjust-closest17371,671439
(defun org-timestamp-change (n &optional what updown suppress-tmp-delay)org-timestamp-change17372,671512
(defun org-modify-ts-extra (s pos n dm)org-modify-ts-extra17518,677686
(defun org-recenter-calendar (d)org-recenter-calendar17555,679213
(defun org-goto-calendar (&optional arg)org-goto-calendar17564,679521
(defun org-get-date-from-calendar ()org-get-date-from-calendar17582,680201
(defun org-date-from-calendar ()org-date-from-calendar17588,680396
(defcustom org-image-actual-width torg-image-actual-width17598,680820
(defcustom org-agenda-inhibit-startup nilorg-agenda-inhibit-startup17626,681730
(defcustom org-agenda-ignore-properties nilorg-agenda-ignore-properties17635,682039
(defun org-save-all-org-buffers ()org-save-all-org-buffers17654,682664
(defun org-revert-all-org-buffers ()org-revert-all-org-buffers17662,682969
(defun org-switchb (&optional arg)org-switchb17691,683991
(defun org-buffer-list (&optional predicate exclude-tmp)org-buffer-list17707,684509
(defun org-agenda-files (&optional unrestricted archives)org-agenda-files17745,685745
(defun org-agenda-file-p (&optional file)org-agenda-file-p17776,686875
(defun org-edit-agenda-file-list ()org-edit-agenda-file-list17785,687201
(defun org-store-new-agenda-file-list (list)org-store-new-agenda-file-list17808,688125
(defun org-read-agenda-file-list (&optional pair-with-expansion)org-read-agenda-file-list17828,688788
(defun org-cycle-agenda-files ()org-cycle-agenda-files17848,689523
(defun org-agenda-file-to-front (&optional to-end)org-agenda-file-to-front17864,690156
(defun org-remove-file (&optional file)org-remove-file17889,691182
(defun org-file-menu-entry (file)org-file-menu-entry17912,692084
(defun org-check-agenda-file (file)org-check-agenda-file17915,692161
(defun org-get-agenda-file-buffer (file)org-get-agenda-file-buffer17927,692560
(defun org-release-buffers (blist)org-release-buffers17939,692974
(defun org-agenda-prepare-buffers (files)org-agenda-prepare-buffers17952,693447
(defvar org-cdlatex-mode-map (make-sparse-keymap)org-cdlatex-mode-map18024,696221
(defvar org-cdlatex-texmathp-advice-is-done nilorg-cdlatex-texmathp-advice-is-done18033,696686
(define-minor-mode org-cdlatex-modeorg-cdlatex-mode18036,696808
(defun turn-on-org-cdlatex ()turn-on-org-cdlatex18068,698016
(defun org-try-cdlatex-tab ()org-try-cdlatex-tab18072,698119
(defun org-cdlatex-underscore-caret (&optional _arg)org-cdlatex-underscore-caret18091,698913
(defun org-cdlatex-math-modify (&optional _arg)org-cdlatex-math-modify18100,699291
(defun org-cdlatex-environment-indent (&optional environment item)org-cdlatex-environment-indent18109,699656
(defun org-inside-LaTeX-fragment-p ()org-inside-LaTeX-fragment-p18169,701700
(defun org-inside-latex-macro-p ()org-inside-latex-macro-p18211,703626
(defun org--format-latex-make-overlay (beg end image &optional imagetype)org--format-latex-make-overlay18217,703828
(defun org--list-latex-overlays (&optional beg end)org--list-latex-overlays18233,704446
(defun org-remove-latex-fragment-image-overlays (&optional beg end)org-remove-latex-fragment-image-overlays18240,704768
(defun org-toggle-latex-fragment (&optional arg)org-toggle-latex-fragment18249,705177
(defun org-format-latexorg-format-latex18316,707855
(defun org-create-math-formula (latex-frag &optional mathml-file)org-create-math-formula18438,712440
(defun org-format-latex-as-mathml (latex-frag latex-frag-typeorg-format-latex-as-mathml18499,714910
(defun org--get-display-dpi ()org--get-display-dpi18529,716047
(defun org-create-formula-imageorg-create-formula-image18538,716385
(defun org-splice-latex-header (tpl def-pkg pkg snippets-p &optional extra)org-splice-latex-header18641,720619
(defun org-latex-packages-to-string (pkg &optional snippets-p newline)org-latex-packages-to-string18684,722441
(defun org-dvipng-color (attr)org-dvipng-color18700,722967
(defun org-dvipng-color-format (color-name)org-dvipng-color-format18704,723112
(defun org-latex-color (attr)org-latex-color18710,723309
(defun org-latex-color-format (color-name)org-latex-color-format18714,723455
(defun org-normalize-color (value)org-normalize-color18720,723636
(defvar-local org-inline-image-overlays nil)org-inline-image-overlays18727,723793
(defun org-toggle-inline-images (&optional include-linked)org-toggle-inline-images18729,723839
(defun org-redisplay-inline-images ()org-redisplay-inline-images18745,724446
(defun org-display-inline-images (&optional include-linked refresh beg end)org-display-inline-images18756,724768
(defun org-display-inline-remove-overlay (ov after _beg _end &optional _len)org-display-inline-remove-overlay18890,729708
(defun org-remove-inline-images ()org-remove-inline-images18897,729997
(defun org-remap (map &rest commands)org-remap18906,730198
(define-key org-mode-map [remap outline-mark-subtree] #'org-mark-subtree)org-mode-map18915,730540
(define-key org-mode-map [remap outline-show-subtree] #'org-show-subtree)org-mode-map18916,730614
(define-key org-mode-map [remap outline-forward-same-level]org-mode-map18917,730688
(define-key org-mode-map [remap outline-backward-same-level]org-mode-map18919,730784
(define-key org-mode-map [remap outline-show-branches]org-mode-map18921,730882
(define-key org-mode-map [remap outline-promote] #'org-promote-subtree)org-mode-map18923,730973
(define-key org-mode-map [remap outline-demote] #'org-demote-subtree)org-mode-map18924,731045
(define-key org-mode-map [remap outline-insert-heading] #'org-ctrl-c-ret)org-mode-map18925,731115
(define-key org-mode-map [remap outline-next-visible-heading]org-mode-map18926,731189
(define-key org-mode-map [remap outline-previous-visible-heading]org-mode-map18928,731281
(define-key org-mode-map [remap show-children] #'org-show-children)org-mode-map18930,731381
(define-key org-mode-map (kbd "<backtab>") #'org-shifttab)org-mode-map18946,732084
(define-key org-mode-map org-babel-key-prefix org-babel-map)org-mode-map18986,734151
(defconst org-speed-commands-defaultorg-speed-commands-default19172,745126
(defun org-print-speed-command (e)org-print-speed-command19231,747042
(defun org-speed-command-help ()org-speed-command-help19246,747360
(defun org-speed-move-safe (cmd)org-speed-move-safe19260,747973
(defvar org-self-insert-command-undo-counter 0)org-self-insert-command-undo-counter19270,748337
(defvar org-table-auto-blank-field) ; defined in org-table.elorg-table-auto-blank-field19272,748386
(defvar org-speed-command nil)org-speed-command19273,748448
(defun org-speed-command-activate (keys)org-speed-command-activate19275,748480
(defun org-babel-speed-command-activate (keys)org-babel-speed-command-activate19285,748928
(defcustom org-speed-command-hookorg-speed-command-hook19290,749144
(defun org-self-insert-command (N)org-self-insert-command19309,749866
(defun org-check-before-invisible-edit (kind)org-check-before-invisible-edit19376,752468
(defun org-fix-tags-on-the-fly ()org-fix-tags-on-the-fly19442,755516
(defun org-delete-backward-char (N)org-delete-backward-char19450,755815
(defun org-delete-char (N)org-delete-char19470,756653
(defun org-transpose-words ()org-transpose-words19525,758831
(defvar org-ctrl-c-ctrl-c-hook nilorg-ctrl-c-ctrl-c-hook19534,759150
(defvar org-ctrl-c-ctrl-c-final-hook nilorg-ctrl-c-ctrl-c-final-hook19547,759705
(defvar org-tab-first-hook nilorg-tab-first-hook19560,760261
(defvar org-tab-after-check-for-table-hook nilorg-tab-after-check-for-table-hook19570,760732
(defvar org-tab-after-check-for-cycling-hook nilorg-tab-after-check-for-cycling-hook19579,761148
(defvar org-tab-before-tab-emulation-hook nilorg-tab-before-tab-emulation-hook19586,761510
(defvar org-metaleft-hook nilorg-metaleft-hook19592,761784
(defvar org-metaright-hook nilorg-metaright-hook19595,761923
(defvar org-metaup-hook nilorg-metaup-hook19598,762064
(defvar org-metadown-hook nilorg-metadown-hook19601,762199
(defvar org-shiftmetaleft-hook nilorg-shiftmetaleft-hook19604,762338
(defvar org-shiftmetaright-hook nilorg-shiftmetaright-hook19607,762484
(defvar org-shiftmetaup-hook nilorg-shiftmetaup-hook19610,762632
(defvar org-shiftmetadown-hook nilorg-shiftmetadown-hook19613,762774
(defvar org-metareturn-hook nilorg-metareturn-hook19616,762920
(defvar org-shiftup-hook nilorg-shiftup-hook19619,763060
(defvar org-shiftup-final-hook nilorg-shiftup-final-hook19622,763196
(defvar org-shiftdown-hook nilorg-shiftdown-hook19626,763416
(defvar org-shiftdown-final-hook nilorg-shiftdown-final-hook19629,763556
(defvar org-shiftleft-hook nilorg-shiftleft-hook19633,763780
(defvar org-shiftleft-final-hook nilorg-shiftleft-final-hook19636,763920
(defvar org-shiftright-hook nilorg-shiftright-hook19640,764144
(defvar org-shiftright-final-hook nilorg-shiftright-final-hook19643,764286
(defun org-modifier-cursor-error ()org-modifier-cursor-error19648,764513
(defun org-shiftselect-error ()org-shiftselect-error19652,764718
(defun org-call-for-shift-select (cmd)org-call-for-shift-select19658,765076
(defun org-shifttab (&optional arg)org-shifttab19662,765195
(defun org-shiftmetaleft ()org-shiftmetaleft19678,765869
(defun org-shiftmetaright ()org-shiftmetaright19694,766538
(defun org-shiftmetaup (&optional _arg)org-shiftmetaup19710,767204
(defun org-shiftmetadown (&optional _arg)org-shiftmetadown19724,767803
(defsubst org-hidden-tree-error ()org-hidden-tree-error19738,768434
(defun org-metaleft (&optional _arg)org-metaleft19742,768563
(defun org-metaright (&optional _arg)org-metaright19776,769811
(defun org-check-for-hidden (what)org-check-for-hidden19814,771275
(defun org-metaup (&optional _arg)org-metaup19841,772231
(defun org-metadown (&optional _arg)org-metadown19871,773244
(defun org-shiftup (&optional arg)org-shiftup19901,774297
(defun org-shiftdown (&optional arg)org-shiftdown19925,775348
(defun org-shiftright (&optional arg)org-shiftright19949,776396
(defun org-shiftleft (&optional arg)org-shiftleft19985,777992
(defun org-shiftcontrolright ()org-shiftcontrolright20021,779606
(defun org-shiftcontrolleft ()org-shiftcontrolleft20034,780024
(defun org-shiftcontrolup (&optional n)org-shiftcontrolup20047,780451
(defun org-shiftcontroldown (&optional n)org-shiftcontroldown20056,780794
(defun org-increase-number-at-point (&optional inc)org-increase-number-at-point20065,781143
(defun org-decrease-number-at-point (&optional inc)org-decrease-number-at-point20084,781834
(defun org-ctrl-c-ret ()org-ctrl-c-ret20091,782073
(defun org-find-visible ()org-find-visible20098,782319
(defun org-find-invisible ()org-find-invisible20103,782483
(defun org-copy-visible (beg end)org-copy-visible20109,782656
(defun org-copy-special ()org-copy-special20123,783192
(defun org-cut-special ()org-cut-special20131,783504
(defun org-paste-special (arg)org-paste-special20139,783809
(defun org-edit-special (&optional arg)org-edit-special20148,784154
(defvar org-table-coordinate-overlays) ; defined in org-table.elorg-table-coordinate-overlays20222,787592
(defun org-ctrl-c-ctrl-c (&optional arg)org-ctrl-c-ctrl-c20223,787657
(defun org-mode-restart ()org-mode-restart20453,797214
(defun org-kill-note-or-show-branches ()org-kill-note-or-show-branches20463,797536
(defun org-delete-indentation (&optional arg)org-delete-indentation20476,797957
(defun org-open-line (n)org-open-line20509,799129
(defun org-return (&optional indent)org-return20519,799525
(defun org-return-indent ()org-return-indent20601,802936
(defun org-ctrl-c-tab (&optional _arg)org-ctrl-c-tab20608,803180
(defun org-ctrl-c-star ()org-ctrl-c-star20617,803499
(defun org-ctrl-c-minus ()org-ctrl-c-minus20629,803854
(defun org-toggle-heading (&optional nstars)org-toggle-heading20645,804397
(defun org-meta-return (&optional arg)org-meta-return20740,808074
(defsubst org-in-subtree-not-table-p ()org-in-subtree-not-table-p20755,808661
(defun org-info (&optional node)org-info21020,820478
(defun org-browse-news ()org-browse-news21026,820667
(defun org-submit-bug-report ()org-submit-bug-report21032,820826
(defun org-install-agenda-files-menu ()org-install-agenda-files-menu21092,823253
(defun org-require-autoloaded-modules ()org-require-autoloaded-modules21115,824001
(defun org-reload (&optional uncompiled)org-reload21122,824188
(defun org-customize ()org-customize21172,826061
(defun org-create-customize-menu ()org-create-customize-menu21179,826245
(defun org-link-display-format (s)org-link-display-format21203,827010
(defun org-toggle-link-display ()org-toggle-link-display21214,827364
(defun org-in-clocktable-p ()org-in-clocktable-p21223,827679
(defun org-in-verbatim-emphasis ()org-in-verbatim-emphasis21234,828027
(defun org-goto-marker-or-bmk (marker &optional bookmark)org-goto-marker-or-bmk21240,828192
(defun org-quote-csv-field (s)org-quote-csv-field21254,828683
(defun org-force-self-insert (N)org-force-self-insert21260,828877
(defun org-fill-template (template alist)org-fill-template21265,829009
(defun org-quote-vert (s)org-quote-vert21276,829422
(defun org-uuidgen-p (s)org-uuidgen-p21282,829564
(defun org-in-src-block-p (&optional inside)org-in-src-block-p21286,829745
(defun org-context ()org-context21298,830178
(defun org-between-regexps-p (start-re end-re &optional lim-up lim-down)org-between-regexps-p21417,834726
(defun org-in-block-p (names)org-in-block-p21449,835961
(defun org-occur-in-agenda-files (regexp &optional _nlines)org-occur-in-agenda-files21471,836672
(defun org-occur-link-in-agenda-files ()org-occur-link-in-agenda-files21498,837667
(defun org-back-over-empty-lines ()org-back-over-empty-lines21508,838026
(defun org-replace-escapes (string table)org-replace-escapes21520,838430
(defun org-file-image-p (file)org-file-image-p21549,839820
(defun org-get-cursor-date (&optional with-time)org-get-cursor-date21554,839962
(defun org-mark-subtree (&optional up)org-mark-subtree21582,841112
(defvar org-element-greater-elements)org-element-greater-elements21599,841771
(defun org--get-expected-indentation (element contentsp)org--get-expected-indentation21600,841809
(defun org--align-node-property ()org--align-node-property21703,845995
(defun org-indent-line ()org-indent-line21715,846359
(defun org-indent-region (start end)org-indent-region21799,849503
(defun org-indent-drawer ()org-indent-drawer21922,854324
(defun org-indent-block ()org-indent-block21937,854849
(defun org-setup-filling ()org-setup-filling21973,856111
(defun org-fill-line-break-nobreak-p ()org-fill-line-break-nobreak-p21993,856979
(defun org-fill-paragraph-with-timestamp-nobreak-p ()org-fill-paragraph-with-timestamp-nobreak-p22000,857217
(defun org-fill-n-macro-as-item-nobreak-p ()org-fill-n-macro-as-item-nobreak-p22005,857414
(defvar orgtbl-line-start-regexp) ; From org-table.elorgtbl-line-start-regexp22011,857715
(defun org-adaptive-fill-function ()org-adaptive-fill-function22012,857769
(defun org-fill-element (&optional justify)org-fill-element22070,859901
(defun org-fill-paragraph (&optional justify region)org-fill-paragraph22180,864110
(defun org-auto-fill-function ()org-auto-fill-function22218,865484
(defun org-comment-line-break-function (&optional soft)org-comment-line-break-function22229,865912
(defun org-toggle-fixed-width ()org-toggle-fixed-width22243,866399
(defun org-block-map (function &optional start end)org-block-map22367,871499
(defun org-next-block (arg &optional backward block-regexp)org-next-block22380,872006
(defun org-previous-block (arg &optional block-regexp)org-previous-block22419,873452
(defun org-setup-comments-handling ()org-setup-comments-handling22445,874483
(defun org-insert-comment ()org-insert-comment22454,874881
(defvar comment-empty-lines)		; From newcomment.el.comment-empty-lines22477,875701
(defun org-comment-or-uncomment-region (beg end &rest _)org-comment-or-uncomment-region22478,875753
(defun org-comment-dwim (_arg)org-comment-dwim22550,878423
(defun org-timestamp-from-string (s)org-timestamp-from-string22567,878981
(defun org-timestamp-from-time (time &optional with-time inactive)org-timestamp-from-time22575,879259
(defun org-timestamp-to-time (timestamp &optional end)org-timestamp-to-time22595,880008
(defun org-timestamp-has-time-p (timestamp)org-timestamp-has-time-p22606,880457
(defun org-timestamp-format (timestamp format &optional end utc)org-timestamp-format22610,880599
(defun org-timestamp-split-range (timestamp &optional end)org-timestamp-split-range22624,881037
(defun org-timestamp-translate (timestamp &optional boundary)org-timestamp-translate22655,882230
(defvar reftex-docstruct-symbol)reftex-docstruct-symbol22681,883259
(defvar org--rds)org--rds22682,883292
(defun org-reftex-citation ()org-reftex-citation22684,883311
(defun org-beginning-of-line (&optional n)org-beginning-of-line22713,884349
(defun org-end-of-line (&optional n)org-end-of-line22776,886989
(defun org-backward-sentence (&optional _arg)org-backward-sentence22839,889082
(defun org-forward-sentence (&optional _arg)org-forward-sentence22859,889883
(defun org-kill-line (&optional _arg)org-kill-line22889,891164
(defun org-yank (&optional arg)org-yank22916,892110
(defun org-yank-generic (command arg)org-yank-generic22945,893394
(defun org-yank-folding-would-swallow-text (beg end)org-yank-folding-would-swallow-text23003,895150
(defun org-back-to-heading (&optional invisible-ok)org-back-to-heading23018,895669
(defun org-before-first-heading-p ()org-before-first-heading-p23025,895964
(defun org-at-heading-p (&optional _)org-at-heading-p23032,896158
(defun org-in-commented-heading-p (&optional no-inheritance)org-in-commented-heading-p23036,896257
(defun org-at-comment-p nilorg-at-comment-p23051,896841
(defun org-at-drawer-p nilorg-at-drawer-p23058,897004
(defun org-at-block-p nilorg-at-block-p23064,897153
(defun org-point-at-end-of-empty-headline ()org-point-at-end-of-empty-headline23070,897299
(defun org-at-heading-or-item-p ()org-at-heading-or-item-p23082,897700
(defun org-at-target-p ()org-at-target-p23085,897779
(defun org-up-heading-all (arg)org-up-heading-all23089,897894
(defun org-up-heading-safe ()org-up-heading-safe23095,898130
(defun org-first-sibling-p ()org-first-sibling-p23109,898788
(defun org-goto-sibling (&optional previous)org-goto-sibling23123,899168
(defun org-show-siblings ()org-show-siblings23143,899900
(defun org-goto-first-child ()org-goto-first-child23151,900139
(defun org-show-hidden-entry ()org-show-hidden-entry23163,900605
(defun org-flag-heading (flag &optional entry)org-flag-heading23168,900731
(defun org-get-next-sibling ()org-get-next-sibling23182,901190
(defun org-get-last-sibling ()org-get-last-sibling23193,901628
(defun org-end-of-subtree (&optional invisible-ok to-heading)org-end-of-subtree23206,902085
(defun org-end-of-meta-data (&optional full)org-end-of-meta-data23240,903542
(defun org-forward-heading-same-level (arg &optional invisible-ok)org-forward-heading-same-level23263,904387
(defun org-backward-heading-same-level (arg &optional invisible-ok)org-backward-heading-same-level23291,905555
(defun org-next-visible-heading (arg)org-next-visible-heading23297,905845
(defun org-previous-visible-heading (arg)org-previous-visible-heading23307,906179
(defun org-forward-paragraph ()org-forward-paragraph23317,906529
(defun org-backward-paragraph ()org-backward-paragraph23400,910060
(defun org-forward-element ()org-forward-element23468,912950
(defun org-backward-element ()org-backward-element23488,913744
(defun org-up-element ()org-up-element23521,915026
(defun org-down-element ()org-down-element23533,915537
(defun org-drag-element-backward ()org-drag-element-backward23548,916158
(defun org-drag-element-forward ()org-drag-element-forward23580,917399
(defun org-drag-line-forward (arg)org-drag-line-forward23615,918837
(defun org-drag-line-backward (arg)org-drag-line-backward23629,919184
(defun org-mark-element ()org-mark-element23634,919323
(defun org-narrow-to-element ()org-narrow-to-element23654,920033
(defun org-transpose-element ()org-transpose-element23672,920607
(defun org-unindent-buffer ()org-unindent-buffer23681,920910
(defun org-make-options-regexp (kwds &optional extra)org-make-options-regexp23702,921721
(defun org-info-find-node (&optional nodename)org-info-find-node23714,922104

elpa/org-plus-contrib-20191021/ob-maxima.el,659
(defvar org-babel-tangle-lang-exts)org-babel-tangle-lang-exts38,1212
(defvar org-babel-default-header-args:maxima '())org-babel-default-header-args:maxima41,1311
(defcustom org-babel-maxima-commandorg-babel-maxima-command43,1362
(defun org-babel-maxima-expand (body params)org-babel-maxima-expand49,1538
(defun org-babel-execute:maxima (body params)org-babel-execute:maxima74,2344
(defun org-babel-prep-session:maxima (_session _params)org-babel-prep-session:maxima107,3849
(defun org-babel-maxima-var-to-maxima (pair)org-babel-maxima-var-to-maxima110,3952
(defun org-babel-maxima-elisp-to-maxima (val)org-babel-maxima-elisp-to-maxima122,4344

elpa/org-plus-contrib-20191021/org-id.el,2546
(defgroup org-id nilorg-id80,3037
(defcustom org-id-link-to-org-use-id nilorg-id-link-to-org-use-id85,3151
(defcustom org-id-uuid-program "uuidgen"org-id-uuid-program124,4766
(defcustom org-id-method 'uuidorg-id-method129,4867
(defcustom org-id-prefix nilorg-id-prefix149,5650
(defcustom org-id-include-domain nilorg-id-include-domain160,5989
(defcustom org-id-track-globally torg-id-track-globally172,6480
(defcustom org-id-locations-file (convert-standard-filenameorg-id-locations-file185,7005
(defvar org-id-locations nilorg-id-locations192,7285
(defvar org-id-files nilorg-id-files195,7359
(defcustom org-id-extra-files 'org-agenda-text-search-extra-filesorg-id-extra-files198,7422
(defcustom org-id-search-archives torg-id-search-archives213,8033
(defun org-id-get-create (&optional force)org-id-get-create224,8408
(defun org-id-copy ()org-id-copy234,8735
(defun org-id-get (&optional pom create prefix)org-id-get241,8915
(defun org-id-get-with-outline-path-completion (&optional targets)org-id-get-with-outline-path-completion260,9599
(defun org-id-get-with-outline-drilling ()org-id-get-with-outline-drilling277,10366
(defun org-id-goto (id)org-id-goto287,10796
(defun org-id-find (id &optional markerp)org-id-find300,11186
(defun org-id-new (&optional prefix)org-id-new324,11948
(defun org-id-uuid ()org-id-uuid356,13070
(defun org-id-int-to-b36-one-digit (i)org-id-int-to-b36-one-digit380,13650
(defun org-id-b36-to-int-one-digit (i)org-id-b36-to-int-one-digit387,13861
(defun org-id-int-to-b36 (i &optional length)org-id-int-to-b36396,14200
(defun org-id-b36-to-int (s)org-id-b36-to-int408,14599
(defun org-id-time-to-b36 (&optional time)org-id-time-to-b36415,14796
(defun org-id-decode (id)org-id-decode427,15355
(defun org-id-update-id-locations (&optional files silent)org-id-update-id-locations445,16036
(defun org-id-locations-save ()org-id-locations-save527,18961
(defun org-id-locations-load ()org-id-locations-load538,19355
(defun org-id-add-location (id file)org-id-add-location553,19892
(defun org-id-hash-to-alist (hash)org-id-hash-to-alist564,20364
(defun org-id-alist-to-hash (list)org-id-alist-to-hash575,20637
(defun org-id-paste-tracker (txt &optional buffer-or-file)org-id-paste-tracker588,20953
(defun org-id-find-id-file (id)org-id-find-id-file607,21672
(defun org-id-find-id-in-file (id file &optional markerp)org-id-find-id-in-file617,22055
(defun org-id-store-link ()org-id-store-link640,22860
(defun org-id-open (id)org-id-open656,23403

elpa/org-plus-contrib-20191021/org-registry.el,985
(defgroup org-registry nilorg-registry69,2382
(defcustom org-registry-fileorg-registry-file73,2449
(defcustom org-registry-find-file 'find-file-other-windoworg-registry-find-file79,2591
(defvar org-registry-alist nilorg-registry-alist84,2721
(defun org-registry-show (&optional visit)org-registry-show88,2811
(defun org-registry-display-files (files link)org-registry-display-files134,4479
(defun org-registry-assoc-all (link &optional registry)org-registry-assoc-all147,4916
(defun org-registry-find-all (test &optional registry)org-registry-find-all153,5118
(defun org-registry-visit ()org-registry-visit161,5367
(defun org-registry-initialize (&optional from-scratch)org-registry-initialize168,5530
(defun org-registry-insinuate ()org-registry-insinuate191,6374
(defun org-registry-get-entries (file)org-registry-get-entries199,6637
(defun org-registry-update ()org-registry-update220,7458
(defun org-registry-create (entries)org-registry-create247,8468

elpa/org-plus-contrib-20191021/ob-scheme.el,2157
(defvar geiser-repl--repl)             ; Defined in geiser-repl.elgeiser-repl--repl44,1434
(defvar geiser-impl--implementation)   ; Defined in geiser-impl.elgeiser-impl--implementation45,1501
(defvar geiser-default-implementation) ; Defined in geiser-impl.elgeiser-default-implementation46,1568
(defvar geiser-active-implementations) ; Defined in geiser-impl.elgeiser-active-implementations47,1635
(defvar geiser-debug-show-debug-p)     ; Defined in geiser-debug.elgeiser-debug-show-debug-p48,1702
(defvar geiser-debug-jump-to-debug-p)  ; Defined in geiser-debug.elgeiser-debug-jump-to-debug-p49,1770
(defvar geiser-repl-use-other-window)  ; Defined in geiser-repl.elgeiser-repl-use-other-window50,1838
(defvar geiser-repl-window-allow-split)	; Defined in geiser-repl.elgeiser-repl-window-allow-split51,1905
(defcustom org-babel-scheme-null-to 'hlineorg-babel-scheme-null-to61,2416
(defvar org-babel-default-header-args:scheme '()org-babel-default-header-args:scheme68,2629
(defun org-babel-expand-body:scheme (body params)org-babel-expand-body:scheme71,2733
(defvar org-babel-scheme-repl-map (make-hash-table :test #'equal)org-babel-scheme-repl-map86,3193
(defun org-babel-scheme-cleanse-repl-map ()org-babel-scheme-cleanse-repl-map89,3306
(defun org-babel-scheme-get-session-buffer (session-name)org-babel-scheme-get-session-buffer95,3517
(defun org-babel-scheme-set-session-buffer (session-name buffer)org-babel-scheme-set-session-buffer100,3765
(defun org-babel-scheme-get-buffer-impl (buffer)org-babel-scheme-get-buffer-impl104,3945
(defun org-babel-scheme-get-repl (impl name)org-babel-scheme-get-repl109,4145
(defun org-babel-scheme-make-session-name (buffer name impl)org-babel-scheme-make-session-name120,4490
(defmacro org-babel-scheme-capture-current-message (&rest body)org-babel-scheme-capture-current-message133,4946
(defun org-babel-scheme-execute-with-geiser (code output impl repl)org-babel-scheme-execute-with-geiser149,5514
(defun org-babel-scheme--table-or-string (results)org-babel-scheme--table-or-string187,7032
(defun org-babel-execute:scheme (body params)org-babel-execute:scheme200,7491

elpa/org-plus-contrib-20191021/org-effectiveness.el,2151
(defcustom org-effectiveness-max-todo 50org-effectiveness-max-todo36,1301
(defun org-effectiveness-advice()org-effectiveness-advice42,1463
(defun org-effectiveness-count-keyword(keyword)org-effectiveness-count-keyword53,1796
(defun org-effectiveness-count-todo()org-effectiveness-count-todo60,2078
(defun org-effectiveness-count-done()org-effectiveness-count-done67,2313
(defun org-effectiveness-count-canceled()org-effectiveness-count-canceled74,2548
(defun org-effectiveness-count-task()org-effectiveness-count-task81,2800
(defun org-effectiveness()org-effectiveness88,3040
(defun org-effectiveness-keywords-in-date(keyword date)org-effectiveness-keywords-in-date101,3474
(defun org-effectiveness-dones-in-date(date &optional notmessage)org-effectiveness-dones-in-date106,3690
(defun org-effectiveness-todos-in-date(date)org-effectiveness-todos-in-date115,3992
(defun org-effectiveness-canceled-in-date(date)org-effectiveness-canceled-in-date122,4219
(defun org-effectiveness-ntasks-in-date(date &optional notmessage)org-effectiveness-ntasks-in-date129,4458
(defun org-effectiveness-in-date(date &optional notmessage)org-effectiveness-in-date136,4711
(defun org-effectiveness-month-to-string (m)org-effectiveness-month-to-string149,5231
(defun org-effectiveness-plot(startdate enddate &optional save)org-effectiveness-plot154,5359
(defun org-effectiveness-plot-save(startdate enddate &optional save)org-effectiveness-plot-save199,7787
(defun org-effectiveness-ascii-bar(n &optional label)org-effectiveness-ascii-bar206,8046
(defun org-effectiveness-html-bar(n &optional label)org-effectiveness-html-bar233,8714
(defun org-effectiveness-check-dates (startdate enddate)org-effectiveness-check-dates245,9071
(defun org-effectiveness-plot-ascii (startdate enddate)org-effectiveness-plot-ascii270,10428
(defun org-effectiveness-plot-ascii-ntasks (startdate enddate)org-effectiveness-plot-ascii-ntasks294,11453
(defun org-effectiveness-plot-ascii-dones (startdate enddate)org-effectiveness-plot-ascii-dones317,12491
(defun org-effectiveness-plot-html (startdate enddate)org-effectiveness-plot-html341,13528

elpa/org-plus-contrib-20191021/ox-rss.el,1348
(defgroup org-export-rss nilorg-export-rss80,2802
(defcustom org-rss-image-url "https://orgmode.org/img/org-mode-unicorn-logo.png"org-rss-image-url87,2968
(defcustom org-rss-extension "xml"org-rss-extension92,3135
(defcustom org-rss-categories 'from-tagsorg-rss-categories97,3254
(defcustom org-rss-use-entry-url-as-guid torg-rss-use-entry-url-as-guid107,3652
(defun org-rss-export-as-rss (&optional async subtreep visible-only)org-rss-export-as-rss145,5035
(defun org-rss-export-to-rss (&optional async subtreep visible-only)org-rss-export-to-rss175,6087
(defun org-rss-publish-to-rss (plist filename pub-dir)org-rss-publish-to-rss204,7071
(defun org-rss-headline (headline contents info)org-rss-headline227,7807
(defun org-rss-build-categories (headline info)org-rss-build-categories287,10238
(defun org-rss-template (contents info)org-rss-template297,10640
(defun org-rss-build-channel-info (info)org-rss-build-channel-info320,11550
(defun org-rss-section (section contents info)org-rss-section366,13149
(defun org-rss-timestamp (timestamp contents info)org-rss-timestamp372,13340
(defun org-rss-plain-text (contents info)org-rss-plain-text379,13579
(defun org-rss-final-function (contents backend info)org-rss-final-function388,13822
(defun org-rss-add-pubdate-property ()org-rss-add-pubdate-property398,14089

elpa/org-plus-contrib-20191021/ob-smiles.el,193
(defun org-babel-execute:smiles (body params)org-babel-execute:smiles19,440
(defun molecule-jump (name)molecule-jump25,634
(defun molecule-export (path desc backend)molecule-export30,780

elpa/org-plus-contrib-20191021/org-bibtex-extras.el,386
(defcustom obe-bibtex-file nil "File holding bibtex entries.")obe-bibtex-file66,2501
(defcustom obe-html-link-base nilobe-html-link-base68,2565
(defvar obe-citations nil)obe-citations75,2763
(defun obe-citations ()obe-citations76,2790
(defun obe-html-export-citations ()obe-html-export-citations88,3175
(defun obe-meta-to-json (meta &optional fields)obe-meta-to-json99,3597

elpa/org-plus-contrib-20191021/org-contribdir.el,0

elpa/org-plus-contrib-20191021/ox-extra.el,437
(defun org-latex-header-blocks-filter (backend)org-latex-header-blocks-filter61,2135
(defun org-export-ignore-headlines (data backend info)org-export-ignore-headlines129,4497
(defun org-extra--merge-sections (data _backend info)org-extra--merge-sections158,5847
(defconst ox-extrasox-extras176,6551
(defun ox-extras-activate (extras)ox-extras-activate185,6971
(defun ox-extras-deactivate (extras)ox-extras-deactivate197,7294

elpa/org-plus-contrib-20191021/ob-vbnet.el,388
(defvar org-babel-tangle-lang-exts)org-babel-tangle-lang-exts32,1135
(defcustom org-babel-vbnet-command "mono"org-babel-vbnet-command35,1232
(defcustom org-babel-vbnet-compiler "vbnc"org-babel-vbnet-compiler44,1501
(defun org-babel-execute:vbnet (body params)org-babel-execute:vbnet53,1779
(defun org-babel-prep-session:vbnet (session params)org-babel-prep-session:vbnet76,2866

elpa/org-plus-contrib-20191021/org-loaddefs.el,360
(defvar ob-clojure-literate-auto-jackin-p nil "\ob-clojure-literate-auto-jackin-p72,2116
(defvar orgtbl-exp-regexp "^\\([-+]?[0-9][0-9.]*\\)[eE]\\([-+]?[0-9]+\\)$" "\orgtbl-exp-regexp3359,112402
(defvar org-odt-data-dir "/usr/share/emacs/etc/org" "\org-odt-data-dir3706,123456
(defalias 'org-publish-project 'org-publish)org-publish-project5070,168828

elpa/org-plus-contrib-20191021/org-git-link.el,1078
(defcustom org-git-program "git"org-git-program65,2592
(defun org-gitbare-open (str)org-gitbare-open74,2819
(defun org-git-open-file-internal (gitdir object)org-git-open-file-internal81,3015
(defun org-git-open (str)org-git-open97,3650
(defun org-git-split-dirpath (dirpath)org-git-split-dirpath115,4192
(defun org-git-find-gitdir (path)org-git-find-gitdir122,4490
(defun org-git-split-string (str)org-git-split-string149,5684
(defun org-git-link-filename (str)org-git-link-filename163,6297
(defun org-git-create-searchstring (branch timestring)org-git-create-searchstring174,6754
(defun org-git-create-git-link (file &optional line)org-git-create-git-link178,6850
(defun org-git-store-link ()org-git-store-link187,7300
(defun org-git-insert-link-interactively (file searchstring &optional description)org-git-insert-link-interactively197,7608
(defun org-git-show (gitdir object buffer)org-git-show202,7854
(defun org-git-blob-sha (gitdir object)org-git-blob-sha209,8194
(defun org-git-get-current-branch (gitdir)org-git-get-current-branch217,8587

elpa/org-plus-contrib-20191021/ob-stan.el,340
(defcustom org-babel-stan-cmdstan-directory nilorg-babel-stan-cmdstan-directory50,1672
(defvar org-babel-default-header-args:stanorg-babel-default-header-args:stan59,1993
(defun org-babel-execute:stan (body params)org-babel-execute:stan62,2063
(defun org-babel-prep-session:stan (_session _params)org-babel-prep-session:stan80,2944

elpa/org-plus-contrib-20191021/org-macro.el,1329
(defvar org-link-search-must-match-exact-headline)org-link-search-must-match-exact-headline71,3071
(defvar-local org-macro-templates nilorg-macro-templates75,3138
(defun org-macro--set-template (name value templates)org-macro--set-template86,3491
(defun org-macro--collect-macros (&optional files templates)org-macro--collect-macros98,3920
(defun org-macro-initialize-templates ()org-macro-initialize-templates142,5761
(defun org-macro-expand (macro templates)org-macro-expand180,7167
(defun org-macro-replace-all (templates &optional keywords)org-macro-replace-all208,8244
(defun org-macro-escape-arguments (&rest args)org-macro-escape-arguments272,10675
(defun org-macro-extract-arguments (s)org-macro-extract-arguments296,11467
(defun org-macro--get-property (property location)org-macro--get-property316,12084
(defun org-macro--find-keyword-value (name &optional collect)org-macro--find-keyword-value329,12588
(defun org-macro--find-date ()org-macro--find-date348,13375
(defun org-macro--vc-modified-time (file)org-macro--vc-modified-time363,13874
(defvar org-macro--counter-table nilorg-macro--counter-table387,14606
(defun org-macro--counter-initialize ()org-macro--counter-initialize390,14695
(defun org-macro--counter-increment (name &optional action)org-macro--counter-increment394,14846

elpa/org-plus-contrib-20191021/ob-R.el,2486
(defconst org-babel-header-args:Rorg-babel-header-args:R42,1462
(defconst ob-R-safe-header-argsob-R-safe-header-args69,2178
(defvar org-babel-default-header-args:R '())org-babel-default-header-args:R80,2584
(defcustom org-babel-R-command "R --slave --no-save"org-babel-R-command84,2749
(defvar ess-current-process-name) ; dynamically scopedess-current-process-name90,2907
(defvar ess-local-process-name)   ; dynamically scopedess-local-process-name91,2962
(defun org-babel-edit-prep:R (info)org-babel-edit-prep:R92,3017
(defconst ob-R-transfer-variable-table-with-headerob-R-transfer-variable-table-with-header102,3433
(defconst ob-R-transfer-variable-table-without-headerob-R-transfer-variable-table-without-header121,3858
(defun org-babel-expand-body:R (body params &optional _graphics-file)org-babel-expand-body:R142,4376
(defun org-babel-execute:R (body params)org-babel-execute:R154,4795
(defun org-babel-prep-session:R (session params)org-babel-prep-session:R189,6266
(defun org-babel-load-session:R (session body params)org-babel-load-session:R199,6732
(defun org-babel-variable-assignments:R (params)org-babel-variable-assignments:R210,7087
(defun org-babel-R-quote-tsv-field (s)org-babel-R-quote-tsv-field228,7712
(defun org-babel-R-assign-elisp (name value colnames-p rownames-p)org-babel-R-assign-elisp234,7903
(defvar ess-ask-for-ess-directory) ; dynamically scopedess-ask-for-ess-directory257,9075
(defun org-babel-R-initiate-session (session params)org-babel-R-initiate-session258,9131
(defun org-babel-R-associate-session (session)org-babel-R-associate-session285,10010
(defvar org-babel-R-graphics-devicesorg-babel-R-graphics-devices293,10293
(defun org-babel-R-construct-graphics-device-call (out-file params)org-babel-R-construct-graphics-device-call312,10986
(defconst org-babel-R-eoe-indicator "'org_babel_R_eoe'")org-babel-R-eoe-indicator337,11993
(defconst org-babel-R-eoe-output "[1] \"org_babel_R_eoe\"")org-babel-R-eoe-output338,12050
(defconst org-babel-R-write-object-command "{org-babel-R-write-object-command340,12111
(defun org-babel-R-evaluateorg-babel-R-evaluate371,13234
(defun org-babel-R-evaluate-external-processorg-babel-R-evaluate-external-process380,13595
(defvar ess-eval-visibly-p)ess-eval-visibly-p406,14634
(defun org-babel-R-evaluate-sessionorg-babel-R-evaluate-session408,14663
(defun org-babel-R-process-value-result (result column-names-p)org-babel-R-process-value-result458,16399

elpa/org-plus-contrib-20191021/ob-table.el,161
(defun org-babel-table-truncate-at-newline (string)org-babel-table-truncate-at-newline59,1755
(defmacro org-sbe (source-block &rest variables)org-sbe67,2133

elpa/org-plus-contrib-20191021/ob-js.el,774
(defvar org-babel-default-header-args:js '()org-babel-default-header-args:js50,1807
(defvar org-babel-js-eoe "org-babel-js-eoe"org-babel-js-eoe53,1903
(defcustom org-babel-js-cmd "node"org-babel-js-cmd56,2003
(defvar org-babel-js-function-wrapperorg-babel-js-function-wrapper67,2266
(defun org-babel-execute:js (body params)org-babel-execute:js71,2422
(defun org-babel-js-read (results)org-babel-js-read112,4101
(defun org-babel-js-var-to-js (var)org-babel-js-var-to-js130,4766
(defun org-babel-prep-session:js (session params)org-babel-prep-session:js138,5086
(defun org-babel-variable-assignments:js (params)org-babel-variable-assignments:js153,5590
(defun org-babel-js-initiate-session (&optional session _params)org-babel-js-initiate-session160,5852

elpa/org-plus-contrib-20191021/org-plus-contrib-pkg.el,58
(define-package "org-plus-contrib""org-plus-contrib"1,0

elpa/org-plus-contrib-20191021/ox-texinfo.el,8189
(defvar orgtbl-exp-regexp)orgtbl-exp-regexp31,1034
(defgroup org-export-texinfo nilorg-export-texinfo126,5241
(defcustom org-texinfo-coding-system nilorg-texinfo-coding-system135,5445
(defcustom org-texinfo-default-class "info"org-texinfo-default-class142,5646
(defcustom org-texinfo-classesorg-texinfo-classes147,5791
(defcustom org-texinfo-format-headline-functionorg-texinfo-format-headline-function213,7926
(defcustom org-texinfo-node-description-column 32org-texinfo-node-description-column232,8565
(defcustom org-texinfo-active-timestamp-format "@emph{%s}"org-texinfo-active-timestamp-format241,8851
(defcustom org-texinfo-inactive-timestamp-format "@emph{%s}"org-texinfo-inactive-timestamp-format246,9020
(defcustom org-texinfo-diary-timestamp-format "@emph{%s}"org-texinfo-diary-timestamp-format251,9193
(defcustom org-texinfo-link-with-unknown-path-format "@indicateurl{%s}"org-texinfo-link-with-unknown-path-format258,9372
(defcustom org-texinfo-tables-verbatim nilorg-texinfo-tables-verbatim265,9556
(defcustom org-texinfo-table-scientific-notation nilorg-texinfo-table-scientific-notation270,9695
(defcustom org-texinfo-table-default-markup "@asis"org-texinfo-table-default-markup282,10061
(defcustom org-texinfo-text-markup-alist '((bold . "@strong{%s}")org-texinfo-text-markup-alist297,10444
(defcustom org-texinfo-format-drawer-function (lambda (_name contents) contents)org-texinfo-format-drawer-function323,11365
(defcustom org-texinfo-format-inlinetask-functionorg-texinfo-format-inlinetask-function340,11864
(defcustom org-texinfo-info-process '("makeinfo --no-split %f")org-texinfo-info-process358,12504
(defcustom org-texinfo-logfiles-extensionsorg-texinfo-logfiles-extensions373,13124
(defcustom org-texinfo-remove-logfiles torg-texinfo-remove-logfiles381,13427
(defconst org-texinfo-max-toc-depth 4org-texinfo-max-toc-depth391,13780
(defconst org-texinfo-supported-coding-systemsorg-texinfo-supported-coding-systems397,14010
(defconst org-texinfo-inline-image-rulesorg-texinfo-inline-image-rules404,14391
(defun org-texinfo--untabify (s _backend _info)org-texinfo--untabify412,14607
(defun org-texinfo--filter-section-blank-lines (headline _backend _info)org-texinfo--filter-section-blank-lines416,14760
(defun org-texinfo--normalize-headlines (tree _backend info)org-texinfo--normalize-headlines420,14967
(defun org-texinfo--find-verb-separator (s)org-texinfo--find-verb-separator445,15778
(defun org-texinfo--text-markup (text markup _info)org-texinfo--text-markup453,16161
(defun org-texinfo--get-node (datum info)org-texinfo--get-node467,16803
(defun org-texinfo--sanitize-node (title)org-texinfo--sanitize-node506,18475
(defun org-texinfo--sanitize-title (title info)org-texinfo--sanitize-title519,18954
(defun org-texinfo--sanitize-content (text)org-texinfo--sanitize-content526,19222
(defun org-texinfo--wrap-float (value info &optional type label caption short)org-texinfo--wrap-float531,19393
(defun org-texinfo-template (contents info)org-texinfo-template564,20604
(defun org-texinfo-bold (_bold contents info)org-texinfo-bold697,25562
(defun org-texinfo-center-block (_center-block contents _info)org-texinfo-center-block705,25806
(defun org-texinfo-clock (clock _contents info)org-texinfo-clock713,26109
(defun org-texinfo-code (code _contents info)org-texinfo-code728,26603
(defun org-texinfo-drawer (drawer contents info)org-texinfo-drawer736,26855
(defun org-texinfo-dynamic-block (_dynamic-block contents _info)org-texinfo-dynamic-block747,27230
(defun org-texinfo-entity (entity _contents _info)org-texinfo-entity755,27471
(defun org-texinfo-example-block (example-block _contents info)org-texinfo-example-block799,29484
(defun org-texinfo-export-block (export-block _contents _info)org-texinfo-export-block809,29823
(defun org-texinfo-export-snippet (export-snippet _contents _info)org-texinfo-export-snippet817,30175
(defun org-texinfo-fixed-width (fixed-width _contents _info)org-texinfo-fixed-width825,30503
(defun org-texinfo-footnote-reference (footnote _contents info)org-texinfo-footnote-reference835,30865
(defun org-texinfo-headline (headline contents info)org-texinfo-headline846,31235
(defun org-texinfo-format-headline-default-functionorg-texinfo-format-headline-default-function913,33966
(defun org-texinfo-inline-src-block (inline-src-block _contents _info)org-texinfo-inline-src-block924,34345
(defun org-texinfo-inlinetask (inlinetask contents info)org-texinfo-inlinetask934,34697
(defun org-texinfo-format-inlinetask-default-functionorg-texinfo-format-inlinetask-default-function950,35514
(defun org-texinfo-italic (_italic contents info)org-texinfo-italic963,35959
(defun org-texinfo-item (item contents info)org-texinfo-item971,36205
(defun org-texinfo-keyword (keyword _contents info)org-texinfo-keyword998,37018
(defun org-texinfo-line-break (_line-break _contents _info)org-texinfo-line-break1020,37892
(defun org-texinfo--@ref (datum description info)org-texinfo--@ref1027,38095
(defun org-texinfo-link (link desc info)org-texinfo-link1043,38760
(defun org-texinfo--inline-image (link info)org-texinfo--inline-image1101,41154
(defun org-texinfo-make-menu (scope info &optional master)org-texinfo-make-menu1134,42342
(defun org-texinfo--build-menu (scope info &optional level)org-texinfo--build-menu1161,43224
(defun org-texinfo--format-entries (entries info)org-texinfo--format-entries1183,44013
(defun org-texinfo--menu-entries (scope info)org-texinfo--menu-entries1207,44870
(defun org-texinfo-node-property (node-property _contents _info)org-texinfo-node-property1226,45569
(defun org-texinfo-paragraph (_paragraph contents _info)org-texinfo-paragraph1237,45963
(defun org-texinfo-plain-list (plain-list contents info)org-texinfo-plain-list1245,46213
(defun org-texinfo-plain-text (text info)org-texinfo-plain-text1276,47467
(defun org-texinfo-planning (planning _contents info)org-texinfo-planning1310,48848
(defun org-texinfo-property-drawer (_property-drawer contents _info)org-texinfo-property-drawer1343,49886
(defun org-texinfo-quote-block (quote-block contents _info)org-texinfo-quote-block1352,50217
(defun org-texinfo-radio-target (radio-target text info)org-texinfo-radio-target1365,50740
(defun org-texinfo-section (section contents info)org-texinfo-section1375,51031
(defun org-texinfo-special-block (special-block contents _info)org-texinfo-special-block1389,51544
(defun org-texinfo-src-block (src-block _contents info)org-texinfo-src-block1403,52017
(defun org-texinfo-statistics-cookie (statistics-cookie _contents _info)org-texinfo-statistics-cookie1426,52864
(defun org-texinfo-strike-through (_strike-through contents info)org-texinfo-strike-through1434,53139
(defun org-texinfo-subscript (_subscript contents _info)org-texinfo-subscript1442,53430
(defun org-texinfo-superscript (_superscript contents _info)org-texinfo-superscript1450,53683
(defun org-texinfo-table (table contents info)org-texinfo-table1458,53936
(defun org-texinfo-table-column-widths (table info)org-texinfo-table-column-widths1483,54928
(defun org-texinfo-table-cell (table-cell contents info)org-texinfo-table-cell1507,55881
(defun org-texinfo-table-row (table-row contents info)org-texinfo-table-row1526,56524
(defun org-texinfo-target (target _contents info)org-texinfo-target1543,57155
(defun org-texinfo-timestamp (timestamp _contents info)org-texinfo-timestamp1551,57401
(defun org-texinfo-underline (_underline contents info)org-texinfo-underline1566,58026
(defun org-texinfo-verbatim (verbatim _contents info)org-texinfo-verbatim1574,58291
(defun org-texinfo-verse-block (_verse-block contents _info)org-texinfo-verse-block1583,58571
(defun org-texinfo-export-to-texinfoorg-texinfo-export-to-texinfo1593,58864
(defun org-texinfo-export-to-infoorg-texinfo-export-to-info1628,60063
(defun org-texinfo-publish-to-texinfo (plist filename pub-dir)org-texinfo-publish-to-texinfo1667,61404
(defun org-texinfo-convert-region-to-texinfo ()org-texinfo-convert-region-to-texinfo1678,61757
(defun org-texinfo-compile (file)org-texinfo-compile1686,62086

elpa/org-plus-contrib-20191021/ob-tangle.el,2302
(defvar org-link-types-re)org-link-types-re50,2062
(defcustom org-babel-tangle-lang-extsorg-babel-tangle-lang-exts52,2090
(defcustom org-babel-tangle-use-relative-file-links torg-babel-tangle-use-relative-file-links67,2592
(defcustom org-babel-post-tangle-hook nilorg-babel-post-tangle-hook72,2768
(defcustom org-babel-pre-tangle-hook '(save-buffer)org-babel-pre-tangle-hook78,2922
(defcustom org-babel-tangle-body-hook nilorg-babel-tangle-body-hook84,3081
(defcustom org-babel-tangle-comment-format-beg "[[%link][%source-name]]"org-babel-tangle-comment-format-beg90,3233
(defcustom org-babel-tangle-comment-format-end "%source-name ends here"org-babel-tangle-comment-format-end110,4053
(defcustom org-babel-tangle-uncomment-comments nilorg-babel-tangle-uncomment-comments130,4872
(defcustom org-babel-process-comment-text 'org-remove-indentationorg-babel-process-comment-text138,5179
(defun org-babel-find-file-noselect-refresh (file)org-babel-find-file-noselect-refresh147,5541
(defmacro org-babel-with-temp-filebuffer (file &rest body)org-babel-with-temp-filebuffer154,5787
(def-edebug-spec org-babel-with-temp-filebuffer (form body))org-babel-with-temp-filebuffer172,6546
(defun org-babel-tangle-file (file &optional target-file lang)org-babel-tangle-file175,6623
(defun org-babel-tangle-publish (_ filename pub-dir)org-babel-tangle-publish193,7379
(defun org-babel-tangle (&optional arg target-file lang)org-babel-tangle201,7700
(defun org-babel-tangle-clean ()org-babel-tangle-clean320,12403
(defvar org-stored-links)org-stored-links334,13072
(defvar org-bracket-link-regexp)org-bracket-link-regexp335,13098
(defun org-babel-spec-to-string (spec)org-babel-spec-to-string336,13131
(defun org-babel-tangle-collect-blocks (&optional language tangle-file)org-babel-tangle-collect-blocks381,14745
(defun org-babel-tangle-single-block (block-counter &optional only-this-block)org-babel-tangle-single-block413,16301
(defun org-babel-tangle-comment-links (&optional info)org-babel-tangle-comment-links504,19417
(defvar org-bracket-link-analytic-regexp)org-bracket-link-analytic-regexp520,20096
(defun org-babel-detangle (&optional source-code-file)org-babel-detangle521,20138
(defun org-babel-tangle-jump-to-org ()org-babel-tangle-jump-to-org542,21029

elpa/org-plus-contrib-20191021/ob-ocaml.el,1114
(defvar org-babel-tangle-lang-exts)org-babel-tangle-lang-exts46,1556
(defvar org-babel-default-header-args:ocaml '())org-babel-default-header-args:ocaml49,1653
(defvar org-babel-ocaml-eoe-indicator "\"org-babel-ocaml-eoe\";;")org-babel-ocaml-eoe-indicator51,1703
(defvar org-babel-ocaml-eoe-output "org-babel-ocaml-eoe")org-babel-ocaml-eoe-output52,1770
(defcustom org-babel-ocaml-command "ocaml"org-babel-ocaml-command54,1829
(defun org-babel-execute:ocaml (body params)org-babel-execute:ocaml61,2012
(defvar tuareg-interactive-buffer-name)tuareg-interactive-buffer-name105,3575
(defun org-babel-prep-session:ocaml (session _params)org-babel-prep-session:ocaml106,3615
(defun org-babel-variable-assignments:ocaml (params)org-babel-variable-assignments:ocaml119,4319
(defun org-babel-ocaml-elisp-to-ocaml (val)org-babel-ocaml-elisp-to-ocaml126,4590
(defun org-babel-ocaml-parse-output (value type)org-babel-ocaml-parse-output132,4814
(defun org-babel-ocaml-read-list (results)org-babel-ocaml-read-list147,5296
(defun org-babel-ocaml-read-array (results)org-babel-ocaml-read-array157,5789

elpa/org-plus-contrib-20191021/orgtbl-sqlinsert.el,302
(defun orgtbl-to-sqlinsert (table params)orgtbl-to-sqlinsert30,1020
(defun orgtbl-sql-quote (str)orgtbl-sql-quote95,3428
(defun orgtbl-sql-strip-dollars-escapes-tildes (str)orgtbl-sql-strip-dollars-escapes-tildes99,3604
(defun orgtbl-sql-strip-and-quote (str)orgtbl-sql-strip-and-quote108,3874

elpa/org-plus-contrib-20191021/org-crypt.el,876
(defvar epg-context)epg-context75,3059
(defgroup org-crypt nilorg-crypt78,3082
(defcustom org-crypt-tag-matcher "crypt"org-crypt-tag-matcher83,3156
(defcustom org-crypt-key ""org-crypt-key90,3383
(defcustom org-crypt-disable-auto-save 'askorg-crypt-disable-auto-save97,3582
(defun org-crypt-check-auto-save ()org-crypt-check-auto-save121,4483
(defun org-crypt-key-for-heading ()org-crypt-key-for-heading151,5720
(defun org-encrypt-string (str crypt-key)org-encrypt-string160,6063
(defun org-encrypt-entry ()org-encrypt-entry169,6539
(defun org-decrypt-entry ()org-decrypt-entry196,7442
(defun org-encrypt-entries ()org-encrypt-entries239,8932
(defun org-decrypt-entries ()org-decrypt-entries248,9215
(defun org-at-encrypted-entry-p ()org-at-encrypted-entry-p257,9488
(defun org-crypt-use-before-save-magic ()org-crypt-use-before-save-magic265,9755

elpa/org-plus-contrib-20191021/org-contacts.el,7583
(defgroup org-contacts nilorg-contacts63,1813
(defcustom org-contacts-files nilorg-contacts-files67,1895
(defcustom org-contacts-email-property "EMAIL"org-contacts-email-property73,2076
(defcustom org-contacts-tel-property "PHONE"org-contacts-tel-property78,2216
(defcustom org-contacts-address-property "ADDRESS"org-contacts-address-property83,2353
(defcustom org-contacts-birthday-property "BIRTHDAY"org-contacts-birthday-property88,2491
(defcustom org-contacts-note-property "NOTE"org-contacts-note-property93,2637
(defcustom org-contacts-alias-property "ALIAS"org-contacts-alias-property98,2766
(defcustom org-contacts-ignore-property "IGNORE"org-contacts-ignore-property103,2903
(defcustom org-contacts-birthday-format "Birthday: %l (%Y)"org-contacts-birthday-format110,3088
(defcustom org-contacts-last-read-mail-property "LAST_READ_MAIL"org-contacts-last-read-mail-property121,3377
(defcustom org-contacts-icon-property "ICON"org-contacts-icon-property126,3550
(defcustom org-contacts-nickname-property "NICKNAME"org-contacts-nickname-property131,3679
(defcustom org-contacts-icon-size 32org-contacts-icon-size136,3822
(defcustom org-contacts-icon-use-gravatar (fboundp 'gravatar-retrieve)org-contacts-icon-use-gravatar141,3932
(defcustom org-contacts-completion-ignore-case torg-contacts-completion-ignore-case146,4094
(defcustom org-contacts-group-prefix "+"org-contacts-group-prefix151,4227
(defcustom org-contacts-tags-props-prefix "#"org-contacts-tags-props-prefix156,4327
(defcustom org-contacts-matcherorg-contacts-matcher161,4446
(defcustom org-contacts-email-link-description-format "%s (%d)"org-contacts-email-link-description-format175,4885
(defcustom org-contacts-vcard-file "contacts.vcf"org-contacts-vcard-file181,5090
(defcustom org-contacts-enable-completion torg-contacts-enable-completion186,5214
(defcustom org-contacts-complete-functionsorg-contacts-complete-functions191,5372
(defconst org-contacts-property-values-separators "[,; \f\t\n\r\v]+"org-contacts-property-values-separators210,6287
(defvar org-contacts-keymaporg-contacts-keymap215,6484
(defvar org-contacts-db nilorg-contacts-db222,6730
(defvar org-contacts-last-update nilorg-contacts-last-update225,6787
(defun org-contacts-files ()org-contacts-files228,6884
(defun org-contacts-db-need-update-p ()org-contacts-db-need-update-p232,7030
(defun org-contacts-db-has-dead-markers-p (org-contacts-db)org-contacts-db-has-dead-markers-p241,7386
(defun org-contacts-db ()org-contacts-db253,7896
(defun org-contacts-at-point (&optional pom)org-contacts-at-point299,10208
(defun org-contacts-filter (&optional name-match tags-match prop-match)org-contacts-filter306,10480
(defun org-contacts-try-completion-prefix (to-match collection &optional predicate)org-contacts-try-completion-prefix341,11726
(defun org-contacts-compare-strings (s1 start1 end1 s2 start2 end2 &optional ignore-case)org-contacts-compare-strings374,12728
(defun org-contacts-common-substring (s1 start1 end1 s2 start2 end2)org-contacts-common-substring386,13256
(defun org-contacts-all-completions-prefix (to-match collection &optional predicate)org-contacts-all-completions-prefix427,14728
(defun org-contacts-make-collection-prefix (collection)org-contacts-make-collection-prefix448,15651
(defun org-contacts-display-sort-function (completions)org-contacts-display-sort-function469,16539
(defun org-contacts-test-completion-prefix (string collection predicate)org-contacts-test-completion-prefix489,17149
(defun org-contacts-boundaries-prefix (string collection predicate suffix)org-contacts-boundaries-prefix495,17351
(defun org-contacts-metadata-prefix (string collection predicate)org-contacts-metadata-prefix498,17509
(defun org-contacts-complete-group (start end string)org-contacts-complete-group503,17728
(defun org-contacts-complete-tags-props (start end string)org-contacts-complete-tags-props548,19522
(defun org-contacts-remove-ignored-property-values (ignore-list list)org-contacts-remove-ignored-property-values588,21014
(defun org-contacts-complete-name (start end string)org-contacts-complete-name597,21310
(defun org-contacts-message-complete-function (&optional start)org-contacts-message-complete-function629,22667
(defun org-contacts-gnus-get-name-email ()org-contacts-gnus-get-name-email648,23492
(defun org-contacts-gnus-article-from-get-marker ()org-contacts-gnus-article-from-get-marker655,23728
(defun org-contacts-gnus-article-from-goto ()org-contacts-gnus-article-from-goto668,24164
(defun org-contacts-anniversaries (&optional field format)org-contacts-anniversaries678,24589
(defun org-completing-read-date (prompt collectionorg-completing-read-date709,25838
(defun org-contacts-template-name (&optional return-value)org-contacts-template-name719,26301
(defun org-contacts-template-email (&optional return-value)org-contacts-template-email726,26568
(defun org-contacts-gnus-store-last-mail ()org-contacts-gnus-store-last-mail733,26875
(defun org-contacts-icon-as-string ()org-contacts-icon-as-string747,27556
(defun org-contacts (name)org-contacts760,27929
(defun org-contacts-completing-read (promptorg-contacts-completing-read778,28729
(defun org-contacts-format-name (name)org-contacts-format-name785,29087
(defun org-contacts-format-email (name email)org-contacts-format-email790,29279
(defun org-contacts-check-mail-address (mail)org-contacts-check-mail-address798,29515
(defun org-contacts-gnus-check-mail-address ()org-contacts-gnus-check-mail-address806,29935
(defun org-contacts-gnus-insinuate ()org-contacts-gnus-insinuate814,30304
(defun org-contacts-setup-completion-at-point ()org-contacts-setup-completion-at-point826,30869
(defun org-contacts-unload-hook ()org-contacts-unload-hook832,31114
(defun org-contacts-wl-get-from-header-content ()org-contacts-wl-get-from-header-content839,31387
(defun org-contacts-wl-get-name-email ()org-contacts-wl-get-name-email856,32180
(defun org-contacts-template-wl-name (&optional return-value)org-contacts-template-wl-name864,32516
(defun org-contacts-template-wl-email (&optional return-value)org-contacts-template-wl-email872,32793
(defun org-contacts-view-send-email (&optional ask)org-contacts-view-send-email879,33117
(defun org-contacts-get-icon (&optional pom)org-contacts-get-icon899,34157
(defun org-contacts-irc-buffer (&optional pom)org-contacts-irc-buffer924,35306
(defun org-contacts-irc-number-of-unread-messages (&optional pom)org-contacts-irc-number-of-unread-messages935,35694
(defun org-contacts-view-switch-to-irc-buffer ()org-contacts-view-switch-to-irc-buffer943,36096
(defun org-contacts-completing-read-nickname (prompt collectionorg-contacts-completing-read-nickname950,36376
(defun erc-nicknames-list ()erc-nicknames-list957,36839
(defun org-contacts-vcard-escape (str)org-contacts-vcard-escape967,37233
(defun org-contacts-vcard-encode-name (name)org-contacts-vcard-encode-name976,37562
(defun org-contacts-vcard-format (contact)org-contacts-vcard-format986,37897
(defun org-contacts-export-as-vcard (&optional name file to-buffer)org-contacts-export-as-vcard1029,40013
(defun org-contacts-export-as-vcard-internal (&optional name file to-buffer)org-contacts-export-as-vcard-internal1058,41046
(defun org-contacts-show-map (&optional name)org-contacts-show-map1079,41926
(defun org-contacts-strip-link (link)org-contacts-strip-link1093,42422
(defun org-contacts-split-property (string &optional separators omit-nulls)org-contacts-split-property1112,43228

elpa/org-plus-contrib-20191021/org-screenshot.el,1980
(defgroup org-screenshot nilorg-screenshot83,3135
(defcustom org-screenshot-image-directory "./images/"org-screenshot-image-directory87,3234
(defcustom org-screenshot-file-name-format "screenshot-%2.2d.png"org-screenshot-file-name-format93,3449
(defcustom org-screenshot-max-tries 200org-screenshot-max-tries105,3880
(defvar org-screenshot-map (make-sparse-keymap)org-screenshot-map113,4200
(defun org-screenshot-random-string (length)org-screenshot-random-string141,5333
(defvar org-screenshot-process nilorg-screenshot-process152,5687
(defvar org-screenshot-directory-seq-numbers (make-hash-table :test 'equal))org-screenshot-directory-seq-numbers155,5765
(defun org-screenshot-update-seq-number (directory &optional reset)org-screenshot-update-seq-number157,5843
(defun org-screenshot-generate-file-name (directory)org-screenshot-generate-file-name172,6595
(defun org-screenshot-image-directory ()org-screenshot-image-directory210,8122
(defvar org-screenshot-last-file nilorg-screenshot-last-file219,8419
(defun org-screenshot-process-done (process event fileorg-screenshot-process-done223,8536
(defun org-screenshot-take (&optional delay)org-screenshot-take260,10039
(defvar org-screenshot-file-list nilorg-screenshot-file-list324,12569
(defvar org-screenshot-rotation-index -1)org-screenshot-rotation-index328,12732
(defun org-screenshot-rotation-init (lastfile)org-screenshot-rotation-init333,12891
(defun org-screenshot-do-rotate (dir from-continue-rotating)org-screenshot-do-rotate357,13983
(defun org-screenshot-rotate-prev (dir)org-screenshot-rotate-prev412,16550
(defun org-screenshot-rotate-next (dir)org-screenshot-rotate-next422,16891
(defun org-screenshot-prefer-same-modifiers (list event)org-screenshot-prefer-same-modifiers431,17221
(defun org-screenshot-rotate-continue (from-take-screenshot orig-event)org-screenshot-rotate-continue443,17661
(defun org-screenshot-show-unused ()org-screenshot-show-unused493,19681

elpa/org-plus-contrib-20191021/org-interactive-query.el,1177
(defcustom org-agenda-query-selection-single-key torg-agenda-query-selection-single-key44,1539
(defun org-agenda-query-selection (current op table &optional todo-table)org-agenda-query-selection56,2025
(defun org-agenda-query-op-line (op)org-agenda-query-op-line201,7499
(defun org-agenda-query-op-entry (matchp chars str)org-agenda-query-op-entry208,7819
(defun org-agenda-query-decompose (current)org-agenda-query-decompose214,8014
(defun org-agenda-query-clear (current prefix tag)org-agenda-query-clear217,8109
(defun org-agenda-query-manip (current op groups kind tag)org-agenda-query-manip222,8288
(defun org-agenda-query-global-todo-keys (&optional files)org-agenda-query-global-todo-keys252,9519
(defun org-agenda-query-merge-todo-key (alist entry)org-agenda-query-merge-todo-key265,10008
(defun org-agenda-query-generic-cmd (op)org-agenda-query-generic-cmd282,10640
(defun org-agenda-query-clear-cmd ()org-agenda-query-clear-cmd291,11018
(defun org-agenda-query-and-cmd ()org-agenda-query-and-cmd296,11175
(defun org-agenda-query-or-cmd ()org-agenda-query-or-cmd301,11336
(defun org-agenda-query-not-cmd ()org-agenda-query-not-cmd306,11495

elpa/org-plus-contrib-20191021/ob-coq.el,356
(defvar coq-program-name "coqtop"coq-program-name38,1299
(defvar org-babel-coq-buffer "*coq*"org-babel-coq-buffer41,1372
(defun org-babel-coq-clean-prompt (string)org-babel-coq-clean-prompt44,1460
(defun org-babel-execute:coq (body params)org-babel-execute:coq49,1612
(defun org-babel-coq-initiate-session ()org-babel-coq-initiate-session68,2308

elpa/org-plus-contrib-20191021/org-footnote.el,3583
(defvar electric-indent-mode)electric-indent-mode57,2398
(defvar org-blank-before-new-entry)	; defined in org.elorg-blank-before-new-entry58,2428
(defvar org-bracket-link-regexp)	; defined in org.elorg-bracket-link-regexp59,2484
(defvar org-complex-heading-regexp)	; defined in org.elorg-complex-heading-regexp60,2537
(defvar org-odd-levels-only)		; defined in org.elorg-odd-levels-only61,2593
(defvar org-outline-regexp)		; defined in org.elorg-outline-regexp62,2643
(defvar org-outline-regexp-bol)		; defined in org.elorg-outline-regexp-bol63,2692
(defconst org-footnote-reorg-footnote-re68,2764
(defconst org-footnote-definition-re "^\\[fn:\\([-_[:word:]]+\\)\\]"org-footnote-definition-re75,3087
(defconst org-footnote-forbidden-blocks '("comment" "example" "export" "src")org-footnote-forbidden-blocks79,3263
(defgroup org-footnote nilorg-footnote85,3418
(defcustom org-footnote-section "Footnotes"org-footnote-section90,3510
(defcustom org-footnote-define-inline nilorg-footnote-define-inline120,4586
(defcustom org-footnote-auto-label torg-footnote-auto-label129,4949
(defcustom org-footnote-auto-adjust nilorg-footnote-auto-adjust147,5650
(defcustom org-footnote-fill-after-inline-note-extraction nilorg-footnote-fill-after-inline-note-extraction166,6308
(defun org-footnote-in-valid-context-p ()org-footnote-in-valid-context-p178,6692
(defun org-footnote-at-reference-p ()org-footnote-at-reference-p191,7120
(defun org-footnote-at-definition-p ()org-footnote-at-definition-p211,7907
(defun org-footnote--allow-reference-p ()org-footnote--allow-reference-p243,9068
(defun org-footnote--clear-footnote-section ()org-footnote--clear-footnote-section294,11310
(defun org-footnote--set-label (label)org-footnote--set-label318,12195
(defun org-footnote--collect-references (&optional anonymous)org-footnote--collect-references327,12512
(defun org-footnote--collect-definitions (&optional delete)org-footnote--collect-definitions392,15031
(defun org-footnote--goto-local-insertion-point ()org-footnote--goto-local-insertion-point427,16317
(defun org-footnote-get-next-reference (&optional label backward limit)org-footnote-get-next-reference438,16684
(defun org-footnote-next-reference-or-definition (limit)org-footnote-next-reference-or-definition457,17454
(defun org-footnote-goto-definition (label &optional location)org-footnote-goto-definition528,19938
(defun org-footnote-goto-previous-reference (label)org-footnote-goto-previous-reference556,21065
(defun org-footnote-normalize-label (label)org-footnote-normalize-label580,21902
(defun org-footnote-get-definition (label)org-footnote-get-definition589,22186
(defun org-footnote-all-labels ()org-footnote-all-labels615,23102
(defun org-footnote-unique-label (&optional current)org-footnote-unique-label630,23651
(defun org-footnote-new ()org-footnote-new646,24101
(defun org-footnote-create-definition (label)org-footnote-create-definition691,25893
(defun org-footnote-delete-references (label)org-footnote-delete-references714,26769
(defun org-footnote-delete-definitions (label)org-footnote-delete-definitions726,27133
(defun org-footnote-delete (&optional label)org-footnote-delete748,27877
(defun org-footnote-renumber-fn:N ()org-footnote-renumber-fn:N785,29247
(defun org-footnote-sort ()org-footnote-sort808,30127
(defun org-footnote-normalize ()org-footnote-normalize846,31720
(defun org-footnote-auto-adjust-maybe ()org-footnote-auto-adjust-maybe931,34718
(defun org-footnote-action (&optional special)org-footnote-action949,35264

elpa/org-plus-contrib-20191021/org-toc.el,4774
(defvar org-toc-base-buffer nil)org-toc-base-buffer39,1217
(defvar org-toc-columns-shown nil)org-toc-columns-shown40,1250
(defvar org-toc-odd-levels-only nil)org-toc-odd-levels-only41,1285
(defvar org-toc-config-alist nil)org-toc-config-alist42,1322
(defvar org-toc-cycle-global-status nil)org-toc-cycle-global-status43,1356
(defalias 'org-show-table-of-contents 'org-toc-show)org-show-table-of-contents44,1397
(defgroup org-toc nilorg-toc46,1451
(defcustom org-toc-default-depth 1org-toc-default-depth51,1574
(defcustom org-toc-follow-mode nilorg-toc-follow-mode58,1780
(defcustom org-toc-info-mode nilorg-toc-info-mode64,1962
(defcustom org-toc-show-subtree-mode nilorg-toc-show-subtree-mode70,2159
(defcustom org-toc-recenter-mode torg-toc-recenter-mode78,2412
(defcustom org-toc-recenter 0org-toc-recenter84,2574
(defcustom org-toc-info-exclude '("ALLTAGS")org-toc-info-exclude91,2826
(defvar org-toc-mode-map (make-sparse-keymap)org-toc-mode-map98,3036
(defun org-toc-mode ()org-toc-mode101,3115
(define-key org-toc-mode-map "F" 'org-toc-follow-mode)org-toc-mode-map112,3391
(define-key org-toc-mode-map "S" 'org-toc-show-subtree-mode)org-toc-mode-map113,3446
(define-key org-toc-mode-map "s" 'org-toc-store-config)org-toc-mode-map114,3507
(define-key org-toc-mode-map "g" 'org-toc-restore-config)org-toc-mode-map115,3563
(define-key org-toc-mode-map "i" 'org-toc-info-mode)org-toc-mode-map116,3621
(define-key org-toc-mode-map "r" 'org-toc-recenter-mode)org-toc-mode-map117,3674
(define-key org-toc-mode-map "p" 'org-toc-previous)org-toc-mode-map120,3751
(define-key org-toc-mode-map "n" 'org-toc-next)org-toc-mode-map121,3803
(define-key org-toc-mode-map "f" 'org-toc-forward)org-toc-mode-map122,3851
(define-key org-toc-mode-map "b" 'org-toc-back)org-toc-mode-map123,3902
(define-key org-toc-mode-map [(left)] 'org-toc-back)org-toc-mode-map124,3950
(define-key org-toc-mode-map [(right)] 'org-toc-forward)org-toc-mode-map125,4003
(define-key org-toc-mode-map [(up)] 'org-toc-previous)org-toc-mode-map126,4060
(define-key org-toc-mode-map [(down)] 'org-toc-next)org-toc-mode-map127,4115
(define-key org-toc-mode-map "1" (lambda() (interactive) (org-toc-show 1 (point))))org-toc-mode-map128,4168
(define-key org-toc-mode-map "2" (lambda() (interactive) (org-toc-show 2 (point))))org-toc-mode-map129,4252
(define-key org-toc-mode-map "3" (lambda() (interactive) (org-toc-show 3 (point))))org-toc-mode-map130,4336
(define-key org-toc-mode-map "4" (lambda() (interactive) (org-toc-show 4 (point))))org-toc-mode-map131,4420
(define-key org-toc-mode-map " " 'org-toc-goto)org-toc-mode-map132,4504
(define-key org-toc-mode-map "q" 'org-toc-quit)org-toc-mode-map133,4552
(define-key org-toc-mode-map "x" 'org-toc-quit)org-toc-mode-map134,4600
(define-key org-toc-mode-map [(tab)] 'org-toc-jump)org-toc-mode-map136,4698
(define-key org-toc-mode-map "v" 'org-toc-jump)org-toc-mode-map137,4750
(define-key org-toc-mode-map [(return)]org-toc-mode-map139,4845
(define-key org-toc-mode-map "c" 'org-toc-columns)org-toc-mode-map143,4947
(define-key org-toc-mode-map "?" 'org-toc-help)org-toc-mode-map144,4998
(define-key org-toc-mode-map ":" 'org-toc-cycle-subtree)org-toc-mode-map145,5046
(define-key org-toc-mode-map "\C-c\C-o" 'org-open-at-point)org-toc-mode-map146,5103
(define-key org-toc-mode-map (kbd "C-S-<iso-lefttab>")org-toc-mode-map148,5200
(define-key org-toc-mode-map [(control tab)]org-toc-mode-map151,5323
(defun org-toc-follow-mode ()org-toc-follow-mode155,5440
(defun org-toc-info-mode ()org-toc-info-mode162,5666
(defun org-toc-show-subtree-mode ()org-toc-show-subtree-mode169,5880
(defun org-toc-recenter-mode (&optional line)org-toc-recenter-mode176,6142
(defun org-toc-cycle-subtree ()org-toc-cycle-subtree188,6600
(defun org-toc-before-first-heading-p ()org-toc-before-first-heading-p213,7381
(defun org-toc-show (&optional depth position)org-toc-show219,7545
(defun org-toc-goto (&optional jump cycle)org-toc-goto280,9872
(defun org-toc-cycle-base-buffer ()org-toc-cycle-base-buffer304,10701
(defun org-toc-jump (&optional delete)org-toc-jump311,10908
(defun org-toc-previous ()org-toc-previous318,11167
(defun org-toc-next ()org-toc-next329,11499
(defun org-toc-forward ()org-toc-forward336,11697
(defun org-toc-back ()org-toc-back345,11996
(defun org-toc-quit ()org-toc-quit354,12301
(defun org-toc-columns ()org-toc-columns362,12462
(defun org-toc-info ()org-toc-info374,12897
(defun org-toc-store-config ()org-toc-store-config397,13699
(defun org-toc-restore-config ()org-toc-restore-config416,14370
(defun org-toc-get-headlines-status ()org-toc-get-headlines-status457,15705
(defun org-toc-help ()org-toc-help478,16340

elpa/org-plus-contrib-20191021/ob-ledger.el,263
(defvar org-babel-default-header-args:ledgerorg-babel-default-header-args:ledger41,1310
(defun org-babel-execute:ledger (body params)org-babel-execute:ledger45,1471
(defun org-babel-prep-session:ledger (_session _params)org-babel-prep-session:ledger63,2243

elpa/org-plus-contrib-20191021/org-link-edit.el,995
(defun org-link-edit--on-link-p (&optional element)org-link-edit--on-link-p69,2638
(defun org-link-edit--link-data ()org-link-edit--link-data77,2963
(defun org-link-edit--forward-blob (n &optional no-punctuation)org-link-edit--forward-blob109,4166
(defun org-link-edit-forward-slurp (&optional n)org-link-edit-forward-slurp136,5277
(defun org-link-edit-backward-slurp (&optional n)org-link-edit-backward-slurp180,6782
(defun org-link-edit--split-first-blobs (string n)org-link-edit--split-first-blobs221,8169
(defun org-link-edit--split-last-blobs (string n)org-link-edit--split-last-blobs238,8884
(defun org-link-edit-forward-barf (&optional n)org-link-edit-forward-barf256,9619
(defun org-link-edit-backward-barf (&optional n)org-link-edit-backward-barf295,10826
(defun org-link-edit--next-link-data (&optional previous)org-link-edit--next-link-data333,12018
(defun org-link-edit-transport-next-link (&optional previous beg end)org-link-edit-transport-next-link341,12330

elpa/org-plus-contrib-20191021/ob-sqlite.el,786
(defvar org-babel-default-header-args:sqlite '())org-babel-default-header-args:sqlite37,1309
(defvar org-babel-header-args:sqliteorg-babel-header-args:sqlite39,1360
(defun org-babel-expand-body:sqlite (body params)org-babel-expand-body:sqlite53,1686
(defvar org-babel-sqlite3-command "sqlite3")org-babel-sqlite3-command58,1859
(defun org-babel-execute:sqlite (body params)org-babel-execute:sqlite60,1905
(defun org-babel-sqlite-expand-vars (body vars)org-babel-sqlite-expand-vars114,3849
(defun org-babel-sqlite-table-or-scalar (result)org-babel-sqlite-table-or-scalar133,4458
(defun org-babel-sqlite-offset-colnames (table headers-p)org-babel-sqlite-offset-colnames143,4792
(defun org-babel-prep-session:sqlite (_session _params)org-babel-prep-session:sqlite149,5001

elpa/org-plus-contrib-20191021/ox-ascii.el,8439
(defgroup org-export-ascii nilorg-export-ascii149,5943
(defcustom org-ascii-text-width 72org-ascii-text-width154,6074
(defcustom org-ascii-global-margin 0org-ascii-global-margin163,6314
(defcustom org-ascii-inner-margin 2org-ascii-inner-margin170,6504
(defcustom org-ascii-quote-margin 6org-ascii-quote-margin178,6741
(defcustom org-ascii-list-margin 0org-ascii-list-margin187,7054
(defcustom org-ascii-inlinetask-width 30org-ascii-inlinetask-width196,7310
(defcustom org-ascii-headline-spacing '(1 . 2)org-ascii-headline-spacing204,7533
(defcustom org-ascii-indented-line-width 'autoorg-ascii-indented-line-width223,8237
(defcustom org-ascii-paragraph-spacing 'autoorg-ascii-paragraph-spacing237,8812
(defcustom org-ascii-charset 'asciiorg-ascii-charset249,9277
(defcustom org-ascii-underline '((ascii ?= ?~ ?-)org-ascii-underline263,9710
(defcustom org-ascii-bullets '((ascii ?* ?+ ?-)org-ascii-bullets289,10656
(defcustom org-ascii-links-to-notes torg-ascii-links-to-notes317,11618
(defcustom org-ascii-table-keep-all-vertical-lines nilorg-ascii-table-keep-all-vertical-lines326,11926
(defcustom org-ascii-table-widen-columns torg-ascii-table-widen-columns335,12224
(defcustom org-ascii-table-use-ascii-art nilorg-ascii-table-use-ascii-art344,12524
(defcustom org-ascii-caption-above nilorg-ascii-caption-above354,12896
(defcustom org-ascii-verbatim-format "`%s'"org-ascii-verbatim-format362,13128
(defcustom org-ascii-format-drawer-functionorg-ascii-format-drawer-function369,13327
(defcustom org-ascii-format-inlinetask-functionorg-ascii-format-inlinetask-function387,13886
(defun org-ascii--fill-string (s text-width info &optional justify)org-ascii--fill-string445,16345
(defun org-ascii--justify-lines (s text-width how)org-ascii--justify-lines471,17308
(defun org-ascii--justify-element (contents element info)org-ascii--justify-element488,17888
(defun org-ascii--indent-string (s width)org-ascii--indent-string530,19486
(defun org-ascii--box-string (s info)org-ascii--box-string537,19716
(defun org-ascii--current-text-width (element info)org-ascii--current-text-width547,20158
(defun org-ascii--current-justification (element)org-ascii--current-justification619,23761
(defun org-ascii--build-titleorg-ascii--build-title634,24378
(defun org-ascii--has-caption-p (element _info)org-ascii--has-caption-p702,26809
(defun org-ascii--build-caption (element info)org-ascii--build-caption708,27089
(defun org-ascii--build-toc (info &optional n keyword local)org-ascii--build-toc734,27970
(defun org-ascii--list-listings (keyword info)org-ascii--list-listings772,29315
(defun org-ascii--list-tables (keyword info)org-ascii--list-tables812,30771
(defun org-ascii--unique-links (element info)org-ascii--unique-links852,32203
(defun org-ascii--describe-datum (datum info)org-ascii--describe-datum885,33507
(defun org-ascii--describe-links (links width info)org-ascii--describe-links924,35069
(defun org-ascii--checkbox (item info)org-ascii--checkbox966,36571
(defun org-ascii-template--document-title (info)org-ascii-template--document-title979,36949
(defun org-ascii-inner-template (contents info)org-ascii-inner-template1062,40273
(defun org-ascii-template (contents info)org-ascii-template1116,42281
(defun org-ascii--translate (s info)org-ascii--translate1145,43251
(defun org-ascii-bold (_bold contents _info)org-ascii-bold1157,43564
(defun org-ascii-center-block (_center-block contents _info)org-ascii-center-block1166,43784
(defun org-ascii-clock (clock _contents info)org-ascii-clock1177,44115
(defun org-ascii-code (code _contents info)org-ascii-code1195,44598
(defun org-ascii-drawer (drawer contents info)org-ascii-drawer1205,44857
(defun org-ascii-dynamic-block (_dynamic-block contents _info)org-ascii-dynamic-block1217,45268
(defun org-ascii-entity (entity _contents info)org-ascii-entity1226,45506
(defun org-ascii-example-block (example-block _contents info)org-ascii-example-block1237,45818
(defun org-ascii-export-snippet (export-snippet _contents _info)org-ascii-export-snippet1248,46168
(defun org-ascii-export-block (export-block _contents info)org-ascii-export-block1257,46492
(defun org-ascii-fixed-width (fixed-width _contents info)org-ascii-fixed-width1267,46863
(defun org-ascii-footnote-reference (footnote-reference _contents info)org-ascii-footnote-reference1285,47375
(defun org-ascii-headline (headline contents info)org-ascii-headline1293,47668
(defun org-ascii-horizontal-rule (horizontal-rule _contents info)org-ascii-horizontal-rule1348,49882
(defun org-ascii-inline-src-block (inline-src-block _contents info)org-ascii-inline-src-block1365,50503
(defun org-ascii-format-inlinetask-defaultorg-ascii-format-inlinetask-default1375,50843
(defun org-ascii-inlinetask (inlinetask contents info)org-ascii-inlinetask1404,52184
(defun org-ascii-italic (_italic contents _info)org-ascii-italic1431,53146
(defun org-ascii-item (item contents info)org-ascii-item1440,53366
(defun org-ascii-keyword (keyword _contents info)org-ascii-keyword1504,55759
(defun org-ascii-latex-environment (latex-environment _contents info)org-ascii-latex-environment1530,56703
(defun org-ascii-latex-fragment (latex-fragment _contents info)org-ascii-latex-fragment1542,57101
(defun org-ascii-line-break (_line-break _contents _info)org-ascii-line-break1552,57395
(defun org-ascii-link (link desc info)org-ascii-link1560,57602
(defun org-ascii-node-property (node-property _contents _info)org-ascii-node-property1614,59652
(defun org-ascii-paragraph (paragraph contents info)org-ascii-paragraph1626,60043
(defun org-ascii-plain-list (plain-list contents info)org-ascii-plain-list1645,60766
(defun org-ascii-plain-text (text info)org-ascii-plain-text1658,61193
(defun org-ascii-planning (planning _contents info)org-ascii-planning1677,61880
(defun org-ascii-property-drawer (property-drawer contents info)org-ascii-property-drawer1703,62672
(defun org-ascii-quote-block (_quote-block contents info)org-ascii-quote-block1713,63010
(defun org-ascii-radio-target (_radio-target contents _info)org-ascii-radio-target1722,63311
(defun org-ascii-section (section contents info)org-ascii-section1731,63544
(defun org-ascii-special-block (_special-block contents _info)org-ascii-special-block1754,64481
(defun org-ascii-src-block (src-block _contents info)org-ascii-src-block1766,64869
(defun org-ascii-statistics-cookie (statistics-cookie _contents _info)org-ascii-statistics-cookie1784,65516
(defun org-ascii-subscript (subscript contents _info)org-ascii-subscript1792,65782
(defun org-ascii-superscript (superscript contents _info)org-ascii-superscript1803,66114
(defun org-ascii-strike-through (_strike-through contents _info)org-ascii-strike-through1814,66457
(defun org-ascii-table (table contents info)org-ascii-table1823,66706
(defun org-ascii--table-cell-width (table-cell info)org-ascii--table-cell-width1854,67905
(defun org-ascii-table-cell (table-cell contents info)org-ascii-table-cell1900,69368
(defun org-ascii-table-row (table-row contents info)org-ascii-table-row1931,70628
(defun org-ascii-timestamp (timestamp _contents info)org-ascii-timestamp1984,72593
(defun org-ascii-underline (_underline contents _info)org-ascii-underline1992,72850
(defun org-ascii-verbatim (verbatim _contents info)org-ascii-verbatim2001,73086
(defun org-ascii-verse-block (verse-block contents info)org-ascii-verse-block2010,73366
(defun org-ascii-filter-headline-blank-lines (headline _backend info)org-ascii-filter-headline-blank-lines2022,73706
(defun org-ascii-filter-paragraph-spacing (tree _backend info)org-ascii-filter-paragraph-spacing2036,74357
(defun org-ascii-filter-comment-spacing (tree _backend info)org-ascii-filter-comment-spacing2053,75000
(defun org-ascii-convert-region-to-ascii ()org-ascii-convert-region-to-ascii2070,75512
(defun org-ascii-convert-region-to-utf8 ()org-ascii-convert-region-to-utf82077,75733
(defun org-ascii-export-as-asciiorg-ascii-export-as-ascii2084,75947
(defun org-ascii-export-to-asciiorg-ascii-export-to-ascii2119,77144
(defun org-ascii-publish-to-ascii (plist filename pub-dir)org-ascii-publish-to-ascii2153,78249
(defun org-ascii-publish-to-latin1 (plist filename pub-dir)org-ascii-publish-to-latin12165,78622
(defun org-ascii-publish-to-utf8 (plist filename pub-dir)org-ascii-publish-to-utf82177,78999

elpa/org-plus-contrib-20191021/org-compat.el,12457
(defvar calendar-mode-map)calendar-mode-map60,2779
(defvar org-complex-heading-regexp)org-complex-heading-regexp61,2806
(defvar org-agenda-diary-file)org-agenda-diary-file62,2842
(defvar org-agenda-overriding-restriction)org-agenda-overriding-restriction63,2873
(defvar org-agenda-restriction-lock-overlay)org-agenda-restriction-lock-overlay64,2916
(defvar org-table-any-border-regexp)org-table-any-border-regexp65,2961
(defvar org-table-dataline-regexp)org-table-dataline-regexp66,2998
(defvar org-table-tab-recognizes-table.el)org-table-tab-recognizes-table.el67,3033
(defvar org-table1-hline-regexp)org-table1-hline-regexp68,3076
(define-obsolete-function-alias 'org-activate-mark 'activate-mark "Org 9.0")org-activate-mark193,7655
(define-obsolete-function-alias 'org-add-hook 'add-hook "Org 9.0")org-add-hook194,7732
(define-obsolete-function-alias 'org-bound-and-true-p 'bound-and-true-p "Org 9.0")org-bound-and-true-p195,7799
(define-obsolete-function-alias 'org-decompose-region 'decompose-region "Org 9.0")org-decompose-region196,7882
(define-obsolete-function-alias 'org-defvaralias 'defvaralias "Org 9.0")org-defvaralias197,7965
(define-obsolete-function-alias 'org-detach-overlay 'delete-overlay "Org 9.0")org-detach-overlay198,8038
(define-obsolete-function-alias 'org-file-equal-p 'file-equal-p "Org 9.0")org-file-equal-p199,8117
(define-obsolete-function-alias 'org-float-time 'float-time "Org 9.0")org-float-time200,8192
(define-obsolete-function-alias 'org-indent-line-to 'indent-line-to "Org 9.0")org-indent-line-to201,8263
(define-obsolete-function-alias 'org-indent-to-column 'indent-to-column "Org 9.0")org-indent-to-column202,8342
(define-obsolete-function-alias 'org-looking-at-p 'looking-at-p "Org 9.0")org-looking-at-p203,8425
(define-obsolete-function-alias 'org-looking-back 'looking-back "Org 9.0")org-looking-back204,8500
(define-obsolete-function-alias 'org-match-string-no-properties 'match-string-no-properties "Org 9.0")org-match-string-no-properties205,8575
(define-obsolete-function-alias 'org-propertize 'propertize "Org 9.0")org-propertize206,8678
(define-obsolete-function-alias 'org-select-frame-set-input-focus 'select-frame-set-input-focus "Org 9.0")org-select-frame-set-input-focus207,8749
(define-obsolete-function-alias 'org-file-remote-p 'file-remote-p "Org 9.2")org-file-remote-p208,8856
(defmacro org-re (s)org-re210,8934
(define-obsolete-function-alias 'org-count 'cl-count "Org 9.0")org-count217,9175
(define-obsolete-function-alias 'org-every 'cl-every "Org 9.0")org-every218,9239
(define-obsolete-function-alias 'org-find-if 'cl-find-if "Org 9.0")org-find-if219,9303
(define-obsolete-function-alias 'org-reduce 'cl-reduce "Org 9.0")org-reduce220,9371
(define-obsolete-function-alias 'org-remove-if 'cl-remove-if "Org 9.0")org-remove-if221,9437
(define-obsolete-function-alias 'org-remove-if-not 'cl-remove-if-not "Org 9.0")org-remove-if-not222,9509
(define-obsolete-function-alias 'org-some 'cl-some "Org 9.0")org-some223,9589
(define-obsolete-function-alias 'org-floor* 'cl-floor "Org 9.0")org-floor*224,9651
(defun org-sublist (list start end)org-sublist226,9717
(define-obsolete-function-alias 'org-buffer-narrowed-p 'buffer-narrowed-p "Org 9.0")org-buffer-narrowed-p236,10017
(define-obsolete-function-alias 'org-called-interactively-p 'called-interactively-p "Org 9.0")org-called-interactively-p237,10102
(define-obsolete-function-alias 'org-char-to-string 'char-to-string "Org 9.0")org-char-to-string238,10197
(define-obsolete-function-alias 'org-delete-directory 'delete-directory "Org 9.0")org-delete-directory239,10276
(define-obsolete-function-alias 'org-format-seconds 'format-seconds "Org 9.0")org-format-seconds240,10359
(define-obsolete-function-alias 'org-link-escape-browser 'url-encode-url "Org 9.0")org-link-escape-browser241,10438
(define-obsolete-function-alias 'org-no-warnings 'with-no-warnings "Org 9.0")org-no-warnings242,10522
(define-obsolete-function-alias 'org-number-sequence 'number-sequence "Org 9.0")org-number-sequence243,10600
(define-obsolete-function-alias 'org-pop-to-buffer-same-window 'pop-to-buffer-same-window "Org 9.0")org-pop-to-buffer-same-window244,10681
(define-obsolete-function-alias 'org-string-match-p 'string-match-p "Org 9.0")org-string-match-p245,10782
(define-obsolete-function-alias 'org-element-remove-indentationorg-element-remove-indentation248,10928
(define-obsolete-variable-alias 'org-latex-create-formula-image-programorg-latex-create-formula-image-program250,11029
(define-obsolete-variable-alias 'org-latex-preview-ltxpng-directoryorg-latex-preview-ltxpng-directory252,11149
(define-obsolete-function-alias 'org-table-p 'org-at-table-p "Org 9.0")org-table-p254,11265
(define-obsolete-function-alias 'org-on-heading-p 'org-at-heading-p "Org 9.0")org-on-heading-p255,11337
(define-obsolete-function-alias 'org-at-regexp-p 'org-in-regexp "Org 8.3")org-at-regexp-p256,11416
(define-obsolete-function-alias 'org-image-file-name-regexporg-image-file-name-regexp257,11491
(define-obsolete-function-alias 'org-completing-read-no-iorg-completing-read-no-i259,11588
(define-obsolete-function-alias 'org-icompleting-readorg-icompleting-read261,11676
(define-obsolete-function-alias 'org-iread-file-name 'read-file-name "Org 9.0")org-iread-file-name263,11760
(define-obsolete-function-alias 'org-days-to-timeorg-days-to-time264,11840
(define-obsolete-variable-alias 'org-agenda-ignore-drawer-propertiesorg-agenda-ignore-drawer-properties266,11926
(define-obsolete-function-alias 'org-preview-latex-fragmentorg-preview-latex-fragment268,12038
(define-obsolete-function-alias 'org-export-get-genealogyorg-export-get-genealogy270,12138
(define-obsolete-variable-alias 'org-latex-with-hyperreforg-latex-with-hyperref272,12230
(define-obsolete-variable-alias 'hfy-optimisations 'hfy-optimizations "Org 9.0")hfy-optimisations274,12329
(define-obsolete-variable-alias 'org-export-htmlized-org-css-urlorg-export-htmlized-org-css-url275,12410
(define-obsolete-function-alias 'org-list-parse-list 'org-list-to-lisp "Org 9.0")org-list-parse-list277,12514
(define-obsolete-function-alias 'org-agenda-todayporg-agenda-todayp278,12596
(define-obsolete-function-alias 'org-babel-examplize-regionorg-babel-examplize-region280,12680
(define-obsolete-variable-alias 'org-babel-capitalize-example-region-markersorg-babel-capitalize-example-region-markers282,12781
(define-obsolete-function-alias 'org-babel-trim 'org-trim "Org 9.0")org-babel-trim285,12909
(define-obsolete-variable-alias 'org-html-style 'org-html-head "24.4")org-html-style286,12978
(define-obsolete-function-alias 'org-insert-columns-dblockorg-insert-columns-dblock287,13049
(define-obsolete-variable-alias 'org-export-babel-evaluateorg-export-babel-evaluate289,13148
(define-obsolete-function-alias 'org-activate-bracket-linksorg-activate-bracket-links291,13242
(define-obsolete-function-alias 'org-activate-plain-links 'ignore "Org 9.0")org-activate-plain-links293,13335
(define-obsolete-function-alias 'org-activate-angle-links 'ignore "Org 9.0")org-activate-angle-links294,13412
(define-obsolete-function-alias 'org-remove-double-quotes 'org-strip-quotes "Org 9.0")org-remove-double-quotes295,13489
(define-obsolete-function-alias 'org-get-indentationorg-get-indentation296,13576
(define-obsolete-function-alias 'org-capture-member 'org-capture-get "Org 9.2")org-capture-member298,13663
(define-obsolete-function-alias 'org-remove-from-invisibility-specorg-remove-from-invisibility-spec299,13743
(define-obsolete-variable-alias 'org-effort-durations 'org-duration-unitsorg-effort-durations302,13855
(defun org-in-fixed-width-region-p ()org-in-fixed-width-region-p305,13943
(defun org-compatible-face (inherits specs)org-compatible-face313,14226
(defun org-add-link-type (type &optional follow export)org-add-link-type324,14642
(defun org-table-recognize-table.el ()org-table-recognize-table.el356,16089
(defmacro org-preserve-lc (&rest body)org-preserve-lc379,17030
(defun org-version-check (version &rest _)org-version-check391,17384
(defun org-remove-angle-brackets (s)org-remove-angle-brackets397,17605
(defcustom org-publish-sitemap-file-entry-format "%t"org-publish-sitemap-file-entry-format401,17754
(defvar org-agenda-skip-regexp)org-agenda-skip-regexp415,18212
(defun org-agenda-skip-entry-when-regexp-matches ()org-agenda-skip-entry-when-regexp-matches416,18244
(defun org-agenda-skip-subtree-when-regexp-matches ()org-agenda-skip-subtree-when-regexp-matches429,18846
(defun org-agenda-skip-entry-when-regexp-matches-in-subtree ()org-agenda-skip-entry-when-regexp-matches-in-subtree441,19413
(define-obsolete-function-alias 'org-minutes-to-clocksum-stringorg-minutes-to-clocksum-string456,20188
(define-obsolete-function-alias 'org-hh:mm-string-to-minutesorg-hh:mm-string-to-minutes459,20293
(define-obsolete-function-alias 'org-duration-string-to-minutesorg-duration-string-to-minutes462,20393
(define-obsolete-function-alias 'org-babel-number-porg-babel-number-p477,20932
(define-obsolete-variable-alias 'org-usenet-links-prefer-googleorg-usenet-links-prefer-google480,21027
(define-obsolete-variable-alias 'org-texinfo-def-table-markuporg-texinfo-def-table-markup483,21132
(define-obsolete-variable-alias 'org-agenda-overriding-columns-formatorg-agenda-overriding-columns-format486,21242
(defun org-show-block-all ()org-show-block-all495,21612
(define-obsolete-function-alias 'org-get-tags-at 'org-get-tags "Org 9.2")org-get-tags-at504,21852
(defun org-get-local-tags ()org-get-local-tags506,21927
(defun org-get-local-tags-at (&optional pos)org-get-local-tags-at511,22105
(defun org-get-tags-string ()org-get-tags-string516,22299
(define-obsolete-function-alias 'org-set-tags-to 'org-set-tags "Org 9.2")org-set-tags-to521,22495
(defun org-align-all-tags ()org-align-all-tags523,22570
(defmacro org-with-silent-modifications (&rest body)org-with-silent-modifications528,22723
(define-obsolete-function-alias 'org-babel-strip-quotesorg-babel-strip-quotes533,22911
(defun org-get-x-clipboard (value)org-get-x-clipboard547,23208
(defalias 'org-set-transient-maporg-set-transient-map561,23822
(defvar org-ignore-region nilorg-ignore-region569,23977
(defun org-region-active-p ()org-region-active-p572,24066
(defun org-cursor-to-region-beginning ()org-cursor-to-region-beginning578,24254
(defun org-in-invisibility-spec-p (arg)org-in-invisibility-spec-p586,24442
(defun org-move-to-column (column &optional force _buffer)org-move-to-column591,24619
(defmacro org-find-library-dir (library)org-find-library-dir600,24967
(defun org-count-lines (s)org-count-lines603,25069
(defun org-kill-new (string &rest args)org-kill-new612,25333
(defalias 'org-font-lock-ensureorg-font-lock-ensure618,25572
(defalias 'org-babel-local-file-nameorg-babel-local-file-name625,25799
(defmacro org-check-version ()org-check-version633,26027
(defun org-define-error (name message)org-define-error654,26862
(defgroup org-imenu-and-speedbar nilorg-imenu-and-speedbar677,27814
(defcustom org-imenu-depth 2org-imenu-depth682,27964
(defvar-local org-imenu-markers nilorg-imenu-markers690,28153
(defun org-imenu-get-tree ()org-imenu-get-tree693,28232
(defvar org-speedbar-restriction-lock-overlay (make-overlay 1 1)org-speedbar-restriction-lock-overlay732,29572
(defun org-speedbar-set-agenda-restriction ()org-speedbar-set-agenda-restriction740,29963
(defvar speedbar-file-key-map)speedbar-file-key-map780,31573
(defun org-add-log-current-headline ()org-add-log-current-headline794,32245
(defun org--flyspell-object-check-p (element)org--flyspell-object-check-p802,32493
(defun org-mode-flyspell-verify ()org-mode-flyspell-verify824,33339
(defun org-remove-flyspell-overlays-in (beg end)org-remove-flyspell-overlays-in885,35790
(defvar flyspell-delayed-commands)flyspell-delayed-commands891,36021
(defun org-bookmark-jump-unhide ()org-bookmark-jump-unhide897,36170
(defcustom org-calendar-to-agenda-key 'defaultorg-calendar-to-agenda-key917,36893
(defcustom org-calendar-insert-diary-entry-key [?i]org-calendar-insert-diary-entry-key935,37607
(defun org--setup-calendar-bindings ()org--setup-calendar-bindings946,38133
(defun org-mark-jump-unhide ()org-mark-jump-unhide981,39272
(defvar session-globals-exclude)session-globals-exclude1005,40088

elpa/org-plus-contrib-20191021/ob-screen.el,723
(defvar org-babel-screen-location "screen"org-babel-screen-location38,1305
(defvar org-babel-default-header-args:screenorg-babel-default-header-args:screen42,1462
(defun org-babel-execute:screen (body params)org-babel-execute:screen46,1659
(defun org-babel-prep-session:screen (_session params)org-babel-prep-session:screen57,2217
(defun org-babel-screen-session-execute-string (session body)org-babel-screen-session-execute-string74,2997
(defun org-babel-screen-session-socketname (session)org-babel-screen-session-socketname85,3494
(defun org-babel-screen-session-write-temp-file (_session body)org-babel-screen-session-write-temp-file106,4104
(defun org-babel-screen-test ()org-babel-screen-test117,4451

elpa/org-plus-contrib-20191021/org-bbdb.el,1797
(defgroup org-bbdb-anniversaries nilorg-bbdb-anniversaries131,5101
(defcustom org-bbdb-default-anniversary-format "birthday"org-bbdb-default-anniversary-format135,5229
(defcustom org-bbdb-general-anniversary-description-after 7org-bbdb-general-anniversary-description-after141,5387
(defcustom org-bbdb-anniversary-format-alistorg-bbdb-anniversary-format-alist159,6051
(defcustom org-bbdb-anniversary-field 'anniversaryorg-bbdb-anniversary-field188,7266
(defcustom org-bbdb-extract-date-fun 'org-bbdb-anniv-extract-dateorg-bbdb-extract-date-fun205,7840
(defun org-bbdb-store-link ()org-bbdb-store-link223,8387
(defun org-bbdb-export (path desc format)org-bbdb-export237,8945
(defun org-bbdb-open (name)org-bbdb-open250,9464
(defun org-bbdb-open-old (name)org-bbdb-open-old258,9686
(defun org-bbdb-open-new (name)org-bbdb-open-new278,10496
(defun org-bbdb-anniv-extract-date (time-str)org-bbdb-anniv-extract-date298,11344
(defun org-bbdb-anniv-split (str)org-bbdb-anniv-split308,11757
(defvar org-bbdb-anniv-hash nilorg-bbdb-anniv-hash316,12047
(defvar org-bbdb-updated-p torg-bbdb-updated-p320,12175
(defun org-bbdb-make-anniv-hash ()org-bbdb-make-anniv-hash323,12281
(defun org-bbdb-updated (_rec)org-bbdb-updated354,13549
(defun org-bbdb-anniversaries ()org-bbdb-anniversaries362,13790
(defun org-bbdb-date-list (d n)org-bbdb-date-list427,16051
(defun org-bbdb-anniversary-description (agenda-date anniv-date)org-bbdb-anniversary-description433,16327
(defun org-bbdb-anniversaries-future (&optional n)org-bbdb-anniversaries-future452,17238
(defun org-bbdb-complete-link ()org-bbdb-complete-link493,18862
(defun org-bbdb-anniv-export-ical ()org-bbdb-anniv-export-ical502,19103
(defun org-bbdb-format-vevent (key recs)org-bbdb-format-vevent514,19548

elpa/org-plus-contrib-20191021/org-capture.el,5498
(defvar dired-buffers)dired-buffers63,2743
(defvar org-end-time-was-given)org-end-time-was-given64,2766
(defvar org-remember-default-headline)org-remember-default-headline65,2798
(defvar org-remember-templates)org-remember-templates66,2837
(defvar org-table-border-regexp)org-table-border-regexp67,2869
(defvar org-table-current-begin-pos)org-table-current-begin-pos68,2902
(defvar org-table-fix-formulas-confirm)org-table-fix-formulas-confirm69,2939
(defvar org-table-hlines)org-table-hlines70,2979
(defvar org-capture-clock-was-started nilorg-capture-clock-was-started72,3006
(defvar org-capture-last-stored-marker (make-marker)org-capture-last-stored-marker75,3102
(defvar org-capture-link-is-already-stored nil)org-capture-link-is-already-stored80,3360
(defvar org-capture-is-refiling nilorg-capture-is-refiling82,3409
(defvar org-capture--prompt-history-table (make-hash-table :test #'equal)org-capture--prompt-history-table85,3502
(defvar org-capture--prompt-history nilorg-capture--prompt-history88,3627
(defgroup org-capture nilorg-capture91,3711
(defun org-capture-upgrade-templates (templates)org-capture-upgrade-templates96,3820
(defcustom org-capture-templates nilorg-capture-templates126,5271
(defcustom org-capture-before-finalize-hook nilorg-capture-before-finalize-hook426,19497
(defcustom org-capture-after-finalize-hook nilorg-capture-after-finalize-hook434,19763
(defcustom org-capture-prepare-finalize-hook nilorg-capture-prepare-finalize-hook441,19960
(defcustom org-capture-bookmark torg-capture-bookmark448,20168
(defvar org-capture-plist nilorg-capture-plist457,20420
(defvar org-capture-current-plist nilorg-capture-current-plist460,20531
(defvar org-capture-clock-keep nilorg-capture-clock-keep468,20926
(defun org-capture-put (&rest stuff)org-capture-put472,21100
(defun org-capture-get (prop &optional local)org-capture-get477,21317
(defvar org-capture-mode-maporg-capture-mode-map486,21720
(defvar org-capture-mode-hook nilorg-capture-mode-hook496,22095
(define-minor-mode org-capture-modeorg-capture-mode499,22179
(defvar org-capture-initial nil)org-capture-initial513,22618
(defvar org-capture-entry nil)org-capture-entry514,22651
(defun org-capture-string (string &optional keys)org-capture-string517,22698
(defcustom org-capture-templates-contexts nilorg-capture-templates-contexts524,22954
(defcustom org-capture-use-agenda-date nilorg-capture-use-agenda-date573,24750
(defun org-capture (&optional goto keys)org-capture582,25023
(defun org-capture-get-template ()org-capture-get-template694,29276
(defun org-capture-finalize (&optional stay-with-capture)org-capture-finalize712,29995
(defun org-capture-refile ()org-capture-refile853,35567
(defun org-capture-kill ()org-capture-kill885,37089
(defun org-capture-goto-last-stored ()org-capture-goto-last-stored894,37399
(defun org-capture-put-target-region-and-position ()org-capture-put-target-region-and-position904,37753
(defvar org-time-was-given) ; dynamically scoped parameterorg-time-was-given914,38107
(defun org-capture-set-target-location (&optional target)org-capture-set-target-location915,38166
(defun org-capture-expand-file (file)org-capture-expand-file1067,43579
(defun org-capture-target-buffer (file)org-capture-target-buffer1083,44320
(defun org-capture-place-template (&optional inhibit-wconf-store)org-capture-place-template1092,44636
(defun org-capture-place-entry ()org-capture-place-entry1114,45563
(defun org-capture-place-item ()org-capture-place-item1150,46983
(defun org-capture-place-table-line ()org-capture-place-table-line1262,51260
(defun org-capture-place-plain-text ()org-capture-place-plain-text1343,54311
(defun org-capture-mark-kill-region (beg end)org-capture-mark-kill-region1380,55806
(defun org-capture-position-for-last-stored (where)org-capture-position-for-last-stored1387,56060
(defun org-capture-store-last-position ()org-capture-store-last-position1401,56565
(defun org-capture-narrow (beg end)org-capture-narrow1421,57322
(defun org-capture-empty-lines-before (&optional n)org-capture-empty-lines-before1427,57505
(defun org-capture-empty-lines-after (&optional n)org-capture-empty-lines-after1437,57916
(defvar org-clock-marker) ; Defined in org.elorg-clock-marker1448,58352
(defun org-capture-insert-template-here ()org-capture-insert-template-here1450,58399
(defun org-capture-set-plist (entry)org-capture-set-plist1488,59605
(defun org-capture-goto-target (&optional template-key)org-capture-goto-target1504,60392
(defun org-capture-get-indirect-buffer (&optional buffer prefix)org-capture-get-indirect-buffer1515,60845
(defun org-capture-verify-tree (tree)org-capture-verify-tree1530,61478
(defun org-capture-select-template (&optional keys)org-capture-select-template1536,61681
(defvar org-capture--clipboards nilorg-capture--clipboards1554,62394
(defun org-capture-fill-template (&optional template initial annotation)org-capture-fill-template1557,62468
(defun org-capture-escaped-% ()org-capture-escaped-%1840,72940
(defun org-capture-expand-embedded-elisp (&optional mark)org-capture-expand-embedded-elisp1850,73242
(defun org-capture--expand-keyword-in-embedded-elisp (attr)org-capture--expand-keyword-in-embedded-elisp1883,74456
(defun org-capture-inside-embedded-elisp-p ()org-capture-inside-embedded-elisp-p1897,74983
(defun org-capture-import-remember-templates ()org-capture-import-remember-templates1904,75237

elpa/org-plus-contrib-20191021/ox-koma-letter.el,4083
(defgroup org-export-koma-letter nilorg-export-koma-letter176,7488
(defcustom org-koma-letter-class-option-file "NF"org-koma-letter-class-option-file181,7639
(defcustom org-koma-letter-author 'user-full-nameorg-koma-letter-author187,7820
(defcustom org-koma-letter-email 'org-koma-letter-emailorg-koma-letter-email202,8345
(defcustom org-koma-letter-from-address ""org-koma-letter-from-address216,8865
(defcustom org-koma-letter-phone-number ""org-koma-letter-phone-number223,9062
(defcustom org-koma-letter-url ""org-koma-letter-url229,9255
(defcustom org-koma-letter-from-logo ""org-koma-letter-from-logo236,9458
(defcustom org-koma-letter-place ""org-koma-letter-place243,9701
(defcustom org-koma-letter-location ""org-koma-letter-location249,9894
(defcustom org-koma-letter-opening ""org-koma-letter-opening267,10522
(defcustom org-koma-letter-closing ""org-koma-letter-closing281,11046
(defcustom org-koma-letter-signature ""org-koma-letter-signature295,11565
(defcustom org-koma-letter-prefer-special-headings nilorg-koma-letter-prefer-special-headings311,12171
(defcustom org-koma-letter-subject-format torg-koma-letter-subject-format318,12428
(defcustom org-koma-letter-use-backaddress nilorg-koma-letter-use-backaddress356,13858
(defcustom org-koma-letter-use-foldmarks torg-koma-letter-use-foldmarks363,14096
(defcustom org-koma-letter-use-phone nilorg-koma-letter-use-phone414,16544
(defcustom org-koma-letter-use-url nilorg-koma-letter-use-url421,16752
(defcustom org-koma-letter-use-from-logo nilorg-koma-letter-use-from-logo429,16966
(defcustom org-koma-letter-use-email nilorg-koma-letter-use-email437,17198
(defcustom org-koma-letter-use-place torg-koma-letter-use-place444,17407
(defcustom org-koma-letter-default-class "default-koma-letter"org-koma-letter-default-class451,17629
(defcustom org-koma-letter-headline-is-opening-maybe torg-koma-letter-headline-is-opening-maybe457,17835
(defcustom org-koma-letter-prefer-subject nilorg-koma-letter-prefer-subject464,18076
(defconst org-koma-letter-special-tags-in-letter '(to from closing location)org-koma-letter-special-tags-in-letter471,18334
(defconst org-koma-letter-special-tags-after-closing '(after_closing ps encl cc)org-koma-letter-special-tags-after-closing474,18459
(defconst org-koma-letter-special-tags-as-macro '(ps encl cc)org-koma-letter-special-tags-as-macro477,18602
(defconst org-koma-letter-special-tags-after-letter '(after_letter)org-koma-letter-special-tags-after-letter480,18707
(defvar org-koma-letter-special-contents nilorg-koma-letter-special-contents483,18826
(defun org-koma-letter-email ()org-koma-letter-email566,23156
(defun org-koma-letter--get-tagged-contents (key)org-koma-letter--get-tagged-contents573,23326
(defun org-koma-letter--get-value (value)org-koma-letter--get-value580,23681
(defun org-koma-letter--special-contents-inline (keywords info)org-koma-letter--special-contents-inline590,24026
(defun org-koma-letter--add-latex-newlines (string)org-koma-letter--add-latex-newlines610,24695
(defun org-koma-letter-export-block (export-block contents info)org-koma-letter-export-block622,24981
(defun org-koma-letter-export-snippet (export-snippet contents info)org-koma-letter-export-snippet632,25358
(defun org-koma-letter-keyword (keyword contents info)org-koma-letter-keyword641,25704
(defun org-koma-letter-headline (headline contents info)org-koma-letter-headline654,26204
(defun org-koma-letter--special-tag (headline info)org-koma-letter--special-tag669,26800
(defun org-koma-letter--keyword-or-headline (plist-key pred info)org-koma-letter--keyword-or-headline680,27331
(defun org-koma-letter-template (contents info)org-koma-letter-template702,28451
(defun org-koma-letter--build-settings (scope info)org-koma-letter--build-settings794,32384
(defun org-koma-letter-export-as-latexorg-koma-letter-export-as-latex901,37278
(defun org-koma-letter-export-to-latexorg-koma-letter-export-to-latex938,38580
(defun org-koma-letter-export-to-pdforg-koma-letter-export-to-pdf976,39861

elpa/org-plus-contrib-20191021/org-mew.el,1365
(defgroup org-mew nilorg-mew59,2355
(defcustom org-mew-link-to-refile-destination torg-mew-link-to-refile-destination64,2456
(defcustom org-mew-inbox-folder nilorg-mew-inbox-folder69,2621
(defcustom org-mew-use-id-db torg-mew-use-id-db76,2884
(defcustom org-mew-subject-alistorg-mew-subject-alist81,3015
(defcustom org-mew-capture-inbox-folders nilorg-mew-capture-inbox-folders91,3375
(defcustom org-mew-capture-guess-alist nilorg-mew-capture-guess-alist100,3768
(defvar mew-init-p)mew-init-p146,6081
(defvar mew-mark-afterstep-spec)mew-mark-afterstep-spec147,6101
(defvar mew-summary-goto-line-then-display)mew-summary-goto-line-then-display148,6134
(defun org-mew-store-link ()org-mew-store-link154,6306
(defun org-mew-folder-name ()org-mew-folder-name179,7398
(defun org-mew-open (path)org-mew-open193,7946
(defun org-mew-follow-link (folder message-id)org-mew-follow-link220,8992
(defun org-mew-folder-exists-p (folder)org-mew-folder-exists-p231,9372
(defun org-mew-get-msgnum (folder message-id)org-mew-get-msgnum239,9640
(defun org-mew-open-by-message-id (message-id)org-mew-open-by-message-id246,9886
(defun org-mew-search (&optional arg)org-mew-search255,10225
(defun org-mew-capture (arg)org-mew-capture310,12378
(defun org-mew-capture-guess-selection-keys (folder-name)org-mew-capture-guess-selection-keys343,13665

elpa/org-plus-contrib-20191021/ob-sql.el,1236
(defvar org-babel-default-header-args:sql '())org-babel-default-header-args:sql76,2143
(defconst org-babel-header-args:sqlorg-babel-header-args:sql78,2191
(defun org-babel-expand-body:sql (body params)org-babel-expand-body:sql88,2462
(defun org-babel-sql-dbstring-mysql (host port user password database)org-babel-sql-dbstring-mysql93,2629
(defun org-babel-sql-dbstring-postgresql (host port user database)org-babel-sql-dbstring-postgresql103,3054
(defun org-babel-sql-dbstring-oracle (host port user password database)org-babel-sql-dbstring-oracle113,3424
(defun org-babel-sql-dbstring-mssql (host user password database)org-babel-sql-dbstring-mssql133,4051
(defun org-babel-sql-dbstring-sqsh (host user password database)org-babel-sql-dbstring-sqsh145,4528
(defun org-babel-sql-dbstring-vertica (host port user password database)org-babel-sql-dbstring-vertica156,5068
(defun org-babel-sql-convert-standard-filename (file)org-babel-sql-convert-standard-filename167,5539
(defun org-babel-execute:sql (body params)org-babel-execute:sql177,6026
(defun org-babel-sql-expand-vars (body vars)org-babel-sql-expand-vars320,11281
(defun org-babel-prep-session:sql (_session _params)org-babel-prep-session:sql341,12022

elpa/org-plus-contrib-20191021/ox-deck.el,1960
(defgroup org-export-deck nilorg-export-deck82,3182
(defcustom org-deck-directories '("./deck.js")org-deck-directories87,3337
(defun org-deck--cleanup-components (components)org-deck--cleanup-components93,3567
(defun org-deck--find-extensions ()org-deck--find-extensions100,3793
(defun org-deck--find-css (type)org-deck--find-css111,4287
(defun org-deck-list-components ()org-deck-list-components123,4732
(defcustom org-deck-include-extensions nilorg-deck-include-extensions138,5392
(defcustom org-deck-exclude-extensions nilorg-deck-exclude-extensions148,5895
(defcustom org-deck-theme "swiss.css"org-deck-theme154,6124
(defcustom org-deck-transition "fade.css"org-deck-transition162,6423
(defcustom org-deck-base-url "deck.js"org-deck-base-url171,6747
(defvar org-deck-pre/postamble-stylesorg-deck-pre/postamble-styles178,6977
(defcustom org-deck-postamble "<h1>%a - %t</h1>"org-deck-postamble185,7262
(defcustom org-deck-preamble nilorg-deck-preamble211,8302
(defvar org-deck-toc-stylesorg-deck-toc-styles234,9231
(defcustom org-deck-stylesorg-deck-styles246,9701
(defcustom org-deck-title-slide-templateorg-deck-title-slide-template268,10166
(defun org-deck-toc (depth info)org-deck-toc284,10612
(defun org-deck--get-packages (info)org-deck--get-packages324,12168
(defun org-deck-inner-template (contents info)org-deck-inner-template362,14066
(defun org-deck-headline (headline contents info)org-deck-headline368,14283
(defun org-deck-item (item contents info)org-deck-item376,14721
(defun org-deck-link (link desc info)org-deck-link390,15344
(defun org-deck-template (contents info)org-deck-template394,15507
(defun org-deck--build-meta-info (info)org-deck--build-meta-info476,18763
(defun org-deck-export-as-htmlorg-deck-export-as-html507,20159
(defun org-deck-export-to-htmlorg-deck-export-to-html541,21353
(defun org-deck-publish-to-html (plist filename pub-dir)org-deck-publish-to-html576,22567

elpa/org-plus-contrib-20191021/ox-groff.el,7175
(defvar orgtbl-exp-regexp)orgtbl-exp-regexp43,1446
(defgroup org-export-groff nilorg-export-groff112,3902
(defcustom org-groff-default-class "internal"org-groff-default-class119,4047
(defcustom org-groff-classesorg-groff-classes124,4188
(defconst org-groff-special-tagsorg-groff-special-tags174,6130
(defcustom org-groff-format-headline-function nilorg-groff-format-headline-function177,6216
(defcustom org-groff-active-timestamp-format "\\fI%s\\fP"org-groff-active-timestamp-format207,7199
(defcustom org-groff-inactive-timestamp-format "\\fI%s\\fP"org-groff-inactive-timestamp-format212,7365
(defcustom org-groff-diary-timestamp-format "\\fI%s\\fP"org-groff-diary-timestamp-format217,7535
(defcustom org-groff-inline-image-rulesorg-groff-inline-image-rules224,7710
(defcustom org-groff-link-with-unknown-path-format "\\fI%s\\fP"org-groff-link-with-unknown-path-format242,8496
(defcustom org-groff-tables-centered torg-groff-tables-centered249,8669
(defcustom org-groff-tables-verbatim nilorg-groff-tables-verbatim254,8817
(defcustom org-groff-table-scientific-notation "%sE%s"org-groff-table-scientific-notation259,8952
(defcustom org-groff-text-markup-alistorg-groff-text-markup-alist272,9344
(defcustom org-groff-format-drawer-function nilorg-groff-format-drawer-function293,10057
(defcustom org-groff-format-inlinetask-function nilorg-groff-format-inlinetask-function313,10629
(defcustom org-groff-source-highlight nilorg-groff-source-highlight350,11810
(defcustom org-groff-source-highlight-langsorg-groff-source-highlight-langs355,11955
(defcustom org-groff-source-highlight-options nilorg-groff-source-highlight-options386,13324
(defvar org-groff-custom-lang-environments nilorg-groff-custom-lang-environments409,14110
(defcustom org-groff-special-charorg-groff-special-char424,14557
(defcustom org-groff-pdf-processorg-groff-pdf-process438,14966
(defcustom org-groff-logfiles-extensionsorg-groff-logfiles-extensions461,16065
(defcustom org-groff-remove-logfiles torg-groff-remove-logfiles467,16295
(defcustom org-groff-organization "Org User"org-groff-organization473,16494
(defcustom org-groff-raster-to-ps nilorg-groff-raster-to-ps478,16647
(defvar org-groff-registered-references nil)org-groff-registered-references489,17287
(defvar org-groff-special-content nil)org-groff-special-content490,17332
(defun org-groff--caption/label-string (element info)org-groff--caption/label-string496,17399
(defun org-groff--wrap-label (element output)org-groff--wrap-label515,18130
(defun org-groff--text-markup (text markup)org-groff--text-markup524,18527
(defun org-groff--get-tagged-content  (tag info)org-groff--get-tagged-content549,19467
(defun org-groff--mt-head (title contents attr info)org-groff--mt-head552,19565
(defun org-groff--letter-head (title contents attr info)org-groff--letter-head638,22225
(defun org-groff-template (contents info)org-groff-template677,23498
(defun org-groff-bold (bold contents info)org-groff-bold801,27111
(defun org-groff-center-block (center-block contents info)org-groff-center-block809,27342
(defun org-groff-clock (clock contents info)org-groff-clock819,27649
(defun org-groff-code (code contents info)org-groff-code832,28132
(defun org-groff-drawer (drawer contents info)org-groff-drawer842,28417
(defun org-groff-dynamic-block (dynamic-block contents info)org-groff-dynamic-block857,29053
(defun org-groff-entity (entity contents info)org-groff-entity865,29349
(defun org-groff-example-block (example-block contents info)org-groff-example-block873,29591
(defun org-groff-export-block (export-block contents info)org-groff-export-block884,29931
(defun org-groff-export-snippet (export-snippet contents info)org-groff-export-snippet892,30275
(defun org-groff-fixed-width (fixed-width contents info)org-groff-fixed-width900,30594
(defun org-groff-footnote-reference (footnote-reference contents info)org-groff-footnote-reference916,31117
(defun org-groff-headline (headline contents info)org-groff-headline934,31905
(defun org-groff-inline-src-block (inline-src-block contents info)org-groff-inline-src-block1058,37161
(defun org-groff-inlinetask (inlinetask contents info)org-groff-inlinetask1096,38711
(defun org-groff-italic (italic contents info)org-groff-italic1132,40342
(defun org-groff-item (item contents info)org-groff-item1140,40575
(defun org-groff-keyword (keyword contents info)org-groff-keyword1176,41926
(defun org-groff-line-break (line-break contents info)org-groff-line-break1187,42275
(defun org-groff-link--inline-image (link info)org-groff-link--inline-image1196,42551
(defun org-groff-link (link desc info)org-groff-link1232,44176
(defun org-groff-node-property (node-property contents info)org-groff-node-property1308,47580
(defun org-groff-paragraph (paragraph contents info)org-groff-paragraph1319,47967
(defun org-groff-plain-list (plain-list contents info)org-groff-plain-list1348,49235
(defun org-groff-plain-text (text info)org-groff-plain-text1366,49927
(defun org-groff-planning (planning contents info)org-groff-planning1394,50957
(defun org-groff-property-drawer (property-drawer contents info)org-groff-property-drawer1426,52141
(defun org-groff-quote-block (quote-block contents info)org-groff-quote-block1435,52451
(defun org-groff-radio-target (radio-target text info)org-groff-radio-target1445,52761
(defun org-groff-section (section contents info)org-groff-section1453,53038
(defun org-groff-special-block (special-block contents info)org-groff-special-block1461,53263
(defun org-groff-src-block (src-block contents info)org-groff-src-block1472,53626
(defun org-groff-statistics-cookie (statistics-cookie contents info)org-groff-statistics-cookie1530,55685
(defun org-groff-strike-through (strike-through contents info)org-groff-strike-through1538,55953
(defun org-groff-subscript (subscript contents info)org-groff-subscript1546,56231
(defun org-groff-superscript (superscript contents info)org-groff-superscript1554,56493
(defun org-groff-table (table contents info)org-groff-table1571,57094
(defun org-groff-table--align-string (divider table info)org-groff-table--align-string1593,57895
(defun org-groff-table--org-table (table contents info)org-groff-table--org-table1626,59109
(defun org-groff-table-cell (table-cell contents info)org-groff-table-cell1725,62244
(defun org-groff-table-row (table-row contents info)org-groff-table-row1744,62961
(defun org-groff-target (target contents info)org-groff-target1771,64084
(defun org-groff-timestamp (timestamp contents info)org-groff-timestamp1779,64326
(defun org-groff-underline (underline contents info)org-groff-underline1794,64884
(defun org-groff-verbatim (verbatim contents info)org-groff-verbatim1802,65136
(defun org-groff-verse-block (verse-block contents info)org-groff-verse-block1810,65400
(defun org-groff-export-to-grofforg-groff-export-to-groff1819,65675
(defun org-groff-export-to-pdforg-groff-export-to-pdf1851,66753
(defun org-groff-compile (file)org-groff-compile1882,67822
(defun org-groff-collect-errors (buffer)org-groff-collect-errors1947,70432

elpa/org-plus-contrib-20191021/ox-man.el,4737
(defvar org-export-man-default-packages-alist)org-export-man-default-packages-alist43,1384
(defvar org-export-man-packages-alist)org-export-man-packages-alist44,1431
(defvar orgtbl-exp-regexp)orgtbl-exp-regexp45,1470
(defgroup org-export-man nilorg-export-man122,4204
(defcustom org-man-tables-centered torg-man-tables-centered129,4341
(defcustom org-man-tables-verbatim nilorg-man-tables-verbatim136,4537
(defcustom org-man-table-scientific-notation "%sE%s"org-man-table-scientific-notation144,4721
(defcustom org-man-source-highlight nilorg-man-source-highlight161,5176
(defcustom org-man-source-highlight-langsorg-man-source-highlight-langs169,5370
(defcustom org-man-pdf-processorg-man-pdf-process205,6805
(defcustom org-man-logfiles-extensionsorg-man-logfiles-extensions240,8227
(defcustom org-man-remove-logfiles torg-man-remove-logfiles248,8473
(defun org-man--caption/label-string (element info)org-man--caption/label-string260,8747
(defun org-man--wrap-label (element output)org-man--wrap-label279,9484
(defun org-man--protect-text (text)org-man--protect-text288,9877
(defun org-man-template (contents info)org-man-template296,10041
(defun org-man-bold (_bold contents _info)org-man-bold334,11042
(defun org-man-center-block (center-block contents _info)org-man-center-block343,11263
(defun org-man-code (code _contents _info)org-man-code356,11637
(defun org-man-drawer (_drawer contents _info)org-man-drawer364,11826
(defun org-man-dynamic-block (dynamic-block contents _info)org-man-dynamic-block374,12090
(defun org-man-entity (entity _contents _info)org-man-entity383,12382
(defun org-man-example-block (example-block _contents info)org-man-example-block392,12623
(defun org-man-export-block (export-block _contents _info)org-man-export-block404,12967
(defun org-man-export-snippet (export-snippet _contents _info)org-man-export-snippet413,13308
(defun org-man-fixed-width (fixed-width _contents _info)org-man-fixed-width422,13624
(defun org-man-headline (headline contents info)org-man-headline443,14104
(defun org-man-inline-src-block (inline-src-block _contents info)org-man-inline-src-block495,15864
(defun org-man-italic (_italic contents _info)org-man-italic538,17461
(defun org-man-item (item contents info)org-man-item548,17683
(defun org-man-keyword (keyword _contents _info)org-man-keyword580,18935
(defun org-man-line-break (_line-break _contents _info)org-man-line-break593,19335
(defun org-man-link (link desc _info)org-man-link602,19534
(defun org-man-node-property (node-property _contents _info)org-man-node-property629,20646
(defun org-man-paragraph (paragraph contents _info)org-man-paragraph640,21031
(defun org-man-plain-list (_plain-list contents _info)org-man-plain-list661,21865
(defun org-man-plain-text (text info)org-man-plain-text669,22088
(defun org-man-property-drawer (_property-drawer contents _info)org-man-property-drawer696,22939
(defun org-man-quote-block (quote-block contents _info)org-man-quote-block705,23257
(defun org-man-radio-target (_radio-target text _info)org-man-radio-target716,23553
(defun org-man-section (_section contents _info)org-man-section725,23765
(defun org-man-special-block (special-block contents _info)org-man-special-block734,23989
(defun org-man-src-block (src-block _contents info)org-man-src-block743,24276
(defun org-man-statistics-cookie (statistics-cookie _contents _info)org-man-statistics-cookie776,25467
(defun org-man-strike-through (_strike-through contents _info)org-man-strike-through784,25733
(defun org-man-subscript (_subscript contents _info)org-man-subscript792,25990
(defun org-man-superscript (_superscript contents _info)org-man-superscript800,26250
(defun org-man-table (table contents info)org-man-table818,26888
(defun org-man-table--align-string (divider table info)org-man-table--align-string841,27692
(defun org-man-table--org-table (table contents info)org-man-table--org-table872,28822
(defun org-man-table-cell (table-cell contents info)org-man-table-cell970,32999
(defun org-man-table-row (table-row contents info)org-man-table-row989,33615
(defun org-man-target (target _contents info)org-man-target1009,34357
(defun org-man-timestamp (_timestamp _contents _info)org-man-timestamp1018,34597
(defun org-man-underline (_underline contents _info)org-man-underline1026,34790
(defun org-man-verbatim (verbatim _contents _info)org-man-verbatim1035,35027
(defun org-man-verse-block (_verse-block contents _info)org-man-verse-block1043,35237
(defun org-man-export-to-manorg-man-export-to-man1053,35509
(defun org-man-export-to-pdforg-man-export-to-pdf1086,36586
(defun org-man-compile (file)org-man-compile1120,37723

elpa/org-plus-contrib-20191021/ox-s5.el,1400
(defgroup org-export-s5 nilorg-export-s588,3221
(defcustom org-s5-version "1.2a2"org-s5-version93,3367
(defcustom org-s5-theme-file nilorg-s5-theme-file100,3558
(defcustom org-s5-ui-url "ui"org-s5-ui-url111,4017
(defcustom org-s5-default-view 'slideshoworg-s5-default-view118,4232
(defcustom org-s5-control-visibility 'hiddenorg-s5-control-visibility123,4395
(defvar org-s5--divsorg-s5--divs128,4558
(defcustom org-s5-postamble "<h1>%a - %t</h1>"org-s5-postamble144,5114
(defcustom org-s5-preamble "&#x20;"org-s5-preamble162,5812
(defcustom org-s5-title-slide-templateorg-s5-title-slide-template181,6491
(defun org-s5--format-toc-headline (headline info)org-s5--format-toc-headline197,6933
(defun org-s5-toc (depth info)org-s5-toc214,7815
(defun org-s5--build-head (info)org-s5--build-head232,8582
(defun org-s5--build-meta-info (info)org-s5--build-meta-info260,9592
(defun org-s5-headline (headline contents info)org-s5-headline270,9986
(defun org-s5-plain-list (plain-list contents info)org-s5-plain-list278,10422
(defun org-s5-inner-template (contents info)org-s5-inner-template298,11207
(defun org-s5-template (contents info)org-s5-template304,11422
(defun org-s5-export-as-htmlorg-s5-export-as-html352,13215
(defun org-s5-export-to-htmlorg-s5-export-to-html386,14395
(defun org-s5-publish-to-html (plist filename pub-dir)org-s5-publish-to-html421,15607

elpa/org-plus-contrib-20191021/ob-php.el,265
(defgroup ob-php nilob-php20,429
(defcustom ob-php:inf-php-buffer "*php*"ob-php:inf-php-buffer24,495
(defun org-babel-execute:php (body params)org-babel-execute:php30,619
(defvar org-babel-default-header-args:php '())org-babel-default-header-args:php41,927

elpa/org-plus-contrib-20191021/org-velocity.el,5056
(defgroup org-velocity nilorg-velocity69,2790
(defcustom org-velocity-bucket ""org-velocity-bucket76,2944
(defcustom org-velocity-show-previews torg-velocity-show-previews81,3047
(defcustom org-velocity-exit-on-match nilorg-velocity-exit-on-match87,3190
(defcustom org-velocity-force-new nilorg-velocity-force-new93,3350
(defcustom org-velocity-use-search-ring torg-velocity-use-search-ring99,3510
(defcustom org-velocity-always-use-bucket nilorg-velocity-always-use-bucket108,3761
(defcustom org-velocity-use-completion nilorg-velocity-use-completion114,3924
(defcustom org-velocity-search-method 'phraseorg-velocity-search-method126,4263
(defcustom org-velocity-capture-templatesorg-velocity-capture-templates136,4657
(defcustom org-velocity-heading-level 1org-velocity-heading-level149,5087
(defvar crm-separator)                  ;Ensure dynamic binding.crm-separator158,5332
(defsubst org-velocity-grab-preview ()org-velocity-grab-preview160,5398
(defsubst org-velocity-nearest-heading (position)org-velocity-nearest-heading189,6503
(defconst org-velocity-indexorg-velocity-index204,7034
(defconst org-velocity-match-buffer-name "*Velocity matches*")org-velocity-match-buffer-name211,7286
(defvar org-velocity-search nilorg-velocity-search219,7559
(defun org-velocity-buffer-file-name (&optional buffer)org-velocity-buffer-file-name222,7633
(defun org-velocity-minibuffer-contents ()org-velocity-minibuffer-contents235,8192
(defun org-velocity-nix-minibuffer ()org-velocity-nix-minibuffer241,8431
(defun org-velocity-bucket-file ()org-velocity-bucket-file248,8705
(defvar org-velocity-bucket-buffer nil)org-velocity-bucket-buffer269,9655
(defvar org-velocity-navigating nil)org-velocity-navigating270,9695
(defsubst org-velocity-bucket-buffer ()org-velocity-bucket-buffer272,9733
(defsubst org-velocity-match-buffer ()org-velocity-match-buffer276,9863
(defsubst org-velocity-match-window ()org-velocity-match-window280,10018
(defun org-velocity-beginning-of-headings ()org-velocity-beginning-of-headings283,10109
(defun org-velocity-make-indirect-buffer (heading)org-velocity-make-indirect-buffer291,10414
(defun org-velocity-capture ()org-velocity-capture304,10925
(defvar org-velocity-saved-winconf nil)org-velocity-saved-winconf315,11333
(defun org-velocity-edit-entry (heading)org-velocity-edit-entry318,11431
(defun org-velocity-edit-entry/inline (heading)org-velocity-edit-entry/inline330,11801
(defun org-velocity-format-header-line (control-string &rest args)org-velocity-format-header-line337,12058
(defun org-velocity-edit-entry/indirect (heading)org-velocity-edit-entry/indirect341,12221
(defun org-velocity-dismiss ()org-velocity-dismiss361,13036
(defun org-velocity-visit-button (button)org-velocity-visit-button370,13359
(define-button-type 'org-velocity-buttonorg-velocity-button379,13680
(defsubst org-velocity-buttonize (heading)org-velocity-buttonize383,13788
(defsubst org-velocity-insert-preview (heading)org-velocity-insert-preview391,14050
(defvar org-velocity-recursive-headings nil)org-velocity-recursive-headings399,14256
(defvar org-velocity-recursive-search nil)org-velocity-recursive-search400,14301
(defun org-velocity-all-results (style search)org-velocity-all-results442,16024
(defsubst org-velocity-present-match (hint match)org-velocity-present-match453,16416
(defun org-velocity-present-search (style search hide-hints)org-velocity-present-search460,16647
(defun org-velocity-restrict-search ()org-velocity-restrict-search476,17377
(defun org-velocity-store-link ()org-velocity-store-link557,20947
(defun org-velocity-engine (search)org-velocity-engine576,21568
(defun org-velocity-activate-button (char)org-velocity-activate-button607,23066
(defun org-velocity-electric-undefined ()org-velocity-electric-undefined617,23420
(defun org-velocity-electric-follow (ev)org-velocity-electric-follow629,23778
(defun org-velocity-electric-edit ()org-velocity-electric-edit637,24117
(defun org-velocity-electric-new ()org-velocity-electric-new642,24237
(defvar org-velocity-electric-maporg-velocity-electric-map647,24352
(defun org-velocity-electric-read-hint ()org-velocity-electric-read-hint663,24957
(defvar org-velocity-incremental-keymaporg-velocity-incremental-keymap673,25344
(defun org-velocity-displaying-completions-p ()org-velocity-displaying-completions-p679,25511
(defun org-velocity-update ()org-velocity-update686,25744
(defvar dabbrev--last-abbreviation)dabbrev--last-abbreviation702,26470
(defun org-velocity-dabbrev-completion-list (abbrev)org-velocity-dabbrev-completion-list704,26507
(defvar org-velocity-local-completion-maporg-velocity-local-completion-map711,26789
(defun org-velocity-read-with-completion (prompt)org-velocity-read-with-completion722,27288
(defun org-velocity-incremental-read (prompt)org-velocity-incremental-read751,28439
(defun org-velocity (arg &optional search)org-velocity769,29327
(defalias 'org-velocity-read 'org-velocity)org-velocity-read815,31215

elpa/org-plus-contrib-20191021/org-bibtex.el,2935
(defvar org-agenda-overriding-header)org-agenda-overriding-header115,4311
(defvar org-agenda-search-view-always-boolean)org-agenda-search-view-always-boolean116,4349
(defvar org-bibtex-description nil) ; dynamically scoped from org.elorg-bibtex-description117,4396
(defvar org-id-locations)org-id-locations118,4465
(defvar org-bibtex-typesorg-bibtex-types127,4755
(defvar org-bibtex-fieldsorg-bibtex-fields186,7613
(defvar org-bibtex-entries nilorg-bibtex-entries213,11134
(defcustom org-bibtex-autogen-keys nilorg-bibtex-autogen-keys216,11207
(defcustom org-bibtex-prefix nilorg-bibtex-prefix222,11381
(defcustom org-bibtex-treat-headline-as-title torg-bibtex-treat-headline-as-title231,11628
(defcustom org-bibtex-headline-format-functionorg-bibtex-headline-format-function240,11951
(defcustom org-bibtex-export-arbitrary-fields nilorg-bibtex-export-arbitrary-fields251,12348
(defcustom org-bibtex-key-property "CUSTOM_ID"org-bibtex-key-property260,12707
(defcustom org-bibtex-tags nilorg-bibtex-tags270,13060
(defcustom org-bibtex-tags-are-keywords nilorg-bibtex-tags-are-keywords276,13231
(defcustom org-bibtex-no-export-tags nilorg-bibtex-no-export-tags293,13924
(defcustom org-bibtex-inherit-tags nilorg-bibtex-inherit-tags301,14182
(defcustom org-bibtex-type-property-name "btype"org-bibtex-type-property-name311,14556
(defun org-bibtex-get (property)org-bibtex-get319,14752
(defun org-bibtex-put (property value)org-bibtex-put328,15143
(defun org-bibtex-headline ()org-bibtex-headline337,15456
(defun org-bibtex-ask (field)org-bibtex-ask403,17779
(defun org-bibtex-autokey ()org-bibtex-autokey416,18346
(defun org-bibtex-fleshout (type &optional optional)org-bibtex-fleshout435,18993
(defun org-bibtex-open (path)org-bibtex-open470,20464
(defun org-bibtex-store-link ()org-bibtex-store-link477,20714
(defun org-create-file-search-in-bibtex ()org-create-file-search-in-bibtex514,22487
(defun org-execute-file-search-in-bibtex (s)org-execute-file-search-in-bibtex536,23468
(defun org-bibtex (filename)org-bibtex562,24621
(defun org-bibtex-check (&optional optional)org-bibtex-check588,25706
(defun org-bibtex-check-all (&optional optional)org-bibtex-check-all598,26129
(defun org-bibtex-create (&optional arg nonew)org-bibtex-create603,26362
(defun org-bibtex-create-in-current-entry (&optional arg)org-bibtex-create-in-current-entry629,27353
(defun org-bibtex-read ()org-bibtex-read635,27558
(defun org-bibtex-read-buffer (buffer)org-bibtex-read-buffer660,28586
(defun org-bibtex-read-file (file)org-bibtex-read-file676,29128
(defun org-bibtex-write ()org-bibtex-write681,29306
(defun org-bibtex-yank ()org-bibtex-yank711,30471
(defun org-bibtex-import-from-file (file)org-bibtex-import-from-file720,30765
(defun org-bibtex-export-to-kill-ring ()org-bibtex-export-to-kill-ring728,31073
(defun org-bibtex-search (string)org-bibtex-search734,31260

elpa/org-plus-contrib-20191021/org-irc.el,1078
(defvar org-irc-client 'ercorg-irc-client64,2505
(defvar org-irc-link-to-logs nilorg-irc-link-to-logs67,2565
(defvar erc-default-port)   ; dynamically scoped from erc.elerc-default-port70,2678
(defvar erc-session-port)   ; dynamically scoped form erc-backend.elerc-session-port71,2739
(defvar erc-session-server) ; dynamically scoped form erc-backend.elerc-session-server72,2808
(defun org-irc-visit (link)org-irc-visit81,3062
(defun org-irc-parse-link (link)org-irc-parse-link90,3335
(defun org-irc-store-link ()org-irc-store-link103,3831
(defun org-irc-ellipsify-description (string &optional after)org-irc-ellipsify-description109,4007
(defun org-irc-erc-get-line-from-log (erc-line)org-irc-erc-get-line-from-log124,4602
(defun org-irc-erc-store-link ()org-irc-erc-store-link146,5469
(defun org-irc-get-erc-link ()org-irc-get-erc-link181,6731
(defun org-irc-get-current-erc-port ()org-irc-get-current-erc-port196,7308
(defun org-irc-visit-erc (link)org-irc-visit-erc208,7627
(defun org-irc-export (link description format)org-irc-export253,9135

elpa/org-plus-contrib-20191021/org-eww.el,639
(defvar eww-current-title)eww-current-title50,1679
(defvar eww-current-url)eww-current-url51,1706
(defvar eww-data)eww-data52,1731
(defvar eww-mode-map)eww-mode-map53,1749
(defun org-eww-store-link ()org-eww-store-link60,1927
(defun org-eww-goto-next-url-property-change ()org-eww-goto-next-url-property-change76,2420
(defun org-eww-has-further-url-property-change-p ()org-eww-has-further-url-property-change-p83,2645
(defun org-eww-url-below-point ()org-eww-url-below-point88,2833
(defun org-eww-copy-for-org-mode ()org-eww-copy-for-org-mode93,2984
(defun org-eww-extend-eww-keymap ()org-eww-extend-eww-keymap163,5848

elpa/org-plus-contrib-20191021/ob-ebnf.el,180
(defvar org-babel-default-header-args:ebnf '((:style . nil)))org-babel-default-header-args:ebnf47,1828
(defun org-babel-execute:ebnf (body params)org-babel-execute:ebnf51,1961

elpa/org-plus-contrib-20191021/org-eldoc.el,817
(defgroup org-eldoc nil "" :group 'org)org-eldoc45,1552
(defcustom org-eldoc-breadcrumb-separator "/"org-eldoc-breadcrumb-separator47,1593
(defcustom org-eldoc-test-buffer-name " *Org-eldoc test buffer*"org-eldoc-test-buffer-name52,1703
(defun org-eldoc-get-breadcrumb ()org-eldoc-get-breadcrumb57,1880
(defun org-eldoc-get-src-header ()org-eldoc-get-src-header69,2312
(defun org-eldoc-get-src-lang ()org-eldoc-get-src-lang92,3211
(defvar org-eldoc-local-functions-cache (make-hash-table :size 40 :test 'equal)org-eldoc-local-functions-cache106,3739
(defun org-eldoc-get-mode-local-documentation-function (lang)org-eldoc-get-mode-local-documentation-function110,3940
(defun org-eldoc-documentation-function ()org-eldoc-documentation-function130,4849
(defun org-eldoc-load ()org-eldoc-load161,6466

elpa/org-plus-contrib-20191021/ob-python.el,2484
(defvar org-babel-tangle-lang-exts)org-babel-tangle-lang-exts37,1266
(defvar org-babel-default-header-args:python '())org-babel-default-header-args:python40,1364
(defcustom org-babel-python-command "python"org-babel-python-command42,1415
(defcustom org-babel-python-modeorg-babel-python-mode49,1601
(defcustom org-babel-python-hline-to "None"org-babel-python-hline-to58,1900
(defcustom org-babel-python-None-to 'hlineorg-babel-python-None-to65,2110
(defun org-babel-execute:python (body params)org-babel-execute:python72,2307
(defun org-babel-prep-session:python (session params)org-babel-prep-session:python98,3437
(defun org-babel-load-session:python (session body params)org-babel-load-session:python110,3942
(defun org-babel-variable-assignments:python (params)org-babel-variable-assignments:python121,4307
(defun org-babel-python-var-to-python (var)org-babel-python-var-to-python130,4586
(defun org-babel-python-table-or-string (results)org-babel-python-table-or-string142,5088
(defvar org-babel-python-buffers '((:default . "*Python*")))org-babel-python-buffers153,5528
(defun org-babel-python-session-buffer (session)org-babel-python-session-buffer155,5590
(defun org-babel-python-with-earmuffs (session)org-babel-python-with-earmuffs159,5737
(defun org-babel-python-without-earmuffs (session)org-babel-python-without-earmuffs166,5997
(defvar py-default-interpreter)py-default-interpreter173,6278
(defvar py-which-bufname)py-which-bufname174,6310
(defvar python-shell-buffer-name)python-shell-buffer-name175,6336
(defun org-babel-python-initiate-session-by-key (&optional session)org-babel-python-initiate-session-by-key176,6370
(defun org-babel-python-initiate-session (&optional session _params)org-babel-python-initiate-session219,8243
(defvar org-babel-python-eoe-indicator "'org_babel_python_eoe'"org-babel-python-eoe-indicator225,8500
(defconst org-babel-python-wrapper-methodorg-babel-python-wrapper-method227,8621
(defconst org-babel-python-pp-wrapper-methodorg-babel-python-pp-wrapper-method233,8722
(defconst org-babel-python--exec-tmpfileorg-babel-python--exec-tmpfile241,8852
(defun org-babel-python-evaluateorg-babel-python-evaluate250,9139
(defun org-babel-python-evaluate-external-processorg-babel-python-evaluate-external-process259,9467
(defun org-babel-python-evaluate-sessionorg-babel-python-evaluate-session290,10618
(defun org-babel-python-read-string (string)org-babel-python-read-string363,13374

elpa/org-plus-contrib-20191021/org-wl.el,1408
(defgroup org-wl nilorg-wl36,1335
(defcustom org-wl-link-to-refile-destination torg-wl-link-to-refile-destination41,1442
(defcustom org-wl-link-remove-filter nilorg-wl-link-remove-filter46,1605
(defcustom org-wl-shimbun-prefer-web-links nilorg-wl-shimbun-prefer-web-links51,1739
(defcustom org-wl-nntp-prefer-web-links nilorg-wl-nntp-prefer-web-links56,1876
(defcustom org-wl-disable-folder-check torg-wl-disable-folder-check63,2089
(defcustom org-wl-namazu-default-index nilorg-wl-namazu-default-index68,2219
(defvar wl-init)wl-init98,3696
(defvar wl-summary-buffer-elmo-folder)wl-summary-buffer-elmo-folder99,3713
(defvar wl-summary-buffer-folder-name)wl-summary-buffer-folder-name100,3752
(defvar wl-folder-group-regexp)wl-folder-group-regexp101,3791
(defvar wl-auto-check-folder-name)wl-auto-check-folder-name102,3823
(defvar elmo-nntp-default-server)elmo-nntp-default-server103,3858
(defconst org-wl-folder-typesorg-wl-folder-types105,3893
(defun org-wl-folder-type (folder)org-wl-folder-type116,4298
(defun org-wl-message-field (field entity)org-wl-message-field136,4906
(defun org-wl-store-link ()org-wl-store-link143,5186
(defun org-wl-store-link-folder ()org-wl-store-link-folder154,5473
(defun org-wl-store-link-message ()org-wl-store-link-message167,5890
(defun org-wl-open-nntp (path)org-wl-open-nntp242,8907
(defun org-wl-open (path)org-wl-open257,9401

elpa/org-plus-contrib-20191021/ob-latex.el,1191
(defvar org-babel-tangle-lang-exts)org-babel-tangle-lang-exts41,1571
(defvar org-format-latex-header)	  ; From org.elorg-format-latex-header44,1669
(defvar org-format-latex-options)	  ; From org.elorg-format-latex-options45,1718
(defvar org-latex-default-packages-alist) ; From org.elorg-latex-default-packages-alist46,1768
(defvar org-latex-packages-alist)	  ; From org.elorg-latex-packages-alist47,1824
(defvar org-babel-default-header-args:latexorg-babel-default-header-args:latex49,1875
(defconst org-babel-header-args:latexorg-babel-header-args:latex53,2037
(defcustom org-babel-latex-htlatex "htlatex"org-babel-latex-htlatex68,2434
(defcustom org-babel-latex-htlatex-packagesorg-babel-latex-htlatex-packages73,2587
(defun org-babel-expand-body:latex (body params)org-babel-expand-body:latex79,2789
(defun org-babel-execute:latex (body params)org-babel-execute:latex90,3240
(defun org-babel-latex-convert-pdf (pdffile out-file im-in-options im-out-options)org-babel-latex-convert-pdf208,7924
(defun org-babel-latex-tex-to-pdf (file)org-babel-latex-tex-to-pdf215,8239
(defun org-babel-prep-session:latex (_session _params)org-babel-prep-session:latex220,8387

elpa/org-plus-contrib-20191021/org-mac-iCal.el,472
(defcustom org-mac-iCal-range 2org-mac-iCal-range57,2119
(defun org-mac-iCal ()org-mac-iCal65,2394
(defun omi-concat-leopard-ics (list)omi-concat-leopard-ics130,4641
(defun omi-import-ics (string)omi-import-ics146,5233
(defun omi-kill-diary-buffer (list)omi-kill-diary-buffer211,7575
(defun omi-kill-ics-buffer (list)omi-kill-ics-buffer218,7700
(defun omi-delete-ics-file (list)omi-delete-ics-file225,7821
(defun omi-checked (directory)omi-checked231,7911

elpa/org-plus-contrib-20191021/org-mairix.el,1877
(defgroup org-mairix nilorg-mairix45,1830
(defcustom org-mairix-threaded-links torg-mairix-threaded-links50,1930
(defcustom org-mairix-augmented-links nilorg-mairix-augmented-links57,2164
(defcustom org-mairix-display-hook 'org-mairix-gnus-display-resultsorg-mairix-display-hook68,2561
(defcustom org-mairix-open-command "mairix %args% '%search%'"org-mairix-open-command74,2798
(defun org-mairix-construct-link (message-id)org-mairix-construct-link91,3296
(defun org-store-mairix-link-props (&rest plist)org-store-mairix-link-props99,3580
(defun org-mairix-message-send-and-exit-with-link ()org-mairix-message-send-and-exit-with-link128,4941
(defun org-mairix-open (search)org-mairix-open142,5548
(defun org-mairix-command-substitution (cmd search args)org-mairix-command-substitution166,6680
(defcustom org-mairix-link-clipboard "~/.org-mairix-link"org-mairix-link-clipboard181,7320
(defun org-mairix-insert-link ()org-mairix-insert-link192,7755
(defgroup org-mairix-mutt nilorg-mairix-mutt205,8158
(defcustom org-mairix-mutt-display-commandorg-mairix-mutt-display-command210,8276
(defun org-mairix-mutt-display-results (search args)org-mairix-mutt-display-results221,8686
(defgroup org-mairix-gnus nilorg-mairix-gnus236,9405
(defcustom org-mairix-gnus-results-group "nnmaildir:mairix"org-mairix-gnus-results-group241,9523
(defcustom org-mairix-gnus-select-display-group-functionorg-mairix-gnus-select-display-group-function248,9805
(defun org-mairix-store-gnus-link ()org-mairix-store-gnus-link263,10424
(defun org-mairix-gnus-display-results (search args)org-mairix-gnus-display-results279,11120
(defun org-mairix-gnus-select-display-group-function-gg ()org-mairix-gnus-select-display-group-function-gg317,12872
(defun org-mairix-gnus-select-display-group-function-bzg ()org-mairix-gnus-select-display-group-function-bzg325,13235

elpa/org-plus-contrib-20191021/ob-fomus.el,340
(defvar org-babel-default-header-args:fomusorg-babel-default-header-args:fomus45,1466
(defun org-babel-expand-body:fomus (body params)org-babel-expand-body:fomus49,1627
(defun org-babel-execute:fomus (body params)org-babel-execute:fomus64,2051
(defun org-babel-prep-session:fomus (session params)org-babel-prep-session:fomus86,2942

elpa/org-plus-contrib-20191021/ox-freemind.el,1937
(defgroup org-export-freemind nilorg-export-freemind65,2003
(defcustom org-freemind-stylesorg-freemind-styles70,2159
(defcustom org-freemind-style-map-function 'org-freemind-style-map--automaticorg-freemind-style-map-function90,3250
(defcustom org-freemind-section-format 'noteorg-freemind-section-format106,3948
(defcustom org-freemind-pretty-output nilorg-freemind-pretty-output123,4595
(defun org-freemind--serialize (parsed-xml &optional contents)org-freemind--serialize133,4788
(defun org-freemind--parse-xml (xml-string)org-freemind--parse-xml168,6017
(defun org-freemind-style-map--automatic (element info)org-freemind-style-map--automatic179,6409
(defun org-freemind-style-map--default (element info)org-freemind-style-map--default197,7107
(defun org-freemind--get-node-style (element info)org-freemind--get-node-style208,7478
(defun org-freemind--build-stylized-node (style-1 style-2 &optional contents)org-freemind--build-stylized-node231,8568
(defun org-freemind--richcontent (type contents &optional css-style)org-freemind--richcontent295,10977
(defun org-freemind--build-node-contents (element contents info)org-freemind--build-node-contents308,11412
(defun org-freemind-template (contents info)org-freemind-template358,13036
(defun org-freemind-inner-template (contents info)org-freemind-inner-template369,13534
(defun org-freemind--tags (tags)org-freemind--tags377,13764
(defun org-freemind-entity (entity contents info)org-freemind-entity388,13951
(defun org-freemind-headline (headline contents info)org-freemind-headline396,14203
(defun org-freemind-section (section contents info)org-freemind-section454,16715
(defun org-freemind-final-function (contents backend info)org-freemind-final-function466,17085
(defun org-freemind-options-function (info backend)org-freemind-options-function475,17426
(defun org-freemind-export-to-freemindorg-freemind-export-to-freemind490,17931

elpa/org-plus-contrib-20191021/ob-redis.el,190
(defgroup ob-redis nilob-redis20,455
(defcustom ob-redis:default-db "127.0.0.1:6379"ob-redis:default-db24,525
(defun org-babel-execute:redis (body params)org-babel-execute:redis30,653

elpa/org-plus-contrib-20191021/org-lint.el,4735
(defun org-lint-missing-checker-name (_)org-lint-missing-checker-name123,4531
(defconst org-lint--checkersorg-lint--checkers127,4661
(defun org-lint--collect-duplicatesorg-lint--collect-duplicates295,10581
(defun org-lint-duplicate-custom-id (ast)org-lint-duplicate-custom-id325,11676
(defun org-lint-duplicate-name (ast)org-lint-duplicate-name338,12106
(defun org-lint-duplicate-target (ast)org-lint-duplicate-target350,12517
(defun org-lint-duplicate-footnote-definition (ast)org-lint-duplicate-footnote-definition359,12831
(defun org-lint-orphaned-affiliated-keywords (ast)org-lint-orphaned-affiliated-keywords367,13164
(defun org-lint-obsolete-affiliated-keywords (_)org-lint-obsolete-affiliated-keywords382,13791
(defun org-lint-deprecated-export-blocks (ast)org-lint-deprecated-export-blocks404,14440
(defun org-lint-deprecated-header-syntax (ast)org-lint-deprecated-header-syntax418,14920
(defun org-lint-missing-language-in-src-block (ast)org-lint-missing-language-in-src-block444,15891
(defun org-lint-missing-backend-in-export-block (ast)org-lint-missing-backend-in-export-block451,16139
(defun org-lint-invalid-babel-call-block (ast)org-lint-invalid-babel-call-block458,16388
(defun org-lint-deprecated-category-setup (ast)org-lint-deprecated-category-setup471,16864
(defun org-lint-invalid-coderef-link (ast)org-lint-invalid-coderef-link482,17232
(defun org-lint-invalid-custom-id-link (ast)org-lint-invalid-custom-id-link492,17644
(defun org-lint-invalid-fuzzy-link (ast)org-lint-invalid-fuzzy-link502,18042
(defun org-lint-invalid-id-link (ast)org-lint-invalid-id-link515,18534
(defun org-lint-special-property-in-properties-drawer (ast)org-lint-special-property-in-properties-drawer524,18845
(defun org-lint-obsolete-properties-drawer (ast)org-lint-obsolete-properties-drawer534,19198
(defun org-lint-invalid-effort-property (ast)org-lint-invalid-effort-property548,19801
(defun org-lint-link-to-local-file (ast)org-lint-link-to-local-file558,20190
(defun org-lint-non-existent-setupfile-parameter (ast)org-lint-non-existent-setupfile-parameter572,20689
(defun org-lint-wrong-include-link-parameter (ast)org-lint-wrong-include-link-parameter585,21155
(defun org-lint-obsolete-include-markup (ast)org-lint-obsolete-include-markup624,22604
(defun org-lint-unknown-options-item (ast)org-lint-unknown-options-item643,23286
(defun org-lint-invalid-macro-argument-and-template (ast)org-lint-invalid-macro-argument-and-template669,24103
(defun org-lint-undefined-footnote-reference (ast)org-lint-undefined-footnote-reference735,26458
(defun org-lint-unreferenced-footnote-definition (ast)org-lint-unreferenced-footnote-definition747,26958
(defun org-lint-colon-in-name (ast)org-lint-colon-in-name759,27434
(defun org-lint-misplaced-planning-info (_)org-lint-misplaced-planning-info774,27915
(defun org-lint-incomplete-drawer (_)org-lint-incomplete-drawer785,28312
(defun org-lint-indented-diary-sexp (_)org-lint-indented-diary-sexp803,28885
(defun org-lint-invalid-block (_)org-lint-invalid-block813,29250
(defun org-lint-invalid-keyword-syntax (_)org-lint-invalid-keyword-syntax836,30089
(defun org-lint-extraneous-element-in-footnote-section (ast)org-lint-extraneous-element-in-footnote-section854,30742
(defun org-lint-quote-section (ast)org-lint-quote-section871,31387
(defun org-lint-file-application (ast)org-lint-file-application880,31734
(defun org-lint-wrong-header-argument (ast)org-lint-wrong-header-argument888,31989
(defun org-lint-wrong-header-value (ast)org-lint-wrong-header-value965,34622
(defun org-lint-spurious-colons (ast)org-lint-spurious-colons1039,36952
(defvar org-lint--report-mode-maporg-lint--report-mode-map1050,37210
(define-derived-mode org-lint--report-mode tabulated-list-mode "OrgLint"org-lint--report-mode1061,37680
(defun org-lint--generate-reports (buffer checkers)org-lint--generate-reports1074,38085
(defvar-local org-lint--source-buffer nilorg-lint--source-buffer1120,39369
(defvar-local org-lint--local-checkers nilorg-lint--local-checkers1123,39468
(defun org-lint--refresh-reports ()org-lint--refresh-reports1126,39564
(defun org-lint--current-line ()org-lint--current-line1132,39746
(defun org-lint--current-checker (&optional entry)org-lint--current-checker1136,39883
(defun org-lint--display-reports (source checkers)org-lint--display-reports1142,40114
(defun org-lint--jump-to-source ()org-lint--jump-to-source1155,40628
(defun org-lint--show-source ()org-lint--show-source1164,40914
(defun org-lint--hide-checker ()org-lint--hide-checker1171,41131
(defun org-lint--ignore-checker ()org-lint--ignore-checker1180,41453
(defun org-lint (&optional arg)org-lint1192,41796

elpa/org-plus-contrib-20191021/org-clock.el,11999
(defvar org-frame-title-format-backup frame-title-format)org-frame-title-format-backup40,1480
(defvar org-state)org-state41,1538
(defvar org-time-stamp-formats)org-time-stamp-formats42,1557
(defgroup org-clock nilorg-clock45,1591
(defcustom org-clock-into-drawer torg-clock-into-drawer50,1717
(defun org-clock-into-drawer ()org-clock-into-drawer77,2659
(defcustom org-clock-out-when-done torg-clock-out-when-done95,3366
(defcustom org-clock-rounding-minutes 0org-clock-rounding-minutes110,3931
(defcustom org-clock-out-remove-zero-time-clocks nilorg-clock-out-remove-zero-time-clocks128,4677
(defcustom org-clock-in-switch-to-state nilorg-clock-in-switch-to-state133,4842
(defcustom org-clock-out-switch-to-state nilorg-clock-out-switch-to-state146,5296
(defcustom org-clock-history-length 5org-clock-history-length159,5752
(defcustom org-clock-goto-may-find-recent-task torg-clock-goto-may-find-recent-task167,6031
(defcustom org-clock-heading-function nilorg-clock-heading-function172,6196
(defcustom org-clock-string-limit 0org-clock-string-limit179,6506
(defcustom org-clock-in-resume nilorg-clock-in-resume184,6654
(defcustom org-clock-persist nilorg-clock-persist191,6912
(defcustom org-clock-persist-file (convert-standard-filenameorg-clock-persist-file212,7727
(defcustom org-clock-persist-query-save nilorg-clock-persist-query-save218,7916
(defcustom org-clock-persist-query-resume torg-clock-persist-query-resume223,8062
(defcustom org-clock-sound nilorg-clock-sound228,8213
(defcustom org-clock-mode-line-total 'autoorg-clock-mode-line-total241,8550
(defvaralias 'org-task-overrun-text 'org-clock-task-overrun-text)org-task-overrun-text259,9297
(defcustom org-clock-task-overrun-text nilorg-clock-task-overrun-text260,9363
(defcustom org-show-notification-handler nilorg-show-notification-handler272,9871
(defgroup org-clocktable nilorg-clocktable282,10160
(defcustom org-clocktable-defaultsorg-clocktable-defaults287,10288
(defcustom org-clock-clocktable-formatter 'org-clocktable-write-defaultorg-clock-clocktable-formatter316,10812
(defcustom org-clock-clocktable-language-setuporg-clock-clocktable-language-setup324,11115
(defcustom org-clock-clocktable-default-properties '(:maxlevel 2)org-clock-clocktable-default-properties336,11877
(defcustom org-clock-idle-time nilorg-clock-idle-time344,12152
(defcustom org-clock-auto-clock-resolution 'when-no-clock-is-runningorg-clock-auto-clock-resolution351,12370
(defcustom org-clock-report-include-clocking-task nilorg-clock-report-include-clocking-task359,12670
(defcustom org-clock-resolve-expert nilorg-clock-resolve-expert365,12856
(defcustom org-clock-continuously nilorg-clock-continuously371,13026
(defcustom org-clock-total-time-cell-format "*%s*"org-clock-total-time-cell-format377,13195
(defcustom org-clock-file-time-cell-format "*%s*"org-clock-file-time-cell-format383,13346
(defcustom org-clock-clocked-in-display 'mode-lineorg-clock-clocked-in-display389,13495
(defcustom org-clock-frame-title-format '(t org-mode-line-string)org-clock-frame-title-format405,14057
(defcustom org-clock-x11idle-program-name "x11idle"org-clock-x11idle-program-name418,14531
(defcustom org-clock-goto-before-context 2org-clock-goto-before-context432,14906
(defcustom org-clock-display-default-range 'thisyearorg-clock-display-default-range438,15107
(defvar org-clock-in-prepare-hook nilorg-clock-in-prepare-hook455,15648
(defvar org-clock-in-hook nilorg-clock-in-hook460,15869
(defvar org-clock-out-hook nilorg-clock-out-hook462,15938
(defvar org-clock-cancel-hook nilorg-clock-cancel-hook465,16017
(defvar org-clock-goto-hook nilorg-clock-goto-hook467,16099
(defvar org-clock-has-been-used nilorg-clock-has-been-used469,16192
(defvar org-clock-stored-history nilorg-clock-stored-history472,16292
(defvar org-clock-stored-resume-clock nilorg-clock-stored-resume-clock474,16379
(defvar org-mode-line-string "")org-mode-line-string479,16510
(defvar org-clock-mode-line-timer nil)org-clock-mode-line-timer482,16596
(defvar org-clock-idle-timer nil)org-clock-idle-timer483,16635
(defvar org-clock-heading) ; defined in org.elorg-clock-heading484,16669
(defvar org-clock-start-time "")org-clock-start-time485,16716
(defvar org-clock-leftover-time nilorg-clock-leftover-time487,16750
(defvar org-clock-effort ""org-clock-effort490,16863
(defvar org-clock-total-time nilorg-clock-total-time493,16945
(defvar org-clock-history nilorg-clock-history497,17109
(defvar org-clock-default-task (make-marker)org-clock-default-task500,17194
(defvar org-clock-interrupted-task (make-marker)org-clock-interrupted-task505,17390
(defvar org-clock-mode-line-map (make-sparse-keymap))org-clock-mode-line-map508,17521
(define-key org-clock-mode-line-map [mode-line mouse-2] 'org-clock-goto)org-clock-mode-line-map509,17575
(define-key org-clock-mode-line-map [mode-line mouse-1] 'org-clock-menu)org-clock-mode-line-map510,17648
(defun org-clock--translate (s language)org-clock--translate512,17722
(defun org-clock--mode-line-heading ()org-clock--mode-line-heading522,18139
(defun org-clock-menu ()org-clock-menu531,18497
(defun org-clock-history-push (&optional pos buffer)org-clock-history-push540,18816
(defun org-clock-save-markers-for-cut-and-paste (beg end)org-clock-save-markers-for-cut-and-paste560,19538
(defun org-clock-drawer-name ()org-clock-drawer-name569,19962
(defun org-clocking-buffer ()org-clocking-buffer578,20268
(defun org-clocking-p ()org-clocking-p582,20410
(defvar org-clock-before-select-task-hook nilorg-clock-before-select-task-hook586,20514
(defun org-clock-select-task (&optional prompt)org-clock-select-task589,20628
(defun org-clock-insert-selection-line (i marker)org-clock-insert-selection-line640,22691
(defvar org-clock-task-overrun nilorg-clock-task-overrun665,23498
(defvar org-clock-update-period 60org-clock-update-period667,23606
(defun org-clock-get-clock-string ()org-clock-get-clock-string670,23705
(defun org-clock-get-last-clock-out-time ()org-clock-get-last-clock-out-time692,24671
(defun org-clock-update-mode-line (&optional refresh)org-clock-update-mode-line700,24996
(defun org-clock-get-clocked-time ()org-clock-get-clocked-time727,26132
(defun org-clock-modify-effort-estimate (&optional value)org-clock-modify-effort-estimate737,26496
(defvar org-clock-notification-was-shown nilorg-clock-notification-was-shown776,28080
(defun org-clock-notify-once-if-expired ()org-clock-notify-once-if-expired779,28176
(defun org-notify (notification &optional play-sound)org-notify797,28941
(defun org-show-notification (notification)org-show-notification803,29192
(defun org-clock-play-sound (&optional clock-sound)org-clock-play-sound826,30059
(defvar org-clock-mode-line-entry nilorg-clock-mode-line-entry844,30718
(defun org-find-open-clocks (file)org-find-open-clocks847,30817
(defsubst org-is-active-clock (clock)org-is-active-clock861,31299
(defmacro org-with-clock-position (clock &rest forms)org-with-clock-position866,31462
(def-edebug-spec org-with-clock-position (form body))org-with-clock-position873,31729
(defmacro org-with-clock (clock &rest forms)org-with-clock876,31839
(def-edebug-spec org-with-clock (form body))org-with-clock889,32318
(defsubst org-clock-clock-in (clock &optional resume start-time)org-clock-clock-in892,32410
(defsubst org-clock-clock-out (clock &optional fail-quietly at-time)org-clock-clock-out899,32712
(defsubst org-clock-clock-cancel (clock)org-clock-clock-cancel909,33087
(defvar org-clock-clocking-in nil)org-clock-clocking-in919,33384
(defvar org-clock-resolving-clocks nil)org-clock-resolving-clocks920,33419
(defvar org-clock-resolving-clocks-due-to-idleness nil)org-clock-resolving-clocks-due-to-idleness921,33459
(defun org-clock-resolve-clockorg-clock-resolve-clock923,33516
(defun org-clock-jump-to-current-clock (&optional effective-clock)org-clock-jump-to-current-clock962,35093
(defun org-clock-resolve (clock &optional prompt-fn last-valid fail-quietly)org-clock-resolve985,36067
(defun org-resolve-clocks (&optional only-dangling-p prompt-fn last-valid)org-resolve-clocks1097,40056
(defun org-emacs-idle-seconds ()org-emacs-idle-seconds1123,40979
(defun org-mac-idle-seconds ()org-mac-idle-seconds1130,41178
(defvar org-x11idle-exists-porg-x11idle-exists-p1134,41403
(defun org-x11-idle-seconds ()org-x11-idle-seconds1143,41811
(defun org-user-idle-seconds ()org-user-idle-seconds1147,41980
(defvar org-clock-user-idle-seconds)org-clock-user-idle-seconds1158,42304
(defun org-resolve-clocks-if-idle ()org-resolve-clocks-if-idle1160,42342
(defvar org-clock-current-task nil "Task currently clocked in.")org-clock-current-task1182,43200
(defvar org-clock-out-time nil) ; store the time of the last clock-outorg-clock-out-time1183,43265
(defvar org--msg-extra)org--msg-extra1184,43336
(defun org-clock-in (&optional select start-time)org-clock-in1187,43376
(defun org-clock-in-last (&optional arg)org-clock-in-last1374,50536
(defun org-clock-mark-default-task ()org-clock-mark-default-task1408,52012
(defun org-clock-get-sum-start ()org-clock-get-sum-start1415,52203
(defun org-clock-find-position (find-unclosed)org-clock-find-position1451,53569
(defun org-clock-out (&optional switch-to-state fail-quietly at-time)org-clock-out1546,57161
(defun org-clock-remove-empty-clock-drawer ()org-clock-remove-empty-clock-drawer1640,60843
(defun org-clock-timestamps-up (&optional n)org-clock-timestamps-up1654,61322
(defun org-clock-timestamps-down (&optional n)org-clock-timestamps-down1660,61524
(defun org-clock-timestamps-change (updown &optional n)org-clock-timestamps-change1666,61730
(defun org-clock-cancel ()org-clock-cancel1706,63096
(defun org-clock-goto (&optional select)org-clock-goto1734,64194
(defvar-local org-clock-file-total-minutes nilorg-clock-file-total-minutes1761,65180
(defun org-clock-sum-today (&optional headline-filter)org-clock-sum-today1765,65319
(defun org-clock-sum-custom (&optional headline-filter range propname)org-clock-sum-custom1771,65564
(defun org-clock-sum (&optional tstart tend headline-filter propname)org-clock-sum1785,66077
(defun org-clock-sum-current-item (&optional tstart)org-clock-sum-current-item1875,69605
(defun org-clock-display (&optional arg)org-clock-display1884,69862
(defvar-local org-clock-overlays nil)org-clock-overlays1942,71954
(defun org-clock-put-overlay (time)org-clock-put-overlay1944,71993
(defun org-clock-remove-overlays (&optional _beg _end noremove)org-clock-remove-overlays1969,72831
(defun org-clock-out-if-current ()org-clock-out-if-current1982,73304
(defun org-clock-get-clocktable (&rest props)org-clock-get-clocktable2006,74275
(defun org-clock-report (&optional arg)org-clock-report2027,74994
(defun org-day-of-week (day month year)org-day-of-week2056,75964
(defun org-quarter-to-date (quarter year)org-quarter-to-date2063,76150
(defun org-clock-special-range (key &optional time as-strings wstart mstart)org-clock-special-range2112,77316
(defun org-count-quarter (n)org-count-quarter2275,83752
(defun org-clocktable-shift (dir n)org-clocktable-shift2283,83883
(defun org-dblock-write:clocktable (params)org-dblock-write:clocktable2366,87192
(defun org-clocktable-write-default (ipos tables params)org-clocktable-write-default2455,90178
(defun org-clocktable-indent-string (level)org-clocktable-indent-string2686,98923
(defun org-clocktable-increment-day (ts &optional n)org-clocktable-increment-day2692,99157
(defun org-clocktable-steps (params)org-clocktable-steps2701,99529
(defun org-clock-get-table-data (file params)org-clock-get-table-data2768,101853
(defvar org-clock-loaded nilorg-clock-loaded2881,106324
(defun org-clock-update-time-maybe ()org-clock-update-time-maybe2885,106401
(defun org-clock-save ()org-clock-save2926,107663
(defun org-clock-load ()org-clock-load2968,109189

elpa/org-plus-contrib-20191021/ob-io.el,670
(defvar org-babel-tangle-lang-exts) ;; Autoloadedorg-babel-tangle-lang-exts37,1354
(defvar org-babel-default-header-args:io '())org-babel-default-header-args:io39,1461
(defvar org-babel-io-command "io"org-babel-io-command40,1507
(defun org-babel-execute:io (body params)org-babel-execute:io43,1597
(defvar org-babel-io-wrapper-methodorg-babel-io-wrapper-method63,2469
(defun org-babel-io-evaluate (session body &optional result-type result-params)org-babel-io-evaluate70,2535
(defun org-babel-prep-session:io (_session _params)org-babel-prep-session:io94,3565
(defun org-babel-io-initiate-session (&optional _session)org-babel-io-initiate-session98,3746

elpa/org-plus-contrib-20191021/org-install.el,0

elpa/org-plus-contrib-20191021/ob-clojure-literate.el,2634
(defgroup ob-clojure-literate nilob-clojure-literate25,669
(defcustom ob-clojure-literate-auto-jackin-p nilob-clojure-literate-auto-jackin-p31,817
(defcustom ob-clojure-literate-project-location nilob-clojure-literate-project-location37,996
(defvar ob-clojure-literate-session nil)ob-clojure-literate-session44,1327
(defvar ob-clojure-literate-original-ns nil)ob-clojure-literate-original-ns45,1368
(defvar ob-clojure-literate-session-ns nil)ob-clojure-literate-session-ns46,1413
(defvar ob-clojure-literate-cider-connections nil)ob-clojure-literate-cider-connections47,1457
(defcustom ob-clojure-literate-default-session "*cider-repl localhost*"ob-clojure-literate-default-session49,1509
(defun ob-clojure-literate-any-connection-p ()ob-clojure-literate-any-connection-p54,1685
(defun ob-clojure-literate-get-session-list ()ob-clojure-literate-get-session-list63,2102
(defun ob-clojure-literate-set-session ()ob-clojure-literate-set-session71,2416
(defun ob-clojure-literate-specify-session ()ob-clojure-literate-specify-session88,3359
(defun ob-clojure-literate-auto-jackin ()ob-clojure-literate-auto-jackin109,4383
(defun ob-clojure-literate-set-local-cider-connections (toggle?)ob-clojure-literate-set-local-cider-connections137,5811
(defun ob-clojure-literate-set-ns (body params)ob-clojure-literate-set-ns156,6948
(defun ob-clojure-literate-set-local-session (toggle?)ob-clojure-literate-set-local-session167,7558
(defun org-babel-clojure-initiate-session (&optional session _params)org-babel-clojure-initiate-session189,8686
(defun org-babel-prep-session:clojure (session params)org-babel-prep-session:clojure211,9598
(defun org-babel-clojure-var-to-clojure (var)org-babel-clojure-var-to-clojure223,10118
(defun org-babel-variable-assignments:clojure (params)org-babel-variable-assignments:clojure235,10457
(defun ob-clojure-literate-inject-code (args)ob-clojure-literate-inject-code245,10862
(def incanter-plot (histogram (sample-normal 1000)))incanter-plot254,11223
(defun ob-clojure-literate-support-graphics-result (result)ob-clojure-literate-support-graphics-result286,12599
(defvar ob-clojure-literate-mode-mapob-clojure-literate-mode-map296,12929
(define-key org-babel-map (kbd "M-s") 'ob-clojure-literate-specify-session)org-babel-map301,13056
(define-key org-babel-map (kbd "M-j") 'ob-clojure-literate-auto-jackin)org-babel-map302,13132
(defun ob-clojure-literate-enable ()ob-clojure-literate-enable307,13337
(defun ob-clojure-literate-disable ()ob-clojure-literate-disable319,14150
(define-minor-mode ob-clojure-literate-modeob-clojure-literate-mode333,14867

elpa/org-plus-contrib-20191021/org-screen.el,313
(defcustom org-screen-program-name "/usr/bin/screen"org-screen-program-name57,2082
(defun org-screen (name)org-screen62,2218
(defun org-screen-buffer-name (name)org-screen-buffer-name69,2417
(defun org-screen-helper (name arg)org-screen-helper73,2555
(defun org-screen-goto (name)org-screen-goto91,3175

elpa/org-plus-contrib-20191021/ob-J.el,1143
(defcustom org-babel-J-command "jconsole"org-babel-J-command38,1195
(defun org-babel-expand-body:J (body _params &optional _processed-params)org-babel-expand-body:J45,1350
(defun org-babel-J-interleave-echos (body)org-babel-J-interleave-echos50,1577
(defun org-babel-J-interleave-echos-except-functions (body)org-babel-J-interleave-echos-except-functions54,1743
(defalias 'org-babel-execute:j 'org-babel-execute:J)org-babel-execute:j70,2346
(defun org-babel-execute:J (body params)org-babel-execute:J72,2400
(defun org-babel-J-eval-string (str)org-babel-J-eval-string91,3174
(defun org-babel-J-strip-whitespace (str)org-babel-J-strip-whitespace103,3555
(defun obj-get-string-alignment (str)obj-get-string-alignment112,3781
(defun org-babel-J-print-block (x)org-babel-J-print-block145,4742
(defun obj-match-second-space-left (s)obj-match-second-space-left159,5150
(defun obj-match-second-space-right (s)obj-match-second-space-right164,5334
(defun obj-string-match-m (regexp string &optional start)obj-string-match-m169,5526
(defun org-babel-j-initiate-session (&optional session)org-babel-j-initiate-session177,5794

elpa/org-plus-contrib-20191021/org-bookmark.el,421
(defgroup org-bookmark nilorg-bookmark29,1108
(defcustom org-bookmark-in-dired nilorg-bookmark-in-dired34,1219
(defcustom org-bookmark-when-visiting-a-file nilorg-bookmark-when-visiting-a-file39,1329
(defcustom org-bookmark-use-first-bookmark nilorg-bookmark-use-first-bookmark44,1472
(defun org-bookmark-open (bookmark)org-bookmark-open54,1791
(defun org-bookmark-store-link ()org-bookmark-store-link58,1889

elpa/org-plus-contrib-20191021/org-eval.el,679
(defgroup org-eval nilorg-eval72,2724
(defface org-evalorg-eval77,2861
(defvar org-eval-regexp nil)org-eval-regexp91,3390
(defun org-eval-set-interpreters (var value)org-eval-set-interpreters93,3420
(defcustom org-eval-interpreters '("lisp")org-eval-interpreters102,3636
(defun org-eval-handle-snippets (limit &optional replace)org-eval-handle-snippets121,4255
(defun org-eval-replace-snippts ()org-eval-replace-snippts158,5555
(defun org-eval-get-attributes (str)org-eval-get-attributes167,5885
(defun org-eval-code (interpreter code)org-eval-code176,6173
(defun org-eval-lisp (form)org-eval-lisp186,6539
(defun org-eval-run (cmd code)org-eval-run208,7283

elpa/org-plus-contrib-20191021/org-learn.el,943
(defgroup org-learn nilorg-learn40,1500
(defcustom org-learn-always-reschedule nilorg-learn-always-reschedule45,1622
(defcustom org-learn-fraction 0.5org-learn-fraction50,1780
(defun initial-optimal-factor (n ef)initial-optimal-factor57,2006
(defun get-optimal-factor (n ef of-matrix)get-optimal-factor62,2075
(defun set-optimal-factor (n ef of-matrix of)set-optimal-factor69,2293
(defun inter-repetition-interval (n ef &optional of-matrix)inter-repetition-interval79,2582
(defun modify-e-factor (ef quality)modify-e-factor85,2777
(defun modify-of (of q fraction)modify-of90,2912
(defun calculate-new-optimal-factor (interval-used quality used-ofcalculate-new-optimal-factor94,3039
(defvar initial-repetition-state '(-1 1 2.5 nil))initial-repetition-state137,4641
(defun determine-next-interval (n ef quality of-matrix)determine-next-interval139,4692
(defun org-smart-reschedule (quality)org-smart-reschedule157,5362

elpa/org-plus-contrib-20191021/org-eshell.el,116
(defun org-eshell-open (link)org-eshell-open34,1071
(defun org-eshell-store-link ()org-eshell-store-link54,1820

elpa/org-plus-contrib-20191021/org-invoice.el,1508
(defgroup org-invoice nilorg-invoice60,2292
(defcustom org-invoice-long-date-format "%A, %B %d, %Y"org-invoice-long-date-format64,2380
(defcustom org-invoice-strip-ts torg-invoice-strip-ts68,2512
(defcustom org-invoice-default-level 2org-invoice-default-level72,2636
(defcustom org-invoice-start-hook nilorg-invoice-start-hook90,3276
(defvar org-invoice-current-invoice nilorg-invoice-current-invoice111,4092
(defvar org-invoice-current-item nilorg-invoice-current-item114,4177
(defvar org-invoice-table-params nilorg-invoice-table-params117,4264
(defvar org-invoice-total-time nilorg-invoice-total-time120,4350
(defvar org-invoice-total-price nilorg-invoice-total-price123,4436
(defconst org-invoice-version "1.0.0"org-invoice-version126,4524
(defun org-invoice-goto-tree (&optional tree)org-invoice-goto-tree129,4600
(defun org-invoice-heading-info ()org-invoice-heading-info142,5194
(defun org-invoice-level-min-max (ls)org-invoice-level-min-max177,6842
(defun org-invoice-collapse-list (ls)org-invoice-collapse-list187,7220
(defun org-invoice-info-to-table (info)org-invoice-info-to-table220,8712
(defun org-invoice-list-to-table (ls)org-invoice-list-to-table241,9580
(defun org-invoice-collect-invoice-data ()org-invoice-collect-invoice-data260,10446
(defun org-dblock-write:invoice (params)org-dblock-write:invoice276,11139
(defun org-invoice-in-report-p ()org-invoice-in-report-p313,12578
(defun org-invoice-report (&optional jump)org-invoice-report324,12926

elpa/company-ctags-0.0.1/company-ctags.el,1974
(defgroup company-ctags nilcompany-ctags57,2022
(defcustom company-ctags-use-main-table-list tcompany-ctags-use-main-table-list61,2104
(defcustom company-ctags-ignore-case nilcompany-ctags-ignore-case68,2374
(defcustom company-ctags-support-etags nilcompany-ctags-support-etags73,2527
(defcustom company-ctags-everywhere nilcompany-ctags-everywhere78,2666
(defcustom company-ctags-check-tags-file-interval 30company-ctags-check-tags-file-interval87,3043
(defcustom company-ctags-tags-file-name "TAGS"company-ctags-tags-file-name93,3192
(defvar company-ctags-modescompany-ctags-modes97,3284
(defvar-local company-ctags-buffer-table 'unknown)company-ctags-buffer-table110,3466
(defvar company-ctags-tags-file-caches nilcompany-ctags-tags-file-caches112,3518
(defvar company-ctags-cached-candidates nilcompany-ctags-cached-candidates115,3590
(defconst company-ctags-fast-patterncompany-ctags-fast-pattern119,3725
(defconst company-ctags-slow-patterncompany-ctags-slow-pattern123,3852
(defun company-ctags-find-table ()company-ctags-find-table127,4027
(defun company-ctags-buffer-table ()company-ctags-buffer-table137,4422
(defmacro company-ctags-push-tagname (tagname tagname-dict)company-ctags-push-tagname144,4705
(defun company-ctags-extract-tagnames (text)company-ctags-extract-tagnames163,5223
(defun company-ctags-append-new-tagname-dict (new-tagnames file-info)company-ctags-append-new-tagname-dict220,7353
(defun company-ctags-all-completions (prefix tagname-dict)company-ctags-all-completions225,7574
(defun company-ctags-load-tags-file (file &optional force no-diff-prog)company-ctags-load-tags-file231,7820
(defun company-ctags--candidates (prefix)company-ctags--candidates297,10769
(defun company-ctags (command &optional arg &rest ignored)company-ctags336,12480
(defun company-ctags-replace-backend (backends)company-ctags-replace-backend357,13471
(defun company-ctags-auto-setup ()company-ctags-auto-setup378,14029

elpa/company-ctags-0.0.1/company-ctags-autoloads.el,0

elpa/company-ctags-0.0.1/company-ctags-pkg.el,381
(define-package "company-ctags" "0.0.1" "Fastest company-mode completion backend for ctags" '((emacs "24.3") (company "0.9.0")) :commit "3a8083e2e6ed9726de71659434bb4467bcbe3e66" :keywords '("convenience") :authors '(("Chen Bin" . "chenbin.sh@gmail.com")) :maintainer '("Chen Bin" . "chenbin.sh@gmail.com") :url "https://github.com/redguardtoo/company-ctags")"company-ctags"2,31

elpa/s-1.12.0/s-pkg.el,272
(define-package "s" "1.12.0" "The long lost Emacs string manipulation library." 'nil :commit "12f116d58ac03706496bd682c6449b452681874e" :keywords '("strings") :authors '(("Magnar Sveen" . "magnars@gmail.com")) :maintainer '("Magnar Sveen" . "magnars@gmail.com"))"s"2,31

elpa/s-1.12.0/s-autoloads.el,0

elpa/s-1.12.0/s.el,4973
(defvar ucs-normalize-combining-chars)  ; Defined in `ucs-normalize'ucs-normalize-combining-chars32,1034
(defun s-trim-left (s)s-trim-left35,1135
(defun s-trim-right (s)s-trim-right42,1308
(defun s-trim (s)s-trim49,1476
(defun s-collapse-whitespace (s)s-collapse-whitespace53,1582
(defun s-split (separator s &optional omit-nulls)s-split57,1731
(defun s-split-up-to (separator s n &optional omit-nulls)s-split-up-to65,2038
(defun s-lines (s)s-lines91,2911
(defun s-join (separator strings)s-join95,3027
(defun s-concat (&rest strings)s-concat99,3168
(defun s-prepend (prefix s)s-prepend103,3279
(defun s-append (suffix s)s-append107,3359
(defun s-repeat (num s)s-repeat111,3438
(defun s-chop-suffix (suffix s)s-chop-suffix119,3619
(defun s-chop-suffixes (suffixes s)s-chop-suffixes127,3860
(defun s-chop-prefix (prefix s)s-chop-prefix134,4072
(defun s-chop-prefixes (prefixes s)s-chop-prefixes142,4315
(defun s-shared-start (s1 s2)s-shared-start149,4529
(defun s-shared-end (s1 s2)s-shared-end158,4815
(defun s-chomp (s)s-chomp177,5434
(defun s-truncate (len s)s-truncate181,5547
(defun s-word-wrap (len s)s-word-wrap187,5732
(defun s-center (len s)s-center196,6007
(defun s-pad-left (len padding s)s-pad-left204,6244
(defun s-pad-right (len padding s)s-pad-right210,6460
(defun s-left (len s)s-left216,6678
(defun s-right (len s)s-right222,6804
(defun s-ends-with? (suffix s &optional ignore-case)s-ends-with?229,6958
(defun s-starts-with? (prefix s &optional ignore-case)s-starts-with?241,7347
(defun s--truthy? (val)s--truthy?251,7657
(defun s-contains? (needle s &optional ignore-case)s-contains?254,7702
(defun s-equals? (s1 s2)s-equals?262,7979
(defun s-less? (s1 s2)s-less?268,8114
(defun s-matches? (regexp s &optional start)s-matches?274,8248
(defun s-blank? (s)s-blank?281,8484
(defun s-blank-str? (s)s-blank-str?285,8571
(defun s-present? (s)s-present?289,8708
(defun s-presence (s)s-presence293,8800
(defun s-lowercase? (s)s-lowercase?297,8906
(defun s-uppercase? (s)s-uppercase?302,9052
(defun s-mixedcase? (s)s-mixedcase?307,9198
(defun s-capitalized? (s)s-capitalized?314,9420
(defun s-numeric? (s)s-numeric?320,9627
(defun s-replace (old new s)s-replace325,9718
(defun s--aget (alist key)s--aget329,9839
(defun s-replace-all (replacements s)s-replace-all332,9901
(defun s-downcase (s)s-downcase338,10194
(defun s-upcase (s)s-upcase344,10320
(defun s-capitalize (s)s-capitalize350,10440
(defun s-titleize (s)s-titleize354,10623
(defmacro s-with (s form &rest more)s-with360,10811
(defun s-index-of (needle s &optional ignore-case)s-index-of374,11317
(defun s-reverse (s)s-reverse382,11601
(defun s-match-strings-all (regex string)s-match-strings-all398,12191
(defun s-matched-positions-all (regexp string &optional subexp-depth)s-matched-positions-all419,12932
(defun s-match (regexp s &optional start)s-match433,13483
(defun s-slice-at (regexp s)s-slice-at452,14288
(defun s-split-words (s)s-split-words463,14607
(defun s--mapcar-head (fn-head fn-rest list)s--mapcar-head473,14919
(defun s-lower-camel-case (s)s-lower-camel-case478,15120
(defun s-upper-camel-case (s)s-upper-camel-case482,15256
(defun s-snake-case (s)s-snake-case486,15374
(defun s-dashed-words (s)s-dashed-words490,15481
(defun s-capitalized-words (s)s-capitalized-words494,15592
(defun s-titleized-words (s)s-titleized-words499,15777
(defun s-word-initials (s)s-word-initials503,15896
(defun s-format (template replacer &optional extra)s-format517,16269
(defvar s-lex-value-as-lisp nils-lex-value-as-lisp565,18165
(defun s-lex-fmt|expand (fmt)s-lex-fmt|expand570,18296
(defmacro s-lex-format (format-str)s-lex-format584,18758
(defun s-count-matches (regexp s &optional start end)s-count-matches599,19180
(defun s-wrap (s prefix &optional suffix)s-wrap610,19509
(defalias 's-blank-p 's-blank?)s-blank-p621,19791
(defalias 's-blank-str-p 's-blank-str?)s-blank-str-p622,19823
(defalias 's-capitalized-p 's-capitalized?)s-capitalized-p623,19863
(defalias 's-contains-p 's-contains?)s-contains-p624,19907
(defalias 's-ends-with-p 's-ends-with?)s-ends-with-p625,19945
(defalias 's-equals-p 's-equals?)s-equals-p626,19985
(defalias 's-less-p 's-less?)s-less-p627,20019
(defalias 's-lowercase-p 's-lowercase?)s-lowercase-p628,20049
(defalias 's-matches-p 's-matches?)s-matches-p629,20089
(defalias 's-mixedcase-p 's-mixedcase?)s-mixedcase-p630,20125
(defalias 's-numeric-p 's-numeric?)s-numeric-p631,20165
(defalias 's-prefix-p 's-starts-with?)s-prefix-p632,20201
(defalias 's-prefix? 's-starts-with?)s-prefix?633,20240
(defalias 's-present-p 's-present?)s-present-p634,20278
(defalias 's-starts-with-p 's-starts-with?)s-starts-with-p635,20314
(defalias 's-suffix-p 's-ends-with?)s-suffix-p636,20358
(defalias 's-suffix? 's-ends-with?)s-suffix?637,20395
(defalias 's-uppercase-p 's-uppercase?)s-uppercase-p638,20431

elpa/magit-popup-2.13.0/magit-popup-autoloads.el,0

elpa/magit-popup-2.13.0/magit-popup.el,6768
(defgroup magit-popup nilmagit-popup66,2321
(defgroup magit-popup-faces nilmagit-popup-faces71,2451
(defcustom magit-popup-display-buffer-action '((display-buffer-below-selected))magit-popup-display-buffer-action77,2559
(defcustom magit-popup-manpage-packagemagit-popup-manpage-package87,2952
(defcustom magit-popup-show-help-echo tmagit-popup-show-help-echo94,3185
(defcustom magit-popup-show-common-commands nilmagit-popup-show-common-commands99,3311
(defcustom magit-popup-use-prefix-argument 'defaultmagit-popup-use-prefix-argument107,3640
(defface magit-popup-headingmagit-popup-heading129,4429
(defface magit-popup-keymagit-popup-key134,4565
(defface magit-popup-argumentmagit-popup-argument139,4692
(defface magit-popup-disabled-argumentmagit-popup-disabled-argument144,4847
(defface magit-popup-option-valuemagit-popup-option-value149,4996
(defvar magit-popup-mode-mapmagit-popup-mode-map156,5163
(defvar magit-popup-common-commandsmagit-popup-common-commands202,7368
(define-button-type 'magit-popup-buttonmagit-popup-button212,7761
(define-button-type 'magit-popup-switch-buttonmagit-popup-switch-button218,7943
(define-button-type 'magit-popup-option-buttonmagit-popup-option-button228,8221
(define-button-type 'magit-popup-variable-buttonmagit-popup-variable-button238,8499
(define-button-type 'magit-popup-action-buttonmagit-popup-action-button248,8777
(define-button-type 'magit-popup-command-buttonmagit-popup-command-button258,9065
(define-button-type 'magit-popup-internal-command-buttonmagit-popup-internal-command-button266,9397
(defvar-local magit-this-popup nilmagit-this-popup273,9557
(defvar-local magit-this-popup-events nilmagit-this-popup-events278,9722
(defvar-local magit-previous-popup nil)magit-previous-popup283,9900
(defvar-local magit-pre-popup-buffer nilmagit-pre-popup-buffer285,9941
(defun magit-popup-get (prop)magit-popup-get288,10050
(defun magit-popup-put (prop val)magit-popup-put294,10295
(defvar magit-current-popup nilmagit-current-popup301,10592
(defvar magit-current-popup-action nilmagit-current-popup-action309,10909
(defvar magit-current-popup-args nilmagit-current-popup-args312,10991
(defun magit-current-popup-args (&rest filter)magit-current-popup-args331,11863
(defvar magit-current-pre-popup-buffer nilmagit-current-pre-popup-buffer348,12693
(defmacro magit-with-pre-popup-buffer (&rest body)magit-with-pre-popup-buffer352,12855
(defun magit-popup-arg-match (pattern string)magit-popup-arg-match362,13320
(defun magit-popup-event-keydsc (ev)magit-popup-event-keydsc370,13608
(defun magit-popup-lookup (event type)magit-popup-lookup374,13748
(defun magit-popup-get-args ()magit-popup-get-args378,13907
(defmacro magit-popup-convert-events (def form)magit-popup-convert-events387,14292
(defun magit-popup-convert-switches (val def)magit-popup-convert-switches391,14458
(defun magit-popup-convert-options (val def)magit-popup-convert-options402,14896
(defun magit-popup-convert-variables (_val def)magit-popup-convert-variables412,15274
(defun magit-popup-convert-actions (_val def)magit-popup-convert-actions417,15454
(defmacro magit-define-popup (name doc &rest args)magit-define-popup424,15628
(defun magit-define-popup-switch (popup key desc switchmagit-define-popup-switch622,23949
(defun magit-define-popup-option (popup key desc optionmagit-define-popup-option647,25053
(defun magit-define-popup-variable (popup key desc command formattermagit-define-popup-variable684,26791
(defun magit-define-popup-action (popup key desc commandmagit-define-popup-action708,27817
(defun magit-define-popup-sequence-actionmagit-define-popup-sequence-action730,28750
(defconst magit-popup-type-plural-alistmagit-popup-type-plural-alist737,29026
(defun magit-popup-pluralize-type (type)magit-popup-pluralize-type744,29217
(defun magit-define-popup-keymagit-define-popup-key748,29326
(defun magit-define-popup-keys-deferred (popup)magit-define-popup-keys-deferred784,30902
(defun magit-change-popup-key (popup type from to)magit-change-popup-key792,31209
(defun magit-remove-popup-key (popup type key)magit-remove-popup-key801,31646
(defvar-local magit-popup-previous-winconf nil)magit-popup-previous-winconf814,32152
(defun magit-invoke-popup (popup mode arg)magit-invoke-popup816,32201
(defun magit-invoke-popup-switch (event)magit-invoke-popup-switch856,34009
(defun magit-invoke-popup-option (event)magit-invoke-popup-option865,34338
(defun magit-invoke-popup-action (event)magit-invoke-popup-action881,35026
(defun magit-popup-quit ()magit-popup-quit907,36158
(defun magit-popup-read-number (prompt &optional default)magit-popup-read-number918,36532
(defun magit-popup-set-default-arguments (arg)magit-popup-set-default-arguments926,36793
(defun magit-popup-save-default-arguments (arg)magit-popup-save-default-arguments939,37344
(defun magit-popup-toggle-show-common-commands ()magit-popup-toggle-show-common-commands954,37908
(defun magit-popup-help ()magit-popup-help964,38298
(defun magit-popup-manpage (topic arg)magit-popup-manpage1002,39952
(defun magit-popup-describe-function (function)magit-popup-describe-function1085,44269
(defun magit-popup-info ()magit-popup-info1101,44871
(define-minor-mode magit-popup-help-modemagit-popup-help-mode1113,45224
(define-derived-mode magit-popup-mode fundamental-mode "MagitPopup"magit-popup-mode1125,45706
(defun magit-popup-default-setup (val def)magit-popup-default-setup1136,46096
(defun magit-popup-mode-setup (popup mode)magit-popup-mode-setup1153,46934
(defun magit-popup-mode-display-buffer (buffer mode)magit-popup-mode-display-buffer1171,47768
(defvar magit-refresh-popup-buffer-hook nilmagit-refresh-popup-buffer-hook1177,48019
(defun magit-refresh-popup-buffer ()magit-refresh-popup-buffer1184,48301
(defvar magit-popup-min-padding 3magit-popup-min-padding1211,49427
(defun magit-popup-insert-section (type &optional spec heading)magit-popup-insert-section1214,49530
(defun magit-popup-format-argument-button (type ev)magit-popup-format-argument-button1267,52024
(defun magit-popup-format-variable-button (type ev)magit-popup-format-variable-button1288,53102
(defun magit-popup-format-action-button (type ev)magit-popup-format-action-button1298,53567
(defun magit-popup-insert-command-section (type spec)magit-popup-insert-command-section1323,54617
(defun magit-popup-format-command-button (type elt)magit-popup-format-command-button1331,54921
(defun magit-popup-import-file-args (args files)magit-popup-import-file-args1339,55215
(defun magit-popup-export-file-args (args)magit-popup-export-file-args1344,55354
(defconst magit-popup-font-lock-keywordsmagit-popup-font-lock-keywords1351,55595

elpa/magit-popup-2.13.0/magit-popup-pkg.el,101
(define-package "magit-popup" "2.13.0" "Define prefix-infix-suffix command combos""magit-popup"1,0

elpa/helpful-0.17/helpful.el,11908
(defvar-local helpful--sym nil)helpful--sym60,1764
(defvar-local helpful--callable-p nil)helpful--callable-p61,1796
(defvar-local helpful--associated-buffer nilhelpful--associated-buffer62,1835
(defvar-local helpful--start-buffer nilhelpful--start-buffer65,1955
(defvar-local helpful--view-literal nilhelpful--view-literal67,2043
(defvar-local helpful--first-display thelpful--first-display70,2156
(defgroup helpful nilhelpful77,2368
(defcustom helpful-max-buffershelpful-max-buffers82,2516
(defcustom helpful-switch-buffer-functionhelpful-switch-buffer-function92,2814
(defconst helpful-max-highlight 5000helpful-max-highlight101,3123
(defun helpful--kind-name (symbol callable-p)helpful--kind-name110,3441
(defun helpful--buffer (symbol callable-p)helpful--buffer119,3714
(defface helpful-headinghelpful-heading159,5416
(defun helpful--heading (text)helpful--heading163,5514
(defun helpful--warning (text)helpful--warning167,5640
(defun helpful--format-closure (sym form)helpful--format-closure171,5758
(defun helpful--pretty-print (value)helpful--pretty-print186,6297
(defun helpful--sort-symbols (sym-list)helpful--sort-symbols198,6694
(defun helpful--button (text type &rest properties)helpful--button204,6854
(defun helpful--canonical-symbol (sym callable-p)helpful--canonical-symbol214,7209
(defun helpful--aliases (sym callable-p)helpful--aliases233,7948
(defun helpful--obsolete-info (sym callable-p)helpful--obsolete-info252,8575
(defun helpful--format-alias (sym callable-p)helpful--format-alias256,8721
(defun helpful--indent-rigidly (s amount)helpful--indent-rigidly271,9262
(defun helpful--format-properties (symbol)helpful--format-properties278,9472
(define-button-type 'helpful-forget-buttonhelpful-forget-button310,10774
(defun helpful--forget (button)helpful--forget318,11000
(define-button-type 'helpful-c-source-directoryhelpful-c-source-directory330,11428
(defun helpful--c-source-directory (_button)helpful--c-source-directory335,11587
(define-button-type 'helpful-disassemble-buttonhelpful-disassemble-button346,12104
(defun helpful--disassemble (button)helpful--disassemble352,12260
(define-button-type 'helpful-run-test-buttonhelpful-run-test-button358,12467
(defun helpful--run-test (button)helpful--run-test364,12603
(define-button-type 'helpful-edebug-buttonhelpful-edebug-button368,12711
(defun helpful--kbd-macro-p (sym)helpful--kbd-macro-p374,12870
(defun helpful--edebug-p (sym)helpful--edebug-p381,13058
(defun helpful--can-edebug-p (sym callable-p buf pos)helpful--can-edebug-p392,13570
(defun helpful--toggle-edebug (sym)helpful--toggle-edebug403,13931
(defun helpful--edebug (button)helpful--edebug428,14903
(define-button-type 'helpful-trace-buttonhelpful-trace-button433,15053
(defun helpful--trace (button)helpful--trace439,15194
(define-button-type 'helpful-navigate-buttonhelpful-navigate-button447,15422
(defun helpful--goto-char-widen (pos)helpful--goto-char-widen454,15582
(defun helpful--navigate (button)helpful--navigate462,15831
(defun helpful--navigate-button (text path &optional pos)helpful--navigate-button471,16298
(define-button-type 'helpful-buffer-buttonhelpful-buffer-button479,16504
(defun helpful--switch-to-buffer (button)helpful--switch-to-buffer486,16671
(defun helpful--buffer-button (buffer &optional pos)helpful--buffer-button494,16933
(define-button-type 'helpful-customize-buttonhelpful-customize-button502,17160
(defun helpful--customize (button)helpful--customize508,17316
(define-button-type 'helpful-associated-buffer-buttonhelpful-associated-buffer-button512,17440
(defun helpful--read-live-buffer (prompt predicate)helpful--read-live-buffer519,17622
(defun helpful--associated-buffer (button)helpful--associated-buffer554,18891
(define-button-type 'helpful-toggle-buttonhelpful-toggle-button567,19396
(defun helpful--toggle (button)helpful--toggle574,19566
(define-button-type 'helpful-set-buttonhelpful-set-button586,19945
(defun helpful--set (button)helpful--set593,20101
(define-button-type 'helpful-view-literal-buttonhelpful-view-literal-button627,21420
(defun helpful--view-literal (_button)helpful--view-literal631,21548
(define-button-type 'helpful-all-references-buttonhelpful-all-references-button637,21709
(defun helpful--all-references (button)helpful--all-references644,21897
(define-button-type 'helpful-callees-buttonhelpful-callees-button656,22278
(defun helpful--display-callee-group (callees)helpful--display-callee-group663,22467
(defun helpful--show-callees (button)helpful--show-callees674,22794
(define-button-type 'helpful-manual-buttonhelpful-manual-button704,23832
(defun helpful--manual (button)helpful--manual710,23988
(define-button-type 'helpful-describe-buttonhelpful-describe-button715,24178
(defun helpful--describe (button)helpful--describe721,24322
(define-button-type 'helpful-describe-exactly-buttonhelpful-describe-exactly-button726,24480
(defun helpful--describe-exactly (button)helpful--describe-exactly733,24658
(define-button-type 'helpful-info-buttonhelpful-info-button743,25047
(defun helpful--info (button)helpful--info749,25185
(defun helpful--split-first-line (docstring)helpful--split-first-line753,25310
(defun helpful--propertize-sym-ref (sym-name)helpful--propertize-sym-ref766,25803
(defun helpful--propertize-info (docstring)helpful--propertize-info795,26707
(defun helpful--char-table-keys (char-table)helpful--char-table-keys820,27341
(defun helpful--keymap-keys (keymap)helpful--keymap-keys831,27670
(defun helpful--format-hook (hook-val)helpful--format-hook896,30008
(defun helpful--format-keymap (keymap)helpful--format-keymap913,30645
(defun helpful--format-commands (str keymap)helpful--format-commands948,32104
(defun helpful--format-command-keys (docstring)helpful--format-command-keys970,32769
(defun helpful--format-docstring (docstring)helpful--format-docstring1071,36918
(define-button-type 'helpful-link-buttonhelpful-link-button1081,37228
(defun helpful--propertize-links (docstring)helpful--propertize-links1086,37353
(defun helpful--propertize-bare-links (docstring)helpful--propertize-bare-links1099,37727
(defun helpful--follow-link (button)helpful--follow-link1119,38340
(defconst helpful--highlighting-funcshelpful--highlighting-funcs1123,38459
(defun helpful--syntax-highlight (source &optional mode)helpful--syntax-highlight1134,38852
(defun helpful--source (sym callable-p buf pos)helpful--source1180,40390
(defun helpful--in-manual-p (sym)helpful--in-manual-p1227,42284
(defun helpful--library-path (library-name)helpful--library-path1238,42713
(defun helpful--macroexpand-try (form)helpful--macroexpand-try1253,43204
(defun helpful--tree-any-p (pred tree)helpful--tree-any-p1266,43632
(defun helpful--find-by-macroexpanding (buf sym callable-p)helpful--find-by-macroexpanding1277,43940
(defun helpful--definition (sym callable-p)helpful--definition1306,45133
(defun helpful--reference-positions (sym callable-p buf)helpful--reference-positions1402,49127
(defun helpful--all-keymap-syms ()helpful--all-keymap-syms1421,49826
(defun helpful--key-sequences (command-sym keymap global-keycodes)helpful--key-sequences1430,50073
(defun helpful--keymaps-containing (command-sym)helpful--keymaps-containing1454,51137
(defun helpful--merge-alists (l1 l2)helpful--merge-alists1497,52972
(defun helpful--keymaps-containing-aliases (command-sym aliases)helpful--keymaps-containing-aliases1512,53560
(defun helpful--format-keys (command-sym aliases)helpful--format-keys1522,53963
(defun helpful--outer-sexp (buf pos)helpful--outer-sexp1541,54689
(defun helpful--count-values (items)helpful--count-values1554,55081
(defun helpful--without-advice (sym)helpful--without-advice1563,55433
(defun helpful--advised-p (sym)helpful--advised-p1569,55601
(defun helpful--format-head (head)helpful--format-head1574,55748
(defun helpful--format-reference (head longest-head ref-count position path)helpful--format-reference1587,56195
(defun helpful--format-position-heads (position-heads path)helpful--format-position-heads1601,56703
(defun helpful--primitive-p (sym callable-p)helpful--primitive-p1614,57270
(defun helpful--sym-value (sym buf)helpful--sym-value1629,57781
(defun helpful--insert-section-break ()helpful--insert-section-break1645,58292
(defun helpful--calculate-references (sym callable-p source-path)helpful--calculate-references1649,58398
(defun helpful--make-manual-button (sym)helpful--make-manual-button1663,58945
(defun helpful--make-toggle-button (sym buffer)helpful--make-toggle-button1670,59101
(defun helpful--make-set-button (sym buffer)helpful--make-set-button1678,59284
(defun helpful--make-toggle-literal-button ()helpful--make-toggle-literal-button1686,59455
(defun helpful--make-customize-button (sym)helpful--make-customize-button1696,59757
(defun helpful--make-references-button (sym callable-p)helpful--make-references-button1703,59917
(defun helpful--make-edebug-button (sym)helpful--make-edebug-button1711,60131
(defun helpful--make-tracing-button (sym)helpful--make-tracing-button1720,60365
(defun helpful--make-disassemble-button (obj)helpful--make-disassemble-button1729,60599
(defun helpful--make-run-test-button (sym)helpful--make-run-test-button1737,60818
(defun helpful--make-forget-button (sym callable-p)helpful--make-forget-button1744,60977
(defun helpful--make-callees-button (sym source)helpful--make-callees-button1752,61162
(defun helpful--autoloaded-p (sym buf)helpful--autoloaded-p1764,61585
(defun helpful--compiled-p (sym)helpful--compiled-p1770,61821
(defun helpful--summary (sym callable-p buf pos)helpful--summary1775,61982
(defun helpful--callees (form)helpful--callees1891,66166
(defun helpful--callees-1 (form)helpful--callees-11902,66687
(defun helpful--ensure-loaded ()helpful--ensure-loaded1989,69532
(defun helpful--hook-p (symbol value)helpful--hook-p1997,69838
(defun helpful--format-value (sym value)helpful--format-value2007,70128
(defun helpful-update ()helpful-update2025,70688
(defun helpful--skip-advice (docstring)helpful--skip-advice2303,80892
(defun helpful--format-argument (arg)helpful--format-argument2310,81157
(defun helpful--signature (sym)helpful--signature2317,81378
(defun helpful--format-obsolete-info (sym callable-p)helpful--format-obsolete-info2368,83232
(defun helpful--docstring (sym callable-p)helpful--docstring2381,83716
(defun helpful--read-symbol (prompt predicate)helpful--read-symbol2401,84545
(defun helpful-function (symbol)helpful-function2419,85194
(defun helpful-command (symbol)helpful-command2427,85448
(defun helpful-key (key-sequence)helpful-key2435,85711
(defun helpful-macro (symbol)helpful-macro2453,86309
(defun helpful-callable (symbol)helpful-callable2461,86551
(defun helpful--variable-p (symbol)helpful--variable-p2470,86861
(defun helpful--bound-p (symbol)helpful--bound-p2478,87114
(defun helpful--bookmark-jump (bookmark)helpful--bookmark-jump2486,87335
(defun helpful--bookmark-make-record ()helpful--bookmark-make-record2496,87705
(defun helpful--convert-c-name (symbol var)helpful--convert-c-name2505,87982
(defun helpful-symbol (symbol)helpful-symbol2520,88514
(defun helpful-variable (symbol)helpful-variable2547,89430
(defun helpful-at-point ()helpful-at-point2555,89696
(defun helpful--imenu-index ()helpful--imenu-index2562,89897
(defun helpful--flash-region (start end)helpful--flash-region2579,90390
(defun helpful-visit-reference ()helpful-visit-reference2585,90626
(defun helpful-kill-buffers ()helpful-kill-buffers2621,92065
(defvar helpful-mode-maphelpful-mode-map2630,92315
(defvar bookmark-make-record-function)bookmark-make-record-function2649,93064
(define-derived-mode helpful-mode special-mode "Helpful"helpful-mode2651,93104

elpa/helpful-0.17/helpful-pkg.el,402
(define-package "helpful" "0.17" "a better *help* buffer" '((emacs "25") (dash "2.12.0") (dash-functional "1.2.0") (s "1.11.0") (f "0.20.0") (elisp-refs "1.2")) :commit "429f1fb5f588cc6124513335e8eca3b4ef15735a" :keywords '("help" "lisp") :authors '(("Wilfred Hughes" . "me@wilfred.me.uk")) :maintainer '("Wilfred Hughes" . "me@wilfred.me.uk") :url "https://github.com/Wilfred/helpful")"helpful"2,31

elpa/helpful-0.17/helpful-autoloads.el,0

elpa/hcl-mode-0.3/hcl-mode-autoloads.el,0

elpa/hcl-mode-0.3/hcl-mode.el,1295
(defgroup hcl nilhcl33,1040
(defcustom hcl-indent-level 2hcl-indent-level37,1132
(defconst hcl--block-regexphcl--block-regexp41,1222
(defconst hcl--string-interpolation-regexphcl--string-interpolation-regexp45,1330
(defconst hcl--assignment-regexphcl--assignment-regexp48,1421
(defconst hcl--map-regexphcl--map-regexp51,1502
(defconst hcl--boolean-regexphcl--boolean-regexp54,1563
(defvar hcl-font-lock-keywordshcl-font-lock-keywords59,1717
(defsubst hcl--paren-level ()hcl--paren-level65,1983
(defsubst hcl--in-string-or-comment-p ()hcl--in-string-or-comment-p68,2037
(defun hcl--block-indentation ()hcl--block-indentation71,2104
(defun hcl--previous-indentation ()hcl--previous-indentation81,2392
(defun hcl-indent-line ()hcl-indent-line96,2942
(defun hcl-beginning-of-defun (&optional count)hcl-beginning-of-defun114,3631
(defun hcl-end-of-defun (&optional count)hcl-end-of-defun126,3982
(defun hcl--syntax-propertize-heredoc (end)hcl--syntax-propertize-heredoc147,4706
(defun hcl--font-lock-open-heredoc (start string eol)hcl--font-lock-open-heredoc159,5212
(defun hcl--syntax-propertize-function (start end)hcl--syntax-propertize-function170,5672
(defvar hcl-mode-maphcl-mode-map181,6038
(define-derived-mode hcl-mode prog-mode "HCL"hcl-mode189,6264

elpa/hcl-mode-0.3/hcl-mode-pkg.el,299
(define-package "hcl-mode" "0.3" "Major mode for Hashicorp" '((emacs "24.3")) :commit "6a6daf37522188a2f2fcdebc60949fc3bdabbc06" :authors '(("Syohei YOSHIDA" . "syohex@gmail.com")) :maintainer '("Syohei YOSHIDA" . "syohex@gmail.com") :url "https://github.com/syohex/emacs-hcl-mode")"hcl-mode"2,31

elpa/treemacs-2.6/treemacs-visuals.el,1598
(defvar-local treemacs--last-highlight niltreemacs--last-highlight49,2310
(defvar treemacs--not-selected-icon-backgroundtreemacs--not-selected-icon-background52,2401
(defvar treemacs--selected-icon-backgroundtreemacs--selected-icon-background65,3006
(defvar-local treemacs--indentation-string-cache-key niltreemacs--indentation-string-cache-key76,3498
(defvar-local treemacs--indentation-string-cache (vector)treemacs--indentation-string-cache78,3611
(define-inline treemacs--set-img-property (image property value)treemacs--set-img-property81,3707
(define-inline treemacs--get-img-property (image property)treemacs--get-img-property91,4057
(define-inline treemacs--forget-last-highlight ()treemacs--forget-last-highlight101,4417
(defun treemacs--setup-icon-highlight ()treemacs--setup-icon-highlight105,4565
(defun treemacs--tear-down-icon-highlight ()treemacs--tear-down-icon-highlight111,4913
(defun treemacs--setup-icon-background-colors (&rest _)treemacs--setup-icon-background-colors119,5341
(defun treemacs--update-icon-selection ()treemacs--update-icon-selection146,7078
(defun treemacs--pulse-png-advice (&rest _)treemacs--pulse-png-advice168,8256
(defun treemacs--do-pulse (face)treemacs--do-pulse186,9174
(defsubst treemacs-pulse-on-success (&rest log-args)treemacs-pulse-on-success192,9452
(defsubst treemacs-pulse-on-failure (&rest log-args)treemacs-pulse-on-failure201,9794
(defun treemacs--build-indentation-cache (depth)treemacs--build-indentation-cache210,10136
(define-inline treemacs--get-indentation (depth)treemacs--get-indentation225,10954

elpa/treemacs-2.6/treemacs-compatibility.el,112
(defun treemacs--split-window-advice (original-split-function &rest args)treemacs--split-window-advice65,2629

elpa/treemacs-2.6/treemacs-follow-mode.el,517
(defvar treemacs--ready-to-follow niltreemacs--ready-to-follow35,1075
(defvar treemacs--follow-timer niltreemacs--follow-timer41,1341
(defun treemacs--follow ()treemacs--follow44,1424
(defun treemacs--follow-after-buffer-list-update ()treemacs--follow-after-buffer-list-update78,3507
(defun treemacs--setup-follow-mode ()treemacs--setup-follow-mode85,3794
(defun treemacs--tear-down-follow-mode ()treemacs--tear-down-follow-mode90,3996
(define-minor-mode treemacs-follow-modetreemacs-follow-mode94,4186

elpa/treemacs-2.6/treemacs-single-file-git-status.py,741
from subprocess import Popen, PIPE, DEVNULLPopen1,0
from subprocess import Popen, PIPE, DEVNULLPIPE1,0
from subprocess import Popen, PIPE, DEVNULLDEVNULL1,0
import syssys2,44
FILE = sys.argv[1]FILE9,242
OLD_STATE = sys.argv[2]OLD_STATE10,261
PARENTS = [p for p in sys.argv[3:]]PARENTS11,285
FILE_STATE_CMD = "git status --porcelain --ignored "FILE_STATE_CMD13,322
IS_IGNORED_CMD = "git check-ignore "IS_IGNORED_CMD14,375
IS_TRACKED_CMD = "git ls-files --error-unmatch "IS_TRACKED_CMD15,412
IS_CHANGED_CMD = "git diff-index --quiet HEAD "IS_CHANGED_CMD16,461
def main():main18,510
def add_git_processes(status_listings, path):add_git_processes69,1985
def determine_file_git_state():determine_file_git_state76,2377

elpa/treemacs-2.6/treemacs-async.el,2202
(defvar treemacs--dirs-to-collpase.pytreemacs--dirs-to-collpase.py35,1093
(defvar treemacs--git-status.pytreemacs--git-status.py41,1367
(defvar treemacs--single-file-git-status.pytreemacs--single-file-git-status.py47,1617
(defvar treemacs--git-cache-max-size 60treemacs--git-cache-max-size53,1915
(defvar treemacs--git-cache (make-hash-table :size treemacs--git-cache-max-size :test #'equal)treemacs--git-cache57,2063
(define-inline treemacs--git-status-face (status default)treemacs--git-status-face68,2642
(define-inline treemacs--get-node-face (path git-info default)treemacs--get-node-face86,3188
(defun treemacs--resize-git-cache ()treemacs--resize-git-cache98,3585
(defun treemacs--git-status-process-function (path)treemacs--git-status-process-function109,4052
(defun treemacs--git-status-process (path project)treemacs--git-status-process114,4214
(defun treemacs--git-status-parse-function (_future)treemacs--git-status-parse-function120,4486
(defun treemacs--git-status-process-extended (path)treemacs--git-status-process-extended125,4642
(defun treemacs--parse-git-status-extended (git-future)treemacs--parse-git-status-extended148,5640
(defun treemacs--git-status-process-simple (path)treemacs--git-status-process-simple182,7582
(defun treemacs--parse-git-status-simple (git-future)treemacs--parse-git-status-simple190,7980
(defun treemacs--apply-deferred-git-state (parent-btn git-future buffer)treemacs--apply-deferred-git-state224,9906
(defun treemacs-update-single-file-git-state (file)treemacs-update-single-file-git-state258,11893
(defun treemacs-do-update-single-file-git-state (file)treemacs-do-update-single-file-git-state267,12202
(defun treemacs--collapsed-dirs-process (path project)treemacs--collapsed-dirs-process317,14840
(defun treemacs--parse-collapsed-dirs (future)treemacs--parse-collapsed-dirs340,15983
(define-minor-mode treemacs-git-modetreemacs-git-mode349,16304
(defun treemacs--setup-git-mode (&optional arg)treemacs--setup-git-mode384,17949
(defun treemacs--tear-down-git-mode ()treemacs--tear-down-git-mode402,18864
(define-inline treemacs--get-or-parse-git-result (future)treemacs--get-or-parse-git-result407,19063

elpa/treemacs-2.6/treemacs-mode.el,589
(defvar-local treemacs--eldoc-msg niltreemacs--eldoc-msg44,1337
(defconst treemacs--eldoc-obarraytreemacs--eldoc-obarray48,1474
(defun treemacs-helpful-hydra ()treemacs-helpful-hydra89,3173
(defun treemacs--setup-mode-line ()treemacs--setup-mode-line312,19511
(defun treemacs--post-command ()treemacs--post-command332,20383
(defun treemacs--eldoc-function ()treemacs--eldoc-function352,21322
(define-derived-mode treemacs-mode special-mode "Treemacs"treemacs-mode359,21604
(defun treemacs--mode-check-advice (mode-activation &rest args)treemacs--mode-check-advice414,23828

elpa/treemacs-2.6/treemacs-macros.el,2071
(defmacro treemacs-import-functions-from (file &rest functions)treemacs-import-functions-from33,1106
(defmacro treemacs-log (msg &rest args)treemacs-log40,1367
(defmacro treemacs-static-assert (predicate error-msg &rest error-args)treemacs-static-assert48,1621
(defmacro treemacs-with-writable-buffer (&rest body)treemacs-with-writable-buffer59,2106
(defmacro treemacs-without-messages (&rest body)treemacs-without-messages65,2279
(defmacro treemacs-safe-button-get (button &rest properties)treemacs-safe-button-get71,2452
(defmacro treemacs-with-button-buffer (btn &rest body)treemacs-with-button-buffer82,2940
(defmacro treemacs-unless-let (var-val &rest forms)treemacs-unless-let92,3338
(defmacro treemacs-with-current-button (error-msg &rest body)treemacs-with-current-button101,3683
(defmacro treemacs-without-following (&rest body)treemacs-without-following109,4028
(defmacro treemacs--without-filewatch (&rest body)treemacs--without-filewatch244,9824
(defmacro treemacs-save-position (main-form &rest final-form)treemacs-save-position252,10174
(defmacro treemacs-run-in-every-buffer (&rest body)treemacs-run-in-every-buffer324,13883
(defmacro treemacs--defstruct (name &rest properties)treemacs--defstruct333,14237
(defmacro treemacs-only-during-init (&rest body)treemacs-only-during-init355,15306
(defmacro treemacs--maphash (table names &rest body)treemacs--maphash362,15545
(defmacro treemacs-error-return (error-msg &rest msg-args)treemacs-error-return373,15924
(defmacro treemacs-error-return-if (predicate error-msg &rest msg-args)treemacs-error-return-if380,16225
(defmacro treemacs-return (ret)treemacs-return389,16598
(defmacro treemacs-return-if (predicate ret)treemacs-return-if394,16743
(defmacro treemacs-block (&rest forms)treemacs-block422,18042
(defmacro treemacs-is-path (left op &optional right)treemacs-is-path429,18334
(defmacro treemacs-with-toggle (&rest body)treemacs-with-toggle497,21402
(defmacro treemacs-with-ignored-errors (ignored-errors &rest body)treemacs-with-ignored-errors505,21695

elpa/treemacs-2.6/treemacs-dom.el,1754
(defvar-local treemacs-dom nil)treemacs-dom40,1235
(define-inline treemacs--insert-into-dom (node)treemacs--insert-into-dom45,1360
(defun treemacs--reset-dom ()treemacs--reset-dom51,1551
(defun treemacs-dom-node->print! (self)treemacs-dom-node->print!55,1666
(define-inline treemacs-get-position-of (key)treemacs-get-position-of66,2103
(define-inline treemacs-find-in-dom (key)treemacs-find-in-dom74,2361
(define-inline treemacs-dom-node->all-parents (self)treemacs-dom-node->all-parents81,2546
(define-inline treemacs-dom-node->invalidate-pos! (self)treemacs-dom-node->invalidate-pos!93,2905
(define-inline treemacs-dom-node->reset-refresh-flag! (self)treemacs-dom-node->reset-refresh-flag!99,3100
(define-inline treemacs-dom-node->remove-from-dom! (self)treemacs-dom-node->remove-from-dom!105,3306
(define-inline treemacs--on-expanding-existing-node (node pos)treemacs--on-expanding-existing-node111,3510
(define-inline treemacs--on-expanding-new-node (key pos parent-key)treemacs--on-expanding-new-node119,3812
(defun treemacs-on-expand (key pos parent-key)treemacs-on-expand132,4472
(defun treemacs--do-for-all-child-nodes (node f)treemacs--do-for-all-child-nodes140,4866
(define-inline treemacs--on-collapse-of-node-with-children (node purge)treemacs--on-collapse-of-node-with-children147,5143
(defun treemacs-on-collapse (key &optional purge)treemacs-on-collapse170,6251
(defun treemacs--on-rename (old-name new-name)treemacs--on-rename187,7168
(define-inline treemacs--invalidate-position-cache ()treemacs--invalidate-position-cache204,7924
(defun treemacs--recursive-refresh-descent (node)treemacs--recursive-refresh-descent210,8142
(defun treemacs--recursive-refresh ()treemacs--recursive-refresh230,9117

elpa/treemacs-2.6/treemacs-themes.el,314
(defvar treemacs--current-theme nil "The currently used theme.")treemacs--current-theme35,1101
(defvar treemacs--themes nil "List of all known themes.")treemacs--themes37,1167
(define-inline treemacs--find-theme (name)treemacs--find-theme39,1226
(defun treemacs-load-theme (name)treemacs-load-theme72,2691

elpa/treemacs-2.6/treemacs-extensions.el,733
(defmacro treemacs--build-extension-addition (name)treemacs--build-extension-addition39,1282
(defmacro treemacs--build-extension-removal (name)treemacs--build-extension-removal70,2885
(defmacro treemacs--build-extension-application (name)treemacs--build-extension-application92,3952
(define-obsolete-function-alias 'treemacs-define-root-extension #'treemacs-define-top-level-extension "v2.4")treemacs-define-root-extension128,5743
(define-obsolete-function-alias 'treemacs-remove-root-extension #'treemacs-remove-top-level-extension "v2.4")treemacs-remove-root-extension129,5853
(defsubst treemacs-as-icon (string &rest more-properties)treemacs-as-icon159,7066
(defun treemacs-initialize ()treemacs-initialize515,24486

elpa/treemacs-2.6/treemacs-faces.el,1583
(defface treemacs-directory-facetreemacs-directory-face23,812
(defface treemacs-directory-collapsed-facetreemacs-directory-collapsed-face28,962
(defface treemacs-file-facetreemacs-file-face35,1248
(defface treemacs-root-facetreemacs-root-face40,1366
(defface treemacs-root-unreadable-facetreemacs-root-unreadable-face45,1542
(defface treemacs-root-remote-facetreemacs-root-remote-face50,1716
(defface treemacs-root-remote-unreadable-facetreemacs-root-remote-unreadable-face55,1903
(defface treemacs-root-remote-disconnected-facetreemacs-root-remote-disconnected-face60,2092
(defface treemacs-term-node-facetreemacs-term-node-face65,2291
(defface treemacs-git-unmodified-facetreemacs-git-unmodified-face70,2461
(defface treemacs-git-modified-facetreemacs-git-modified-face75,2599
(defface treemacs-git-renamed-facetreemacs-git-renamed-face80,2743
(defface treemacs-git-ignored-facetreemacs-git-ignored-face85,2875
(defface treemacs-git-untracked-facetreemacs-git-untracked-face90,3006
(defface treemacs-git-added-facetreemacs-git-added-face95,3140
(defface treemacs-git-conflict-facetreemacs-git-conflict-face100,3270
(defface treemacs-tags-facetreemacs-tags-face105,3388
(defface treemacs-help-title-facetreemacs-help-title-face110,3503
(defface treemacs-help-column-facetreemacs-help-column-face117,3782
(defface treemacs-on-failure-pulse-facetreemacs-on-failure-pulse-face122,3948
(defface treemacs-on-success-pulse-facetreemacs-on-success-pulse-face127,4129
(defface treemacs-fringe-indicator-facetreemacs-fringe-indicator-face132,4300

elpa/treemacs-2.6/treemacs-dirs-to-collapse.py,398
from os import listdirlistdir1,0
from os.path import isdirisdir2,23
from posixpath import joinjoin3,49
import syssys4,76
import osos5,87
ROOT     = sys.argv[1]ROOT7,98
LIMIT    = int(sys.argv[2])LIMIT8,121
    def join_dirs(d1, d2, full_path=False):join_dirs19,517
    def join_dirs(d1, d2, *_):join_dirs37,1139
def dir_content(path):dir_content43,1227
def main():main55,1586

elpa/treemacs-2.6/treemacs-workspaces.el,4059
(defvar treemacs--workspaces (list (make-treemacs-workspace :name "Default Workspace")))treemacs--workspaces53,1558
(defvar treemacs--find-user-project-functions (list #'treemacs--default-current-user-project-function)treemacs--find-user-project-functions55,1648
(defvar-local treemacs--org-err-ov niltreemacs--org-err-ov58,1824
(defvar-local treemacs--project-positions nil)treemacs--project-positions61,1929
(defvar-local treemacs--project-of-buffer niltreemacs--project-of-buffer63,1977
(defun treemacs--default-current-user-project-function ()treemacs--default-current-user-project-function66,2110
(define-inline treemacs-workspaces ()treemacs-workspaces71,2323
(define-inline treemacs-current-workspace ()treemacs-current-workspace76,2485
(define-inline treemacs--find-workspace (&optional path)treemacs--find-workspace86,2932
(defun treemacs--find-project-for-buffer ()treemacs--find-project-for-buffer98,3322
(define-inline treemacs--find-project-for-path (path)treemacs--find-project-for-path105,3641
(define-inline treemacs-workspace->is-empty? ()treemacs-workspace->is-empty?111,3873
(define-inline treemacs--add-project-to-current-workspace (project)treemacs--add-project-to-current-workspace117,4109
(define-inline treemacs--remove-project-from-current-workspace (project)treemacs--remove-project-from-current-workspace126,4592
(define-inline treemacs--next-project-pos ()treemacs--next-project-pos139,5183
(define-inline treemacs--prev-project-pos ()treemacs--prev-project-pos145,5434
(define-inline treemacs--reset-project-positions ()treemacs--reset-project-positions151,5689
(define-inline treemacs-project->key (self)treemacs-project->key156,5880
(define-inline treemacs--set-project-position (project position)treemacs--set-project-position168,6308
(define-inline treemacs-project->position (self)treemacs-project->position174,6585
(define-inline treemacs-project->is-expanded? (self)treemacs-project->is-expanded?181,6850
(define-inline treemacs-project->refresh-path-status! (self)treemacs-project->refresh-path-status!189,7158
(define-inline treemacs-project->refresh! (self)treemacs-project->refresh!206,8113
(define-inline treemacs-project->is-last? (self)treemacs-project->is-last?220,8720
(defun treemacs-do-create-workspace ()treemacs-do-create-workspace231,9068
(defun treemacs-do-remove-workspace (&optional ask-to-confirm)treemacs-do-remove-workspace256,9964
(defun treemacs--get-path-status (path)treemacs--get-path-status286,11310
(define-inline treemacs-project->is-unreadable? (self)treemacs-project->is-unreadable?305,12072
(define-inline treemacs-project->is-readable? (self)treemacs-project->is-readable?315,12554
(define-inline treemacs-project->is-remote? (self)treemacs-project->is-remote?323,12898
(define-inline treemacs-project->is-local? (self)treemacs-project->is-local?330,13200
(define-inline treemacs-project->is-local-and-readable? (self)treemacs-project->is-local-and-readable?337,13507
(defun treemacs-do-add-project-to-workspace (path &optional name)treemacs-do-add-project-to-workspace342,13737
(defalias 'treemacs-add-project-at #'treemacs-do-add-project-to-workspace)treemacs-add-project-at405,16635
(defun treemacs-do-remove-project-from-workspace (project)treemacs-do-remove-project-from-workspace409,16823
(defun treemacs-do-switch-workspace ()treemacs-do-switch-workspace456,19045
(defun treemacs--is-name-invalid? (name)treemacs--is-name-invalid?477,19854
(define-inline treemacs-project-at-point ()treemacs-project-at-point485,20123
(defun treemacs--get-bounds-of-project (project)treemacs--get-bounds-of-project493,20408
(defun treemacs--consolidate-projects ()treemacs--consolidate-projects505,20965
(defun treemacs--org-edit-display-validation-msg (message line)treemacs--org-edit-display-validation-msg557,23598
(defun treemacs--org-edit-remove-validation-msg (&rest _)treemacs--org-edit-remove-validation-msg572,24219
(defun treemacs--find-current-user-project ()treemacs--find-current-user-project579,24535

elpa/treemacs-2.6/treemacs-filewatch-mode.el,1376
(defvar treemacs--collapsed-filewatch-index (make-hash-table :size 100 :test #'equal)treemacs--collapsed-filewatch-index38,1352
(defvar treemacs--filewatch-index (make-hash-table :size 100 :test #'equal)treemacs--filewatch-index56,2337
(defvar treemacs--refresh-timer niltreemacs--refresh-timer61,2605
(define-inline treemacs--cancel-refresh-timer ()treemacs--cancel-refresh-timer65,2776
(define-inline treemacs--start-watching (path &optional collapse)treemacs--start-watching72,3018
(define-inline treemacs--stop-watching (path &optional all)treemacs--stop-watching99,4284
(define-inline treemacs--is-event-relevant? (event)treemacs--is-event-relevant?131,5791
(define-inline treemacs--set-refresh-flags (path)treemacs--set-refresh-flags148,6587
(defun treemacs--filewatch-callback (event)treemacs--filewatch-callback165,7400
(define-inline treemacs--do-process-file-events ()treemacs--do-process-file-events184,8416
(defun treemacs--process-file-events ()treemacs--process-file-events195,8845
(defun treemacs--stop-filewatch-for-current-buffer ()treemacs--stop-filewatch-for-current-buffer207,9378
(defun treemacs--stop-watching-all ()treemacs--stop-watching-all224,10179
(define-inline treemacs--tear-down-filewatch-mode ()treemacs--tear-down-filewatch-mode238,10733
(define-minor-mode treemacs-filewatch-modetreemacs-filewatch-mode245,10955

elpa/treemacs-2.6/treemacs-mouse-interface.el,763
(defun treemacs-leftclick-action (event)treemacs-leftclick-action32,1072
(defun treemacs-doubleclick-action (event)treemacs-doubleclick-action51,1835
(defun treemacs-single-click-expand-action (event)treemacs-single-click-expand-action72,2695
(defun treemacs-dragleftclick-action (event)treemacs-dragleftclick-action98,3830
(defun treemacs-define-doubleclick-action (state action)treemacs-define-doubleclick-action111,4449
(defun treemacs-node-buffer-and-position (&optional _)treemacs-node-buffer-and-position122,4960
(defun treemacs--imenu-tag-noselect (file tag-path)treemacs--imenu-tag-noselect137,5600
(defun treemacs--tag-noselect (btn)treemacs--tag-noselect159,6603
(defun treemacs-rightclick-menu (event)treemacs-rightclick-menu196,8522

elpa/treemacs-2.6/treemacs-pkg.el,85
(define-package "treemacs" "2.6" "A tree style file explorer package""treemacs"1,0

elpa/treemacs-2.6/treemacs-git-status.py,887
from subprocess import Popen, PIPEPopen1,0
from subprocess import Popen, PIPEPIPE1,0
from os import listdir, environlistdir2,35
from os import listdir, environenviron2,35
from os.path import isdir, islinkisdir3,67
from os.path import isdir, islinkislink3,67
from posixpath import joinjoin4,101
import syssys5,128
GIT_ROOT     = str.encode(sys.argv[1])GIT_ROOT17,690
LIMIT        = int(sys.argv[2])LIMIT18,729
GIT_CMD      = "git status --porcelain --ignored . " + sys.argv[3]GIT_CMD19,761
STDOUT       = sys.stdout.bufferSTDOUT20,828
RECURSE_DIRS = set([str.encode(it[(len(GIT_ROOT)):]) + b"/" for it in sys.argv[4:]]) if len(sys.argv) > 4 else []RECURSE_DIRS21,861
QUOTE        = b'"'QUOTE22,975
output       = []output23,995
ht_size      = 0ht_size24,1013
def find_recursive_entries(path, state):find_recursive_entries26,1031
def main():main37,1400

elpa/treemacs-2.6/treemacs-autoloads.el,0

elpa/treemacs-2.6/treemacs-tag-follow-mode.el,1491
(defvar treemacs--tag-follow-timer niltreemacs--tag-follow-timer44,1679
(defvar-local treemacs--previously-followed-tag-position niltreemacs--previously-followed-tag-position48,1846
(defvar-local treemacs--imenu-cache niltreemacs--imenu-cache55,2268
(define-inline treemacs--reset-imenu-cache ()treemacs--reset-imenu-cache60,2467
(define-inline treemacs--forget-previously-follow-tag-btn ()treemacs--forget-previously-follow-tag-btn64,2606
(define-inline treemacs--flatten&sort-imenu-index ()treemacs--flatten&sort-imenu-index68,2818
(defun treemacs--flatten-imenu-index (index &optional path)treemacs--flatten-imenu-index103,4531
(defun treemacs--flatten-org-mode-imenu-index (index &optional path)treemacs--flatten-org-mode-imenu-index124,5433
(define-inline treemacs--compare-tag-paths (p1 p2)treemacs--compare-tag-paths142,6287
(define-inline treemacs--compare-markdown-tag-paths (p1 p2)treemacs--compare-markdown-tag-paths154,6685
(defun treemacs--find-index-pos (point list)treemacs--find-index-pos163,6973
(define-inline treemacs--do-follow-tag (flat-index treemacs-window buffer-file project)treemacs--do-follow-tag205,8421
(defun treemacs--follow-tag-at-point ()treemacs--follow-tag-at-point262,11929
(defun treemacs--setup-tag-follow-mode ()treemacs--setup-tag-follow-mode279,12761
(defun treemacs--tear-down-tag-follow-mode ()treemacs--tear-down-tag-follow-mode289,13138
(define-minor-mode treemacs-tag-follow-modetreemacs-tag-follow-mode295,13364

elpa/treemacs-2.6/treemacs-fringe-indicator.el,664
(defvar-local treemacs--fringe-indicator-overlay nil)treemacs--fringe-indicator-overlay30,1002
(define-inline treemacs--move-fringe-indicator-to-point ()treemacs--move-fringe-indicator-to-point32,1057
(defun treemacs--enable-fringe-indicator ()treemacs--enable-fringe-indicator38,1297
(defun treemacs--disable-fringe-indicator ()treemacs--disable-fringe-indicator48,1825
(defun treemacs--setup-fringe-indicator-mode ()treemacs--setup-fringe-indicator-mode52,1982
(defun treemacs--tear-down-fringe-indicator-mode ()treemacs--tear-down-fringe-indicator-mode56,2145
(define-minor-mode treemacs-fringe-indicator-modetreemacs-fringe-indicator-mode60,2317

elpa/treemacs-2.6/treemacs-interface.el,5083
(defvar treemacs-valid-button-statestreemacs-valid-button-states46,1405
(defun treemacs-next-line (&optional count)treemacs-next-line58,1682
(defun treemacs-previous-line (&optional count)treemacs-previous-line73,2257
(defun treemacs-toggle-node (&optional arg)treemacs-toggle-node89,2898
(defun treemacs-toggle-node-prefer-tag-visit (&optional arg)treemacs-toggle-node-prefer-tag-visit112,4116
(defun treemacs-TAB-action (&optional arg)treemacs-TAB-action138,5586
(defun treemacs-goto-parent-node ()treemacs-goto-parent-node155,6315
(defun treemacs-next-neighbour ()treemacs-next-neighbour162,6586
(defun treemacs-previous-neighbour ()treemacs-previous-neighbour170,6867
(defun treemacs-visit-node-vertical-split (&optional arg)treemacs-visit-node-vertical-split178,7160
(defun treemacs-visit-node-horizontal-split (&optional arg)treemacs-visit-node-horizontal-split191,7800
(defun treemacs-visit-node-no-split (&optional arg)treemacs-visit-node-no-split204,8446
(defun treemacs-visit-node-ace (&optional arg)treemacs-visit-node-ace219,9238
(defun treemacs-visit-node-in-most-recently-used-window (&optional arg)treemacs-visit-node-in-most-recently-used-window233,9884
(defun treemacs-visit-node-ace-horizontal-split (&optional arg)treemacs-visit-node-ace-horizontal-split247,10583
(defun treemacs-visit-node-ace-vertical-split (&optional arg)treemacs-visit-node-ace-vertical-split261,11283
(defun treemacs-visit-node-default (&optional arg)treemacs-visit-node-default275,11977
(defun treemacs-RET-action (&optional arg)treemacs-RET-action281,12247
(defun treemacs-define-RET-action (state action)treemacs-define-RET-action298,12967
(defun treemacs-define-TAB-action (state action)treemacs-define-TAB-action308,13414
(defun treemacs-visit-node-in-external-application ()treemacs-visit-node-in-external-application318,13862
(defun treemacs-quit (&optional arg)treemacs-quit337,14747
(defun treemacs-kill-buffer ()treemacs-kill-buffer346,14993
(defun treemacs-delete (&optional arg)treemacs-delete356,15273
(defun treemacs-create-file ()treemacs-create-file391,17109
(defun treemacs-move-file ()treemacs-move-file400,17514
(defun treemacs-copy-file ()treemacs-copy-file405,17633
(defun treemacs-create-dir ()treemacs-create-dir447,19513
(defun treemacs-toggle-show-dotfiles ()treemacs-toggle-show-dotfiles456,19923
(defun treemacs-toggle-fixed-width ()treemacs-toggle-fixed-width465,20295
(defun treemacs-set-width (&optional arg)treemacs-set-width475,20759
(defun treemacs-copy-path-at-point ()treemacs-copy-path-at-point486,21126
(defun treemacs-copy-project-root ()treemacs-copy-project-root493,21468
(defun treemacs-delete-other-windows ()treemacs-delete-other-windows502,21924
(defun treemacs-temp-resort-root (&optional sort-method)treemacs-temp-resort-root519,22715
(defun treemacs-temp-resort-current-dir (&optional sort-method)treemacs-temp-resort-current-dir533,23530
(defun treemacs-resort (&optional arg)treemacs-resort579,26327
(defun treemacs-add-bookmark ()treemacs-add-bookmark608,27465
(defun treemacs-next-line-other-window (&optional count)treemacs-next-line-other-window632,28684
(defun treemacs-previous-line-other-window (&optional count)treemacs-previous-line-other-window639,28911
(defun treemacs-next-page-other-window (&optional count)treemacs-next-page-other-window646,29145
(defun treemacs-previous-page-other-window (&optional count)treemacs-previous-page-other-window657,29537
(defun treemacs-next-project ()treemacs-next-project668,29946
(defun treemacs-previous-project ()treemacs-previous-project678,30309
(defun treemacs-rename-project ()treemacs-rename-project688,30680
(defun treemacs-add-project-to-workspace (path &optional name)treemacs-add-project-to-workspace717,32171
(defalias 'treemacs-add-project #'treemacs-add-project-to-workspace)treemacs-add-project749,33964
(defun treemacs-remove-project-from-workspace (&optional arg)treemacs-remove-project-from-workspace753,34139
(defun treemacs-create-workspace ()treemacs-create-workspace770,34911
(defun treemacs-remove-workspace ()treemacs-remove-workspace784,35556
(defun treemacs-switch-workspace ()treemacs-switch-workspace796,35995
(defun treemacs-refresh ()treemacs-refresh824,37014
(defun treemacs-collapse-project (&optional arg)treemacs-collapse-project831,37276
(defun treemacs-collapse-all-projects (&optional arg)treemacs-collapse-all-projects845,37898
(defun treemacs-collapse-other-projects (&optional arg)treemacs-collapse-other-projects858,38463
(defun treemacs-peek ()treemacs-peek874,39268
(defun treemacs-root-up ()treemacs-root-up893,40262
(defun treemacs-root-down ()treemacs-root-down918,41431
(defun treemacs-show-extensions ()treemacs-show-extensions940,42520
(defun treemacs-move-project-up ()treemacs-move-project-up975,44220
(defun treemacs-move-project-down ()treemacs-move-project-down1000,45324
(defun treemacs-finish-edit ()treemacs-finish-edit1025,46447
(defun treemacs-collapse-parent-node (arg)treemacs-collapse-parent-node1046,47328

elpa/treemacs-2.6/treemacs-rendering.el,3011
(defvar-local treemacs--projects-end niltreemacs--projects-end60,1917
(define-inline treemacs--projects-end ()treemacs--projects-end67,2199
(define-inline treemacs--button-at (pos)treemacs--button-at72,2367
(define-inline treemacs--current-screen-line ()treemacs--current-screen-line80,2672
(define-inline treemacs--lines-in-window ()treemacs--lines-in-window86,2890
(define-inline treemacs--sort-alphabetic-asc (f1 f2)treemacs--sort-alphabetic-asc95,3308
(define-inline treemacs--sort-alphabetic-desc (f1 f2)treemacs--sort-alphabetic-desc101,3514
(define-inline treemacs--sort-alphabetic-case-insensitive-asc (f1 f2)treemacs--sort-alphabetic-case-insensitive-asc107,3722
(define-inline treemacs--sort-alphabetic-case-insensitive-desc (f1 f2)treemacs--sort-alphabetic-case-insensitive-desc113,3984
(define-inline treemacs--sort-size-asc (f1 f2)treemacs--sort-size-asc119,4248
(define-inline treemacs--sort-size-desc (f1 f2)treemacs--sort-size-desc127,4488
(define-inline treemacs--sort-mod-time-asc (f1 f2)treemacs--sort-mod-time-asc135,4728
(define-inline treemacs--sort-mod-time-desc (f1 f2)treemacs--sort-mod-time-desc141,4939
(define-inline treemacs--insert-root-separator ()treemacs--insert-root-separator147,5152
(define-inline treemacs--get-dir-content (dir)treemacs--get-dir-content152,5362
(define-inline treemacs--create-dir-button-strings (path prefix parent depth)treemacs--create-dir-button-strings175,6706
(define-inline treemacs--create-file-button-strings (path prefix parent depth)treemacs--create-file-button-strings198,7657
(defun treemacs--collapse-dirs (dirs)treemacs--collapse-dirs262,10460
(defmacro treemacs--map-when-unrolled (items interval &rest mapper)treemacs--map-when-unrolled311,13046
(defmacro treemacs--inplace-map-when-unrolled (items interval &rest map-body)treemacs--inplace-map-when-unrolled329,13658
(define-inline treemacs--create-branch (root depth git-future collapse-process &optional parent)treemacs--create-branch345,14228
(defun treemacs--expand-root-node (btn)treemacs--expand-root-node470,20430
(defun treemacs--collapse-root-node (btn &optional recursive)treemacs--collapse-root-node502,22049
(defun treemacs--collapse-dir-node (btn &optional recursive)treemacs--collapse-dir-node549,24173
(defun treemacs--root-face (project)treemacs--root-face561,24588
(defun treemacs--add-root-element (project)treemacs--add-root-element570,24987
(defun treemacs--render-projects (projects)treemacs--render-projects588,25679
(define-inline treemacs-do-update-node (path &optional force-expand)treemacs-do-update-node610,26737
(defun treemacs-update-node (path &optional force-expand)treemacs-update-node638,28124
(defun treemacs-delete-single-node (path &optional project)treemacs-delete-single-node648,28424
(define-inline treemacs-do-delete-single-node (path &optional project)treemacs-do-delete-single-node664,29049
(defun treemacs--maybe-recenter (when &optional new-lines)treemacs--maybe-recenter686,29862

elpa/treemacs-2.6/treemacs-core-utils.el,7198
(defvar treemacs--closed-node-statestreemacs--closed-node-states112,3231
(defvar treemacs--open-node-statestreemacs--open-node-states120,3428
(defvar treemacs--buffer-access niltreemacs--buffer-access128,3612
(defvar treemacs--scope-id 0treemacs--scope-id131,3696
(defvar treemacs--taken-scopes niltreemacs--taken-scopes136,3898
(defconst treemacs--buffer-name-prefix " *Treemacs-")treemacs--buffer-name-prefix141,4101
(defconst treemacs-dirtreemacs-dir143,4156
(defvar treemacs--no-messages niltreemacs--no-messages154,4566
(defvar-local treemacs--width-is-locked ttreemacs--width-is-locked158,4722
(defvar-local treemacs--in-this-buffer niltreemacs--in-this-buffer161,4837
(defvar treemacs--pre-peek-state niltreemacs--pre-peek-state165,5011
(define-inline treemacs--nearest-parent-directory (path)treemacs--nearest-parent-directory168,5134
(define-inline treemacs--remove-trailing-newline (str)treemacs--remove-trailing-newline176,5394
(define-inline treemacs--add-trailing-slash (str)treemacs--add-trailing-slash186,5692
(define-inline treemacs--delete-line ()treemacs--delete-line196,5995
(define-inline treemacs-current-button ()treemacs-current-button202,6216
(defalias 'treemacs-node-at-point #'treemacs-current-button)treemacs-node-at-point210,6505
(define-inline treemacs-button-put (button prop val)treemacs-button-put212,6567
(define-inline treemacs-button-get (button prop)treemacs-button-get225,7029
(define-inline treemacs-button-start (button)treemacs-button-start234,7356
(define-inline treemacs-button-end (button)treemacs-button-end244,7716
(define-inline treemacs-is-node-expanded? (btn)treemacs-is-node-expanded?254,8061
(define-inline treemacs-is-node-collapsed? (btn)treemacs-is-node-collapsed?260,8276
(define-inline treemacs--unslash (path)treemacs--unslash266,8495
(define-inline treemacs--get-label-of (btn)treemacs--get-label-of276,8798
(defun treemacs--replace-recentf-entry (old-file new-file)treemacs--replace-recentf-entry282,9020
(defun treemacs--select-project-by-name ()treemacs--select-project-by-name291,9411
(defun treemacs-get-local-window ()treemacs-get-local-window298,9775
(defun treemacs-get-local-buffer ()treemacs-get-local-buffer308,10180
(defun treemacs--select-visible-window ()treemacs--select-visible-window317,10485
(define-inline treemacs--select-not-visible-window ()treemacs--select-not-visible-window326,10759
(define-inline treemacs--button-symbol-switch (new-sym)treemacs--button-symbol-switch336,11150
(defun treemacs-project-of-node (node)treemacs-project-of-node346,11503
(define-inline treemacs--prop-at-point (prop)treemacs--prop-at-point355,11827
(define-inline treemacs-parent-of (btn)treemacs-parent-of363,12098
(define-inline treemacs--filename (file)treemacs--filename372,12403
(define-inline treemacs--reject-ignored-files (file)treemacs--reject-ignored-files377,12622
(define-inline treemacs--reject-ignored-and-dotfiles (file)treemacs--reject-ignored-and-dotfiles386,13004
(define-inline treemacs--file-extension (file)treemacs--file-extension396,13474
(define-inline treemacs-is-treemacs-window? (window)treemacs-is-treemacs-window?410,14043
(define-inline treemacs--get-framelocal-buffer ()treemacs--get-framelocal-buffer416,14296
(define-inline treemacs--next-neighbour-of (btn)treemacs--next-neighbour-of434,15228
(define-inline treemacs--prev-non-child-button (btn)treemacs--prev-non-child-button445,15733
(define-inline treemacs--next-non-child-button (btn)treemacs--next-non-child-button456,16256
(define-inline treemacs--remove-framelocal-buffer ()treemacs--remove-framelocal-buffer468,16743
(define-inline treemacs--on-file-deletion (path &optional no-buffer-delete)treemacs--on-file-deletion476,17061
(define-inline treemacs--refresh-dir (path)treemacs--refresh-dir489,17657
(define-inline treemacs--canonical-path (path)treemacs--canonical-path500,18127
(define-inline treemacs-is-file-git-ignored? (file git-info)treemacs-is-file-git-ignored?509,18486
(define-inline treemacs-is-treemacs-window-selected? ()treemacs-is-treemacs-window-selected?515,18739
(defun treemacs--reload-buffers-after-rename (old-path new-path)treemacs--reload-buffers-after-rename520,18958
(defun treemacs--maybe-filter-dotfiles (dirs)treemacs--maybe-filter-dotfiles546,20140
(defun treemacs--get-children-of (parent-btn)treemacs--get-children-of557,20694
(defun treemacs--init (&optional root name)treemacs--init569,21201
(defun treemacs--on-buffer-kill ()treemacs--on-buffer-kill605,22995
(defun treemacs--push-button (btn &optional recursive)treemacs--push-button616,23484
(defun treemacs--reopen-node (btn &optional git-info)treemacs--reopen-node630,24362
(defun treemacs--reopen-at (path &optional git-info)treemacs--reopen-at640,24872
(defun treemacs--nearest-path (btn)treemacs--nearest-path658,25520
(defun treemacs--create-file/dir (is-file?)treemacs--create-file/dir669,26001
(define-inline treemacs--follow-path-elements (btn items)treemacs--follow-path-elements701,27451
(define-inline treemacs--follow-each-dir (btn dir-parts project)treemacs--follow-each-dir723,28402
(defun treemacs--find-custom-top-level-node (path)treemacs--find-custom-top-level-node792,32800
(defun treemacs-find-visible-node (path)treemacs-find-visible-node879,37396
(defun treemacs-find-node (path &optional project)treemacs-find-node892,37856
(defun treemacs-goto-node (path &optional project)treemacs-goto-node928,39748
(defun treemacs-find-file-node (path &optional project)treemacs-find-file-node941,40351
(defun treemacs--on-window-config-change ()treemacs--on-window-config-change1018,44473
(defun treemacs--set-width (width)treemacs--set-width1033,45288
(defun treemacs--filter-files-to-be-shown (files)treemacs--filter-files-to-be-shown1044,45668
(define-inline treemacs--std-ignore-file-predicate (file _)treemacs--std-ignore-file-predicate1053,46132
(define-inline treemacs--mac-ignore-file-predicate (file _)treemacs--mac-ignore-file-predicate1074,46888
(define-inline treemacs-current-visibility ()treemacs-current-visibility1083,47236
(defun treemacs--on-frame-kill (frame)treemacs--on-frame-kill1093,47561
(defun treemacs--setup-buffer ()treemacs--setup-buffer1103,47962
(define-inline treemacs--parent (path)treemacs--parent1121,48659
(defun treemacs--evade-image ()treemacs--evade-image1136,49386
(defun treemacs--read-first-project-path ()treemacs--read-first-project-path1145,49733
(defun treemacs--sort-value-selection ()treemacs--sort-value-selection1153,50111
(defun treemacs--kill-buffers-after-deletion (path is-file)treemacs--kill-buffers-after-deletion1169,51204
(defun treemacs--do-refresh (buffer project)treemacs--do-refresh1199,52448
(defun treemacs--setup-peek-buffer (btn &optional goto-tag?)treemacs--setup-peek-buffer1223,53388
(defun treemacs--restore-peeked-window ()treemacs--restore-peeked-window1245,54244
(define-inline treemacs-is-node-file-or-dir? (node)treemacs-is-node-file-or-dir?1260,55046
(defun treemacs-is-path-visible? (path)treemacs-is-path-visible?1267,55315
(defun treemacs--copy-or-move (action)treemacs--copy-or-move1293,56472

elpa/treemacs-2.6/treemacs-customization.el,4765
(defvar treemacs--indentation-string-cache)treemacs--indentation-string-cache24,842
(defun treemacs--find-python3 ()treemacs--find-python326,887
(defgroup treemacs niltreemacs67,3062
(defgroup treemacs-faces niltreemacs-faces72,3164
(defgroup treemacs-git niltreemacs-git79,3382
(defgroup treemacs-hooks niltreemacs-hooks85,3586
(defgroup treemacs-window niltreemacs-window91,3775
(defcustom treemacs-indentation 2treemacs-indentation97,3994
(defcustom treemacs-eldoc-display ttreemacs-eldoc-display108,4500
(defcustom treemacs-indentation-string " "treemacs-indentation-string114,4662
(defcustom treemacs-show-hidden-files ttreemacs-show-hidden-files122,5001
(defcustom treemacs-show-edit-workspace-help ttreemacs-show-edit-workspace-help127,5151
(defcustom treemacs-TAB-actions-configtreemacs-TAB-actions-config133,5352
(defcustom treemacs-doubleclick-actions-configtreemacs-doubleclick-actions-config150,6079
(defcustom treemacs-default-visit-actiontreemacs-default-visit-action167,6838
(defcustom treemacs-RET-actions-configtreemacs-RET-actions-config173,7024
(defcustom treemacs-follow-after-init niltreemacs-follow-after-init198,8269
(defcustom treemacs-dotfiles-regex (rx bol "." (1+ any))treemacs-dotfiles-regex206,8557
(defcustom treemacs-sorting 'alphabetic-desctreemacs-sorting211,8713
(defcustom treemacs-ignored-file-predicatestreemacs-ignored-file-predicates257,10588
(defcustom treemacs-pre-file-insert-predicates niltreemacs-pre-file-insert-predicates279,11649
(defcustom treemacs-file-event-delay 5000treemacs-file-event-delay307,12963
(defcustom treemacs-goto-tag-strategy 'refetch-indextreemacs-goto-tag-strategy317,13402
(defcustom treemacs-collapse-dirs 0treemacs-collapse-dirs336,14238
(defcustom treemacs-silent-refresh niltreemacs-silent-refresh350,14858
(defcustom treemacs-silent-filewatch niltreemacs-silent-filewatch359,15210
(defcustom treemacs-file-follow-delay 0.2treemacs-file-follow-delay365,15428
(defcustom treemacs-tag-follow-delay 1.5treemacs-tag-follow-delay370,15585
(defcustom treemacs-no-png-images niltreemacs-no-png-images375,15741
(defcustom treemacs-tag-follow-cleanup ttreemacs-tag-follow-cleanup381,15963
(defcustom treemacs-recenter-after-file-follow niltreemacs-recenter-after-file-follow388,16222
(defcustom treemacs-recenter-after-tag-follow niltreemacs-recenter-after-tag-follow399,16639
(defcustom treemacs-recenter-after-project-jump 'alwaystreemacs-recenter-after-project-jump410,17054
(defcustom treemacs-recenter-after-project-expand 'on-visibilitytreemacs-recenter-after-project-expand424,17573
(defcustom treemacs-pulse-on-success ttreemacs-pulse-on-success439,18179
(defcustom treemacs-pulse-on-failure ttreemacs-pulse-on-failure445,18394
(defcustom treemacs-follow-recenter-distance 0.1treemacs-follow-recenter-distance453,18769
(defcustom treemacs-recenter-distance 0.1treemacs-recenter-distance469,19608
(defcustom treemacs-elisp-imenu-expressiontreemacs-elisp-imenu-expression492,20607
(defcustom treemacs-project-follow-cleanup niltreemacs-project-follow-cleanup538,22228
(defcustom treemacs-persist-filetreemacs-persist-file548,22688
(defcustom treemacs-missing-project-action 'asktreemacs-missing-project-action554,22875
(defcustom treemacs-space-between-root-nodes ttreemacs-space-between-root-nodes564,23436
(defcustom treemacs-wrap-around ttreemacs-wrap-around569,23592
(defcustom treemacs--fringe-indicator-bitmaptreemacs--fringe-indicator-bitmap574,23747
(defcustom treemacs-show-cursor niltreemacs-show-cursor611,24854
(defcustom treemacs-deferred-git-apply-delay 0.5treemacs-deferred-git-apply-delay616,25009
(defcustom treemacs-max-git-entries 5000treemacs-max-git-entries622,25237
(defcustom treemacs-python-executable (treemacs--find-python3)treemacs-python-executable630,25584
(defcustom treemacs-git-command-pipe ""treemacs-git-command-pipe642,26117
(defcustom treemacs-is-never-other-window niltreemacs-is-never-other-window654,26776
(defcustom treemacs-width 35treemacs-width661,27083
(defcustom treemacs-display-in-side-window ttreemacs-display-in-side-window666,27191
(defcustom treemacs-no-delete-other-windows ttreemacs-no-delete-other-windows675,27651
(defcustom treemacs-position 'lefttreemacs-position688,28282
(defcustom treemacs-pre-refresh-hook niltreemacs-pre-refresh-hook698,28470
(defcustom treemacs-post-refresh-hook niltreemacs-post-refresh-hook716,29388
(defcustom treemacs-quit-hook niltreemacs-quit-hook736,30495
(defcustom treemacs-kill-hook niltreemacs-kill-hook742,30681
(defcustom treemacs-select-hook niltreemacs-select-hook748,30877
(defcustom treemacs-workspace-first-found-functions niltreemacs-workspace-first-found-functions755,31143

elpa/treemacs-2.6/treemacs-tags.el,1602
(define-inline treemacs--tags-path-of (btn)treemacs--tags-path-of45,1556
(defun treemacs--partition-imenu-index (index default-name)treemacs--partition-imenu-index66,2391
(defun treemacs--provided-mode-derived-p (mode &rest modes)treemacs--provided-mode-derived-p84,3006
(defun treemacs--post-process-index (index index-mode)treemacs--post-process-index92,3359
(defun treemacs--get-imenu-index (file)treemacs--get-imenu-index105,3915
(define-inline treemacs--insert-tag-leaf (item prefix parent depth)treemacs--insert-tag-leaf131,5068
(define-inline treemacs--insert-tag-node (node prefix parent depth)treemacs--insert-tag-node153,5734
(defun treemacs--expand-file-node (btn &optional recursive)treemacs--expand-file-node176,6421
(defun treemacs--collapse-file-node (btn &optional recursive)treemacs--collapse-file-node206,8121
(defun treemacs--visit-or-expand/collapse-tag-node (btn arg find-window)treemacs--visit-or-expand/collapse-tag-node214,8429
(defun treemacs--expand-tag-node (btn &optional recursive)treemacs--expand-tag-node278,11846
(defun treemacs--collapse-tag-node-recursive (btn)treemacs--collapse-tag-node-recursive311,13709
(defun treemacs--collapse-tag-node (btn &optional recursive)treemacs--collapse-tag-node323,14258
(define-inline treemacs--extract-position (item)treemacs--extract-position336,14671
(defun treemacs--call-imenu-and-goto-tag (tag-path &optional org?)treemacs--call-imenu-and-goto-tag363,15853
(defun treemacs--goto-tag (btn)treemacs--goto-tag395,17442
(defun treemacs--reopen-tags-under (btn)treemacs--reopen-tags-under456,20334

elpa/treemacs-2.6/treemacs.el,634
(defconst treemacs-versiontreemacs-version60,1927
(defun treemacs-version ()treemacs-version67,2106
(defun treemacs ()treemacs75,2308
(defun treemacs-bookmark (&optional arg)treemacs-bookmark89,2837
(defun treemacs-find-file (&optional arg)treemacs-find-file123,4451
(defun treemacs-find-tag ()treemacs-find-tag149,5758
(defun treemacs-select-window ()treemacs-select-window180,7230
(defun treemacs-show-changelog ()treemacs-show-changelog192,7676
(defun treemacs-edit-workspaces ()treemacs-edit-workspaces200,7869
(defun treemacs-add-and-display-current-project ()treemacs-add-and-display-current-project219,8597

elpa/treemacs-2.6/treemacs-icons.el,1156
(define-inline treemacs--is-image-creation-impossible? ()treemacs--is-image-creation-impossible?34,1146
(define-inline treemacs--should-use-tui-icons? ()treemacs--should-use-tui-icons?42,1559
(defvar treemacs-icons niltreemacs-icons50,1847
(defvar treemacs--icon-symbols niltreemacs--icon-symbols54,1951
(defvar treemacs--icon-size 22treemacs--icon-size61,2290
(defvar treemacs--icon-vars niltreemacs--icon-vars65,2402
(defmacro treemacs--root-icon-size-adjust (width height)treemacs--root-icon-size-adjust68,2481
(define-inline treemacs--create-image (file-path)treemacs--create-image75,2756
(define-inline treemacs---create-icon-strings (file fallback)treemacs---create-icon-strings88,3421
(define-inline treemacs-icon-for-file (file)treemacs-icon-for-file211,12087
(defun treemacs-resize-icons (size)treemacs-resize-icons223,12568
(defun treemacs--select-icon-set ()treemacs--select-icon-set251,13875
(defun treemacs-define-custom-icon (icon &rest file-extensions)treemacs-define-custom-icon269,14648
(defun treemacs-map-icons-with-auto-mode-alist (extensions mode-icon-alist)treemacs-map-icons-with-auto-mode-alist287,15383

elpa/treemacs-2.6/treemacs-persistence.el,1148
(defconst treemacs--org-edit-buffer-name "*Edit Treemacs Workspaces*"treemacs--org-edit-buffer-name34,1075
(defconst treemacs--last-error-persist-filetreemacs--last-error-persist-file37,1208
(defconst treemacs--persist-kv-regextreemacs--persist-kv-regex41,1406
(defconst treemacs--persist-workspace-name-regextreemacs--persist-workspace-name-regex51,1710
(defconst treemacs--persist-project-name-regextreemacs--persist-project-name-regex55,1854
(define-inline treemacs-iter->next! (self)treemacs-iter->next!61,2038
(define-inline treemacs-iter->peek (self)treemacs-iter->peek72,2366
(define-inline treemacs--should-not-run-persistence? ()treemacs--should-not-run-persistence?83,2694
(defun treemacs--read-workspaces (iter)treemacs--read-workspaces87,2868
(defun treemacs--read-projects (iter)treemacs--read-projects101,3426
(defun treemacs--persist ()treemacs--persist152,6189
(defun treemacs--read-persist-lines (&optional txt)treemacs--read-persist-lines179,7457
(defun treemacs--restore ()treemacs--restore252,11563
(defun treemacs--write-error-persist-state (lines error)treemacs--write-error-persist-state283,13438

elpa/log4e-0.3.0/log4e.el,1604
(defconst log4e-log-level-alist '((fatal . 6)log4e-log-level-alist74,2015
(defconst log4e-default-logging-function-name-alist '((fatal . "log-fatal")log4e-default-logging-function-name-alist82,2324
(defmacro log4e--def-symmaker (symnm)log4e--def-symmaker91,2829
(defmacro log4e--def-level-logger (prefix suffix level)log4e--def-level-logger107,3396
(defsubst log4e--logging-level-p (minlevel maxlevel currlevel)log4e--logging-level-p156,6011
(defsubst log4e--get-or-create-log-buffer (buffnm &optional codesys)log4e--get-or-create-log-buffer166,6463
(defvar log4e--regexp-msg-formatlog4e--regexp-msg-format175,6758
(defsubst log4e--insert-log (logtmpl timetmpl level msg msgargs propertize-p)log4e--insert-log182,7024
(defvar log4e--current-msg-buffer nil)log4e--current-msg-buffer214,8680
(defun log4e--logging (buffnm codsys logtmpl timetmpl minlevel maxlevel logging-p level msg &rest msgargs)log4e--logging217,8800
(defun log4e--get-current-log-line-level ()log4e--get-current-log-line-level240,9949
(defun log4e--clear-log (buffnm)log4e--clear-log246,10168
(defun log4e--open-log (buffnm)log4e--open-log252,10403
(defun log4e--open-log-if-debug (buffnm dbg)log4e--open-log-if-debug261,10739
(defmacro log4e:deflogger (prefix msgtmpl timetmpl &optional log-function-name-custom-alist)log4e:deflogger273,11107
(define-derived-mode log4e-mode view-mode "Log4E"log4e-mode518,21626
(defun log4e:next-log ()log4e:next-log526,21885
(defun log4e:previous-log ()log4e:previous-log536,22150
(defun log4e:insert-start-log-quickly ()log4e:insert-start-log-quickly546,22424

elpa/log4e-0.3.0/log4e-pkg.el,310
(define-package "log4e" "0.3.0" "provide logging framework for elisp" 'nil :commit "6592682ab7de0e3d1915aa4d3c53e083be79fbeb" :keywords '("log") :authors '(("Hiroaki Otsu" . "ootsuhiroaki@gmail.com")) :maintainer '("Hiroaki Otsu" . "ootsuhiroaki@gmail.com") :url "https://github.com/aki2o/log4e")"log4e"2,31

elpa/log4e-0.3.0/log4e-autoloads.el,0

elpa/doom-modeline-2.7.1/doom-modeline-segments.el,9467
(defvar Info-current-file)Info-current-file42,1165
(defvar Info-current-node)Info-current-node43,1192
(defvar Info-mode-line-node-keymap)Info-mode-line-node-keymap44,1219
(defvar anzu--cached-count)anzu--cached-count45,1255
(defvar anzu--current-position)anzu--current-position46,1283
(defvar anzu--overflow-p)anzu--overflow-p47,1315
(defvar anzu--state)anzu--state48,1341
(defvar anzu--total-matched)anzu--total-matched49,1362
(defvar anzu-cons-mode-line-p)anzu-cons-mode-line-p50,1391
(defvar aw-keys)aw-keys51,1422
(defvar battery-echo-area-format)battery-echo-area-format52,1439
(defvar battery-load-critical)battery-load-critical53,1473
(defvar battery-mode-line-limit)battery-mode-line-limit54,1504
(defvar battery-status-function)battery-status-function55,1537
(defvar edebug-execution-mode)edebug-execution-mode56,1570
(defvar evil-ex-active-highlights-alist)evil-ex-active-highlights-alist57,1601
(defvar evil-ex-argument)evil-ex-argument58,1642
(defvar evil-ex-range)evil-ex-range59,1668
(defvar evil-mc-frozen)evil-mc-frozen60,1691
(defvar evil-state)evil-state61,1715
(defvar evil-visual-beginning)evil-visual-beginning62,1735
(defvar evil-visual-end)evil-visual-end63,1766
(defvar evil-visual-selection)evil-visual-selection64,1791
(defvar flycheck-current-errors)flycheck-current-errors65,1822
(defvar flycheck-mode-menu-map)flycheck-mode-menu-map66,1855
(defvar flymake--backend-state)flymake--backend-state67,1887
(defvar flymake--mode-line-format)flymake--mode-line-format68,1919
(defvar flymake-menu)flymake-menu69,1954
(defvar grip-port)grip-port70,1976
(defvar grip-process)grip-process71,1995
(defvar helm--mode-line-display-prefarg)helm--mode-line-display-prefarg72,2017
(defvar iedit-occurrences-overlays)iedit-occurrences-overlays73,2058
(defvar mc/mode-line)mc/mode-line74,2094
(defvar minions-mode-line-lighter)minions-mode-line-lighter75,2116
(defvar mu4e-alert-mode-line)mu4e-alert-mode-line76,2151
(defvar mu4e-alert-modeline-formatter)mu4e-alert-modeline-formatter77,2181
(defvar nyan-minimum-window-width)nyan-minimum-window-width78,2220
(defvar objed--obj-state)objed--obj-state79,2255
(defvar objed--object)objed--object80,2281
(defvar objed-modeline-setup-func)objed-modeline-setup-func81,2304
(defvar persp-nil-name)persp-nil-name82,2339
(defvar symbol-overlay-keywords-alist)symbol-overlay-keywords-alist83,2363
(defvar symbol-overlay-temp-symbol)symbol-overlay-temp-symbol84,2402
(defvar text-scale-mode-amount)text-scale-mode-amount85,2438
(defvar tracking-buffers)tracking-buffers86,2470
(defvar winum-auto-setup-mode-line)winum-auto-setup-mode-line87,2496
(defvar xah-fly-insert-state-q)xah-fly-insert-state-q88,2532
(defvar-local doom-modeline--buffer-file-icon nil)doom-modeline--buffer-file-icon216,8567
(defun doom-modeline-update-buffer-file-icon (&rest _)doom-modeline-update-buffer-file-icon217,8618
(defun doom-modeline-buffer-file-state-icon (icon unicode text face)doom-modeline-buffer-file-state-icon248,10162
(defvar-local doom-modeline--buffer-file-state-icon nil)doom-modeline--buffer-file-state-icon257,10556
(defun doom-modeline-update-buffer-file-state-icon (&rest _)doom-modeline-update-buffer-file-state-icon258,10613
(defvar-local doom-modeline--buffer-file-name nil)doom-modeline--buffer-file-name319,14064
(defun doom-modeline-update-buffer-file-name (&rest _)doom-modeline-update-buffer-file-name320,14115
(defun doom-modeline-update-buffer-file-name-face (&rest _)doom-modeline-update-buffer-file-name-face372,16806
(defsubst doom-modeline--buffer-mode-icon ()doom-modeline--buffer-mode-icon381,17247
(defsubst doom-modeline--buffer-state-icon ()doom-modeline--buffer-state-icon398,18090
(defsubst doom-modeline--buffer-name ()doom-modeline--buffer-name410,18566
(defun doom-modeline-vcs-icon (icon &optional unicode text face voffset)doom-modeline-vcs-icon586,24078
(defvar-local doom-modeline--vcs-icon nil)doom-modeline--vcs-icon593,24366
(defun doom-modeline-update-vcs-icon (&rest _)doom-modeline-update-vcs-icon594,24409
(defvar-local doom-modeline--vcs-text nil)doom-modeline--vcs-text633,26143
(defun doom-modeline-update-vcs-text (&rest _)doom-modeline-update-vcs-text634,26186
(defun doom-modeline-checker-icon (icon unicode text face)doom-modeline-checker-icon685,28318
(defun doom-modeline-checker-text (text &optional face)doom-modeline-checker-text692,28587
(defvar-local doom-modeline--flycheck-icon nil)doom-modeline--flycheck-icon698,28734
(defun doom-modeline-update-flycheck-icon (&optional status)doom-modeline-update-flycheck-icon699,28782
(defvar-local doom-modeline--flycheck-text nil)doom-modeline--flycheck-text761,32121
(defun doom-modeline-update-flycheck-text (&optional status)doom-modeline-update-flycheck-text762,32169
(defvar-local doom-modeline--flymake-icon nil)doom-modeline--flymake-icon835,36379
(defun doom-modeline-update-flymake-icon (&rest _)doom-modeline-update-flymake-icon836,36426
(defvar-local doom-modeline--flymake-text nil)doom-modeline--flymake-text917,40655
(defun doom-modeline-update-flymake-text (&rest _)doom-modeline-update-flymake-text918,40702
(defsubst doom-modeline-column (pos)doom-modeline-column1025,46217
(defsubst doom-modeline--macro-recording ()doom-modeline--macro-recording1065,48087
(defun doom-modeline-fix-anzu-count (positions here)doom-modeline-fix-anzu-count1084,49025
(defsubst doom-modeline--anzu ()doom-modeline--anzu1107,50033
(defsubst doom-modeline--evil-substitute ()doom-modeline--evil-substitute1126,50807
(defun doom-modeline-themes--overlay-sort (a b)doom-modeline-themes--overlay-sort1142,51690
(defsubst doom-modeline--iedit ()doom-modeline--iedit1146,51808
(defsubst doom-modeline--symbol-overlay ()doom-modeline--symbol-overlay1166,52770
(defsubst doom-modeline--multiple-cursors ()doom-modeline--multiple-cursors1184,53635
(defsubst doom-modeline--buffer-size ()doom-modeline--buffer-size1208,54801
(defvar doom-modeline--bar-active nil)doom-modeline--bar-active1257,56617
(defvar doom-modeline--bar-inactive nil)doom-modeline--bar-inactive1258,56656
(defun doom-modeline-refresh-bars (&optional width height)doom-modeline-refresh-bars1265,56883
(defun doom-modeline-aw-update ()doom-modeline-aw-update1300,58256
(defvar-local doom-modeline--persp-name nil)doom-modeline--persp-name1372,61066
(defun doom-modeline-update-persp-name (&rest _)doom-modeline-update-persp-name1373,61111
(defvar doom-modeline-column-zero-baseddoom-modeline-column-zero-based1436,63886
(defvar doom-modeline-percent-positiondoom-modeline-percent-position1443,64133
(defsubst doom-modeline--evil ()doom-modeline--evil1513,66657
(defsubst doom-modeline--overwrite ()doom-modeline--overwrite1537,67972
(defsubst doom-modeline--god ()doom-modeline--god1551,68658
(defsubst doom-modeline--ryo ()doom-modeline--ryo1564,69270
(defsubst doom-modeline--xah-fly-keys ()doom-modeline--xah-fly-keys1577,69895
(defvar doom-modeline--objed-active nil)doom-modeline--objed-active1614,71458
(defun doom-modeline-update-objed (_ &optional reset)doom-modeline-update-objed1616,71500
(defun doom-modeline-lsp-icon (text face)doom-modeline-lsp-icon1698,74543
(defvar-local doom-modeline--lsp nil)doom-modeline--lsp1702,74728
(defun doom-modeline-update-lsp (&rest _)doom-modeline-update-lsp1703,74766
(defvar-local doom-modeline--eglot nil)doom-modeline--eglot1747,77168
(defun doom-modeline-update-eglot ()doom-modeline-update-eglot1748,77208
(defun doom-modeline-override-eglot-modeline ()doom-modeline-override-eglot-modeline1816,80952
(defvar doom-modeline--github-notification-counts 0)doom-modeline--github-notification-counts1832,81480
(defvar doom-modeline-before-github-fetch-notification-hook nildoom-modeline-before-github-fetch-notification-hook1833,81533
(defun doom-modeline--github-fetch-notifications ()doom-modeline--github-fetch-notifications1837,81747
(defvar doom-modeline--github-timer nil)doom-modeline--github-timer1861,82770
(defun doom-modeline-github-timer ()doom-modeline-github-timer1862,82811
(defun doom-modeline-debug-icon (face &rest args)doom-modeline-debug-icon1923,85140
(defsubst doom-modeline--debug-dap ()doom-modeline--debug-dap1927,85311
(defsubst doom-modeline--debug-edebug ()doom-modeline--debug-edebug1948,86257
(defsubst doom-modeline--debug-on-error ()doom-modeline--debug-on-error1968,87124
(defsubst doom-modeline--debug-on-quit ()doom-modeline--debug-on-quit1977,87499
(defvar-local doom-modeline--pdf-pages nil)doom-modeline--pdf-pages2007,88510
(defun doom-modeline-update-pdf-pages ()doom-modeline-update-pdf-pages2008,88554
(defun doom-modeline-override-mu4e-alert-modeline (&rest _)doom-modeline-override-mu4e-alert-modeline2053,90159
(defun doom-modeline--shorten-irc (name)doom-modeline--shorten-irc2074,90964
(defun doom-modeline--tracking-buffers (buffers)doom-modeline--tracking-buffers2084,91381
(defvar-local doom-modeline--battery-status nil)doom-modeline--battery-status2130,93112
(defun doom-modeline-update-battery-status ()doom-modeline-update-battery-status2131,93161
(defun doom-modeline-override-battery-modeline ()doom-modeline-override-battery-modeline2233,98568
(defvar doom-modeline--helm-buffer-idsdoom-modeline--helm-buffer-ids2279,100306
(defvar doom-modeline--helm-current-source nildoom-modeline--helm-current-source2358,103911

elpa/doom-modeline-2.7.1/doom-modeline-pkg.el,93
(define-package "doom-modeline" "2.7.1" "A minimal and modern mode-line""doom-modeline"1,0

elpa/doom-modeline-2.7.1/doom-modeline-env.el,881
(defvar python-shell-interpreter)python-shell-interpreter34,1054
(defgroup doom-modeline-env nildoom-modeline-env40,1114
(defcustom doom-modeline-env-load-string "..."doom-modeline-env-load-string45,1300
(defcustom doom-modeline-before-update-env-hook nildoom-modeline-before-update-env-hook50,1461
(defcustom doom-modeline-after-update-env-hook nildoom-modeline-after-update-env-hook55,1623
(defvar-local doom-modeline-env--version nildoom-modeline-env--version61,1862
(defvar-local doom-modeline-env--command nildoom-modeline-env--command64,1984
(defvar-local doom-modeline-env--command-args nildoom-modeline-env--command-args67,2118
(defvar-local doom-modeline-env--parser nildoom-modeline-env--parser70,2289
(defun doom-modeline-update-env ()doom-modeline-update-env74,2460
(defun doom-modeline-env--get (prog args callback)doom-modeline-env--get104,3661

elpa/doom-modeline-2.7.1/doom-modeline.el,1193
(defun doom-modeline-init ()doom-modeline-init136,5092
(defun doom-modeline-set-main-modeline (&optional default)doom-modeline-set-main-modeline142,5258
(defun doom-modeline-set-minimal-modeline ()doom-modeline-set-minimal-modeline148,5469
(defun doom-modeline-set-special-modeline ()doom-modeline-set-special-modeline153,5598
(defun doom-modeline-set-project-modeline ()doom-modeline-set-project-modeline158,5727
(defun doom-modeline-set-info-modeline ()doom-modeline-set-info-modeline163,5856
(defun doom-modeline-set-package-modeline ()doom-modeline-set-package-modeline168,5976
(defun doom-modeline-set-media-modeline ()doom-modeline-set-media-modeline173,6105
(defun doom-modeline-set-pdf-modeline ()doom-modeline-set-pdf-modeline178,6228
(defun doom-modeline-set-helm-modeline (&rest _)doom-modeline-set-helm-modeline183,6345
(defun doom-modeline-set-timemachine-modeline (&rest _)doom-modeline-set-timemachine-modeline188,6472
(defvar doom-modeline--old-format mode-line-formatdoom-modeline--old-format197,6627
(defvar doom-modeline-mode-map (make-sparse-keymap))doom-modeline-mode-map201,6785
(define-minor-mode doom-modeline-modedoom-modeline-mode207,6924

elpa/doom-modeline-2.7.1/doom-modeline-autoloads.el,61
(defvar doom-modeline-mode nil "\doom-modeline-mode68,1551

elpa/doom-modeline-2.7.1/doom-modeline-core.el,8114
(defun doom-modeline--set-char-widths (alist)doom-modeline--set-char-widths61,1978
(defun doom-moddeline--set-font-widths (alist)doom-moddeline--set-font-widths75,2514
(defconst doom-modeline-rhs-icons-alistdoom-modeline-rhs-icons-alist82,2710
(defgroup doom-modeline nildoom-modeline132,3727
(defcustom doom-modeline-height 25doom-modeline-height137,3895
(defcustom doom-modeline-bar-width (if (eq system-type 'darwin) 3 6)doom-modeline-bar-width145,4178
(defcustom doom-modeline-project-detectiondoom-modeline-project-detection152,4426
(defcustom doom-modeline-buffer-file-name-style 'truncate-upto-projectdoom-modeline-buffer-file-name-style173,5240
(defcustom doom-modeline-icon (display-graphic-p)doom-modeline-icon200,6397
(defcustom doom-modeline-major-mode-icon tdoom-modeline-major-mode-icon208,6645
(defcustom doom-modeline-major-mode-color-icon tdoom-modeline-major-mode-color-icon215,6812
(defcustom doom-modeline-buffer-state-icon tdoom-modeline-buffer-state-icon222,7005
(defcustom doom-modeline-buffer-modification-icon tdoom-modeline-buffer-modification-icon229,7179
(defcustom doom-modeline-unicode-fallback tdoom-modeline-unicode-fallback236,7405
(defcustom doom-modeline-minor-modes (featurep 'minions)doom-modeline-minor-modes241,7574
(defcustom doom-modeline-enable-word-count nildoom-modeline-enable-word-count246,7724
(defcustom doom-modeline-buffer-encoding tdoom-modeline-buffer-encoding251,7897
(defcustom doom-modeline-indent-info nildoom-modeline-indent-info256,8024
(defcustom doom-modeline-checker-simple-format tdoom-modeline-checker-simple-format261,8157
(defcustom doom-modeline-number-limit 99doom-modeline-number-limit266,8328
(defcustom doom-modeline-vcs-max-length 12doom-modeline-vcs-max-length271,8464
(defcustom doom-modeline-persp-name tdoom-modeline-persp-name276,8622
(defcustom doom-modeline-lsp tdoom-modeline-lsp283,8779
(defcustom doom-modeline-github nildoom-modeline-github290,8924
(defcustom doom-modeline-github-interval 1800 ; (* 30 60)doom-modeline-github-interval297,9091
(defcustom doom-modeline-env-version tdoom-modeline-env-version302,9229
(defcustom doom-modeline-evil-state-icon tdoom-modeline-evil-state-icon307,9356
(defcustom doom-modeline-mu4e tdoom-modeline-mu4e312,9485
(defcustom doom-modeline-irc tdoom-modeline-irc319,9639
(defcustom doom-modeline-irc-stylize 'identitydoom-modeline-irc-stylize326,9786
(defgroup doom-modeline-faces nildoom-modeline-faces336,9940
(defface doom-modeline-buffer-pathdoom-modeline-buffer-path342,10132
(defface doom-modeline-buffer-filedoom-modeline-buffer-file347,10300
(defface doom-modeline-buffer-modifieddoom-modeline-buffer-modified352,10480
(defface doom-modeline-buffer-major-modedoom-modeline-buffer-major-mode357,10657
(defface doom-modeline-buffer-minor-modedoom-modeline-buffer-minor-mode362,10835
(defface doom-modeline-project-parent-dirdoom-modeline-project-parent-dir367,11015
(defface doom-modeline-project-dirdoom-modeline-project-dir372,11216
(defface doom-modeline-project-root-dirdoom-modeline-project-root-dir377,11402
(defface doom-modeline-highlightdoom-modeline-highlight382,11585
(defface doom-modeline-paneldoom-modeline-panel387,11736
(defface doom-modeline-debugdoom-modeline-debug392,11924
(defface doom-modeline-infodoom-modeline-info397,12102
(defface doom-modeline-warningdoom-modeline-warning402,12276
(defface doom-modeline-urgentdoom-modeline-urgent407,12433
(defface doom-modeline-unread-numberdoom-modeline-unread-number412,12585
(defface doom-modeline-bardoom-modeline-bar417,12756
(defface doom-modeline-inactive-bardoom-modeline-inactive-bar422,12923
(defface doom-modeline-evil-emacs-statedoom-modeline-evil-emacs-state427,13133
(defface doom-modeline-evil-insert-statedoom-modeline-evil-insert-state432,13314
(defface doom-modeline-evil-motion-statedoom-modeline-evil-motion-state437,13487
(defface doom-modeline-evil-normal-statedoom-modeline-evil-normal-state442,13663
(defface doom-modeline-evil-operator-statedoom-modeline-evil-operator-state447,13834
(defface doom-modeline-evil-visual-statedoom-modeline-evil-visual-state452,14016
(defface doom-modeline-evil-replace-statedoom-modeline-evil-replace-state457,14190
(defface doom-modeline-persp-namedoom-modeline-persp-name462,14374
(defface doom-modeline-persp-buffer-not-in-perspdoom-modeline-persp-buffer-not-in-persp467,14552
(defface doom-modeline-lsp-successdoom-modeline-lsp-success472,14746
(defface doom-modeline-lsp-warningdoom-modeline-lsp-warning477,14876
(defface doom-modeline-lsp-errordoom-modeline-lsp-error482,15006
(defvar doom-modeline-fn-alist ())doom-modeline-fn-alist502,15408
(defvar doom-modeline-var-alist ())doom-modeline-var-alist503,15443
(defmacro doom-modeline-def-segment (name &rest body)doom-modeline-def-segment505,15480
(defun doom-modeline--prepare-segments (segments)doom-modeline--prepare-segments525,16461
(defvar doom-modeline--width-cache nil)doom-modeline--width-cache540,17055
(defun doom-modeline--window-font-width ()doom-modeline--window-font-width541,17095
(defun doom-modeline-def-modeline (name lhs &optional rhs)doom-modeline-def-modeline549,17424
(defun doom-modeline (key)doom-modeline584,19115
(defun doom-modeline-set-modeline (key &optional default)doom-modeline-set-modeline591,19368
(defvar-local doom-modeline--size-hacked-p nil)doom-modeline--size-hacked-p605,19809
(defun doom-modeline-redisplay (&rest _)doom-modeline-redisplay606,19857
(defun doom-modeline--get-current-window ()doom-modeline--get-current-window626,20871
(defvar doom-modeline-current-window (doom-modeline--get-current-window))doom-modeline-current-window632,21107
(defun doom-modeline-set-selected-window (&rest _)doom-modeline-set-selected-window633,21181
(defun doom-modeline-unset-selected-window ()doom-modeline-unset-selected-window640,21468
(defvar doom-modeline-remap-face-cookie nil)doom-modeline-remap-face-cookie663,22737
(defun doom-modeline-focus ()doom-modeline-focus664,22782
(defun doom-modeline-unfocus ()doom-modeline-unfocus669,22966
(defun doom-modeline--active ()doom-modeline--active690,23591
(defsubst doom-modeline-vspc ()doom-modeline-vspc694,23712
(defsubst doom-modeline-spc ()doom-modeline-spc700,23958
(defun doom-modeline--font-height ()doom-modeline--font-height706,24162
(defun doom-modeline-icon (icon-set icon-name unicode text face &rest args)doom-modeline-icon713,24496
(defun doom-modeline-icon-octicon (icon-name &rest args)doom-modeline-icon-octicon738,25712
(defun doom-modeline-icon-faicon (icon-name &rest args)doom-modeline-icon-faicon743,25881
(defun doom-modeline-icon-material (icon-name &rest args)doom-modeline-icon-material748,26058
(defun doom-modeline-icon-alltheicon (icon-name &rest args)doom-modeline-icon-alltheicon753,26235
(defun doom-modeline-icon-fileicon (icon-name &rest args)doom-modeline-icon-fileicon758,26413
(defun doom-modeline-icon-for-mode (&rest args)doom-modeline-icon-for-mode763,26585
(defun doom-modeline-icon-for-file (&rest args)doom-modeline-icon-for-file768,26753
(defvar-local doom-modeline-project-root nil)doom-modeline-project-root773,26921
(defun doom-modeline-project-root ()doom-modeline-project-root774,26967
(defun doom-modeline--make-xpm (face width height)doom-modeline--make-xpm793,27758
(defun doom-modeline-shrink-path--dirs-internal (full-path &optional truncate-all)doom-modeline-shrink-path--dirs-internal822,29047
(defun doom-modeline-buffer-file-name ()doom-modeline-buffer-file-name843,30004
(defun doom-modeline--buffer-file-name-truncate (file-path true-file-path &optional truncate-tail)doom-modeline--buffer-file-name-truncate883,32221
(defun doom-modeline--buffer-file-name-relative (_file-path true-file-path &optional include-project)doom-modeline--buffer-file-name-relative902,33415
(defun doom-modeline--buffer-file-name (file-path _true-file-path &optional truncate-project-root-parent truncate-project-relative-path hide-project-root-parent)doom-modeline--buffer-file-name918,34561

elpa/evil-leader-0.4.3/evil-leader-autoloads.el,0

elpa/evil-leader-0.4.3/evil-leader-pkg.el,369
(define-package "evil-leader" "0.4.3" "let there be <leader>" '((evil "0")) :commit "753b01eb4958370ae2226b3780ff31fe157c2852" :keywords '("evil" "vim-emulation" "leader") :authors '(("Michael Markert" . "markert.michael@googlemail.com")) :maintainer '("Michael Markert" . "markert.michael@googlemail.com") :url "http://github.com/cofi/evil-leader")"evil-leader"2,31

elpa/evil-leader-0.4.3/evil-leader.el,996
(defvar evil-leader--default-map (make-sparse-keymap)evil-leader--default-map81,2656
(defvar evil-leader--mode-maps nilevil-leader--mode-maps84,2766
(defgroup evil-leader nilevil-leader88,2897
(defcustom evil-leader/leader "\\"evil-leader/leader93,2995
(defcustom evil-leader/non-normal-prefix "C-"evil-leader/non-normal-prefix99,3231
(defcustom evil-leader/no-prefix-mode-rx nilevil-leader/no-prefix-mode-rx106,3493
(defcustom evil-leader/in-all-states nilevil-leader/in-all-states117,3948
(define-minor-mode global-evil-leader-modeglobal-evil-leader-mode125,4209
(define-minor-mode evil-leader-modeevil-leader-mode133,4479
(defun evil-leader/set-leader (key &optional prefix)evil-leader/set-leader164,6149
(defun evil-leader/set-key (key def &rest bindings)evil-leader/set-key183,6752
(defun evil-leader/set-key-for-mode (mode key def &rest bindings)evil-leader/set-key-for-mode193,7144
(defun evil-leader--def-keys (map key def bindings)evil-leader--def-keys206,7730

elpa/flymake-easy-0.10/flymake-easy-autoloads.el,0

elpa/flymake-easy-0.10/flymake-easy-pkg.el,356
(define-package "flymake-easy" "0.10" "Helpers for easily building flymake checkers" 'nil :commit "2a24f260cdc3b9c8f9263b653a475d90efa1d392" :keywords '("convenience" "internal") :authors '(("Steve Purcell" . "steve@sanityinc.com")) :maintainer '("Steve Purcell" . "steve@sanityinc.com") :url "https://github.com/purcell/flymake-easy")"flymake-easy"2,31

elpa/flymake-easy-0.10/flymake-easy.el,990
(defvar flymake-easy--active nilflymake-easy--active36,1242
(defvar flymake-easy--command-fn nilflymake-easy--command-fn38,1350
(defvar flymake-easy--location nilflymake-easy--location40,1454
(defvar flymake-easy--extension nilflymake-easy--extension43,1587
(defun flymake-easy--tempfile-in-temp-dir (file-name prefix)flymake-easy--tempfile-in-temp-dir52,1854
(defun flymake-easy--flymake-init ()flymake-easy--flymake-init59,2184
(defun flymake-easy-exclude-buffer-p ()flymake-easy-exclude-buffer-p75,2907
(defun flymake-easy-load (command-fn &optional err-line-patterns location extension warning-re info-re)flymake-easy-load81,3111
(defun flymake-easy--find-all-matches (str)flymake-easy--find-all-matches112,4974
(defadvice flymake-split-output (around flymake-easy--split-output (output) activate protect)flymake-split-output131,5691
(defadvice flymake-post-syntax-check (before flymake-easy--force-check-was-interrupted activate)flymake-post-syntax-check138,6015

elpa/evil-1.2.14/evil-keybindings.el,0

elpa/evil-1.2.14/evil-common.el,17328
(defalias 'evil-get-selectionevil-get-selection51,1542
(defalias 'evil-set-selectionevil-set-selection53,1645
(defmacro evil-called-interactively-p ()evil-called-interactively-p56,1749
(defun evil-delay (condition form hook &optional append local name)evil-delay73,2303
(defun evil-add-to-alist (list-var key val &rest elements)evil-add-to-alist93,3134
(defun evil-filter-list (predicate list &optional pointer)evil-filter-list109,3791
(defun evil-member-if (predicate list &optional pointer)evil-member-if129,4471
(defun evil-member-recursive-if (predicate tree)evil-member-recursive-if141,4873
(defun evil-concat-lists (&rest sequences)evil-concat-lists152,5183
(defun evil-concat-alists (&rest sequences)evil-concat-alists161,5451
(defun evil-concat-plists (&rest sequences)evil-concat-plists172,5866
(defun evil-concat-keymap-alists (&rest sequences)evil-concat-keymap-alists183,6275
(defun evil-plist-delete (prop plist)evil-plist-delete196,6819
(defun evil-get-property (alist key &optional prop)evil-get-property216,7417
(defun evil-put-property (alist-var key prop val &rest properties)evil-put-property237,8094
(defun evil-state-property (state prop &optional value)evil-state-property252,8729
(defmacro evil-swap (this that &rest vars)evil-swap263,9160
(defmacro evil-sort (min max &rest vars)evil-sort273,9509
(defun evil-vector-to-string (vector)evil-vector-to-string287,10086
(defmacro evil-define-command (command &rest body)evil-define-command298,10369
(defun evil-has-command-property-p (command property)evil-has-command-property-p357,12713
(defun evil-has-command-properties-p (command)evil-has-command-properties-p362,12914
(defun evil-get-command-property (command property &optional default)evil-get-command-property367,13104
(defun evil-get-command-properties (command)evil-get-command-properties375,13458
(defun evil-set-command-property (command property value)evil-set-command-property380,13640
(defalias 'evil-put-command-property 'evil-set-command-property)evil-put-command-property385,13913
(defun evil-add-command-properties (command &rest properties)evil-add-command-properties387,13979
(defun evil-set-command-properties (command &rest properties)evil-set-command-properties394,14265
(defun evil-remove-command-properties (command &rest properties)evil-remove-command-properties404,14690
(defun evil-yank-handler (&optional motion)evil-yank-handler415,15161
(defun evil-declare-motion (command)evil-declare-motion421,15382
(defun evil-declare-repeat (command)evil-declare-repeat426,15595
(defun evil-declare-not-repeat (command)evil-declare-not-repeat430,15722
(defun evil-declare-ignore-repeat (command)evil-declare-ignore-repeat434,15858
(defun evil-declare-change-repeat (command)evil-declare-change-repeat438,16001
(defun evil-declare-insert-at-point-repeat (command)evil-declare-insert-at-point-repeat442,16159
(defun evil-declare-abort-repeat (command)evil-declare-abort-repeat446,16335
(defun evil-delimited-arguments (string &optional num)evil-delimited-arguments450,16476
(defun evil-concat-charsets (&rest sets)evil-concat-charsets484,17997
(defun evil-keypress-parser (&optional input)evil-keypress-parser505,18766
(defun evil-read-key (&optional prompt)evil-read-key543,20618
(defun evil-read-quoted-char ()evil-read-quoted-char581,22097
(defun evil-read-digraph-char (&optional hide-chars)evil-read-digraph-char588,22334
(defun evil-read-motion (&optional motion count type modifier)evil-read-motion618,23612
(defun evil-mouse-events-p (keys)evil-mouse-events-p657,25227
(defun evil-extract-count (keys)evil-extract-count667,25545
(defmacro evil-redirect-digit-argument (map keys target)evil-redirect-digit-argument713,27560
(defun evil-extract-append (file-or-append)evil-extract-append738,28547
(defun evil-set-keymap-prompt (map prompt)evil-set-keymap-prompt749,29025
(defun evil-lookup-key (map key)evil-lookup-key755,29204
(defun evil-set-cursor (specs)evil-set-cursor764,29421
(defun evil-set-cursor-color (color)evil-set-cursor-color783,30013
(defun evil-refresh-cursor (&optional state buffer)evil-refresh-cursor790,30278
(defmacro evil-save-cursor (&rest body)evil-save-cursor810,31275
(defun evil-echo (string &rest args)evil-echo822,31661
(defun evil-echo-area-save ()evil-echo-area-save830,31945
(defun evil-echo-area-restore ()evil-echo-area-restore834,32087
(defmacro evil-save-echo-area (&rest body)evil-save-echo-area845,32478
(defmacro evil-without-display (&rest body)evil-without-display859,32907
(defun evil-num-visible-lines ()evil-num-visible-lines867,33151
(defun evil-count-lines (beg end)evil-count-lines871,33261
(defun evil-normalize-position (pos)evil-normalize-position886,33717
(defmacro evil-save-goal-column (&rest body)evil-save-goal-column903,34158
(defmacro evil-save-column (&rest body)evil-save-column912,34440
(defun evil-narrow (beg end)evil-narrow922,34718
(defmacro evil-with-restriction (beg end &rest body)evil-with-restriction930,35068
(defmacro evil-without-restriction (&rest body)evil-without-restriction942,35491
(defmacro evil-narrow-to-field (&rest body)evil-narrow-to-field955,35965
(defun evil-move-beginning-of-line (&optional arg)evil-move-beginning-of-line962,36161
(defun evil-move-end-of-line (&optional arg)evil-move-end-of-line969,36409
(defun evil-adjust-cursor (&optional force)evil-adjust-cursor976,36627
(defun evil-move-cursor-back (&optional force)evil-move-cursor-back989,37099
(defun evil-line-position (line &optional column)evil-line-position1003,37761
(defun evil-column (&optional pos)evil-column1017,38190
(defun evil-move-to-column (column &optional dir force)evil-move-to-column1025,38370
(defmacro evil-loop (spec &rest body)evil-loop1037,38783
(defmacro evil-motion-loop (spec &rest body)evil-motion-loop1066,39672
(defmacro evil-signal-without-movement (&rest body)evil-signal-without-movement1095,40774
(defun evil-signal-at-bob-or-eob (&optional count)evil-signal-at-bob-or-eob1106,41091
(defun evil-signal-at-bob ()evil-signal-at-bob1117,41532
(defun evil-signal-at-eob ()evil-signal-at-eob1124,41828
(defmacro evil-with-hproject-point-on-window (&rest body)evil-with-hproject-point-on-window1140,42564
(defun evil-goto-min (&rest positions)evil-goto-min1159,43443
(defun evil-goto-max (&rest positions)evil-goto-max1169,43814
(defun evil-forward-not-thing (thing &optional count)evil-forward-not-thing1179,44184
(defun evil-bounds-of-not-thing-at-point (thing &optional which)evil-bounds-of-not-thing-at-point1212,45503
(defun evil-forward-nearest (count &rest forwards)evil-forward-nearest1233,46432
(defun bounds-of-evil-string-at-point (&optional state)bounds-of-evil-string-at-point1265,47802
(defun bounds-of-evil-comment-at-point ()bounds-of-evil-comment-at-point1281,48488
(defun evil-line-move (count &optional noerror)evil-line-move1304,49639
(defun evil-forward-syntax (syntax &optional count)evil-forward-syntax1332,50705
(defun evil-forward-chars (chars &optional count)evil-forward-chars1348,51257
(defun evil-up-block (beg end &optional count)evil-up-block1363,51800
(defun evil-up-paren (open close &optional count)evil-up-paren1415,54162
(defun evil-up-xml-tag (&optional count)evil-up-xml-tag1450,55873
(defun evil-forward-quote (quote &optional count)evil-forward-quote1523,59054
(defun forward-evil-empty-line (&optional count)forward-evil-empty-line1594,61962
(defun forward-evil-space (&optional count)forward-evil-space1610,62399
(defun forward-evil-word (&optional count)forward-evil-word1614,62544
(defun forward-evil-WORD (&optional count)forward-evil-WORD1635,63432
(defun forward-evil-symbol (&optional count)forward-evil-symbol1647,63999
(defun forward-evil-defun (&optional count)forward-evil-defun1665,64671
(defun forward-evil-sentence (&optional count)forward-evil-sentence1673,65001
(defun forward-evil-paragraph (&optional count)forward-evil-paragraph1684,65399
(defvar evil-forward-quote-char ?\"evil-forward-quote-char1694,65818
(defun forward-evil-quote (&optional count)forward-evil-quote1697,65910
(defun forward-evil-quote-simple (&optional count)forward-evil-quote-simple1704,66178
(defun evil-forward-beginning (thing &optional count)evil-forward-beginning1736,67353
(defun evil-backward-beginning (thing &optional count)evil-backward-beginning1757,68090
(defun evil-forward-end (thing &optional count)evil-forward-end1763,68341
(defun evil-backward-end (thing &optional count)evil-backward-end1784,68961
(defun evil-forward-word (&optional count)evil-forward-word1790,69188
(defun evil-in-comment-p (&optional pos)evil-in-comment-p1804,69650
(defun evil-looking-at-start-comment (&optional move)evil-looking-at-start-comment1827,70633
(defun evil-looking-at-end-comment (&optional move)evil-looking-at-end-comment1853,71898
(defun evil-insert-newline-above ()evil-insert-newline-above1884,73300
(defun evil-insert-newline-below ()evil-insert-newline-below1893,73592
(defun evil-global-marker-p (char)evil-global-marker-p1903,73869
(defun evil-set-marker (char &optional pos advance)evil-set-marker1908,74041
(defun evil-get-marker (char &optional raw)evil-get-marker1938,75300
(defun evil-swap-out-markers ()evil-swap-out-markers1968,76562
(defun evil-get-register (register &optional noerror)evil-get-register1978,77000
(defun evil-set-register (register text)evil-set-register2086,81873
(defun evil-register-list ()evil-register-list2143,84144
(defsubst evil-kbd-macro-suppress-motion-error ()evil-kbd-macro-suppress-motion-error2152,84526
(defun evil-move-mark (pos)evil-move-mark2164,84994
(defun evil-save-transient-mark-mode ()evil-save-transient-mark-mode2171,85177
(defun evil-restore-transient-mark-mode ()evil-restore-transient-mark-mode2188,85843
(defun evil-save-mark ()evil-save-mark2210,86623
(defun evil-restore-mark ()evil-restore-mark2217,86861
(defun evil-transient-mark (&optional arg)evil-transient-mark2230,87425
(defun evil-active-region (&optional arg)evil-active-region2250,88017
(defmacro evil-with-transient-mark-mode (&rest body)evil-with-transient-mark-mode2275,88831
(defmacro evil-with-active-region (beg end &rest body)evil-with-active-region2289,89269
(defun evil-exchange-point-and-mark ()evil-exchange-point-and-mark2302,89652
(defun evil-apply-on-block (func beg end pass-columns &rest args)evil-apply-on-block2309,89874
(defun evil-apply-on-rectangle (function start end &rest args)evil-apply-on-rectangle2354,91662
(defun evil-concat-ranges (ranges)evil-concat-ranges2363,92039
(defun evil-track-last-insertion (beg end len)evil-track-last-insertion2377,92653
(defun evil-start-track-last-insertion ()evil-start-track-last-insertion2402,93705
(defun evil-stop-track-last-insertion ()evil-stop-track-last-insertion2407,93895
(defun evil-yank-characters (beg end &optional register yank-handler)evil-yank-characters2427,94915
(defun evil-yank-lines (beg end &optional register yank-handler)evil-yank-lines2439,95439
(defun evil-yank-rectangle (beg end &optional register yank-handler)evil-yank-rectangle2459,96339
(defun evil-remove-yank-excluded-properties (text)evil-remove-yank-excluded-properties2483,97537
(defun evil-yank-line-handler (text)evil-yank-line-handler2490,97851
(defun evil-yank-block-handler (lines)evil-yank-block-handler2530,99124
(defun evil-delete-yanked-rectangle (nrows ncols)evil-delete-yanked-rectangle2581,101212
(defun evil-paste-pop (count)evil-paste-pop2603,102197
(defun evil-paste-pop-next (count)evil-paste-pop-next2641,103931
(defun evil-match-interactive-code (interactive &optional pos)evil-match-interactive-code2648,104097
(defun evil-concatenate-interactive-forms (&rest forms)evil-concatenate-interactive-forms2662,104684
(defun evil-interactive-string (string)evil-interactive-string2689,105516
(defun evil-interactive-form (&rest args)evil-interactive-form2721,106872
(defun evil-type (object &optional default)evil-type2739,107560
(defun evil-set-type (object type)evil-set-type2756,108093
(defun evil-type-property (type prop)evil-type-property2773,108585
(defun evil-type-p (sym)evil-type-p2777,108713
(defun evil-expand (beg end type &rest properties)evil-expand2781,108813
(defun evil-contract (beg end type &rest properties)evil-contract2790,109168
(defun evil-normalize (beg end type &rest properties)evil-normalize2796,109424
(defun evil-transform (transform beg end type &rest properties)evil-transform2802,109683
(defun evil-describe (beg end type &rest properties)evil-describe2814,110219
(defun evil-range (beg end &optional type &rest properties)evil-range2826,110641
(defun evil-range-p (object)evil-range-p2839,111158
(defun evil-range-beginning (range)evil-range-beginning2846,111337
(defun evil-range-end (range)evil-range-end2853,111570
(defun evil-range-properties (range)evil-range-properties2860,111791
(defun evil-copy-range (range)evil-copy-range2867,111967
(defun evil-set-range (range &optional beg end type &rest properties)evil-set-range2871,112052
(defun evil-set-range-beginning (range beg &optional copy)evil-set-range-beginning2892,112992
(defun evil-set-range-end (range end &optional copy)evil-set-range-end2900,113215
(defun evil-set-range-type (range type &optional copy)evil-set-range-type2908,113432
(defun evil-set-range-properties (range properties &optional copy)evil-set-range-properties2919,113776
(defun evil-range-union (range1 range2 &optional type)evil-range-union2929,114099
(defun evil-subrange-p (range1 range2)evil-subrange-p2943,114672
(defun evil-select-inner-object (thing beg end type &optional count line)evil-select-inner-object2952,114973
(defun evil-select-an-object (thing beg end type count &optional line)evil-select-an-object2982,116496
(defun evil--get-block-range (op cl selection-type)evil--get-block-range3058,119819
(defun evil-select-block (thing beg end type countevil-select-block3089,121102
(defun evil-select-paren (open close beg end type count &optional inclusive)evil-select-paren3196,126107
(defun evil-select-quote-thing (thing beg end type count &optional inclusive)evil-select-quote-thing3256,129084
(defun evil-select-quote (quote beg end type count &optional inclusive)evil-select-quote3330,132405
(defun evil-select-xml-tag (beg end type &optional count inclusive)evil-select-xml-tag3371,134547
(defun evil-expand-range (range &optional copy)evil-expand-range3386,135228
(defun evil-contract-range (range &optional copy)evil-contract-range3395,135537
(defun evil-normalize-range (range &optional copy)evil-normalize-range3400,135716
(defun evil-transform-range (transform range &optional copy)evil-transform-range3405,135898
(defun evil-describe-range (range)evil-describe-range3415,136229
(defun evil-start-undo-step (&optional continue)evil-start-undo-step3422,136398
(defun evil-end-undo-step (&optional continue)evil-end-undo-step3435,136952
(defun evil-refresh-undo-step ()evil-refresh-undo-step3446,137376
(defmacro evil-with-undo (&rest body)evil-with-undo3456,137803
(defmacro evil-with-single-undo (&rest body)evil-with-single-undo3480,138792
(defun evil-undo-pop ()evil-undo-pop3493,139159
(defun evil-transform-regexp (regexp replacements-alist)evil-transform-regexp3516,140055
(defun evil-transform-magic (str magic quote transform &optional start)evil-transform-magic3531,140555
(defconst evil-vim-regexp-replacementsevil-vim-regexp-replacements3625,144936
(defconst evil-regexp-magic "[][(){}<>_dDsSxXoOaAlLuUwWyY.*+?=^$`|nrtb]")evil-regexp-magic3647,145786
(defun evil-transform-vim-style-regexp (regexp)evil-transform-vim-style-regexp3649,145861
(defun evil-downcase-first (str)evil-downcase-first3667,146526
(defun evil-upcase-first (str)evil-upcase-first3674,146721
(defun evil-get-magic (magic)evil-get-magic3681,146910
(defconst evil-replacement-magic "[eElLuU0-9&#,rnbt=]"evil-replacement-magic3696,147395
(defun evil-compile-subreplacement (to &optional start)evil-compile-subreplacement3699,147501
(defun evil-compile-replacement (to)evil-compile-replacement3766,150581
(defun evil-replace-match (replacement &optional fixedcase string)evil-replace-match3777,151042
(defun evil-match-substitute-replacement (replacement &optional fixedcase string)evil-match-substitute-replacement3789,151552
(defun evil-justify-lines (beg end justify position)evil-justify-lines3800,152045
(defvar-local evil-list-view-select-action nil)evil-list-view-select-action3832,153240
(define-derived-mode evil-list-view-mode tabulated-list-modeevil-list-view-mode3835,153344
(defun evil-list-view-goto-entry ()evil-list-view-goto-entry3840,153482
(define-key evil-list-view-mode-map (kbd "q") #'kill-this-buffer)evil-list-view-mode-map3848,153772
(define-key evil-list-view-mode-map [follow-link] nil) ;; allows mouse-1 to be activatedevil-list-view-mode-map3849,153838
(define-key evil-list-view-mode-map [mouse-1] #'evil-list-view-goto-entry)evil-list-view-mode-map3850,153927
(define-key evil-list-view-mode-map [return] #'evil-list-view-goto-entry)evil-list-view-mode-map3851,154002
(defmacro evil-with-view-list (&rest properties)evil-with-view-list3853,154077

elpa/evil-1.2.14/evil-ex.el,3786
(defconst evil-ex-grammarevil-ex-grammar49,1676
(defvar evil-ex-echo-overlay nilevil-ex-echo-overlay139,4327
(defun evil-ex-p ()evil-ex-p142,4419
(defun evil-ex-execute (result)evil-ex-execute198,6580
(defun evil-ex-delete-backward-char ()evil-ex-delete-backward-char211,7019
(defun evil-ex-abort ()evil-ex-abort220,7292
(defun evil-ex-setup ()evil-ex-setup225,7423
(defun evil-ex-setup-and-update ()evil-ex-setup-and-update242,8154
(defun evil-ex-teardown ()evil-ex-teardown247,8307
(defun evil-ex-remove-default ()evil-ex-remove-default260,8816
(defun evil-ex-update (&optional beg end len string)evil-ex-update273,9390
(defun evil-ex-echo (string &rest args)evil-ex-echo347,12782
(defun evil--ex-remove-echo-overlay ()evil--ex-remove-echo-overlay366,13832
(defun evil-ex-completion ()evil-ex-completion373,14091
(defun evil-ex-command-completion-at-point ()evil-ex-command-completion-at-point381,14350
(defun evil-ex-completion-table ()evil-ex-completion-table392,14864
(defun evil-completion-table-concat (table1 table2 string pred flag)evil-completion-table-concat411,15495
(defun evil-ex-sort-completions (completions)evil-ex-sort-completions435,16392
(defun evil-ex-command-collection (cmd predicate flag)evil-ex-command-collection444,16742
(defun evil-ex-argument-completion-at-point ()evil-ex-argument-completion-at-point463,17528
(defun evil-ex-define-cmd (cmd function)evil-ex-define-cmd494,19094
(defun evil-ex-make-argument-handler (runner completer)evil-ex-make-argument-handler504,19566
(defun evil-ex-argument-handler-runner (arg-handler)evil-ex-argument-handler-runner507,19650
(defun evil-ex-argument-handler-completer (arg-handler)evil-ex-argument-handler-completer510,19725
(defmacro evil-ex-define-argument-type (arg-type doc &rest body)evil-ex-define-argument-type513,19804
(defun evil-ex-init-shell-argument-completion (flag &optional arg)evil-ex-init-shell-argument-completion575,22059
(defun evil-ex-file-or-shell-command-completion-at-point ()evil-ex-file-or-shell-command-completion-at-point602,23126
(defun evil-ex-binding (command &optional noerror)evil-ex-binding618,23801
(defun evil-ex-completed-binding (command &optional noerror)evil-ex-completed-binding636,24462
(defun evil-ex-replace-special-filenames (file-name)evil-ex-replace-special-filenames644,24824
(defun evil-ex-file-arg ()evil-ex-file-arg673,26156
(defun evil-ex-repeat (count)evil-ex-repeat679,26397
(defun evil-ex-call-command (range command argument)evil-ex-call-command698,27056
(defun evil-ex-line (base &optional offset)evil-ex-line743,28912
(defun evil-ex-first-line ()evil-ex-first-line748,29062
(defun evil-ex-current-line ()evil-ex-current-line752,29174
(defun evil-ex-last-line ()evil-ex-last-line756,29286
(defun evil-ex-range (beg-line &optional end-line)evil-ex-range764,29475
(defun evil-ex-full-range ()evil-ex-full-range772,29712
(defun evil-ex-marker (marker)evil-ex-marker776,29838
(defun evil-ex-char-marker-range (beg end)evil-ex-char-marker-range786,30199
(defun evil-ex-re-fwd (pattern)evil-ex-re-fwd799,30684
(defun evil-ex-re-bwd (pattern)evil-ex-re-bwd813,31123
(defun evil-ex-prev-search ()evil-ex-prev-search827,31571
(defun evil-ex-signed-number (sign &optional number)evil-ex-signed-number830,31651
(defun evil-ex-parse (string &optional syntax start)evil-ex-parse838,31935
(defun evil-ex-parse-command (string)evil-ex-parse-command847,32344
(defun evil-ex-command-force-p (command)evil-ex-command-force-p875,33613
(defun evil-flatten-syntax-tree (tree)evil-flatten-syntax-tree881,33831
(defun evil-ex-syntactic-context (&optional pos)evil-ex-syntactic-context899,34534
(defun evil-parser (string symbol grammar &optional greedy syntax)evil-parser912,34991

elpa/evil-1.2.14/evil-search.el,5561
(defun evil-select-search-module (option module)evil-select-search-module34,961
(defcustom evil-search-module 'isearchevil-search-module60,1937
(defun evil-push-search-history (string forward)evil-push-search-history68,2259
(defun evil-search-incrementally (forward regexp-p)evil-search-incrementally77,2673
(defun evil-flash-search-pattern (string &optional all)evil-flash-search-pattern112,4234
(defun evil-clean-isearch-overlays ()evil-clean-isearch-overlays140,5505
(defun evil-flash-hook (&optional force)evil-flash-hook153,6029
(defun evil-search-function (&optional forward regexp-p wrap)evil-search-function176,6990
(defun evil-isearch-function ()evil-isearch-function202,8077
(defun evil-search (string forward &optional regexp-p start)evil-search207,8288
(defun evil-search-word (forward unbounded symbol)evil-search-word259,10500
(defun evil-find-thing (forward thing)evil-find-thing289,11616
(defun evil-find-word (forward)evil-find-word309,12398
(defun evil-find-symbol (forward)evil-find-symbol315,12595
(defun evil-search-prompt (forward)evil-search-prompt321,12796
(defun evil-search-message (string forward)evil-search-message325,12911
(defadvice isearch-message-prefix (around evil activate)isearch-message-prefix329,13053
(defadvice isearch-delete-char (around evil activate)isearch-delete-char335,13229
(defadvice isearch-lazy-highlight-search (around evil activate)isearch-lazy-highlight-search345,13505
(defun evil-ex-regex-without-case (re)evil-ex-regex-without-case352,13669
(defun evil-ex-regex-case (re default-case)evil-ex-regex-case356,13836
(defun evil-ex-make-substitute-pattern (regexp flags)evil-ex-make-substitute-pattern376,14745
(defun evil-ex-make-search-pattern (regexp)evil-ex-make-search-pattern392,15508
(defun evil-ex-make-pattern (regexp case whole-line)evil-ex-make-pattern397,15702
(defun evil-ex-pattern-regex (pattern)evil-ex-pattern-regex424,17074
(defun evil-ex-pattern-ignore-case (pattern)evil-ex-pattern-ignore-case428,17188
(defun evil-ex-pattern-whole-line (pattern)evil-ex-pattern-whole-line432,17309
(defun evil-ex-make-hl (name &rest args)evil-ex-make-hl438,17513
(defun evil-ex-hl-name (hl)evil-ex-hl-name489,19820
(defun evil-ex-hl-pattern (hl)evil-ex-hl-pattern493,19905
(defun evil-ex-hl-set-pattern (hl pattern)evil-ex-hl-set-pattern497,19996
(defun evil-ex-hl-face (hl)evil-ex-hl-face501,20115
(defun evil-ex-hl-window (hl)evil-ex-hl-window505,20200
(defun evil-ex-hl-min (hl)evil-ex-hl-min509,20289
(defun evil-ex-hl-set-min (hl min)evil-ex-hl-set-min513,20392
(defun evil-ex-hl-max (hl)evil-ex-hl-max517,20511
(defun evil-ex-hl-set-max (hl max)evil-ex-hl-set-max521,20614
(defun evil-ex-hl-match-hook (hl)evil-ex-hl-match-hook525,20733
(defun evil-ex-hl-update-hook (hl)evil-ex-hl-update-hook529,20830
(defun evil-ex-hl-overlays (hl)evil-ex-hl-overlays533,20929
(defun evil-ex-hl-set-overlays (hl overlays)evil-ex-hl-set-overlays537,21037
(defun evil-ex-delete-hl (name)evil-ex-delete-hl541,21176
(defun evil-ex-hl-active-p (name)evil-ex-hl-active-p555,21816
(defun evil-ex-hl-change (name pattern)evil-ex-hl-change559,21964
(defun evil-ex-hl-set-region (name beg end &optional type)evil-ex-hl-set-region569,22355
(defun evil-ex-hl-get-max (name)evil-ex-hl-get-max577,22671
(defun evil-ex-hl-update-highlights ()evil-ex-hl-update-highlights582,22875
(defun evil-ex-search-find-next-pattern (pattern &optional direction)evil-ex-search-find-next-pattern689,27967
(defun evil-ex-hl-idle-update ()evil-ex-hl-idle-update719,29111
(defun evil-ex-hl-do-update-highlight (&optional buffer)evil-ex-hl-do-update-highlight730,29577
(defun evil-ex-hl-update-highlights-scroll (win beg)evil-ex-hl-update-highlights-scroll737,29823
(defun evil-ex-hl-update-highlights-resize (frame)evil-ex-hl-update-highlights-resize743,30072
(defun evil-ex-search-activate-highlight (pattern)evil-ex-search-activate-highlight752,30432
(defun evil-ex-search (&optional count)evil-ex-search764,31020
(defun evil-ex-find-next (&optional pattern direction nowrap)evil-ex-find-next795,32284
(defun evil-ex-search-update (pattern offset beg end message)evil-ex-search-update833,34065
(defun evil-ex-search-start-session ()evil-ex-search-start-session869,35435
(defun evil-ex-search-stop-session ()evil-ex-search-stop-session877,35830
(defun evil-ex-split-search-pattern (pattern direction)evil-ex-split-search-pattern896,36843
(defun evil-ex-search-full-pattern (pattern-string count direction)evil-ex-search-full-pattern911,37587
(defun evil-ex-search-update-pattern (beg end range)evil-ex-search-update-pattern977,40589
(defun evil-ex-search-exit ()evil-ex-search-exit1012,42306
(defun evil-ex-search-abort ()evil-ex-search-abort1018,42469
(defun evil-ex-search-goto-offset (offset)evil-ex-search-goto-offset1025,42672
(defun evil-ex-search-setup ()evil-ex-search-setup1055,43934
(defun evil-ex-start-search (direction count)evil-ex-start-search1059,44076
(defun evil-ex-start-word-search (unbounded direction count &optional symbol)evil-ex-start-word-search1113,46606
(defun evil-ex-pattern-update-ex-info (hl result)evil-ex-pattern-update-ex-info1191,50165
(defun evil-ex-pattern-update-replacement (hl overlay)evil-ex-pattern-update-replacement1196,50305
(defun evil-ex-parse-global (string)evil-ex-parse-global1211,50921
(defun evil-ex-get-substitute-info (string &optional implicit-r)evil-ex-get-substitute-info1227,51573
(defun evil-ex-nohighlight ()evil-ex-nohighlight1286,54469

elpa/evil-1.2.14/evil-jumps.el,2014
(defgroup evil-jumps nilevil-jumps33,898
(defcustom evil-jumps-cross-buffers tevil-jumps-cross-buffers38,1005
(defcustom evil-jumps-max-length 100evil-jumps-max-length43,1218
(defcustom evil-jumps-pre-jump-hook nilevil-jumps-pre-jump-hook48,1345
(defcustom evil-jumps-post-jump-hook nilevil-jumps-post-jump-hook53,1491
(defcustom evil-jumps-ignored-file-patterns '("COMMIT_EDITMSG$" "TAGS$")evil-jumps-ignored-file-patterns58,1637
(defvar savehist-additional-variables)savehist-additional-variables65,1919
(defvar evil--jumps-jumping nil)evil--jumps-jumping67,1959
(defvar evil--jumps-buffer-targets "\\*\\(new\\|scratch\\)\\*"evil--jumps-buffer-targets71,2045
(defvar evil--jumps-window-jumps (make-hash-table)evil--jumps-window-jumps74,2199
(defvar evil-jumps-history nilevil-jumps-history77,2312
(defmacro evil--jumps-message (format &rest args)evil--jumps-message84,2466
(defun evil--jumps-get-current (&optional window)evil--jumps-get-current90,2691
(defun evil--jumps-get-jumps (struct)evil--jumps-get-jumps99,3021
(defun evil--jumps-get-window-jump-list ()evil--jumps-get-window-jump-list106,3239
(defun evil--jumps-savehist-load ()evil--jumps-savehist-load110,3364
(defun evil--jumps-savehist-sync ()evil--jumps-savehist-sync119,3807
(defun evil--jumps-jump (idx shift)evil--jumps-jump136,4774
(defun evil--jumps-push ()evil--jumps-push166,6155
(defun evil--show-jumps-select-action (jump)evil--show-jumps-select-action212,8120
(defun evil-set-jump (&optional pos)evil-set-jump219,8337
(defun evil--jump-backward (count)evil--jump-backward238,8951
(defun evil--jump-forward (count)evil--jump-forward250,9367
(defun evil--jumps-window-configuration-hook (&rest args)evil--jumps-window-configuration-hook261,9733
(defun evil--jump-hook (&optional command)evil--jump-hook284,11173
(defadvice switch-to-buffer (before evil-jumps activate)switch-to-buffer290,11392
(defadvice split-window-internal (before evil-jumps activate)split-window-internal293,11469

elpa/evil-1.2.14/evil-commands.el,2987
(defun evil--flyspell-overlays-in-p (beg end)evil--flyspell-overlays-in-p556,20699
(defun evil--flyspell-overlay-at (pos forwardp)evil--flyspell-overlay-at565,20933
(defun evil--flyspell-overlay-after (pos limit forwardp)evil--flyspell-overlay-after577,21256
(defun evil--next-flyspell-error (forwardp)evil--next-flyspell-error591,21692
(defun evil-ret-gen (count indent?)evil-ret-gen807,29068
(defun evil-ex-delete-or-yank (should-delete beg end type register count yank-handler)evil-ex-delete-or-yank1447,51960
(defun evil-paste-from-register (register)evil-paste-from-register2001,73029
(defun evil-paste-last-insertion ()evil-paste-last-insertion2019,73666
(defvar evil-macro-buffer nilevil-macro-buffer2031,73962
(defun evil-insert (count &optional vcount skip-empty-lines)evil-insert2224,80599
(defun evil-append (count &optional vcount skip-empty-lines)evil-append2268,82581
(defun evil-insert-resume (count)evil-insert-resume2310,84445
(defun evil-open-above (count)evil-open-above2320,84798
(defun evil-open-below (count)evil-open-below2334,85225
(defun evil-insert-line (count &optional vcount)evil-insert-line2349,85686
(defun evil-append-line (count &optional vcount)evil-append-line2368,86387
(defun evil--self-insert-string (string)evil--self-insert-string2425,88489
(defun evil-copy-from-above (arg)evil-copy-from-above2432,88713
(defun evil-copy-from-below (arg)evil-copy-from-below2448,89359
(defun evil-copy-chars-from-line (n num &optional col)evil-copy-chars-from-line2464,89986
(defun evil-repeat-search (flag)evil-repeat-search2533,92386
(defun evil-fold-action (list action)evil-fold-action2694,98620
(defun evil--mode-p (modes)evil--mode-p2717,99510
(defun evil--show-marks-select-action (entry)evil--show-marks-select-action3143,115226
(defun evil-repeat-ex-search (flag)evil-repeat-ex-search3291,120803
(defun evil-revert-reveal (open-spots)evil-revert-reveal3353,123250
(defun evil-resize-window (new-size &optional horizontal)evil-resize-window3745,139681
(defun evil-get-buffer-tree (wintree)evil-get-buffer-tree3770,140730
(defun evil-restore-window-tree (win tree)evil-restore-window-tree3776,140958
(defun evil-alternate-buffer (&optional window)evil-alternate-buffer3793,141740
(defun evil-mouse-drag-region (start-event)evil-mouse-drag-region4167,154888
(defun evil-mouse-drag-track (start-event &optionalevil-mouse-drag-track4181,155447
(defun evil-mouse--drag-set-mark-and-point (start click click-count)evil-mouse--drag-set-mark-and-point4358,163631
(defun evil-mouse--remap-link-click-p (start-event end-event)evil-mouse--remap-link-click-p4375,164190
(defun evil-mouse-start-end (start end mode)evil-mouse-start-end4390,164923
(defun evil-execute-in-normal-state ()evil-execute-in-normal-state4430,166368
(defun evil-stop-execute-in-emacs-state ()evil-stop-execute-in-emacs-state4451,167233
(defun evil-exit-visual-and-repeat (event)evil-exit-visual-and-repeat4480,168340

elpa/evil-1.2.14/evil-core.el,4836
(defvar evil-mode-buffers)evil-mode-buffers113,4820
(define-minor-mode evil-local-modeevil-local-mode115,4848
(defun turn-on-evil-mode (&optional arg)turn-on-evil-mode157,6802
(defun turn-off-evil-mode (&optional arg)turn-off-evil-mode162,6932
(defun evil-initialize ()evil-initialize173,7451
(define-globalized-minor-mode evil-modeevil-mode181,7737
(defadvice evil-mode (after start-evil activate)evil-mode191,8270
(defun evil-change-state (state &optional message)evil-change-state207,8892
(defmacro evil-save-state (&rest body)evil-save-state215,9223
(defmacro evil-with-state (state &rest body)evil-with-state232,9830
(defun evil-initializing-p (&optional buffer)evil-initializing-p242,10131
(defun evil-initialize-state (&optional state buffer)evil-initialize-state246,10292
(defun evil-initial-state-for-buffer-name (&optional name default)evil-initial-state-for-buffer-name256,10721
(defun evil-disabled-buffer-p (&optional buffer)evil-disabled-buffer-p270,11296
(defun evil-initial-state-for-buffer (&optional buffer default)evil-initial-state-for-buffer274,11458
(defun evil-initial-state (mode &optional default follow-parent checked-modes)evil-initial-state290,12147
(defun evil-set-initial-state (mode state)evil-set-initial-state324,13578
(defadvice set-window-buffer (before evil)set-window-buffer367,15414
(defadvice select-window (after evil activate)select-window378,15831
(defun evil-generate-mode-line-tag (&optional state)evil-generate-mode-line-tag381,15904
(defun evil-refresh-mode-line (&optional state)evil-refresh-mode-line391,16271
(defun evil-activate-input-method ()evil-activate-input-method429,17886
(defun evil-deactivate-input-method ()evil-deactivate-input-method439,18311
(defmacro evil-without-input-method-hooks (&rest body)evil-without-input-method-hooks447,18605
(defadvice toggle-input-method (around evil)toggle-input-method462,19231
(defun evil-initialize-local-keymaps ()evil-initialize-local-keymaps478,19800
(defun evil-make-overriding-map (keymap &optional state copy)evil-make-overriding-map488,20196
(defun evil-make-intercept-map (keymap &optional state aux)evil-make-intercept-map502,20825
(defmacro evil-define-keymap (keymap doc &rest body)evil-define-keymap513,21354
(defun evil-esc-mode (&optional arg)evil-esc-mode590,24300
(defun evil-init-esc (frame)evil-init-esc614,25213
(defun evil-deinit-esc (frame)evil-deinit-esc628,25840
(defun evil-esc (map)evil-esc638,26247
(defun evil-state-p (sym)evil-state-p669,27618
(defun evil-state-keymaps (state &rest excluded)evil-state-keymaps673,27721
(defun evil-normalize-keymaps (&optional state)evil-normalize-keymaps728,30041
(defun evil-mode-for-keymap (keymap &optional default)evil-mode-for-keymap779,32085
(defun evil-keymap-for-mode (mode &optional variable)evil-keymap-for-mode800,33115
(defun evil-state-auxiliary-keymaps (state)evil-state-auxiliary-keymaps810,33548
(defun evil-state-minor-mode-keymaps (state)evil-state-minor-mode-keymaps819,33905
(defun evil-state-overriding-keymaps (&optional state)evil-state-overriding-keymaps826,34165
(defun evil-state-intercept-keymaps (&optional state)evil-state-intercept-keymaps835,34524
(defun evil-set-auxiliary-keymap (map state &optional aux)evil-set-auxiliary-keymap847,35033
(defun evil-get-auxiliary-keymap (map state &optional create ignore-parent)evil-get-auxiliary-keymap862,35619
(defun evil-get-minor-mode-keymap (state mode)evil-get-minor-mode-keymap886,36544
(defun evil-auxiliary-keymap-p (map)evil-auxiliary-keymap-p906,37372
(defun evil-minor-mode-keymap-p (map)evil-minor-mode-keymap-p912,37569
(defun evil-intercept-keymap-p (map &optional state)evil-intercept-keymap-p918,37768
(defun evil-overriding-keymap-p (map &optional state)evil-overriding-keymap-p933,38141
(defun evil-intercept-keymap-state (map)evil-intercept-keymap-state950,38583
(defun evil-overriding-keymap-state (map)evil-overriding-keymap-state962,38900
(defmacro evil-define-key (state keymap key def &rest bindings)evil-define-key974,39219
(defalias 'evil-declare-key 'evil-define-key)evil-declare-key1031,41544
(defun evil-define-key* (state keymap key def &rest bindings)evil-define-key*1033,41591
(defun evil-define-minor-mode-key (state mode key def &rest bindings)evil-define-minor-mode-key1107,44257
(defmacro evil-add-hjkl-bindings (keymap &optional state &rest bindings)evil-add-hjkl-bindings1131,45230
(defun evil-global-set-key (state key def)evil-global-set-key1144,45769
(defun evil-local-set-key (state key def)evil-local-set-key1148,45905
(defadvice use-global-map (after evil activate)use-global-map1154,46210
(defadvice use-local-map (after evil activate)use-local-map1158,46313
(defmacro evil-define-state (state doc &rest body)evil-define-state1162,46415

elpa/evil-1.2.14/evil-command-window.el,966
(defvar evil-search-module)evil-search-module39,1156
(define-derived-mode evil-command-window-mode fundamental-mode "Evil-cmd"evil-command-window-mode41,1185
(defun evil-command-window (hist cmd-key execute-fn)evil-command-window47,1475
(defun evil-command-window-ex (&optional current-command)evil-command-window-ex72,2611
(defun evil-command-window-execute ()evil-command-window-execute81,3015
(defun evil-command-window-ex-execute (result)evil-command-window-ex-execute98,3762
(defun evil-command-window-search-forward ()evil-command-window-search-forward106,4128
(defun evil-command-window-search-backward ()evil-command-window-search-backward117,4603
(defun evil-command-window-search-execute (result forward)evil-command-window-search-execute128,5083
(defun evil-command-window-draw-prefix (&rest ignored)evil-command-window-draw-prefix146,5921
(defun evil-command-window-insert-commands (hist)evil-command-window-insert-commands154,6358

elpa/evil-1.2.14/evil-types.el,106
(defun evil-ex-get-optional-register-and-count (string)evil-ex-get-optional-register-and-count382,13259

elpa/evil-1.2.14/evil-states.el,2474
(defun evil-normal-post-command (&optional command)evil-normal-post-command47,1263
(defun evil-maybe-remove-spaces (&optional do-remove)evil-maybe-remove-spaces74,2340
(defun evil-insert-repeat-hook ()evil-insert-repeat-hook136,4718
(defun evil-cleanup-insert-state ()evil-cleanup-insert-state142,4982
(defmacro evil-define-visual-selection (selection doc &rest body)evil-define-visual-selection200,7460
(defun evil-visual-pre-command (&optional command)evil-visual-pre-command308,11427
(defun evil-visual-post-command (&optional command)evil-visual-post-command325,12154
(defun evil-visual-update-x-selection (&optional buffer)evil-visual-update-x-selection351,13209
(defun evil-visual-activate-hook (&optional command)evil-visual-activate-hook363,13770
(defun evil-visual-deactivate-hook (&optional command)evil-visual-deactivate-hook379,14427
(defun evil-visual-message (&optional selection)evil-visual-message409,15577
(defun evil-visual-select (beg end &optional type dir message)evil-visual-select426,16157
(defun evil-visual-make-selection (mark point &optional type message)evil-visual-make-selection440,16777
(defun evil-visual-make-region (mark point &optional type message)evil-visual-make-region460,17722
(defun evil-visual-expand-region (&optional exclude-newline)evil-visual-expand-region489,18742
(defun evil-visual-contract-region ()evil-visual-contract-region509,19573
(defun evil-visual-refresh (&optional mark point type &rest properties)evil-visual-refresh516,19847
(defun evil-visual-highlight (&optional arg)evil-visual-highlight575,22360
(defun evil-visual-highlight-block (beg end &optional overlays)evil-visual-highlight-block603,23400
(defun evil-visual-range ()evil-visual-range715,28223
(defun evil-visual-direction ()evil-visual-direction727,28674
(defun evil-visual-type (&optional selection)evil-visual-type736,28998
(defun evil-visual-goto-end ()evil-visual-goto-end744,29393
(defun evil-visual-alist ()evil-visual-alist751,29690
(defun evil-visual-selection-function (selection)evil-visual-selection-function757,29900
(defun evil-visual-selection-for-type (type)evil-visual-selection-for-type764,30152
(defun evil-visual-block-corner (&optional corner point mark)evil-visual-block-corner771,30390
(defun evil-half-cursor ()evil-half-cursor834,32597
(defun evil-replace-pre-command ()evil-replace-pre-command863,33418
(defun evil-replace-backspace ()evil-replace-backspace873,33785

elpa/evil-1.2.14/evil-maps.el,30974
(define-key evil-normal-state-map "a" 'evil-append)evil-normal-state-map38,1029
(define-key evil-normal-state-map "A" 'evil-append-line)evil-normal-state-map39,1081
(define-key evil-normal-state-map "c" 'evil-change)evil-normal-state-map40,1138
(define-key evil-normal-state-map "C" 'evil-change-line)evil-normal-state-map41,1190
(define-key evil-normal-state-map "d" 'evil-delete)evil-normal-state-map42,1247
(define-key evil-normal-state-map "D" 'evil-delete-line)evil-normal-state-map43,1299
(define-key evil-normal-state-map "i" 'evil-insert)evil-normal-state-map44,1356
(define-key evil-normal-state-map (kbd "<insert>") 'evil-insert)evil-normal-state-map45,1408
(define-key evil-normal-state-map (kbd "<insertchar>") 'evil-insert)evil-normal-state-map46,1473
(define-key evil-normal-state-map "I" 'evil-insert-line)evil-normal-state-map47,1542
(define-key evil-normal-state-map "J" 'evil-join)evil-normal-state-map48,1599
(define-key evil-normal-state-map "m" 'evil-set-marker)evil-normal-state-map49,1649
(define-key evil-normal-state-map "o" 'evil-open-below)evil-normal-state-map50,1705
(define-key evil-normal-state-map "O" 'evil-open-above)evil-normal-state-map51,1761
(define-key evil-normal-state-map "p" 'evil-paste-after)evil-normal-state-map52,1817
(define-key evil-normal-state-map "P" 'evil-paste-before)evil-normal-state-map53,1874
(define-key evil-normal-state-map "q" 'evil-record-macro)evil-normal-state-map54,1932
(define-key evil-normal-state-map "r" 'evil-replace)evil-normal-state-map55,1990
(define-key evil-normal-state-map "R" 'evil-replace-state)evil-normal-state-map56,2043
(define-key evil-normal-state-map "s" 'evil-substitute)evil-normal-state-map57,2102
(define-key evil-normal-state-map "S" 'evil-change-whole-line)evil-normal-state-map58,2158
(define-key evil-normal-state-map "x" 'evil-delete-char)evil-normal-state-map59,2221
(define-key evil-normal-state-map "X" 'evil-delete-backward-char)evil-normal-state-map60,2278
(define-key evil-normal-state-map [deletechar] 'evil-delete-char)evil-normal-state-map61,2344
(define-key evil-normal-state-map "y" 'evil-yank)evil-normal-state-map62,2410
(define-key evil-normal-state-map "Y" 'evil-yank-line)evil-normal-state-map63,2460
(define-key evil-normal-state-map "&" 'evil-ex-repeat-substitute)evil-normal-state-map64,2515
(define-key evil-normal-state-map "g&" 'evil-ex-repeat-global-substitute)evil-normal-state-map65,2581
(define-key evil-normal-state-map "g8" 'what-cursor-position)evil-normal-state-map66,2655
(define-key evil-normal-state-map "ga" 'what-cursor-position)evil-normal-state-map67,2717
(define-key evil-normal-state-map "gi" 'evil-insert-resume)evil-normal-state-map68,2779
(define-key evil-normal-state-map "gJ" 'evil-join-whitespace)evil-normal-state-map69,2839
(define-key evil-normal-state-map "gq" 'evil-fill-and-move)evil-normal-state-map70,2901
(define-key evil-normal-state-map "gw" 'evil-fill)evil-normal-state-map71,2961
(define-key evil-normal-state-map "gu" 'evil-downcase)evil-normal-state-map72,3012
(define-key evil-normal-state-map "gU" 'evil-upcase)evil-normal-state-map73,3067
(define-key evil-normal-state-map "gf" 'find-file-at-point)evil-normal-state-map74,3120
(define-key evil-normal-state-map "gF" 'evil-find-file-at-point-with-line)evil-normal-state-map75,3180
(define-key evil-normal-state-map "gx" 'browse-url-at-point)evil-normal-state-map76,3255
(define-key evil-normal-state-map "g?" 'evil-rot13)evil-normal-state-map77,3316
(define-key evil-normal-state-map "g~" 'evil-invert-case)evil-normal-state-map78,3368
(define-key evil-normal-state-map "zo" 'evil-open-fold)evil-normal-state-map79,3426
(define-key evil-normal-state-map "zO" 'evil-open-fold-rec)evil-normal-state-map80,3482
(define-key evil-normal-state-map "zc" 'evil-close-fold)evil-normal-state-map81,3542
(define-key evil-normal-state-map "za" 'evil-toggle-fold)evil-normal-state-map82,3599
(define-key evil-normal-state-map "zr" 'evil-open-folds)evil-normal-state-map83,3657
(define-key evil-normal-state-map "zm" 'evil-close-folds)evil-normal-state-map84,3714
(define-key evil-normal-state-map "z=" 'ispell-word)evil-normal-state-map85,3772
(define-key evil-normal-state-map "\C-n" 'evil-paste-pop-next)evil-normal-state-map86,3825
(define-key evil-normal-state-map "\C-p" 'evil-paste-pop)evil-normal-state-map87,3888
(define-key evil-normal-state-map "\C-t" 'pop-tag-mark)evil-normal-state-map88,3946
(define-key evil-normal-state-map (kbd "C-.") 'evil-repeat-pop)evil-normal-state-map89,4002
(define-key evil-normal-state-map (kbd "M-.") 'evil-repeat-pop-next)evil-normal-state-map90,4066
(define-key evil-normal-state-map "." 'evil-repeat)evil-normal-state-map91,4135
(define-key evil-normal-state-map "@" 'evil-execute-macro)evil-normal-state-map92,4187
(define-key evil-normal-state-map "\"" 'evil-use-register)evil-normal-state-map93,4246
(define-key evil-normal-state-map "~" 'evil-invert-char)evil-normal-state-map94,4305
(define-key evil-normal-state-map "=" 'evil-indent)evil-normal-state-map95,4362
(define-key evil-normal-state-map "<" 'evil-shift-left)evil-normal-state-map96,4414
(define-key evil-normal-state-map ">" 'evil-shift-right)evil-normal-state-map97,4470
(define-key evil-normal-state-map "ZZ" 'evil-save-modified-and-close)evil-normal-state-map98,4527
(define-key evil-normal-state-map "ZQ" 'evil-quit)evil-normal-state-map99,4597
(define-key evil-normal-state-map (kbd "DEL") 'evil-backward-char)evil-normal-state-map100,4648
(define-key evil-normal-state-map [escape] 'evil-force-normal-state)evil-normal-state-map101,4715
(define-key evil-normal-state-map [remap cua-paste-pop] 'evil-paste-pop)evil-normal-state-map102,4784
(define-key evil-normal-state-map [remap yank-pop] 'evil-paste-pop)evil-normal-state-map103,4857
(define-key evil-normal-state-map "g;" 'goto-last-change)evil-normal-state-map106,4947
(define-key evil-normal-state-map "g," 'goto-last-change-reverse)evil-normal-state-map107,5005
(define-key evil-normal-state-map "u" 'undo)evil-normal-state-map110,5080
(define-key evil-normal-state-map "\C-r" 'redo)evil-normal-state-map111,5125
(define-prefix-command 'evil-window-map)evil-window-map114,5193
(define-key evil-window-map "b" 'evil-window-bottom-right)evil-window-map115,5234
(define-key evil-window-map "c" 'evil-window-delete)evil-window-map116,5293
(define-key evil-window-map "h" 'evil-window-left)evil-window-map117,5346
(define-key evil-window-map "H" 'evil-window-move-far-left)evil-window-map118,5397
(define-key evil-window-map "j" 'evil-window-down)evil-window-map119,5457
(define-key evil-window-map "J" 'evil-window-move-very-bottom)evil-window-map120,5508
(define-key evil-window-map "k" 'evil-window-up)evil-window-map121,5571
(define-key evil-window-map "K" 'evil-window-move-very-top)evil-window-map122,5620
(define-key evil-window-map "l" 'evil-window-right)evil-window-map123,5680
(define-key evil-window-map "L" 'evil-window-move-far-right)evil-window-map124,5732
(define-key evil-window-map "n" 'evil-window-new)evil-window-map125,5793
(define-key evil-window-map "o" 'delete-other-windows)evil-window-map126,5843
(define-key evil-window-map "p" 'evil-window-mru)evil-window-map127,5898
(define-key evil-window-map "q" 'evil-quit)evil-window-map128,5948
(define-key evil-window-map "r" 'evil-window-rotate-downwards)evil-window-map129,5992
(define-key evil-window-map "R" 'evil-window-rotate-upwards)evil-window-map130,6055
(define-key evil-window-map "s" 'evil-window-split)evil-window-map131,6116
(define-key evil-window-map "S" 'evil-window-split)evil-window-map132,6168
(define-key evil-window-map "t" 'evil-window-top-left)evil-window-map133,6220
(define-key evil-window-map "v" 'evil-window-vsplit)evil-window-map134,6275
(define-key evil-window-map "w" 'evil-window-next)evil-window-map135,6328
(define-key evil-window-map "W" 'evil-window-prev)evil-window-map136,6379
(define-key evil-window-map "+" 'evil-window-increase-height)evil-window-map137,6430
(define-key evil-window-map "-" 'evil-window-decrease-height)evil-window-map138,6492
(define-key evil-window-map "_" 'evil-window-set-height)evil-window-map139,6554
(define-key evil-window-map "<" 'evil-window-decrease-width)evil-window-map140,6611
(define-key evil-window-map ">" 'evil-window-increase-width)evil-window-map141,6672
(define-key evil-window-map "=" 'balance-windows)evil-window-map142,6733
(define-key evil-window-map "|" 'evil-window-set-width)evil-window-map143,6783
(define-key evil-window-map "\C-b" 'evil-window-bottom-right)evil-window-map144,6839
(define-key evil-window-map "\C-c" 'evil-window-delete)evil-window-map145,6901
(define-key evil-window-map (kbd "C-S-h") 'evil-window-move-far-left)evil-window-map146,6957
(define-key evil-window-map (kbd "C-S-j") 'evil-window-move-very-bottom)evil-window-map147,7027
(define-key evil-window-map (kbd "C-S-k") 'evil-window-move-very-top)evil-window-map148,7100
(define-key evil-window-map (kbd "C-S-l") 'evil-window-move-far-right)evil-window-map149,7170
(define-key evil-window-map "\C-n" 'evil-window-new)evil-window-map150,7241
(define-key evil-window-map "\C-o" 'delete-other-windows)evil-window-map151,7294
(define-key evil-window-map "\C-p" 'evil-window-mru)evil-window-map152,7352
(define-key evil-window-map "\C-r" 'evil-window-rotate-downwards)evil-window-map153,7405
(define-key evil-window-map (kbd "C-S-r") 'evil-window-rotate-upwards)evil-window-map154,7471
(define-key evil-window-map "\C-s" 'evil-window-split)evil-window-map155,7542
(define-key evil-window-map (kbd "C-S-s") 'evil-window-split)evil-window-map156,7597
(define-key evil-window-map "\C-t" 'evil-window-top-left)evil-window-map157,7659
(define-key evil-window-map "\C-v" 'evil-window-vsplit)evil-window-map158,7717
(define-key evil-window-map "\C-w" 'evil-window-next)evil-window-map159,7773
(define-key evil-window-map (kbd "C-S-W") 'evil-window-prev)evil-window-map160,7827
(define-key evil-window-map "\C-_" 'evil-window-set-height)evil-window-map161,7888
(define-key evil-window-map "\C-f" 'ffap-other-window)evil-window-map162,7948
(define-key evil-motion-state-map "1" 'digit-argument)evil-motion-state-map168,8149
(define-key evil-motion-state-map "2" 'digit-argument)evil-motion-state-map169,8204
(define-key evil-motion-state-map "3" 'digit-argument)evil-motion-state-map170,8259
(define-key evil-motion-state-map "4" 'digit-argument)evil-motion-state-map171,8314
(define-key evil-motion-state-map "5" 'digit-argument)evil-motion-state-map172,8369
(define-key evil-motion-state-map "6" 'digit-argument)evil-motion-state-map173,8424
(define-key evil-motion-state-map "7" 'digit-argument)evil-motion-state-map174,8479
(define-key evil-motion-state-map "8" 'digit-argument)evil-motion-state-map175,8534
(define-key evil-motion-state-map "9" 'digit-argument)evil-motion-state-map176,8589
(define-key evil-motion-state-map "b" 'evil-backward-word-begin)evil-motion-state-map177,8644
(define-key evil-motion-state-map "B" 'evil-backward-WORD-begin)evil-motion-state-map178,8709
(define-key evil-motion-state-map "e" 'evil-forward-word-end)evil-motion-state-map179,8774
(define-key evil-motion-state-map "E" 'evil-forward-WORD-end)evil-motion-state-map180,8836
(define-key evil-motion-state-map "f" 'evil-find-char)evil-motion-state-map181,8898
(define-key evil-motion-state-map "F" 'evil-find-char-backward)evil-motion-state-map182,8953
(define-key evil-motion-state-map "G" 'evil-goto-line)evil-motion-state-map183,9017
(define-key evil-motion-state-map "h" 'evil-backward-char)evil-motion-state-map184,9072
(define-key evil-motion-state-map "H" 'evil-window-top)evil-motion-state-map185,9131
(define-key evil-motion-state-map "j" 'evil-next-line)evil-motion-state-map186,9187
(define-key evil-motion-state-map "k" 'evil-previous-line)evil-motion-state-map187,9242
(define-key evil-motion-state-map "l" 'evil-forward-char)evil-motion-state-map188,9301
(define-key evil-motion-state-map " " 'evil-forward-char)evil-motion-state-map189,9359
(define-key evil-motion-state-map "K" 'evil-lookup)evil-motion-state-map190,9417
(define-key evil-motion-state-map "L" 'evil-window-bottom)evil-motion-state-map191,9469
(define-key evil-motion-state-map "M" 'evil-window-middle)evil-motion-state-map192,9528
(define-key evil-motion-state-map "n" 'evil-search-next)evil-motion-state-map193,9587
(define-key evil-motion-state-map "N" 'evil-search-previous)evil-motion-state-map194,9644
(define-key evil-motion-state-map "t" 'evil-find-char-to)evil-motion-state-map195,9705
(define-key evil-motion-state-map "T" 'evil-find-char-to-backward)evil-motion-state-map196,9763
(define-key evil-motion-state-map "w" 'evil-forward-word-begin)evil-motion-state-map197,9830
(define-key evil-motion-state-map "W" 'evil-forward-WORD-begin)evil-motion-state-map198,9894
(define-key evil-motion-state-map "y" 'evil-yank)evil-motion-state-map199,9958
(define-key evil-motion-state-map "Y" 'evil-yank-line)evil-motion-state-map200,10008
(define-key evil-motion-state-map "gd" 'evil-goto-definition)evil-motion-state-map201,10063
(define-key evil-motion-state-map "ge" 'evil-backward-word-end)evil-motion-state-map202,10125
(define-key evil-motion-state-map "gE" 'evil-backward-WORD-end)evil-motion-state-map203,10189
(define-key evil-motion-state-map "gg" 'evil-goto-first-line)evil-motion-state-map204,10253
(define-key evil-motion-state-map "gj" 'evil-next-visual-line)evil-motion-state-map205,10315
(define-key evil-motion-state-map "gk" 'evil-previous-visual-line)evil-motion-state-map206,10378
(define-key evil-motion-state-map "g0" 'evil-beginning-of-visual-line)evil-motion-state-map207,10445
(define-key evil-motion-state-map "g_" 'evil-last-non-blank)evil-motion-state-map208,10516
(define-key evil-motion-state-map "g^" 'evil-first-non-blank-of-visual-line)evil-motion-state-map209,10577
(define-key evil-motion-state-map "gm" 'evil-middle-of-visual-line)evil-motion-state-map210,10654
(define-key evil-motion-state-map "g$" 'evil-end-of-visual-line)evil-motion-state-map211,10722
(define-key evil-motion-state-map "g\C-]" 'evil-jump-to-tag)evil-motion-state-map212,10787
(define-key evil-motion-state-map "{" 'evil-backward-paragraph)evil-motion-state-map213,10848
(define-key evil-motion-state-map "}" 'evil-forward-paragraph)evil-motion-state-map214,10912
(define-key evil-motion-state-map "#" 'evil-search-word-backward)evil-motion-state-map215,10975
(define-key evil-motion-state-map "g#" 'evil-search-unbounded-word-backward)evil-motion-state-map216,11041
(define-key evil-motion-state-map "$" 'evil-end-of-line)evil-motion-state-map217,11118
(define-key evil-motion-state-map "%" 'evil-jump-item)evil-motion-state-map218,11175
(define-key evil-motion-state-map "`" 'evil-goto-mark)evil-motion-state-map219,11230
(define-key evil-motion-state-map "'" 'evil-goto-mark-line)evil-motion-state-map220,11285
(define-key evil-motion-state-map "(" 'evil-backward-sentence-begin)evil-motion-state-map221,11345
(define-key evil-motion-state-map ")" 'evil-forward-sentence-begin)evil-motion-state-map222,11414
(define-key evil-motion-state-map "]]" 'evil-forward-section-begin)evil-motion-state-map223,11482
(define-key evil-motion-state-map "][" 'evil-forward-section-end)evil-motion-state-map224,11550
(define-key evil-motion-state-map "[[" 'evil-backward-section-begin)evil-motion-state-map225,11616
(define-key evil-motion-state-map "[]" 'evil-backward-section-end)evil-motion-state-map226,11685
(define-key evil-motion-state-map "[(" 'evil-previous-open-paren)evil-motion-state-map227,11752
(define-key evil-motion-state-map "])" 'evil-next-close-paren)evil-motion-state-map228,11818
(define-key evil-motion-state-map "[{" 'evil-previous-open-brace)evil-motion-state-map229,11881
(define-key evil-motion-state-map "]}" 'evil-next-close-brace)evil-motion-state-map230,11947
(define-key evil-motion-state-map "]s" 'evil-next-flyspell-error)evil-motion-state-map231,12010
(define-key evil-motion-state-map "[s" 'evil-prev-flyspell-error)evil-motion-state-map232,12076
(define-key evil-motion-state-map "*" 'evil-search-word-forward)evil-motion-state-map233,12142
(define-key evil-motion-state-map "g*" 'evil-search-unbounded-word-forward)evil-motion-state-map234,12207
(define-key evil-motion-state-map "," 'evil-repeat-find-char-reverse)evil-motion-state-map235,12283
(define-key evil-motion-state-map "/" 'evil-search-forward)evil-motion-state-map236,12353
(define-key evil-motion-state-map ";" 'evil-repeat-find-char)evil-motion-state-map237,12413
(define-key evil-motion-state-map "?" 'evil-search-backward)evil-motion-state-map238,12475
(define-key evil-motion-state-map "|" 'evil-goto-column)evil-motion-state-map239,12536
(define-key evil-motion-state-map "^" 'evil-first-non-blank)evil-motion-state-map240,12593
(define-key evil-motion-state-map "+" 'evil-next-line-first-non-blank)evil-motion-state-map241,12654
(define-key evil-motion-state-map "_" 'evil-next-line-1-first-non-blank)evil-motion-state-map242,12725
(define-key evil-motion-state-map "-" 'evil-previous-line-first-non-blank)evil-motion-state-map243,12798
(define-key evil-motion-state-map "\C-w" 'evil-window-map)evil-motion-state-map244,12873
(define-key evil-motion-state-map (kbd "C-6") 'evil-switch-to-windows-last-buffer)evil-motion-state-map245,12932
(define-key evil-motion-state-map "\C-]" 'evil-jump-to-tag)evil-motion-state-map246,13015
(define-key evil-motion-state-map (kbd "C-b") 'evil-scroll-page-up)evil-motion-state-map247,13075
(define-key evil-motion-state-map (kbd "C-e") 'evil-scroll-line-down)evil-motion-state-map248,13143
(define-key evil-motion-state-map (kbd "C-f") 'evil-scroll-page-down)evil-motion-state-map249,13213
(define-key evil-motion-state-map (kbd "C-o") 'evil-jump-backward)evil-motion-state-map250,13283
(define-key evil-motion-state-map (kbd "C-y") 'evil-scroll-line-up)evil-motion-state-map251,13350
(define-key evil-motion-state-map (kbd "RET") 'evil-ret)evil-motion-state-map252,13418
(define-key evil-motion-state-map "\\" 'evil-execute-in-emacs-state)evil-motion-state-map253,13475
(define-key evil-motion-state-map "z^" 'evil-scroll-top-line-to-bottom)evil-motion-state-map254,13544
(define-key evil-motion-state-map "z+" 'evil-scroll-bottom-line-to-top)evil-motion-state-map255,13616
(define-key evil-motion-state-map "zt" 'evil-scroll-line-to-top)evil-motion-state-map256,13688
(define-key evil-motion-state-map (vconcat "z" [return]) "zt^")evil-motion-state-map260,13901
(define-key evil-motion-state-map (kbd "z RET") (vconcat "z" [return]))evil-motion-state-map261,13965
(define-key evil-motion-state-map "zz" 'evil-scroll-line-to-center)evil-motion-state-map262,14037
(define-key evil-motion-state-map "z." "zz^")evil-motion-state-map263,14105
(define-key evil-motion-state-map "zb" 'evil-scroll-line-to-bottom)evil-motion-state-map264,14151
(define-key evil-motion-state-map "z-" "zb^")evil-motion-state-map265,14219
(define-key evil-motion-state-map "v" 'evil-visual-char)evil-motion-state-map266,14265
(define-key evil-motion-state-map "V" 'evil-visual-line)evil-motion-state-map267,14322
(define-key evil-motion-state-map "\C-v" 'evil-visual-block)evil-motion-state-map268,14379
(define-key evil-motion-state-map "gv" 'evil-visual-restore)evil-motion-state-map269,14440
(define-key evil-motion-state-map (kbd "C-^") 'evil-buffer)evil-motion-state-map270,14501
(define-key evil-motion-state-map [left] 'evil-backward-char)evil-motion-state-map271,14561
(define-key evil-motion-state-map [right] 'evil-forward-char)evil-motion-state-map272,14623
(define-key evil-motion-state-map [up] 'evil-previous-line)evil-motion-state-map273,14685
(define-key evil-motion-state-map [down] 'evil-next-line)evil-motion-state-map274,14745
(define-key evil-motion-state-map "zl" 'evil-scroll-column-right)evil-motion-state-map275,14803
(define-key evil-motion-state-map [?z right] "zl")evil-motion-state-map276,14869
(define-key evil-motion-state-map "zh" 'evil-scroll-column-left)evil-motion-state-map277,14920
(define-key evil-motion-state-map [?z left] "zh")evil-motion-state-map278,14985
(define-key evil-motion-state-map "zL" 'evil-scroll-right)evil-motion-state-map279,15035
(define-key evil-motion-state-map "zH" 'evil-scroll-left)evil-motion-state-map280,15094
(define-key evil-motion-state-mapevil-motion-state-map281,15152
(define-key evil-outer-text-objects-map "w" 'evil-a-word)evil-outer-text-objects-map285,15257
(define-key evil-outer-text-objects-map "W" 'evil-a-WORD)evil-outer-text-objects-map286,15315
(define-key evil-outer-text-objects-map "s" 'evil-a-sentence)evil-outer-text-objects-map287,15373
(define-key evil-outer-text-objects-map "p" 'evil-a-paragraph)evil-outer-text-objects-map288,15435
(define-key evil-outer-text-objects-map "b" 'evil-a-paren)evil-outer-text-objects-map289,15498
(define-key evil-outer-text-objects-map "(" 'evil-a-paren)evil-outer-text-objects-map290,15557
(define-key evil-outer-text-objects-map ")" 'evil-a-paren)evil-outer-text-objects-map291,15616
(define-key evil-outer-text-objects-map "[" 'evil-a-bracket)evil-outer-text-objects-map292,15675
(define-key evil-outer-text-objects-map "]" 'evil-a-bracket)evil-outer-text-objects-map293,15736
(define-key evil-outer-text-objects-map "B" 'evil-a-curly)evil-outer-text-objects-map294,15797
(define-key evil-outer-text-objects-map "{" 'evil-a-curly)evil-outer-text-objects-map295,15856
(define-key evil-outer-text-objects-map "}" 'evil-a-curly)evil-outer-text-objects-map296,15915
(define-key evil-outer-text-objects-map "<" 'evil-an-angle)evil-outer-text-objects-map297,15974
(define-key evil-outer-text-objects-map ">" 'evil-an-angle)evil-outer-text-objects-map298,16034
(define-key evil-outer-text-objects-map "'" 'evil-a-single-quote)evil-outer-text-objects-map299,16094
(define-key evil-outer-text-objects-map "\"" 'evil-a-double-quote)evil-outer-text-objects-map300,16160
(define-key evil-outer-text-objects-map "`" 'evil-a-back-quote)evil-outer-text-objects-map301,16227
(define-key evil-outer-text-objects-map "t" 'evil-a-tag)evil-outer-text-objects-map302,16291
(define-key evil-outer-text-objects-map "o" 'evil-a-symbol)evil-outer-text-objects-map303,16348
(define-key evil-inner-text-objects-map "w" 'evil-inner-word)evil-inner-text-objects-map304,16408
(define-key evil-inner-text-objects-map "W" 'evil-inner-WORD)evil-inner-text-objects-map305,16470
(define-key evil-inner-text-objects-map "s" 'evil-inner-sentence)evil-inner-text-objects-map306,16532
(define-key evil-inner-text-objects-map "p" 'evil-inner-paragraph)evil-inner-text-objects-map307,16598
(define-key evil-inner-text-objects-map "b" 'evil-inner-paren)evil-inner-text-objects-map308,16665
(define-key evil-inner-text-objects-map "(" 'evil-inner-paren)evil-inner-text-objects-map309,16728
(define-key evil-inner-text-objects-map ")" 'evil-inner-paren)evil-inner-text-objects-map310,16791
(define-key evil-inner-text-objects-map "[" 'evil-inner-bracket)evil-inner-text-objects-map311,16854
(define-key evil-inner-text-objects-map "]" 'evil-inner-bracket)evil-inner-text-objects-map312,16919
(define-key evil-inner-text-objects-map "B" 'evil-inner-curly)evil-inner-text-objects-map313,16984
(define-key evil-inner-text-objects-map "{" 'evil-inner-curly)evil-inner-text-objects-map314,17047
(define-key evil-inner-text-objects-map "}" 'evil-inner-curly)evil-inner-text-objects-map315,17110
(define-key evil-inner-text-objects-map "<" 'evil-inner-angle)evil-inner-text-objects-map316,17173
(define-key evil-inner-text-objects-map ">" 'evil-inner-angle)evil-inner-text-objects-map317,17236
(define-key evil-inner-text-objects-map "'" 'evil-inner-single-quote)evil-inner-text-objects-map318,17299
(define-key evil-inner-text-objects-map "\"" 'evil-inner-double-quote)evil-inner-text-objects-map319,17369
(define-key evil-inner-text-objects-map "`" 'evil-inner-back-quote)evil-inner-text-objects-map320,17440
(define-key evil-inner-text-objects-map "t" 'evil-inner-tag)evil-inner-text-objects-map321,17508
(define-key evil-inner-text-objects-map "o" 'evil-inner-symbol)evil-inner-text-objects-map322,17569
(define-key evil-motion-state-map "gn" 'evil-next-match)evil-motion-state-map323,17633
(define-key evil-motion-state-map "gN" 'evil-previous-match)evil-motion-state-map324,17690
(define-key evil-visual-state-map "A" 'evil-append)evil-visual-state-map337,18055
(define-key evil-visual-state-map "I" 'evil-insert)evil-visual-state-map338,18107
(define-key evil-visual-state-map "o" 'exchange-point-and-mark)evil-visual-state-map339,18159
(define-key evil-visual-state-map "O" 'evil-visual-exchange-corners)evil-visual-state-map340,18223
(define-key evil-visual-state-map "R" 'evil-change)evil-visual-state-map341,18292
(define-key evil-visual-state-map "u" 'evil-downcase)evil-visual-state-map342,18344
(define-key evil-visual-state-map "U" 'evil-upcase)evil-visual-state-map343,18398
(define-key evil-visual-state-map "z=" 'ispell-word)evil-visual-state-map344,18450
(define-key evil-visual-state-map "a" evil-outer-text-objects-map)evil-visual-state-map345,18503
(define-key evil-visual-state-map "i" evil-inner-text-objects-map)evil-visual-state-map346,18570
(define-key evil-visual-state-map (kbd "<insert>") 'undefined)evil-visual-state-map347,18637
(define-key evil-visual-state-map (kbd "<insertchar>") 'undefined)evil-visual-state-map348,18700
(define-key evil-visual-state-map [remap evil-repeat] 'undefined)evil-visual-state-map349,18767
(define-key evil-visual-state-map [escape] 'evil-exit-visual-state)evil-visual-state-map350,18833
(define-key evil-operator-state-map "a" evil-outer-text-objects-map)evil-operator-state-map354,18930
(define-key evil-operator-state-map "i" evil-inner-text-objects-map)evil-operator-state-map355,18999
(defvar evil-insert-state-bindingsevil-insert-state-bindings360,19151
(defun evil-update-insert-state-bindings (&optional _option-name remove force)evil-update-insert-state-bindings383,20028
(define-key evil-insert-state-map [delete] 'delete-char)evil-insert-state-map409,21203
(define-key evil-insert-state-map [escape] 'evil-normal-state)evil-insert-state-map410,21260
(define-key evil-insert-state-mapevil-insert-state-map411,21323
(define-key evil-replace-state-map (kbd "DEL") 'evil-replace-backspace)evil-replace-state-map416,21431
(define-key evil-replace-state-map [escape] 'evil-normal-state)evil-replace-state-map417,21503
(define-key evil-emacs-state-mapevil-emacs-state-map421,21585
(define-key evil-motion-state-map [down-mouse-1] 'evil-mouse-drag-region)evil-motion-state-map428,21785
(define-key evil-visual-state-map [mouse-2] 'evil-exit-visual-and-repeat)evil-visual-state-map429,21859
(define-key evil-normal-state-map [mouse-2] 'mouse-yank-primary)evil-normal-state-map430,21933
(define-key evil-motion-state-map ":" 'evil-ex)evil-motion-state-map433,22005
(define-key evil-motion-state-map "!" 'evil-shell-command)evil-motion-state-map434,22053
(define-key evil-ex-search-keymap "\d" #'evil-ex-delete-backward-char)evil-ex-search-keymap513,25747
(define-key evil-ex-search-keymap "\C-r" 'evil-paste-from-register)evil-ex-search-keymap514,25818
(define-key evil-ex-search-keymap "\C-n" 'next-history-element)evil-ex-search-keymap515,25886
(define-key evil-ex-search-keymap "\C-p" 'previous-history-element)evil-ex-search-keymap516,25950
(define-key evil-ex-completion-map "\d" #'evil-ex-delete-backward-char)evil-ex-completion-map519,26038
(define-key evil-ex-completion-map "\t" #'evil-ex-completion)evil-ex-completion-map520,26110
(define-key evil-ex-completion-map [tab] #'evil-ex-completion)evil-ex-completion-map521,26172
(define-key evil-ex-completion-map [remap completion-at-point] #'evil-ex-completion)evil-ex-completion-map522,26235
(define-key evil-ex-completion-map "\C-a" 'evil-ex-completion)evil-ex-completion-map523,26320
(define-key evil-ex-completion-map "\C-b" 'move-beginning-of-line)evil-ex-completion-map524,26383
(define-key evil-ex-completion-map "\C-c" 'abort-recursive-edit)evil-ex-completion-map525,26450
(define-key evil-ex-completion-map "\C-d" 'evil-ex-completion)evil-ex-completion-map526,26515
(define-key evil-ex-completion-map "\C-g" 'abort-recursive-edit)evil-ex-completion-map527,26578
(define-key evil-ex-completion-map "\C-k" 'evil-insert-digraph)evil-ex-completion-map528,26643
(define-key evil-ex-completion-map "\C-l" 'evil-ex-completion)evil-ex-completion-map529,26707
(define-key evil-ex-completion-map "\C-p" #'previous-complete-history-element)evil-ex-completion-map530,26770
(define-key evil-ex-completion-map "\C-r" 'evil-paste-from-register)evil-ex-completion-map531,26849
(define-key evil-ex-completion-map "\C-n" #'next-complete-history-element)evil-ex-completion-map532,26918
(define-key evil-ex-completion-map "\C-u" 'evil-delete-whole-line)evil-ex-completion-map533,26993
(define-key evil-ex-completion-map "\C-v" #'quoted-insert)evil-ex-completion-map534,27060
(define-key evil-ex-completion-map "\C-w" 'backward-kill-word)evil-ex-completion-map535,27119
(define-key evil-ex-completion-map [escape] 'abort-recursive-edit)evil-ex-completion-map536,27182
(define-key evil-ex-completion-map [S-left] 'backward-word)evil-ex-completion-map537,27249
(define-key evil-ex-completion-map [S-right] 'forward-word)evil-ex-completion-map538,27309
(define-key evil-ex-completion-map [up] 'previous-complete-history-element)evil-ex-completion-map539,27369
(define-key evil-ex-completion-map [down] 'next-complete-history-element)evil-ex-completion-map540,27445
(define-key evil-ex-completion-map [prior] 'previous-history-element)evil-ex-completion-map541,27519
(define-key evil-ex-completion-map [next] 'next-history-element)evil-ex-completion-map542,27589
(define-key evil-ex-completion-map [return] 'exit-minibuffer)evil-ex-completion-map543,27654
(define-key evil-ex-completion-map (kbd "RET") 'exit-minibuffer)evil-ex-completion-map544,27716
(define-key evil-read-key-map (kbd "ESC") #'keyboard-quit)evil-read-key-map547,27799
(define-key evil-read-key-map (kbd "C-]") #'keyboard-quit)evil-read-key-map548,27858
(define-key evil-read-key-map (kbd "C-g") #'keyboard-quit)evil-read-key-map549,27917
(define-key evil-read-key-map (kbd "C-q") #'evil-read-quoted-char)evil-read-key-map550,27976
(define-key evil-read-key-map (kbd "C-v") #'evil-read-quoted-char)evil-read-key-map551,28043
(define-key evil-read-key-map (kbd "C-k") #'evil-read-digraph-char)evil-read-key-map552,28110
(define-key evil-read-key-map "\r" "\n")evil-read-key-map553,28178

elpa/evil-1.2.14/evil-repeat.el,2670
(defmacro evil-without-repeat (&rest body)evil-without-repeat138,6331
(defsubst evil-repeat-recording-p ()evil-repeat-recording-p146,6614
(defun evil-repeat-start ()evil-repeat-start150,6736
(defun evil-repeat-stop ()evil-repeat-stop177,7723
(defun evil-repeat-abort ()evil-repeat-abort189,8170
(defun evil-repeat-reset (flag)evil-repeat-reset193,8258
(defsubst evil-repeat-record-position (&optional pos)evil-repeat-record-position200,8467
(defun evil-repeat-record-buffer ()evil-repeat-record-buffer204,8608
(defmacro evil-save-repeat-info (&rest body)evil-save-repeat-info209,8770
(defun evil-repeat-different-buffer-p (&optional strict)evil-repeat-different-buffer-p225,9215
(defun evil-repeat-type (command &optional default)evil-repeat-type234,9621
(defun evil-repeat-force-abort-p (repeat-type)evil-repeat-force-abort-p242,10001
(defun evil-repeat-record (info)evil-repeat-record252,10610
(defun evil-repeat-start-hook ()evil-repeat-start-hook258,10837
(defun evil-repeat-pre-hook ()evil-repeat-pre-hook267,11151
(defun evil-repeat-post-hook ()evil-repeat-post-hook292,12119
(defun evil-clear-command-keys ()evil-clear-command-keys316,13105
(defun evil-this-command-keys (&optional post-cmd)evil-this-command-keys323,13376
(defun evil-repeat-keystrokes (flag)evil-repeat-keystrokes333,13794
(defun evil-repeat-motion (flag)evil-repeat-motion348,14382
(defun evil-repeat-changes (flag)evil-repeat-changes353,14583
(defun evil-repeat-change-hook (beg end length)evil-repeat-change-hook364,15021
(defun evil-repeat-record-change (relpos ins ndel)evil-repeat-record-change379,15682
(defun evil-repeat-start-record-changes ()evil-repeat-start-record-changes386,15986
(defun evil-repeat-finish-record-changes ()evil-repeat-finish-record-changes391,16153
(defun evil-repeat-insert-at-point (flag)evil-repeat-insert-at-point399,16492
(defun evil-repeat-insert-at-point-hook (beg end length)evil-repeat-insert-at-point-hook409,16920
(defun evil-normalize-repeat-info (repeat-info)evil-normalize-repeat-info420,17431
(defun evil-repeat-visual-char (nfwdlines nfwdchars)evil-repeat-visual-char449,18315
(defun evil-repeat-visual-line (nfwdlines)evil-repeat-visual-line461,18793
(defun evil-repeat-visual-block (nfwdlines nfwdchars)evil-repeat-visual-block471,19207
(defun evil-execute-change (changes rel-point)evil-execute-change483,19709
(defun evil-execute-repeat-info (repeat-info)evil-execute-repeat-info502,20412
(defun evil-execute-repeat-info-with-count (count repeat-info)evil-execute-repeat-info-with-count529,21455
(defadvice read-key-sequence (before evil activate)read-key-sequence628,25164

elpa/evil-1.2.14/evil-autoloads.el,0

elpa/evil-1.2.14/evil-pkg.el,76
(define-package "evil" "1.2.14" "Extensible Vi layer for Emacs.""evil"1,0

elpa/evil-1.2.14/evil.el,0

elpa/evil-1.2.14/evil-integration.el,1079
(defadvice keyboard-quit (before evil activate)keyboard-quit95,2588
(defadvice show-paren-function (around evil disable)show-paren-function107,2931
(defadvice quail-show-key (around evil activate)quail-show-key282,9901
(defadvice describe-char (around evil activate)describe-char286,10021
(defvar evil-ace-jump-active nil)evil-ace-jump-active295,10323
(defmacro evil-enclose-ace-jump-for-motion (&rest body)evil-enclose-ace-jump-for-motion297,10358
(defun evil-ace-jump-exit-recursive-edit ()evil-ace-jump-exit-recursive-edit336,12005
(define-key evil-motion-state-map [remap ace-jump-char-mode] #'evil-ace-jump-char-mode)evil-motion-state-map396,14135
(define-key evil-motion-state-map [remap ace-jump-line-mode] #'evil-ace-jump-line-mode)evil-motion-state-map397,14223
(define-key evil-motion-state-map [remap ace-jump-word-mode] #'evil-ace-jump-word-mode)evil-motion-state-map398,14311
(defmacro evil-enclose-avy-for-motion (&rest body)evil-enclose-avy-for-motion416,15044
(defmacro evil-define-avy-motion (command type)evil-define-avy-motion428,15435

elpa/evil-1.2.14/evil-vars.el,14400
(defvar evil-after-load-hook nilevil-after-load-hook37,1135
(defvar evil-pending-custom-initialize nilevil-pending-custom-initialize44,1343
(defun evil-custom-initialize-pending-reset (var value)evil-custom-initialize-pending-reset51,1674
(defun evil-run-pending-custom-initialize ()evil-run-pending-custom-initialize56,1886
(defun evil-set-toggle-key (key)evil-set-toggle-key66,2252
(defun evil-set-custom-state-maps (var pending-var key make newlist)evil-set-custom-state-maps85,3001
(defun evil-update-pending-maps (&optional file)evil-update-pending-maps102,3747
(defun evil-set-visual-newline-commands (var value)evil-set-visual-newline-commands125,4647
(defun evil-set-custom-motions (var values)evil-set-custom-motions137,5107
(defgroup evil nilevil148,5469
(defcustom evil-auto-indent tevil-auto-indent153,5553
(defcustom evil-shift-width 4evil-shift-width159,5712
(defcustom evil-shift-round tevil-shift-round166,5919
(defcustom evil-indent-convert-tabs tevil-indent-convert-tabs174,6169
(defcustom evil-default-cursor tevil-default-cursor181,6411
(defvar evil-force-cursor nilevil-force-cursor189,6709
(defcustom evil-repeat-move-cursor tevil-repeat-move-cursor192,6790
(defcustom evil-cross-lines nilevil-cross-lines198,6938
(defcustom evil-backspace-join-lines tevil-backspace-join-lines203,7044
(defcustom evil-move-cursor-back tevil-move-cursor-back208,7177
(defcustom evil-move-beyond-eol nilevil-move-beyond-eol213,7315
(defcustom evil-respect-visual-line-mode nilevil-respect-visual-line-mode219,7464
(defcustom evil-repeat-find-to-skip-next tevil-repeat-find-to-skip-next231,7918
(defcustom evil-kbd-macro-suppress-motion-error nilevil-kbd-macro-suppress-motion-error236,8061
(defcustom evil-track-eol tevil-track-eol250,8732
(defcustom evil-mode-line-format 'beforeevil-mode-line-format257,8956
(defcustom evil-mouse-word 'evil-wordevil-mouse-word277,9786
(defcustom evil-bigword "^ \t\r\n"evil-bigword286,10091
(defcustom evil-want-fine-undo nilevil-want-fine-undo293,10307
(defcustom evil-regexp-search tevil-regexp-search312,11200
(defcustom evil-search-wrap tevil-search-wrap317,11321
(defcustom evil-flash-delay 2evil-flash-delay322,11419
(defcustom evil-fold-level 0evil-fold-level327,11528
(defcustom evil-auto-balance-windows tevil-auto-balance-windows332,11616
(defcustom evil-split-window-below nilevil-split-window-below337,11751
(defcustom evil-vsplit-window-right nilevil-vsplit-window-right342,11872
(defcustom evil-esc-delay 0.01evil-esc-delay347,12002
(defvar evil-esc-mode nilevil-esc-mode352,12121
(defvar evil-esc-map nilevil-esc-map355,12192
(defvar evil-inhibit-esc nilevil-inhibit-esc359,12295
(defcustom evil-intercept-esc 'alwaysevil-intercept-esc362,12393
(defcustom evil-show-paren-range 0evil-show-paren-range376,13056
(defcustom evil-ex-hl-update-delay 0.02evil-ex-hl-update-delay382,13230
(defcustom evil-highlight-closing-paren-at-point-statesevil-highlight-closing-paren-at-point-states389,13482
(defcustom evil-kill-on-visual-paste tevil-kill-on-visual-paste401,14019
(defcustom evil-want-C-i-jump tevil-want-C-i-jump408,14260
(defcustom evil-want-C-u-scroll nilevil-want-C-u-scroll424,14905
(defcustom evil-want-C-d-scroll tevil-want-C-d-scroll440,15542
(defcustom evil-want-C-w-delete tevil-want-C-w-delete456,16181
(defcustom evil-want-C-w-in-emacs-state nilevil-want-C-w-in-emacs-state473,16902
(defcustom evil-want-change-word-to-end tevil-want-change-word-to-end489,17565
(defcustom evil-want-Y-yank-to-eol nilevil-want-Y-yank-to-eol494,17681
(defcustom evil-disable-insert-state-bindings nilevil-disable-insert-state-bindings505,18062
(defcustom evil-echo-state tevil-echo-state513,18352
(defcustom evil-complete-all-buffers tevil-complete-all-buffers518,18473
(defcustom evil-complete-next-funcevil-complete-next-func523,18603
(defcustom evil-complete-previous-funcevil-complete-previous-func540,19179
(defcustom evil-complete-next-minibuffer-func 'minibuffer-completeevil-complete-next-minibuffer-func553,19587
(defcustom evil-complete-previous-minibuffer-func 'minibuffer-completeevil-complete-previous-minibuffer-func559,19783
(defcustom evil-complete-next-line-funcevil-complete-next-line-func565,19987
(defcustom evil-complete-previous-line-funcevil-complete-previous-line-func576,20332
(defcustom evil-lookup-func #'womanevil-lookup-func583,20545
(defcustom evil-toggle-key "C-z"evil-toggle-key589,20692
(defcustom evil-default-state 'normalevil-default-state598,20974
(defcustom evil-buffer-regexpsevil-buffer-regexps608,21317
(defcustom evil-emacs-state-modesevil-emacs-state-modes618,21766
(defcustom evil-insert-state-modesevil-insert-state-modes776,25123
(defcustom evil-motion-state-modesevil-motion-state-modes800,25624
(defvar evil-pending-overriding-maps nilevil-pending-overriding-maps819,26018
(defvar evil-pending-intercept-maps nilevil-pending-intercept-maps822,26102
(defcustom evil-overriding-mapsevil-overriding-maps825,26184
(defcustom evil-intercept-mapsevil-intercept-maps854,27302
(defcustom evil-motionsevil-motions871,28037
(defcustom evil-visual-newline-commandsevil-visual-newline-commands971,30265
(defcustom evil-want-visual-char-semi-exclusive nilevil-want-visual-char-semi-exclusive981,30594
(defcustom evil-text-object-change-visual-type tevil-text-object-change-visual-type993,31141
(defgroup evil-cjk nilevil-cjk1002,31492
(defcustom evil-cjk-emacs-word-boundary nilevil-cjk-emacs-word-boundary1007,31570
(defcustom evil-cjk-word-separating-categoriesevil-cjk-word-separating-categories1012,31716
(defcustom evil-cjk-word-combining-categoriesevil-cjk-word-combining-categories1034,32577
(defcustom evil-ex-complete-emacs-commands 'in-turnevil-ex-complete-emacs-commands1054,33286
(defface evil-ex-commands '(( nilevil-ex-commands1064,33728
(defface evil-ex-info '(( ((supports :slant))evil-ex-info1070,33924
(defcustom evil-ex-visual-char-range nilevil-ex-visual-char-range1076,34115
(defcustom evil-symbol-word-search nilevil-symbol-word-search1087,34541
(defcustom evil-magic tevil-magic1093,34732
(defcustom evil-ex-search-vim-style-regexp nilevil-ex-search-vim-style-regexp1104,35192
(defcustom evil-ex-interactive-search-highlight 'all-windowsevil-ex-interactive-search-highlight1113,35581
(defcustom evil-ex-search-persistent-highlight tevil-ex-search-persistent-highlight1120,35914
(defcustom evil-ex-search-case 'smartevil-ex-search-case1125,36061
(defcustom evil-ex-substitute-case nilevil-ex-substitute-case1135,36465
(defcustom evil-ex-search-interactive tevil-ex-search-interactive1147,36991
(defcustom evil-ex-search-highlight-all tevil-ex-search-highlight-all1152,37097
(defcustom evil-ex-substitute-highlight-all tevil-ex-substitute-highlight-all1158,37246
(defcustom evil-ex-substitute-interactive-replace tevil-ex-substitute-interactive-replace1163,37391
(defcustom evil-ex-substitute-global nilevil-ex-substitute-global1169,37567
(defface evil-ex-search '((t :inherit isearch))evil-ex-search1180,38067
(defface evil-ex-lazy-highlight '((t :inherit lazy-highlight))evil-ex-lazy-highlight1184,38165
(defface evil-ex-substitute-matches '((t :inherit lazy-highlight))evil-ex-substitute-matches1188,38306
(defface evil-ex-substitute-replacement '((((supports :underline))evil-ex-substitute-replacement1192,38435
(defcustom evil-command-window-height 8evil-command-window-height1198,38681
(defcustom evil-display-shell-error-in-message nilevil-display-shell-error-in-message1204,38860
(defcustom evil-want-abbrev-expand-on-insert-exit tevil-want-abbrev-expand-on-insert-exit1213,39212
(defmacro evil-define-local-var (symbol &optional initvalue docstring)evil-define-local-var1221,39428
(defvar evil-execute-in-emacs-state-buffer nilevil-execute-in-emacs-state-buffer1253,40603
(defvar evil-global-keymaps-alist nilevil-global-keymaps-alist1263,41025
(defvar evil-local-keymaps-alist nilevil-local-keymaps-alist1268,41207
(defvar evil-minor-mode-keymaps-alist nilevil-minor-mode-keymaps-alist1274,41431
(defvar evil-state-properties nilevil-state-properties1280,41664
(defvar evil-command-properties nilevil-command-properties1291,42099
(defvar evil-change-commands '(evil-change)evil-change-commands1294,42187
(defvar evil-transient-vars '(cua-mode transient-mark-mode select-active-regions)evil-transient-vars1299,42414
(defvar evil-transient-vals nilevil-transient-vals1302,42555
(defvar evil-type-properties nilevil-type-properties1311,42927
(defvar evil-interactive-alist nilevil-interactive-alist1317,43156
(defvar evil-this-macro nilevil-this-macro1334,43683
(defvar evil-last-register nilevil-last-register1346,43955
(defvar evil-inhibit-operator nilevil-inhibit-operator1349,44020
(defvar evil-inhibit-operator-value nilevil-inhibit-operator-value1354,44191
(defvar evil-operator-range-beginning nilevil-operator-range-beginning1359,44375
(defvar evil-operator-range-end nilevil-operator-range-end1362,44459
(defvar evil-operator-range-type nilevil-operator-range-type1365,44531
(defvar evil-operator-range-motion nilevil-operator-range-motion1368,44605
(defvar evil-restriction-stack nilevil-restriction-stack1371,44683
(defconst evil-suppress-map (make-keymap)evil-suppress-map1397,45730
(defvar evil-read-key-map (make-sparse-keymap)evil-read-key-map1401,45881
(defvar evil-repeat-ring (make-ring 10)evil-repeat-ring1408,46181
(defvar evil-repeat-typesevil-repeat-types1411,46285
(defvar evil-recording-repeat nilevil-recording-repeat1419,46525
(defvar evil-recording-current-command nilevil-recording-current-command1422,46600
(defvar evil-repeat-changes nilevil-repeat-changes1425,46706
(defvar evil-repeat-info nilevil-repeat-info1428,46799
(defvar evil-repeat-buffer nilevil-repeat-buffer1431,46881
(defvar evil-repeat-pos nilevil-repeat-pos1435,47009
(defvar evil-repeat-keys nilevil-repeat-keys1439,47123
(defvar evil-last-repeat nilevil-last-repeat1442,47201
(defvar evil-repeat-count nilevil-repeat-count1450,47545
(defvar evil-maybe-remove-spaces nilevil-maybe-remove-spaces1453,47626
(defvar evil-insert-skip-empty-lines nilevil-insert-skip-empty-lines1468,48305
(defvar evil-write-echo-area nilevil-write-echo-area1487,48951
(defvar evil-last-find nilevil-last-find1491,49068
(defvar evil-last-paste nilevil-last-paste1495,49177
(defvar evil-last-insertion nilevil-last-insertion1515,50077
(defvar evil-last-small-deletion nilevil-last-small-deletion1518,50148
(defvar evil-was-yanked-without-register tevil-was-yanked-without-register1522,50260
(defvar evil-paste-count nilevil-paste-count1526,50419
(defvar evil-temporary-undo nilevil-temporary-undo1529,50503
(defvar evil-in-single-undo nilevil-in-single-undo1537,50777
(defvar evil-flash-timer nilevil-flash-timer1540,50871
(defvar evil-search-prompt nilevil-search-prompt1543,50941
(defvar evil-search-forward-history nilevil-search-forward-history1546,51011
(defvar evil-search-backward-history nilevil-search-backward-history1549,51086
(defvar evil-inner-text-objects-map (make-sparse-keymap)evil-inner-text-objects-map1552,51163
(defvar evil-outer-text-objects-map (make-sparse-keymap)evil-outer-text-objects-map1555,51257
(defvar evil-window-map (make-sparse-keymap)evil-window-map1558,51351
(defvar evil-visual-alist nilevil-visual-alist1612,53296
(defvar evil-visual-x-select-timeout 0.1evil-visual-x-select-timeout1619,53534
(defvar evil-fold-listevil-fold-list1629,53959
(defvar evil-ex-map (make-sparse-keymap)evil-ex-map1726,57232
(defvar evil-ex-completion-map (make-sparse-keymap)evil-ex-completion-map1730,57352
(defvar evil-ex-initial-input nilevil-ex-initial-input1733,57436
(defvar evil-ex-shell-argument-initialized nilevil-ex-shell-argument-initialized1738,57624
(defvar evil-ex-commands nilevil-ex-commands1742,57799
(defvar evil-ex-history nilevil-ex-history1745,57886
(defvar evil-ex-current-buffer nilevil-ex-current-buffer1748,57944
(defvar evil-ex-expression nilevil-ex-expression1751,58023
(defvar evil-ex-tree nilevil-ex-tree1754,58081
(defvar evil-ex-command nilevil-ex-command1757,58129
(defvar evil-ex-previous-command nilevil-ex-previous-command1760,58187
(defvar evil-ex-cmd nilevil-ex-cmd1763,58266
(defvar evil-ex-point nilevil-ex-point1766,58327
(defvar evil-ex-range nilevil-ex-range1769,58420
(defvar evil-ex-bang nilevil-ex-bang1772,58489
(defvar evil-ex-argument nilevil-ex-argument1775,58566
(defvar evil-ex-argument-handler nilevil-ex-argument-handler1778,58641
(defvar evil-ex-argument-types nilevil-ex-argument-types1781,58733
(defvar evil-previous-shell-command nilevil-previous-shell-command1784,58813
(defvar evil-ex-search-history nilevil-ex-search-history1788,58896
(defvar evil-ex-search-direction nilevil-ex-search-direction1791,58973
(defvar evil-ex-search-count nilevil-ex-search-count1794,59083
(defvar evil-ex-search-start-point nilevil-ex-search-start-point1797,59155
(defvar evil-ex-search-overlay nilevil-ex-search-overlay1800,59236
(defvar evil-ex-search-pattern nilevil-ex-search-pattern1803,59320
(defvar evil-ex-search-offset nilevil-ex-search-offset1806,59386
(defvar evil-ex-search-match-beg nilevil-ex-search-match-beg1809,59450
(defvar evil-ex-search-match-end nilevil-ex-search-match-end1812,59535
(defvar evil-ex-substitute-pattern nilevil-ex-substitute-pattern1815,59614
(defvar evil-ex-substitute-replacement nilevil-ex-substitute-replacement1818,59688
(defvar evil-ex-substitute-flags nilevil-ex-substitute-flags1821,59770
(defvar evil-ex-substitute-current-replacement nilevil-ex-substitute-current-replacement1824,59840
(defvar evil-ex-last-was-search nilevil-ex-last-was-search1827,59921
(defvar evil-command-window-current-buffer nilevil-command-window-current-buffer1833,60083
(defvar evil-ex-search-keymap (make-sparse-keymap)evil-ex-search-keymap1849,60688
(define-key evil-ex-search-keymap [escape] 'abort-recursive-edit)evil-ex-search-keymap1851,60775
(defconst evil-versionevil-version1854,60905
(defcustom evil-want-integration tevil-want-integration1874,61691
(defcustom evil-want-keybinding tevil-want-keybinding1880,61850
(defcustom evil-want-minibuffer nilevil-want-minibuffer1890,62124
(defun evil-version ()evil-version1900,62459

elpa/evil-1.2.14/evil-development.el,0

elpa/evil-1.2.14/evil-macros.el,989
(defun evil-motion-range (motion &optional count type)evil-motion-range42,1253
(defmacro evil-define-motion (motion args &rest body)evil-define-motion112,4608
(defmacro evil-narrow-to-line (&rest body)evil-narrow-to-line155,6218
(defun evil-eobp (&optional pos)evil-eobp194,7667
(defun evil-move-beginning (count forward &optional backward)evil-move-beginning216,8179
(defun evil-move-end (count forward &optional backward inclusive)evil-move-end259,9702
(defun evil-text-object-make-linewise (range)evil-text-object-make-linewise318,11846
(defmacro evil-define-text-object (object args &rest body)evil-define-text-object354,13348
(defmacro evil-define-operator (operator args &rest body)evil-define-operator444,17356
(defun evil-operator-range (&optional return-type)evil-operator-range526,20750
(defmacro evil-define-type (type doc &rest body)evil-define-type612,24385
(defmacro evil-define-interactive-code (code &rest body)evil-define-interactive-code723,29572

elpa/evil-1.2.14/evil-digraphs.el,234
(defgroup evil-digraphs nilevil-digraphs32,908
(defcustom evil-digraphs-table-user nilevil-digraphs-table-user37,1018
(defconst evil-digraphs-tableevil-digraphs-table48,1436
(defun evil-digraph (digraph)evil-digraph1711,41189

elpa/tree-mode-20151104.1331/tree-mode-pkg.el,272
(define-package "tree-mode" "20151104.1331" "A mode to manage tree widgets" 'nil :commit "b06078826d5875d74b0e7b7ac47b0d0917610534" :keywords '("help" "convenience" "widget") :authors '((nil . "wenbinye@163.com")) :maintainer '(nil . "wenbinye@163.com"))"tree-mode"2,31

elpa/tree-mode-20151104.1331/tree-mode-autoloads.el,0

elpa/tree-mode-20151104.1331/tree-mode.el,3510
(defvar tree-mode-version "1.0")tree-mode-version40,1330
(defvar tree-mode-list nil)tree-mode-list42,1364
(defvar tree-mode-maptree-mode-map44,1393
(defvar tree-mode-menu nil)tree-mode-menu68,2399
(defvar tree-mode-insert-tree-hook niltree-mode-insert-tree-hook90,3288
(defvar tree-mode-delete-tree-hook niltree-mode-delete-tree-hook94,3421
(defun tree-mode-nearest-widget ()tree-mode-nearest-widget98,3556
(defun tree-mode-scan-tree ()tree-mode-scan-tree107,3803
(define-minor-mode tree-minor-modetree-minor-mode122,4329
(define-derived-mode tree-mode nil "Tree"tree-mode132,4559
(defun tree-mode-icon-create (icon)tree-mode-icon-create142,4947
(defun tree-mode-insert (tree &optional before)tree-mode-insert146,5098
(defun tree-mode-delete (tree)tree-mode-delete158,5556
(defun tree-mode-tree-buffer (tree)tree-mode-tree-buffer164,5750
(defun tree-mode-kill-buffer (&rest ignore)tree-mode-kill-buffer168,5879
(defun tree-mode-root-treep (tree)tree-mode-root-treep174,6079
(defun tree-mode-tree-linep ()tree-mode-tree-linep179,6214
(defun tree-mode-root-linep ()tree-mode-root-linep184,6403
(defun tree-mode-icon-current-line ()tree-mode-icon-current-line190,6651
(defun tree-mode-button-current-line ()tree-mode-button-current-line196,6805
(defun tree-mode-parent-current-line ()tree-mode-parent-current-line207,7143
(defun tree-mode-widget-root (wid)tree-mode-widget-root218,7544
(defun tree-mode-tree-ap (&optional pos)tree-mode-tree-ap225,7721
(defun tree-mode-opened-tree (tree)tree-mode-opened-tree233,7932
(defun tree-mode-open-tree (tree path)tree-mode-open-tree244,8363
(defun tree-mode-reflesh-tree (tree)tree-mode-reflesh-tree259,8955
(defun tree-mode-reflesh-parent (widget &rest ignore)tree-mode-reflesh-parent271,9449
(defun tree-mode-next-node (arg)tree-mode-next-node276,9648
(defun tree-mode-previous-node (arg)tree-mode-previous-node281,9755
(defun tree-mode-next-sib (arg)tree-mode-next-sib285,9846
(defun tree-mode-previous-sib (arg)tree-mode-previous-sib314,10890
(defun tree-mode-goto-root ()tree-mode-goto-root319,11014
(defun tree-mode-goto-parent (arg)tree-mode-goto-parent327,11206
(defun tree-mode-find-node (tree path)tree-mode-find-node341,11672
(defun tree-mode-collapse-other-except ()tree-mode-collapse-other-except372,12996
(defun tree-mode-collapse-children (tree)tree-mode-collapse-children389,13684
(defun tree-mode-expand-children (tree)tree-mode-expand-children396,13896
(defun tree-mode-toggle-expand-node (&rest ignore)tree-mode-toggle-expand-node404,14157
(defun tree-mode-toggle-expand (&optional arg)tree-mode-toggle-expand408,14281
(defun tree-mode-expand-level (level)tree-mode-expand-level422,14773
(defun tree-mode-expand-level-1 (tree level)tree-mode-expand-level-1432,15150
(defun tree-mode-node-tag (node)tree-mode-node-tag443,15499
(defun tree-mode-backup-args (widget)tree-mode-backup-args449,15690
(defun tree-mode-filter-children (widget filter)tree-mode-filter-children457,16039
(defun tree-mode-sort-by-nchild (wid1 wid2)tree-mode-sort-by-nchild467,16486
(defun tree-mode-sort-children (widget sorter)tree-mode-sort-children471,16603
(defun tree-mode-sort-by-tag (arg)tree-mode-sort-by-tag478,16868
(defun tree-mode-delete-match (regexp)tree-mode-delete-match490,17362
(defun tree-mode-keep-match (regexp)tree-mode-keep-match500,17712
(defun tree-mode-reflesh ()tree-mode-reflesh510,18049
(defun tree-mode-delete-tree ()tree-mode-delete-tree518,18257

elpa/nord-theme-0.4.0/nord-theme.el,418
(deftheme nord "An arctic, north-bluish clean and elegant theme")nord45,1715
(defgroup nord nilnord47,1782
(defcustom nord-comment-brightness 10nord-comment-brightness52,1920
(defcustom nord-region-highlight nilnord-region-highlight67,2687
(defcustom nord-uniform-mode-lines nilnord-uniform-mode-lines75,3005
(defun nord-theme--brightened-comment-color (percent)nord-theme--brightened-comment-color82,3414

elpa/nord-theme-0.4.0/nord-theme-pkg.el,367
(define-package "nord-theme" "0.4.0" "An arctic, north-bluish clean and elegant theme" '((emacs "24")) :commit "ba8f9b98a5028d3ec8c44e43889e7edda9a3b8dd" :authors '(("Arctic Ice Studio" . "development@arcticicestudio.com")) :maintainer '("Arctic Ice Studio" . "development@arcticicestudio.com") :url "https://github.com/arcticicestudio/nord-emacs")"nord-theme"2,31

elpa/nord-theme-0.4.0/nord-theme-autoloads.el,0

elpa/avy-0.5.0/avy.el,9679
(defgroup avy nilavy62,2368
(defcustom avy-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l)avy-keys67,2458
(defconst avy--key-typeavy--key-type82,3135
(defcustom avy-keys-alist nilavy-keys-alist102,3694
(defcustom avy-orders-alist '((avy-goto-char . avy-order-closest))avy-orders-alist108,3911
(defcustom avy-wordsavy-words115,4164
(defcustom avy-style 'at-fullavy-style148,6330
(defcustom avy-styles-alist nilavy-styles-alist159,6707
(defcustom avy-dispatch-alistavy-dispatch-alist189,8046
(defcustom avy-background nilavy-background212,8876
(defcustom avy-all-windows tavy-all-windows216,8997
(defcustom avy-case-fold-search tavy-case-fold-search224,9227
(defcustom avy-word-punc-regexp "[!-/:-@[-`{-~]"avy-word-punc-regexp228,9324
(defcustom avy-goto-word-0-regexp "\\b\\sw"avy-goto-word-0-regexp235,9584
(defcustom avy-ignored-modes '(image-mode doc-view-mode pdf-view-mode)avy-ignored-modes243,9893
(defcustom avy-single-candidate-jump tavy-single-candidate-jump248,10097
(defcustom avy-del-last-char-by '(8 127)avy-del-last-char-by252,10217
(defvar avy-ring (make-ring 20)avy-ring258,10422
(defvar avy-translate-char-function #'identityavy-translate-char-function261,10495
(defface avy-lead-face-0avy-lead-face-0266,10685
(defface avy-lead-face-1avy-lead-face-1270,10820
(defface avy-lead-face-2avy-lead-face-2274,10938
(defface avy-lead-faceavy-lead-face278,11051
(defface avy-background-faceavy-background-face282,11166
(defface avy-goto-char-timer-faceavy-goto-char-timer-face286,11284
(defconst avy-lead-faces '(avy-lead-faceavy-lead-faces290,11421
(defvar avy-key-to-char-alist '((left . ?◀)avy-key-to-char-alist298,11724
(defmacro avy-multipop (lst n)avy-multipop310,12227
(defun avy--de-bruijn (keys n)avy--de-bruijn320,12499
(defun avy--path-alist-1 (lst seq-len keys)avy--path-alist-1341,13282
(defun avy-order-closest (x)avy-order-closest386,15364
(defvar avy-command nilavy-command389,15424
(defun avy-tree (lst keys)avy-tree393,15527
(defun avy-subdiv (n b)avy-subdiv419,16487
(defun avy-traverse (tree walker &optional recur-key)avy-traverse433,16843
(defvar avy-action nilavy-action448,17307
(defun avy-handler-default (char)avy-handler-default451,17375
(defun avy-show-dispatch-help ()avy-show-dispatch-help469,18043
(defvar avy-handler-function 'avy-handler-defaultavy-handler-function482,18536
(defvar avy-current-path ""avy-current-path485,18647
(defun avy-mouse-event-window (char)avy-mouse-event-window488,18734
(defun avy-read (tree display-fn cleanup-fn)avy-read498,19182
(defun avy-read-de-bruijn (lst keys)avy-read-de-bruijn531,20545
(defun avy-read-words (lst words)avy-read-words566,22133
(defun avy-window-list ()avy-window-list617,24275
(defcustom avy-all-windows-alt nilavy-all-windows-alt631,24653
(defmacro avy-dowindows (flip &rest body)avy-dowindows638,24949
(defun avy-resume ()avy-resume650,25406
(defmacro avy-with (command &rest body)avy-with655,25528
(defun avy-action-goto (pt)avy-action-goto672,26110
(defun avy-forward-item ()avy-forward-item680,26336
(defun avy-action-mark (pt)avy-action-mark686,26453
(defun avy-action-copy (pt)avy-action-copy692,26563
(defun avy-action-yank (pt)avy-action-yank707,26964
(defun avy-action-kill-move (pt)avy-action-kill-move713,27081
(defun avy-action-kill-stay (pt)avy-action-kill-stay721,27269
(defun avy-action-zap-to-char (pt)avy-action-zap-to-char734,27535
(defun avy-action-teleport (pt)avy-action-teleport740,27684
(defun avy-action-ispell (pt)avy-action-ispell752,27964
(defvar avy-pre-action #'avy-pre-action-defaultavy-pre-action771,28446
(defun avy-pre-action-default (res)avy-pre-action-default774,28548
(defun avy--process-1 (candidates overlay-fn &optional cleanup-fn)avy--process-1784,28857
(defvar avy-last-candidates nilavy-last-candidates807,29754
(defun avy--last-candidates-cycle (advancer)avy--last-candidates-cycle810,29823
(defun avy-prev ()avy-prev825,30342
(defun avy-next ()avy-next833,30556
(defun avy-process (candidates &optional overlay-fn cleanup-fn)avy-process841,30782
(define-obsolete-function-alias 'avy--process 'avy-processavy--process873,31985
(defvar avy--overlays-back nilavy--overlays-back876,32056
(defun avy--make-backgrounds (wnd-list)avy--make-backgrounds879,32139
(defun avy--done ()avy--done893,32690
(defun avy--visible-p (s)avy--visible-p899,32842
(defun avy--next-visible-point ()avy--next-visible-point905,33049
(defun avy--next-invisible-point ()avy--next-invisible-point912,33296
(defun avy--find-visible-regions (rbeg rend)avy--find-visible-regions919,33536
(defun avy--regex-candidates (regex &optional beg end pred group)avy--regex-candidates935,34141
(defvar avy--overlay-offset 0avy--overlay-offset959,35218
(defvar avy--overlays-lead nilavy--overlays-lead962,35293
(defun avy--remove-leading-chars ()avy--remove-leading-chars965,35363
(defun avy--old-str (pt wnd)avy--old-str970,35512
(defun avy--overlay (str beg end wnd &optional compose-fn)avy--overlay978,35776
(defcustom avy-highlight-first nilavy-highlight-first1009,37235
(defun avy--key-to-char (c)avy--key-to-char1014,37407
(defun avy-candidate-beg (leaf)avy-candidate-beg1022,37661
(defun avy-candidate-end (leaf)avy-candidate-end1031,37857
(defun avy-candidate-wnd (leaf)avy-candidate-wnd1040,38051
(defun avy--overlay-pre (path leaf)avy--overlay-pre1046,38176
(defun avy--overlay-at (path leaf)avy--overlay-at1064,38843
(defun avy--overlay-at-full (path leaf)avy--overlay-at-full1085,39518
(defun avy--overlay-post (path leaf)avy--overlay-post1156,42174
(defun avy--update-offset-and-str (offset str lep)avy--update-offset-and-str1174,42842
(defun avy--style-fn (style)avy--style-fn1215,44556
(defun avy--generic-jump (regex window-flip &optional beg end)avy--generic-jump1242,45535
(defun avy-goto-char (char &optional arg)avy-goto-char1257,46044
(defun avy-goto-char-in-line (char)avy-goto-char-in-line1270,46435
(defun avy-goto-char-2 (char1 char2 &optional arg beg end)avy-goto-char-21280,46736
(defun avy-goto-char-2-above (char1 char2 &optional arg)avy-goto-char-2-above1301,47429
(defun avy-goto-char-2-below (char1 char2 &optional arg)avy-goto-char-2-below1316,48032
(defun avy-isearch ()avy-isearch1331,48657
(defun avy-goto-word-0 (arg &optional beg end)avy-goto-word-01343,49024
(defun avy-goto-word-0-above (arg)avy-goto-word-0-above1355,49435
(defun avy-goto-word-0-below (arg)avy-goto-word-0-below1363,49739
(defun avy-goto-word-1 (char &optional arg beg end symbol)avy-goto-word-11372,50074
(defun avy-goto-word-1-above (char &optional arg)avy-goto-word-1-above1399,51155
(defun avy-goto-word-1-below (char &optional arg)avy-goto-word-1-below1411,51677
(defun avy-goto-symbol-1 (char &optional arg)avy-goto-symbol-11423,52221
(defun avy-goto-symbol-1-above (char &optional arg)avy-goto-symbol-1-above1433,52612
(defun avy-goto-symbol-1-below (char &optional arg)avy-goto-symbol-1-below1445,53150
(defvar subword-backward-regexp)subword-backward-regexp1457,53741
(defcustom avy-subword-extra-word-chars '(?{ ?= ?} ?* ?: ?> ?<)avy-subword-extra-word-chars1459,53775
(defun avy-goto-subword-0 (&optional arg predicate beg end)avy-goto-subword-01465,54020
(defun avy-goto-subword-1 (char &optional arg)avy-goto-subword-11505,55738
(defun avy-goto-word-or-subword-1 ()avy-goto-word-or-subword-11519,56247
(defvar visual-line-mode)visual-line-mode1527,56536
(defcustom avy-indent-line-overlay nilavy-indent-line-overlay1529,56563
(defun avy--line-cands (&optional arg beg end bottom-up)avy--line-cands1533,56742
(defun avy--linum-strings ()avy--linum-strings1566,58133
(defvar linum-available)linum-available1581,58659
(defvar linum-overlays)linum-overlays1582,58684
(defvar linum-format)linum-format1583,58708
(define-minor-mode avy-linum-modeavy-linum-mode1586,58776
(defun avy--linum-update-window (_ win)avy--linum-update-window1597,59126
(defun avy--line (&optional arg beg end bottom-up)avy--line1649,61582
(defun avy-goto-line (&optional arg)avy-goto-line1665,62190
(defun avy-goto-line-above (&optional offset bottom-up)avy-goto-line-above1702,63457
(defun avy-goto-line-below (&optional offset bottom-up)avy-goto-line-below1718,63992
(defcustom avy-line-insert-style 'aboveavy-line-insert-style1734,64526
(defun avy-goto-end-of-line (&optional arg)avy-goto-end-of-line1741,64720
(defun avy-copy-line (arg)avy-copy-line1748,64897
(defun avy-move-line (arg)avy-move-line1774,65789
(defun avy-copy-region (arg)avy-copy-region1799,66615
(defun avy-move-region ()avy-move-region1829,67663
(defun avy-kill-region (arg)avy-kill-region1849,68281
(defun avy-kill-ring-save-region (arg)avy-kill-ring-save-region1883,69689
(defun avy-kill-whole-line (arg)avy-kill-whole-line1913,70933
(defun avy-kill-ring-save-whole-line (arg)avy-kill-ring-save-whole-line1938,71786
(defun avy-setup-default ()avy-setup-default1963,72696
(defcustom avy-timeout-seconds 0.5avy-timeout-seconds1968,72849
(defcustom avy-enter-times-out tavy-enter-times-out1972,72951
(defun avy--read-candidates (&optional re-builder)avy--read-candidates1976,73080
(defun avy-goto-char-timer (&optional arg)avy-goto-char-timer2062,77082
(defun avy-push-mark ()avy-push-mark2073,77499
(defun avy-pop-mark ()avy-pop-mark2081,77721
(defvar org-reverse-note-order)org-reverse-note-order2100,78342
(defvar org-after-refile-insert-hook)org-after-refile-insert-hook2105,78492
(defun avy-org-refile-as-child ()avy-org-refile-as-child2107,78531
(defun avy-org-goto-heading-timer (&optional arg)avy-org-goto-heading-timer2128,79687

elpa/avy-0.5.0/avy-autoloads.el,0

elpa/avy-0.5.0/avy-pkg.el,372
(define-package "avy" "0.5.0" "Jump to arbitrary positions in visible text and select text quickly." '((emacs "24.1") (cl-lib "0.5")) :commit "f2cf43b5372a6e2a7c101496c47caaf03338de36" :keywords '("point" "location") :authors '(("Oleh Krehel" . "ohwoeowho@gmail.com")) :maintainer '("Oleh Krehel" . "ohwoeowho@gmail.com") :url "https://github.com/abo-abo/avy")"avy"2,31

elpa/gruvbox-theme-1.28.0/gruvbox-light-hard-theme.el,0

elpa/gruvbox-theme-1.28.0/gruvbox-dark-medium-theme.el,0

elpa/gruvbox-theme-1.28.0/gruvbox-theme-autoloads.el,0

elpa/gruvbox-theme-1.28.0/gruvbox.el,242
(defvar gruvbox-screenshot-command "scrot -u %s%s.png"gruvbox-screenshot-command67,2243
(defun gruvbox-screenshot (prefix)gruvbox-screenshot71,2436
(defmacro gruvbox-deftheme (name description palette &rest body)gruvbox-deftheme85,2942

elpa/gruvbox-theme-1.28.0/gruvbox-dark-soft-theme.el,0

elpa/gruvbox-theme-1.28.0/gruvbox-light-medium-theme.el,0

elpa/gruvbox-theme-1.28.0/gruvbox-light-soft-theme.el,0

elpa/gruvbox-theme-1.28.0/gruvbox-theme.el,0

elpa/gruvbox-theme-1.28.0/gruvbox-theme-pkg.el,101
(define-package "gruvbox-theme" "1.28.0" "A retro-groove colour theme for Emacs""gruvbox-theme"1,0

elpa/gruvbox-theme-1.28.0/gruvbox-dark-hard-theme.el,0

elpa/emms-5.2/emms-info-ogginfo.el,298
(defgroup emms-info-ogginfo nilemms-info-ogginfo31,1003
(defcustom emms-info-ogginfo-coding-system 'utf-8emms-info-ogginfo-coding-system36,1129
(defcustom emms-info-ogginfo-program-name "ogginfo"emms-info-ogginfo-program-name41,1282
(defun emms-info-ogginfo (track)emms-info-ogginfo46,1427

elpa/emms-5.2/emms-maint.el,0

elpa/emms-5.2/emms-lyrics.el,3685
(defgroup emms-lyrics nilemms-lyrics54,1680
(defcustom emms-lyrics-display-on-modeline temms-lyrics-display-on-modeline58,1751
(defcustom emms-lyrics-display-on-minibuffer nilemms-lyrics-display-on-minibuffer63,1882
(defcustom emms-lyrics-display-buffer nilemms-lyrics-display-buffer68,2018
(defcustom emms-lyrics-dir "~/music/lyrics"emms-lyrics-dir73,2174
(defcustom emms-lyrics-display-format " %s "emms-lyrics-display-format80,2404
(defcustom emms-lyrics-coding-system nilemms-lyrics-coding-system85,2523
(defcustom emms-lyrics-mode-hook nilemms-lyrics-mode-hook96,2913
(defcustom emms-lyrics-find-lyric-function 'emms-lyrics-find-lyricemms-lyrics-find-lyric-function101,3040
(defcustom emms-lyrics-scroll-p temms-lyrics-scroll-p106,3185
(defcustom emms-lyrics-scroll-timer-interval 0.4emms-lyrics-scroll-timer-interval114,3416
(defvar emms-lyrics-display-p temms-lyrics-display-p122,3591
(defvar emms-lyrics-mode-line-string ""emms-lyrics-mode-line-string125,3661
(defvar emms-lyrics-buffer nilemms-lyrics-buffer128,3722
(defvar emms-lyrics-chinese-url "http://mp3.baidu.com/m?f=ms&rn=10&tn=baidump3lyric&ct=150994944&word=%s&lm=-1"emms-lyrics-chinese-url131,3782
(defvar emms-lyrics-latin-url "http://lyrics.wikia.com/%s%s"emms-lyrics-latin-url135,3992
(defun emms-lyrics-enable ()emms-lyrics-enable141,4206
(defun emms-lyrics-disable ()emms-lyrics-disable148,4356
(defun emms-lyrics-toggle ()emms-lyrics-toggle155,4509
(defun emms-lyrics-toggle-display-on-minibuffer ()emms-lyrics-toggle-display-on-minibuffer162,4673
(defun emms-lyrics-toggle-display-on-modeline ()emms-lyrics-toggle-display-on-modeline172,5015
(defun emms-lyrics-toggle-display-buffer ()emms-lyrics-toggle-display-buffer183,5387
(defun emms-lyrics (arg)emms-lyrics193,5696
(defun emms-lyrics-visit-lyric ()emms-lyrics-visit-lyric215,6792
(defvar emms-lyrics-alist nilemms-lyrics-alist258,8937
(defvar emms-lyrics-timers nilemms-lyrics-timers262,9073
(defvar emms-lyrics-start-time nilemms-lyrics-start-time265,9139
(defvar emms-lyrics-pause-time nilemms-lyrics-pause-time268,9203
(defvar emms-lyrics-elapsed-time 0emms-lyrics-elapsed-time271,9267
(defvar emms-lyrics-scroll-timers nilemms-lyrics-scroll-timers274,9345
(defun emms-lyrics-read-file (file &optional catchup)emms-lyrics-read-file277,9413
(defun emms-lyrics-create-buffer ()emms-lyrics-create-buffer321,11273
(defun emms-lyrics-start ()emms-lyrics-start335,11772
(defun emms-lyrics-catchup (lrc)emms-lyrics-catchup353,12309
(defun emms-lyrics-stop ()emms-lyrics-stop366,12834
(defun emms-lyrics-pause ()emms-lyrics-pause377,13151
(defun emms-lyrics-seek (sec)emms-lyrics-seek393,13646
(defun emms-lyrics-sync (sec)emms-lyrics-sync409,14208
(defun emms-lyrics-set-timer ()emms-lyrics-set-timer415,14397
(defun emms-lyrics-mode-line ()emms-lyrics-mode-line442,15558
(defun emms-lyrics-restore-mode-line ()emms-lyrics-restore-mode-line451,15852
(defun emms-lyrics-display-handler (lyric next-lyric line diff)emms-lyrics-display-handler457,16035
(defun emms-lyrics-display (lyric line)emms-lyrics-display464,16427
(defun emms-lyrics-find-lyric (file)emms-lyrics-find-lyric491,17406
(defun emms-lyrics-scroll (lyric next-lyric diff)emms-lyrics-scroll509,18146
(defvar emms-lyrics-mode-mapemms-lyrics-mode-map536,19130
(defun emms-lyrics-rem* (x y)emms-lyrics-rem*544,19391
(defun emms-lyrics-insert-time ()emms-lyrics-insert-time554,19636
(defun emms-lyrics-next-line ()emms-lyrics-next-line568,20127
(defun emms-lyrics-previous-line ()emms-lyrics-previous-line573,20233
(define-derived-mode emms-lyrics-mode nil "Emms Lyric"emms-lyrics-mode578,20348

elpa/emms-5.2/emms-info-metaflac.el,382
(defvar emms-info-metaflac-version "0.1 $Revision: 1.10 $"emms-info-metaflac-version43,1502
(defgroup emms-info-metaflac nilemms-info-metaflac48,1669
(defcustom emms-info-metaflac-program-name "metaflac"emms-info-metaflac-program-name53,1815
(defcustom emms-info-metaflac-optionsemms-info-metaflac-options58,1960
(defun emms-info-metaflac (track)emms-info-metaflac72,2336

elpa/emms-5.2/emms-browser.el,15369
(defvar emms-browser-mode-hook nilemms-browser-mode-hook299,11018
(defgroup emms-browser nilemms-browser302,11083
(defcustom emms-browser-default-browse-typeemms-browser-default-browse-type308,11223
(defcustom emms-browser-make-name-functionemms-browser-make-name-function314,11357
(defcustom emms-browser-get-track-field-functionemms-browser-get-track-field-function322,11671
(defcustom emms-browser-coversemms-browser-covers335,12306
(defcustom emms-browser-covers-file-extensionsemms-browser-covers-file-extensions345,12732
(defconst emms-browser--covers-filename nilemms-browser--covers-filename353,13032
(defcustom emms-browser-default-covers nilemms-browser-default-covers356,13118
(defcustom emms-browser-comparison-testemms-browser-comparison-test361,13261
(defcustom emms-browser-track-sort-functionemms-browser-track-sort-function370,13507
(defcustom emms-browser-alpha-sort-functionemms-browser-alpha-sort-function377,13692
(defcustom emms-browser-album-sort-functionemms-browser-album-sort-function384,13928
(defcustom emms-browser-show-display-hook nilemms-browser-show-display-hook391,14129
(defcustom emms-browser-hide-display-hook nilemms-browser-hide-display-hook396,14280
(defcustom emms-browser-tracks-added-hook nilemms-browser-tracks-added-hook401,14426
(defcustom emms-browser-filter-tracks-hook nilemms-browser-filter-tracks-hook406,14568
(defcustom emms-browser-filter-changed-hook nilemms-browser-filter-changed-hook411,14715
(defcustom emms-browser-delete-files-hook nilemms-browser-delete-files-hook416,14846
(defvar emms-browser-buffer nilemms-browser-buffer423,15077
(defvar emms-browser-buffer-name "*EMMS Browser*"emms-browser-buffer-name426,15151
(defvar emms-browser-search-buffer-name "*emms-browser-search*"emms-browser-search-buffer-name429,15232
(defvar emms-browser-top-level-hash nilemms-browser-top-level-hash432,15326
(defvar emms-browser-top-level-type nilemms-browser-top-level-type436,15475
(defvar emms-browser-current-indent nilemms-browser-current-indent440,15623
(defvar emms-browser-current-filter-name nilemms-browser-current-filter-name443,15729
(defvar emms-browser-mode-mapemms-browser-mode-map446,15829
(defvar emms-browser-search-mode-mapemms-browser-search-mode-map493,18482
(defun emms-browser ()emms-browser523,19640
(defun emms-browser-create-or-focus (type)emms-browser-create-or-focus529,19792
(defun emms-browser-create ()emms-browser-create547,20473
(defun emms-browser-mode (&optional no-update)emms-browser-mode553,20685
(defun emms-browser-new-buffer ()emms-browser-new-buffer569,21094
(defun emms-browser-clear ()emms-browser-clear574,21270
(defun emms-browser-get-buffer ()emms-browser-get-buffer584,21581
(defun emms-browser-ensure-browser-buffer ()emms-browser-ensure-browser-buffer592,21895
(defun emms-browser-bury-buffer ()emms-browser-bury-buffer596,22047
(defmacro emms-browser-add-category (name type)emms-browser-add-category610,22572
(defun emms-browse-by (type)emms-browse-by619,22874
(defun emms-browser-get-track-field (track type)emms-browser-get-track-field644,23903
(defun emms-browser-get-track-field-simple (track type)emms-browser-get-track-field-simple650,24125
(defun emms-browser-get-track-field-albumartist (track type)emms-browser-get-track-field-albumartist656,24340
(defun emms-browser-get-track-field-use-directory-name (track type)emms-browser-get-track-field-use-directory-name675,25307
(defun emms-browser-get-artist-from-path (track)emms-browser-get-artist-from-path681,25501
(defun emms-browser-make-hash-by (type)emms-browser-make-hash-by690,25805
(defun emms-browser-render-hash (db type)emms-browser-render-hash708,26565
(defun case-fold-string= (a b)case-fold-string=726,27279
(defun case-fold-string-hash (a)case-fold-string-hash729,27361
(defun emms-browser-insert-top-level-entry (name tracks type)emms-browser-insert-top-level-entry736,27544
(defun emms-browser-show-empty-cache-message ()emms-browser-show-empty-cache-message742,27807
(defun emms-browser-next-mapping-type (current-mapping)emms-browser-next-mapping-type770,28576
(defun emms-browser-make-bdata-tree (type level tracks name)emms-browser-make-bdata-tree781,29060
(defun emms-browser-make-bdata-tree-recurse (type level tracks)emms-browser-make-bdata-tree-recurse789,29289
(defun emms-browser-make-name (entry type)emms-browser-make-name813,30276
(defun emms-browser-track-number (track)emms-browser-track-number827,30717
(defun emms-browser-disc-number (track)emms-browser-disc-number839,31141
(defun emms-browser-year-number (track)emms-browser-year-number848,31471
(defun emms-browser-track-duration (track)emms-browser-track-duration857,31749
(defun emms-browser-make-bdata (data name type level)emms-browser-make-bdata867,32224
(defun emms-browser-make-alist (type tracks)emms-browser-make-alist878,32652
(defun emms-browser-make-sorted-alist (type tracks)emms-browser-make-sorted-alist900,33502
(defun emms-browser-bdata-level (bdata)emms-browser-bdata-level912,33917
(defun emms-browser-bdata-name (bdata)emms-browser-bdata-name915,33987
(defun emms-browser-bdata-type (bdata)emms-browser-bdata-type918,34055
(defun emms-browser-bdata-data (bdata)emms-browser-bdata-data921,34123
(defun emms-browser-bdata-p (obj)emms-browser-bdata-p924,34191
(defmacro emms-browser-sort-cadr (sort-func)emms-browser-sort-cadr932,34426
(defmacro emms-browser-sort-car (sort-func)emms-browser-sort-car940,34744
(defun emms-browser-sort-by-track (alist)emms-browser-sort-by-track948,35058
(defun emms-browser-sort-by-name (alist)emms-browser-sort-by-name956,35335
(defun emms-browser-sort-by-year-or-name (alist)emms-browser-sort-by-year-or-name964,35602
(defun emms-browser-sort-by-year-or-name-p (a b)emms-browser-sort-by-year-or-name-p969,35777
(defun emms-browser-sort-alist (alist type)emms-browser-sort-alist979,36148
(defun emms-browser-bdata-at-point ()emms-browser-bdata-at-point1001,36896
(defun emms-browser-data-at-point ()emms-browser-data-at-point1007,37118
(defun emms-browser-level-at-point ()emms-browser-level-at-point1012,37288
(defun emms-browser-tracks-at-point (&optional node)emms-browser-tracks-at-point1016,37426
(defun emms-browser-expand-one-level ()emms-browser-expand-one-level1030,37900
(defun emms-browser-insert-data-item (data-item)emms-browser-insert-data-item1040,38202
(defun emms-browser-find-entry-more-than-level (level)emms-browser-find-entry-more-than-level1047,38473
(defun emms-browser-subitems-visible ()emms-browser-subitems-visible1061,38930
(defun emms-browser-subitems-exist ()emms-browser-subitems-exist1070,39252
(defun emms-browser-move-up-level (&optional direction)emms-browser-move-up-level1076,39450
(defun emms-browser-toggle-subitems ()emms-browser-toggle-subitems1093,40026
(defun emms-browser-toggle-subitems-recursively ()emms-browser-toggle-subitems-recursively1103,40372
(defun emms-browser-show-subitems ()emms-browser-show-subitems1120,41222
(defun emms-browser-kill-subitems ()emms-browser-kill-subitems1126,41425
(defun emms-browser-playlist-insert-group (bdata)emms-browser-playlist-insert-group1144,42155
(defun emms-browser-playlist-insert-track (bdata)emms-browser-playlist-insert-track1153,42516
(defun emms-browser-playlist-insert-bdata (bdata starting-level)emms-browser-playlist-insert-bdata1161,42815
(defun emms-browser-expand-to-level (level)emms-browser-expand-to-level1189,43884
(defun emms-browser-mark-and-collapse ()emms-browser-mark-and-collapse1215,44858
(defun emms-browser-find-top-level ()emms-browser-find-top-level1223,45121
(defun emms-browser-mark-entry ()emms-browser-mark-entry1228,45284
(defun emms-browser-pop-mark ()emms-browser-pop-mark1237,45584
(defun emms-browser-go-to-parent ()emms-browser-go-to-parent1251,46107
(defun emms-browser-delete-current-node ()emms-browser-delete-current-node1260,46443
(defun emms-browser-delete-node-if-empty ()emms-browser-delete-node-if-empty1266,46659
(defun emms-browser-add-tracks ()emms-browser-add-tracks1294,47832
(defun emms-browser-add-tracks-and-play ()emms-browser-add-tracks-and-play1319,48843
(defun emms-isearch-buffer ()emms-isearch-buffer1333,49324
(defun emms-browser-next-non-track (&optional direction)emms-browser-next-non-track1341,49537
(defun emms-browser-prev-non-track ()emms-browser-prev-non-track1351,49885
(defun emms-browser-expand-all ()emms-browser-expand-all1356,50020
(defun emms-browser-expand-to-level-2 ()emms-browser-expand-to-level-21361,50131
(defun emms-browser-expand-to-level-3 ()emms-browser-expand-to-level-31367,50302
(defun emms-browser-expand-to-level-4 ()emms-browser-expand-to-level-41373,50474
(defun emms-browser-collapse-all ()emms-browser-collapse-all1379,50648
(defvar emms-browser-seed-pending temms-browser-seed-pending1386,50837
(defun emms-browser-goto-random ()emms-browser-goto-random1389,50908
(defun emms-browser-view-in-dired (&optional bdata)emms-browser-view-in-dired1399,51287
(defun emms-browser-remove-tracks (&optional delete start end)emms-browser-remove-tracks1412,51873
(defalias 'emms-browser-delete-files 'emms-browser-remove-tracks)emms-browser-delete-files1463,53948
(defun emms-browser-clear-playlist ()emms-browser-clear-playlist1466,54060
(defun emms-browser-lookup (field url)emms-browser-lookup1471,54173
(defun emms-browser-lookup-wikipedia (field)emms-browser-lookup-wikipedia1480,54437
(defun emms-browser-lookup-artist-on-wikipedia ()emms-browser-lookup-artist-on-wikipedia1484,54571
(defun emms-browser-lookup-composer-on-wikipedia ()emms-browser-lookup-composer-on-wikipedia1488,54686
(defun emms-browser-lookup-performer-on-wikipedia ()emms-browser-lookup-performer-on-wikipedia1492,54805
(defun emms-browser-lookup-album-on-wikipedia ()emms-browser-lookup-album-on-wikipedia1496,54926
(defcustom emms-browser-switch-to-playlist-on-addemms-browser-switch-to-playlist-on-add1505,55188
(defun emms-smart-browse ()emms-smart-browse1512,55362
(defun emms-browser-get-linked-buffer ()emms-browser-get-linked-buffer1567,57561
(defun emms-browser-get-linked-window ()emms-browser-get-linked-window1575,57824
(defun emms-browser-display-playlist ()emms-browser-display-playlist1581,58023
(defun emms-browser-hide-linked-window ()emms-browser-hide-linked-window1607,58967
(defun emms-browser-filter-cache (search-list)emms-browser-filter-cache1623,59535
(defun emms-browser-matches-p (track search-list)emms-browser-matches-p1639,59979
(defun emms-browser-search-buffer-go ()emms-browser-search-buffer-go1651,60382
(defun emms-browser-search (fields)emms-browser-search1660,60707
(defun emms-browser-render-search (tracks)emms-browser-render-search1672,61102
(defun emms-browser-kill-search ()emms-browser-kill-search1681,61459
(defun emms-browser-search-by-artist ()emms-browser-search-by-artist1686,61580
(defun emms-browser-search-by-composer ()emms-browser-search-by-composer1690,61677
(defun emms-browser-search-by-performer ()emms-browser-search-by-performer1694,61778
(defun emms-browser-search-by-title ()emms-browser-search-by-title1698,61881
(defun emms-browser-search-by-album ()emms-browser-search-by-album1702,61976
(defun emms-browser-search-by-names ()emms-browser-search-by-names1706,62071
(defun emms-browser--build-cover-filename ()emms-browser--build-cover-filename1714,62343
(defun emms-browser-get-cover-from-album (bdata &optional size)emms-browser-get-cover-from-album1727,62853
(defun emms-browser-get-cover-from-path (path &optional size)emms-browser-get-cover-from-path1734,63200
(defun emms-browser-insert-cover (path)emms-browser-insert-cover1762,64408
(defun emms-browser-make-cover (path)emms-browser-make-cover1765,64492
(defun emms-browser-get-cover-str (path size)emms-browser-get-cover-str1784,65249
(defun emms-browser-bdata-first-track (bdata)emms-browser-bdata-first-track1796,65647
(defun emms-browser-insert-format (bdata)emms-browser-insert-format1806,66031
(defun emms-browser-make-indent (level)emms-browser-make-indent1812,66167
(defun emms-browser-format-elem (format-string elem)emms-browser-format-elem1817,66285
(defun emms-browser-format-line (bdata &optional target)emms-browser-format-line1820,66375
(defun emms-browser-get-face (bdata)emms-browser-get-face1889,69137
(defun emms-browser-format-spec (format specification)emms-browser-format-spec1904,69726
(defvar emms-browser-default-format "%i%n"emms-browser-default-format1946,71427
(defvar emms-browser-info-title-formatemms-browser-info-title-format1950,71500
(defvar emms-browser-playlist-info-title-formatemms-browser-playlist-info-title-format1952,71586
(defun emms-browser-get-format (bdata target)emms-browser-get-format1955,71682
(defun emms-browser-track-artist-and-title-format (bdata fmt)emms-browser-track-artist-and-title-format1970,72165
(defvar emms-browser-info-album-formatemms-browser-info-album-format1981,72500
(defvar emms-browser-playlist-info-album-formatemms-browser-playlist-info-album-format1983,72575
(defun emms-browser-year-and-album-fmt (bdata fmt)emms-browser-year-and-album-fmt1986,72664
(defun emms-browser-year-and-album-fmt-med (bdata fmt)emms-browser-year-and-album-fmt-med1995,72873
(defmacro emms-browser-make-face (name dark-col light-col height)emms-browser-make-face2008,73212
(defvar emms-browser-filters nilemms-browser-filters2036,74344
(defmacro emms-browser-make-filter (name func)emms-browser-make-filter2039,74412
(defun emms-browser-set-filter (filter)emms-browser-set-filter2058,75138
(defun emms-browser-refilter (filter)emms-browser-refilter2065,75433
(defun emms-browser-next-filter (&optional reverse)emms-browser-next-filter2071,75659
(defun emms-browser-previous-filter ()emms-browser-previous-filter2084,76080
(defun emms-browser-filter-only-dir (path)emms-browser-filter-only-dir2089,76208
(defun emms-browser-filter-only-type (type)emms-browser-filter-only-type2096,76489
(defun emms-browser-filter-only-recent (days)emms-browser-filter-only-recent2103,76747
(defvar emms-browser-thumbnail-directory (expand-file-name "thumbnails" emms-directory)emms-browser-thumbnail-directory2125,77697
(defvar emms-browser-thumbnail-small-size 128emms-browser-thumbnail-small-size2128,77834
(defvar emms-browser-thumbnail-medium-size 256emms-browser-thumbnail-medium-size2130,77986
(defvar emms-browser-thumbnail-large-size 1024 ; Emms does not use large covers as of 2017-11-26.emms-browser-thumbnail-large-size2132,78139
(defun emms-browser-thumbnail-filter-default (dir)emms-browser-thumbnail-filter-default2135,78344
(defun emms-browser-thumbnail-filter-all (dir)emms-browser-thumbnail-filter-all2150,78964
(defvar emms-browser-thumbnail-filter 'emms-browser-thumbnail-filter-defaultemms-browser-thumbnail-filter2158,79315
(defvar emms-browser-thumbnail-convert-program (executable-find "convert")emms-browser-thumbnail-convert-program2163,79615
(defun emms-browser-cache-thumbnail (dir size)emms-browser-cache-thumbnail2166,79733
(defvar emms-browser--cache-hash nilemms-browser--cache-hash2229,82789
(defun emms-browser-cache-thumbnail-async (dir size)emms-browser-cache-thumbnail-async2232,82880
(defun emms-browser-clear-cache-hash ()emms-browser-clear-cache-hash2246,83532

elpa/emms-5.2/emms-info-libtag.el,387
(defgroup emms-info-libtag nilemms-info-libtag67,2080
(defvar emms-info-libtag-coding-system 'utf-8)emms-info-libtag-coding-system71,2155
(defcustom emms-info-libtag-program-name "emms-print-metadata"emms-info-libtag-program-name73,2203
(defcustom emms-info-libtag-known-extensionsemms-info-libtag-known-extensions78,2351
(defun emms-info-libtag (track)emms-info-libtag86,2605

elpa/emms-5.2/emms-info-mp3info.el,465
(defvar emms-info-mp3info-version "0.2 $Revision: 1.10 $"emms-info-mp3info-version43,1415
(defgroup emms-info-mp3info nilemms-info-mp3info47,1579
(defcustom emms-info-mp3info-coding-system 'utf-8emms-info-mp3info-coding-system52,1724
(defcustom emms-info-mp3info-program-name "mp3info"emms-info-mp3info-program-name57,1877
(defcustom emms-info-mp3find-argumentsemms-info-mp3find-arguments62,2022
(defun emms-info-mp3info (track)emms-info-mp3info76,2536

elpa/emms-5.2/emms-playlist-mode.el,3491
(defvar emms-playlist-mode-hook nilemms-playlist-mode-hook43,1331
(defvar emms-playlist-mode-selected-overlay nilemms-playlist-mode-selected-overlay46,1398
(defvar emms-playlist-mode-switched-buffer nilemms-playlist-mode-switched-buffer49,1504
(defvar emms-playlist-mode-popup-enabled nilemms-playlist-mode-popup-enabled52,1628
(defvar emms-playlist-mode-kill-whole-line-p temms-playlist-mode-kill-whole-line-p55,1732
(defgroup emms-playlist-mode nilemms-playlist-mode61,1910
(defcustom emms-playlist-mode-open-playlists nilemms-playlist-mode-open-playlists66,2040
(defcustom emms-playlist-mode-window-width 25emms-playlist-mode-window-width73,2296
(defcustom emms-playlist-mode-center-when-go nilemms-playlist-mode-center-when-go79,2478
(defface emms-playlist-track-faceemms-playlist-track-face89,2836
(defface emms-playlist-selected-faceemms-playlist-selected-face100,3174
(defvar emms-playlist-mode-mapemms-playlist-mode-map115,3667
(defmacro emms-playlist-mode-move-wrapper (name fun)emms-playlist-mode-move-wrapper156,5796
(defun emms-playlist-mode-bury-buffer ()emms-playlist-mode-bury-buffer176,6375
(defun emms-playlist-mode-current-kill ()emms-playlist-mode-current-kill185,6631
(defun emms-playlist-mode-last ()emms-playlist-mode-last194,6970
(defun emms-playlist-mode-center-current ()emms-playlist-mode-center-current208,7387
(defun emms-playlist-mode-play-current-track ()emms-playlist-mode-play-current-track215,7648
(defun emms-playlist-mode-play-smart ()emms-playlist-mode-play-smart226,7967
(defun emms-playlist-mode-switch-buffer ()emms-playlist-mode-switch-buffer251,8952
(defun emms-playlist-mode-insert-newline ()emms-playlist-mode-insert-newline264,9476
(defun emms-playlist-mode-undo ()emms-playlist-mode-undo270,9616
(defun emms-playlist-mode-add-contents ()emms-playlist-mode-add-contents276,9739
(defun emms-playlist-mode-goto-dired-at-point ()emms-playlist-mode-goto-dired-at-point320,11506
(defun emms-playlist-mode-between-p (p a b)emms-playlist-mode-between-p336,12068
(defun emms-playlist-mode-kill-entire-track ()emms-playlist-mode-kill-entire-track342,12205
(defun emms-playlist-mode-kill-track ()emms-playlist-mode-kill-track349,12387
(defun emms-playlist-mode-kill ()emms-playlist-mode-kill367,12977
(defun emms-playlist-mode-correct-previous-yank ()emms-playlist-mode-correct-previous-yank383,13559
(defun emms-playlist-mode-yank ()emms-playlist-mode-yank390,13745
(defun emms-playlist-mode-yank-pop ()emms-playlist-mode-yank-pop399,13959
(defun emms-playlist-mode-overlay-selected ()emms-playlist-mode-overlay-selected410,14281
(defun emms-playlist-mode-open-buffer (filename)emms-playlist-mode-open-buffer433,15272
(defun emms-playlist-mode-load-playlist ()emms-playlist-mode-load-playlist456,16028
(defun emms-playlist-mode-insert-track (track &optional no-newline)emms-playlist-mode-insert-track473,16642
(defun emms-playlist-mode-update-track-function ()emms-playlist-mode-update-track-function486,17206
(defun emms-playlist-mode-go ()emms-playlist-mode-go509,18020
(defun emms ()emms522,18518
(defun emms-playlist-mode-go-popup (&optional window-width)emms-playlist-mode-go-popup532,18836
(defun emms-playlist-mode-next (arg)emms-playlist-mode-next545,19338
(defun emms-playlist-mode-previous (arg)emms-playlist-mode-previous563,20164
(defun emms-playlist-mode-startup ()emms-playlist-mode-startup567,20263
(defun emms-playlist-mode ()emms-playlist-mode589,21034

elpa/emms-5.2/emms-volume-pulse.el,300
(defcustom emms-volume-pulse-sink 0emms-volume-pulse-sink50,1652
(defcustom emms-volume-pulse-max-volume 100emms-volume-pulse-max-volume59,1932
(defun emms-volume--pulse-get-volume ()emms-volume--pulse-get-volume65,2053
(defun emms-volume-pulse-change (amount)emms-volume-pulse-change95,3001

elpa/emms-5.2/emms-player-xine.el,251
(define-emms-simple-player xine '(file url)xine37,1224
(defun emms-player-xine-pause ()emms-player-xine-pause58,1888
(defun emms-player-xine-seek (secs)emms-player-xine-seek63,2029
(defun emms-nearest-value (val list)emms-nearest-value77,2640

elpa/emms-5.2/emms-mode-line.el,1355
(defgroup emms-mode-line nilemms-mode-line37,1123
(defcustom emms-mode-line-mode-line-function 'emms-mode-line-playlist-currentemms-mode-line-mode-line-function42,1247
(defcustom emms-mode-line-titlebar-function nilemms-mode-line-titlebar-function47,1496
(defcustom emms-mode-line-format " [ %s ] "emms-mode-line-format52,1717
(defun emms-mode-line-playlist-current ()emms-mode-line-playlist-current57,1870
(defvar emms-mode-line-active-p nilemms-mode-line-active-p62,2055
(defvar emms-mode-line-string "")emms-mode-line-string64,2134
(defvar emms-mode-line-initial-titlebar frame-title-format)emms-mode-line-initial-titlebar66,2169
(defun emms-mode-line (arg)emms-mode-line68,2230
(defun emms-mode-line-enable ()emms-mode-line-enable94,3381
(defun emms-mode-line-disable ()emms-mode-line-disable101,3534
(defun emms-mode-line-toggle ()emms-mode-line-toggle108,3691
(defun emms-mode-line-alter (&optional track)emms-mode-line-alter115,3860
(defun emms-mode-line-alter-mode-line ()emms-mode-line-alter-mode-line123,4116
(defun emms-mode-line-alter-titlebar ()emms-mode-line-alter-titlebar131,4386
(defun emms-mode-line-blank ()emms-mode-line-blank138,4629
(defun emms-mode-line-restore-mode-line ()emms-mode-line-restore-mode-line144,4824
(defun emms-mode-line-restore-titlebar ()emms-mode-line-restore-titlebar151,5052

elpa/emms-5.2/emms-player-mpv.el,5837
(defcustom emms-player-mpvemms-player-mpv67,2474
(defcustom emms-player-mpv-command-name "mpv"emms-player-mpv-command-name79,2815
(defcustom emms-player-mpv-parametersemms-player-mpv-parameters84,2968
(defcustom emms-player-mpv-environment ()emms-player-mpv-environment97,3574
(defcustom emms-player-mpv-ipc-method nilemms-player-mpv-ipc-method105,4012
(defcustom emms-player-mpv-ipc-socketemms-player-mpv-ipc-socket119,4748
(defvar emms-player-mpv-ipc-proc nil) ; to avoid warnings while keeping useful defs at the topemms-player-mpv-ipc-proc127,5035
(defcustom emms-player-mpv-update-duration temms-player-mpv-update-duration129,5131
(defcustom emms-player-mpv-update-metadata nilemms-player-mpv-update-metadata146,5816
(defvar emms-player-mpv-proc nilemms-player-mpv-proc175,7242
(defvar emms-player-mpv-proc-kill-delay 5emms-player-mpv-proc-kill-delay178,7359
(defvar emms-player-mpv-ipc-proc nilemms-player-mpv-ipc-proc183,7527
(defvar emms-player-mpv-ipc-buffer " *emms-player-mpv-ipc*"emms-player-mpv-ipc-buffer186,7654
(defvar emms-player-mpv-ipc-connect-timer nilemms-player-mpv-ipc-connect-timer189,7793
(defvar emms-player-mpv-ipc-connect-delaysemms-player-mpv-ipc-connect-delays191,7899
(defvar emms-player-mpv-ipc-connect-command nilemms-player-mpv-ipc-connect-command195,8081
(defvar emms-player-mpv-ipc-id 1emms-player-mpv-ipc-id201,8411
(defvar emms-player-mpv-ipc-id-max (expt 2 30)emms-player-mpv-ipc-id-max206,8716
(defvar emms-player-mpv-ipc-req-table nilemms-player-mpv-ipc-req-table210,8905
(defvar emms-player-mpv-event-connect-hook nilemms-player-mpv-event-connect-hook214,9033
(defvar emms-player-mpv-event-functions nilemms-player-mpv-event-functions221,9422
(defvar emms-player-mpv-stopped nilemms-player-mpv-stopped228,9692
(defvar emms-player-mpv-idle-timer (timer-create)emms-player-mpv-idle-timer233,9928
(defvar emms-player-mpv-idle-delay 0.5emms-player-mpv-idle-delay236,10054
(defvar emms-player-mpv-ipc-conn-emacs-26-workaround (>= emacs-major-version 26)emms-player-mpv-ipc-conn-emacs-26-workaround240,10176
(defvar emms-player-mpv-debug nilemms-player-mpv-debug248,10537
(defvar emms-player-mpv-debug-ts-offset nilemms-player-mpv-debug-ts-offset252,10704
(defun emms-player-mpv-debug-trim (s)emms-player-mpv-debug-trim256,10878
(defun emms-player-mpv-debug-msg (tpl-or-msg &rest tpl-values)emms-player-mpv-debug-msg261,11019
(defun emms-player-mpv-ipc-fifo-p ()emms-player-mpv-ipc-fifo-p278,11827
(defun emms-player-mpv-ipc-detect (cmd)emms-player-mpv-ipc-detect286,12198
(defun emms-player-mpv-proc-playing-p (&optional proc)emms-player-mpv-proc-playing-p316,13425
(defun emms-player-mpv-proc-playing (state &optional proc)emms-player-mpv-proc-playing323,13807
(defun emms-player-mpv-proc-symbol-id (sym &optional proc)emms-player-mpv-proc-symbol-id328,14047
(defun emms-player-mpv-proc-init-fifo (path &optional mode)emms-player-mpv-proc-init-fifo338,14447
(defun emms-player-mpv-proc-sentinel (proc ev)emms-player-mpv-proc-sentinel354,15155
(defun emms-player-mpv-proc-init (&rest media-args)emms-player-mpv-proc-init364,15502
(defun emms-player-mpv-proc-stop ()emms-player-mpv-proc-stop394,16918
(defun emms-player-mpv-ipc-sentinel (proc ev)emms-player-mpv-ipc-sentinel415,17655
(defun emms-player-mpv-ipc-filter (proc s)emms-player-mpv-ipc-filter425,18081
(defun emms-player-mpv-ipc-connect (delays)emms-player-mpv-ipc-connect450,18936
(defun emms-player-mpv-ipc-connect-fifo ()emms-player-mpv-ipc-connect-fifo477,20229
(defun emms-player-mpv-ipc-init ()emms-player-mpv-ipc-init491,21050
(defun emms-player-mpv-ipc-stop ()emms-player-mpv-ipc-stop509,21825
(defun emms-player-mpv-ipc ()emms-player-mpv-ipc515,22026
(defun emms-player-mpv-ipc-id-get ()emms-player-mpv-ipc-id-get536,22831
(defun emms-player-mpv-ipc-req-send (cmd &optional handler proc)emms-player-mpv-ipc-req-send545,23160
(defun emms-player-mpv-ipc-req-resolve (req-id data err)emms-player-mpv-ipc-req-resolve571,24506
(defun emms-player-mpv-ipc-req-error-printer (data err)emms-player-mpv-ipc-req-error-printer581,24895
(defun emms-player-mpv-ipc-recv (json)emms-player-mpv-ipc-recv585,25093
(defun emms-player-mpv-ipc-fifo-cmd (cmd &optional proc)emms-player-mpv-ipc-fifo-cmd603,25846
(defun emms-player-mpv-observe-property (sym)emms-player-mpv-observe-property615,26354
(defun emms-player-mpv-event-idle ()emms-player-mpv-event-idle622,26724
(defun emms-player-mpv-event-handler (json-data)emms-player-mpv-event-handler627,26978
(defun emms-player-mpv-info-meta-connect-func ()emms-player-mpv-info-meta-connect-func653,28181
(defun emms-player-mpv-info-meta-event-func (json-data)emms-player-mpv-info-meta-event-func657,28367
(defun emms-player-mpv-info-meta-update-track (info-alist &optional track)emms-player-mpv-info-meta-update-track668,28812
(defun emms-player-mpv-info-duration-event-func (json-data)emms-player-mpv-info-duration-event-func700,30196
(defun emms-player-mpv-info-duration-check ()emms-player-mpv-info-duration-check707,30479
(defun emms-player-mpv-info-duration-handler (duration err)emms-player-mpv-info-duration-handler719,31264
(defun emms-player-mpv-cmd (cmd &optional handler)emms-player-mpv-cmd736,31968
(defmacro emms-player-mpv-cmd-prog (cmd &rest handler-body)emms-player-mpv-cmd-prog749,32565
(defun emms-player-mpv-playable-p (track)emms-player-mpv-playable-p762,33150
(defun emms-player-mpv-start (track)emms-player-mpv-start766,33267
(defun emms-player-mpv-stop ()emms-player-mpv-stop790,34313
(defun emms-player-mpv-pause ()emms-player-mpv-pause797,34475
(defun emms-player-mpv-resume ()emms-player-mpv-resume800,34550
(defun emms-player-mpv-seek (sec)emms-player-mpv-seek803,34625
(defun emms-player-mpv-seek-to (sec)emms-player-mpv-seek-to806,34707

elpa/emms-5.2/emms-bookmarks.el,1102
(defvar emms-bookmarks-prev-overshoot 5emms-bookmarks-prev-overshoot40,1334
(defun emms-bookmarks-reset (track)emms-bookmarks-reset43,1430
(defun emms-bookmarks-straight-insertion-sort (item l acc)emms-bookmarks-straight-insertion-sort47,1549
(defun emms-bookmarks-get (track)emms-bookmarks-get54,1891
(defun emms-bookmarks-set (track desc time)emms-bookmarks-set58,2008
(defun emms-bookmarks-set-current (desc)emms-bookmarks-set-current65,2352
(defun emms-bookmarks-search (time track test)emms-bookmarks-search69,2544
(defun emms-bookmarks-next-1 (time track)emms-bookmarks-next-182,3013
(defun emms-bookmarks-prev-1 (time track)emms-bookmarks-prev-186,3166
(defun emms-bookmarks-goto (search-f track failure-message)emms-bookmarks-goto90,3354
(defun emms-bookmarks-next ()emms-bookmarks-next109,3890
(defun emms-bookmarks-prev ()emms-bookmarks-prev116,4114
(defmacro emms-bookmarks-with-paused-player (&rest body)emms-bookmarks-with-paused-player123,4346
(defun emms-bookmarks-add ()emms-bookmarks-add132,4676
(defun emms-bookmarks-clear ()emms-bookmarks-clear145,5129

elpa/emms-5.2/emms-streams.el,3701
(defgroup emms-stream nilemms-stream39,1226
(defcustom emms-stream-bookmarks-file (concat (file-name-as-directory emms-directory) "streams")emms-stream-bookmarks-file43,1306
(defcustom emms-stream-default-action "add"emms-stream-default-action48,1499
(defface emms-stream-name-face '((t (:bold t :weight bold)))emms-stream-name-face54,1715
(defface emms-stream-url-faceemms-stream-url-face58,1827
(defvar emms-stream-list nilemms-stream-list66,2051
(defvar emms-stream-buffer-name "*EMMS Streams*"emms-stream-buffer-name69,2140
(defvar emms-stream-play-hook nilemms-stream-play-hook72,2249
(defvar emms-stream-hook nilemms-stream-hook75,2352
(defvar emms-stream-current-stream nilemms-stream-current-stream78,2446
(defvar emms-stream-popup-old-conf nilemms-stream-popup-old-conf83,2603
(defvar emms-stream-last-stream nilemms-stream-last-stream86,2674
(defvar emms-stream-playlist-buffer nilemms-stream-playlist-buffer89,2754
(defcustom emms-stream-repeat-p nilemms-stream-repeat-p92,2855
(defvar emms-stream-default-listemms-stream-default-list108,3463
(defvar emms-stream-mode-mapemms-stream-mode-map154,5702
(defun emms-streams ()emms-streams184,7139
(defun emms-stream-mode ()emms-stream-mode195,7507
(defun emms-stream-create-playlist ()emms-stream-create-playlist216,8154
(defun emms-stream-kill-playlist ()emms-stream-kill-playlist228,8718
(defun emms-stream-popup-revert ()emms-stream-popup-revert237,9101
(defun emms-stream-popup (&optional popup-height)emms-stream-popup251,9744
(defun emms-stream-init ()emms-stream-init284,11176
(defun emms-stream-read-file (file)emms-stream-read-file287,11282
(defun emms-stream-save-bookmarks-file ()emms-stream-save-bookmarks-file297,11582
(defun emms-stream-display-line (line)emms-stream-display-line319,12297
(defun emms-stream-display ()emms-stream-display330,12734
(defun emms-stream-take (n list)emms-stream-take337,12945
(defun emms-stream-insert-at (n elt list)emms-stream-insert-at346,13158
(defun emms-stream-insert-several-at (n new-list list)emms-stream-insert-several-at354,13463
(defun emms-stream-look-behind ()emms-stream-look-behind362,13781
(defun emms-stream-back-to-stream ()emms-stream-back-to-stream367,13962
(defun emms-stream-get-bookmark-at-point ()emms-stream-get-bookmark-at-point376,14376
(defun emms-stream-redisplay ()emms-stream-redisplay381,14534
(defun emms-stream-determine-fd (name)emms-stream-determine-fd387,14673
(defun emms-stream-add-bookmark (name url fd type)emms-stream-add-bookmark397,14983
(defun emms-stream-delete-bookmark ()emms-stream-delete-bookmark419,15819
(defun emms-stream-edit-bookmark ()emms-stream-edit-bookmark431,16196
(defun emms-stream-name (el)emms-stream-name446,17014
(defun emms-stream-url (el)emms-stream-url448,17055
(defun emms-stream-fd (el)emms-stream-fd450,17096
(defun emms-stream-type (el)emms-stream-type452,17142
(defun emms-stream-play ()emms-stream-play455,17192
(defun emms-stream-info-bookmark ()emms-stream-info-bookmark481,18375
(defvar emms-stream-killed-streams ()emms-stream-killed-streams491,18767
(defun emms-stream-kill-bookmark ()emms-stream-kill-bookmark494,18844
(defun emms-stream-yank-bookmark ()emms-stream-yank-bookmark503,19173
(defun emms-stream-next-line ()emms-stream-next-line534,20360
(defun emms-stream-previous-line ()emms-stream-previous-line543,20681
(defun emms-stream-quit ()emms-stream-quit552,20993
(defun emms-stream-toggle-default-action ()emms-stream-toggle-default-action558,21126
(defun emms-info-url-providep (track)emms-info-url-providep584,22065
(defun emms-stream-add-data-to-track (track)emms-stream-add-data-to-track604,22614

elpa/emms-5.2/emms-compat.el,958
(defun emms-propertize (string &rest properties)emms-propertize34,1080
(defun emms-make-obsolete (old-name new-name when)emms-make-obsolete42,1382
(defun emms-cancel-timer (timer)emms-cancel-timer55,1832
(defun emms-time-less-p (t1 t2)emms-time-less-p63,2049
(defun emms-activate-highlighting-mode ()emms-activate-highlighting-mode72,2245
(defun emms-line-highlight ()emms-line-highlight85,2549
(defun emms-move-beginning-of-line (arg)emms-move-beginning-of-line95,2790
(defun emms-line-number-at-pos (&optional pos)emms-line-number-at-pos105,3155
(defun emms-replace-regexp-in-string (regexp replacement textemms-replace-regexp-in-string121,3630
(defun emms-match-string-no-properties (num &optional string)emms-match-string-no-properties139,4466
(defun emms-delete-if (predicate seq)emms-delete-if147,4670
(defun emms-find-if (predicate seq)emms-find-if166,5228
(defun emms-remove-if-not (predicate seq)emms-remove-if-not174,5467

elpa/emms-5.2/later-do.el,427
(defvar later-do-version "0.2emms4 (2018-04-07)"later-do-version31,1148
(defgroup later-do nillater-do34,1231
(defcustom later-do-interval 0.5later-do-interval39,1334
(defcustom  later-do-batch 20later-do-batch44,1457
(defvar later-do-list nillater-do-list52,1744
(defvar later-do-timer nillater-do-timer55,1819
(defun later-do (function &rest args)later-do58,1882
(defun later-do-timer ()later-do-timer69,2373

elpa/emms-5.2/emms-playing-time.el,1457
(defgroup emms-playing-time nilemms-playing-time48,1577
(defcustom emms-playing-time-display-short-p nilemms-playing-time-display-short-p52,1660
(defcustom emms-playing-time-display-format " %s "emms-playing-time-display-format58,1844
(defcustom emms-playing-time-style 'timeemms-playing-time-style63,1986
(defvar emms-playing-time-display-p nilemms-playing-time-display-p72,2213
(defvar emms-playing-time 0emms-playing-time75,2311
(defvar emms-playing-time-string "")emms-playing-time-string78,2376
(defvar emms-playing-time-display-timer nil)emms-playing-time-display-timer80,2414
(defvar emms-playing-time-p nilemms-playing-time-p82,2460
(defun emms-playing-time-start ()emms-playing-time-start85,2549
(defun emms-playing-time-stop ()emms-playing-time-stop92,2788
(defun emms-playing-time-pause ()emms-playing-time-pause102,3104
(defun emms-playing-time-seek (sec)emms-playing-time-seek110,3363
(defun emms-playing-time-set (sec)emms-playing-time-set116,3588
(defun emms-playing-time (arg)emms-playing-time122,3776
(defun emms-playing-time-enable-display ()emms-playing-time-enable-display155,5365
(defun emms-playing-time-disable-display ()emms-playing-time-disable-display161,5519
(defun emms-playing-time-display ()emms-playing-time-display166,5662
(defun emms-playing-time-mode-line ()emms-playing-time-mode-line209,7588
(defun emms-playing-time-restore-mode-line ()emms-playing-time-restore-mode-line218,7887

elpa/emms-5.2/emms-mode-line-icon.el,320
(defvar emms-mode-line-icon-color "black"emms-mode-line-icon-color36,1125
(defvar emms-mode-line-icon-before-format ""emms-mode-line-icon-before-format39,1226
(defun emms-mode-line-icon-generate (color)emms-mode-line-icon-generate45,1477
(defun emms-mode-line-icon-function ()emms-mode-line-icon-function66,1941

elpa/emms-5.2/emms-player-simple.el,1445
(defvar emms-player-simple-version "0.2 $Revision: 1.26 $"emms-player-simple-version42,1388
(defmacro define-emms-simple-player (name types regex command &rest args)define-emms-simple-player50,1597
(defvar emms-player-simple-process-name "emms-player-simple-process"emms-player-simple-process-name105,4246
(defun emms-player-simple-stop ()emms-player-simple-stop108,4359
(defun emms-player-simple-start (filename player cmdname params)emms-player-simple-start116,4624
(defun emms-player-simple-sentinel (proc str)emms-player-simple-sentinel130,5233
(defun emms-player-simple-pause ()emms-player-simple-pause136,5449
(defun emms-player-simple-resume ()emms-player-simple-resume141,5621
(defun emms-player-simple-regexp (&rest extensions)emms-player-simple-regexp146,5795
(define-emms-simple-player mpg321 '(file url)mpg321162,6485
(define-emms-simple-player ogg123 '(file)ogg123165,6585
(define-emms-simple-player speexdec '(file)speexdec168,6682
(define-emms-simple-player playsound '(file)playsound171,6776
(define-emms-simple-player mikmod '(file)mikmod174,6872
(define-emms-simple-player timidity '(file)timidity179,7140
(define-emms-simple-player fluidsynth '(file)fluidsynth182,7270
(define-emms-simple-player alsaplayer '(file url)alsaplayer185,7416
(defun emms-player-alsaplayer-pause ()emms-player-alsaplayer-pause203,7929
(defun emms-player-alsaplayer-seek (sec)emms-player-alsaplayer-seek206,8022

elpa/emms-5.2/emms-metaplaylist-mode.el,1532
(defgroup emms-metaplaylist-mode nilemms-metaplaylist-mode40,1369
(defcustom emms-metaplaylist-mode-buffer-name "*Emms Playlist Buffers*"emms-metaplaylist-mode-buffer-name45,1518
(defcustom emms-metaplaylist-mode-hooks nilemms-metaplaylist-mode-hooks50,1705
(defface emms-metaplaylist-mode-faceemms-metaplaylist-mode-face55,1860
(defface emms-metaplaylist-mode-current-faceemms-metaplaylist-mode-current-face66,2221
(defvar emms-metaplaylist-mode-mapemms-metaplaylist-mode-map81,2736
(defun emms-metaplaylist-mode-goto-current ()emms-metaplaylist-mode-goto-current101,3643
(defun emms-metaplaylist-mode-write (playlists)emms-metaplaylist-mode-write110,3906
(defun emms-metaplaylist-mode-sorted-buffer-list ()emms-metaplaylist-mode-sorted-buffer-list127,4455
(defun emms-metaplaylist-mode-center-current ()emms-metaplaylist-mode-center-current136,4688
(defun emms-metaplaylist-mode-create ()emms-metaplaylist-mode-create150,5150
(defun emms-metaplaylist-mode-assert-buffer ()emms-metaplaylist-mode-assert-buffer162,5581
(defun emms-metaplaylist-mode-update ()emms-metaplaylist-mode-update168,5817
(defun emms-metaplaylist-mode-kill-buffer ()emms-metaplaylist-mode-kill-buffer177,6112
(defun emms-metaplaylist-mode-new-buffer (buffer-name)emms-metaplaylist-mode-new-buffer196,6693
(defun emms-metaplaylist-mode-set-active ()emms-metaplaylist-mode-set-active207,7081
(defun emms-metaplaylist-mode-go ()emms-metaplaylist-mode-go219,7475
(defun emms-metaplaylist-mode ()emms-metaplaylist-mode229,7833

elpa/emms-5.2/emms-playlist-limit.el,2473
(defgroup emms-playlist-limit nilemms-playlist-limit62,2065
(defcustom emms-playlist-limit-hook nilemms-playlist-limit-hook66,2152
(defmacro define-emms-playlist-limit (attribute)define-emms-playlist-limit71,2285
(define-emms-playlist-limit info-artist)info-artist106,3716
(define-emms-playlist-limit info-composer)info-composer107,3757
(define-emms-playlist-limit info-performer)info-performer108,3800
(define-emms-playlist-limit info-title)info-title109,3844
(define-emms-playlist-limit info-album)info-album110,3884
(define-emms-playlist-limit info-year)info-year111,3924
(define-emms-playlist-limit info-genre)info-genre112,3963
(define-emms-playlist-limit name)name113,4003
(define-emms-playlist-limit description)description114,4037
(defvar-local emms-playlist-limit--original-playlist nilemms-playlist-limit--original-playlist116,4079
(defun emms-playlist-limit-to-all ()emms-playlist-limit-to-all119,4201
(define-key emms-playlist-mode-map (kbd "/ n") 'emms-playlist-limit-to-name)emms-playlist-mode-map134,4824
(define-key emms-playlist-mode-map (kbd "/ a") 'emms-playlist-limit-to-info-artist)emms-playlist-mode-map135,4901
(define-key emms-playlist-mode-map (kbd "/ c") 'emms-playlist-limit-to-info-composer)emms-playlist-mode-map136,4985
(define-key emms-playlist-mode-map (kbd "/ p") 'emms-playlist-limit-to-info-performer)emms-playlist-mode-map137,5071
(define-key emms-playlist-mode-map (kbd "/ t") 'emms-playlist-limit-to-info-title)emms-playlist-mode-map138,5158
(define-key emms-playlist-mode-map (kbd "/ b") 'emms-playlist-limit-to-info-album)emms-playlist-mode-map139,5241
(define-key emms-playlist-mode-map (kbd "/ y") 'emms-playlist-limit-to-info-year)emms-playlist-mode-map140,5324
(define-key emms-playlist-mode-map (kbd "/ g") 'emms-playlist-limit-to-info-genre)emms-playlist-mode-map141,5406
(define-key emms-playlist-mode-map (kbd "/ d") 'emms-playlist-limit-to-description)emms-playlist-mode-map142,5489
(define-key emms-playlist-mode-map (kbd "/ /") 'emms-playlist-limit-to-all)emms-playlist-mode-map143,5573
(defun emms-playlist-limit-track-get (track type)emms-playlist-limit-track-get148,5677
(defun emms-playlist-limit--derive-playlist (playlist pred name)emms-playlist-limit--derive-playlist167,6399
(defun emms-playlist-limit--limit-playlist (playlist type regexp)emms-playlist-limit--limit-playlist180,6981
(defun emms-playlist-limit-do (type regexp)emms-playlist-limit-do193,7488

elpa/emms-5.2/emms-source-file.el,1467
(defvar emms-source-file-version "0.2 $Revision: 1.30 $"emms-source-file-version35,1229
(defgroup emms-source-file nilemms-source-file50,1575
(defcustom emms-source-file-default-directory nilemms-source-file-default-directory55,1708
(defcustom emms-source-file-directory-tree-functionemms-source-file-directory-tree-function60,1886
(defcustom emms-source-file-exclude-regexpemms-source-file-exclude-regexp75,2495
(defcustom emms-source-file-gnu-find "find"emms-source-file-gnu-find86,2897
(defalias 'emms-read-directory-nameemms-read-directory-name92,3090
(define-emms-source file (file)file101,3361
(define-emms-source directory (dir)directory115,4000
(define-emms-source directory-tree (dir)directory-tree133,4916
(define-emms-source find (dir regex)find153,5858
(define-emms-source dired ()dired171,6782
(defun emms-source-file-directory-tree (dir regex)emms-source-file-directory-tree185,7149
(defun emms-source-file-directory-tree-internal (dir regex)emms-source-file-directory-tree-internal196,7571
(defun emms-source-file-directory-tree-find (dir regex)emms-source-file-directory-tree-find223,8578
(defmacro emms-with-excluded-directories (directory-list &rest body)emms-with-excluded-directories239,9226
(defun emms-source-file-regex ()emms-source-file-regex249,9531
(defun emms-locate (regexp)emms-locate263,9977
(define-emms-source url (url)url284,10819
(define-emms-source streamlist (streamlist)streamlist291,11139

elpa/emms-5.2/emms-librefm-stream.el,2888
(defvar emms-librefm-stream-host-urlemms-librefm-stream-host-url32,980
(defvar emms-librefm-stream-host-base-pathemms-librefm-stream-host-base-path36,1069
(defvar emms-librefm-stream-session-idemms-librefm-stream-session-id40,1160
(defvar emms-librefm-stream-debugemms-librefm-stream-debug44,1232
(defvar emms-librefm-stream-station-nameemms-librefm-stream-station-name48,1306
(defvar emms-librefm-stream-emms-tracklistemms-librefm-stream-emms-tracklist52,1386
(defvar emms-librefm-stream-playlist-buffer-nameemms-librefm-stream-playlist-buffer-name56,1470
(defvar emms-librefm-stream-playlist-buffer nilemms-librefm-stream-playlist-buffer60,1588
(defvar emms-librefm-stream-connect-method "https://"emms-librefm-stream-connect-method63,1678
(defun emms-librefm-stream-assert-http ()emms-librefm-stream-assert-http71,1923
(defun emms-librefm-stream-tune-handshake-string ()emms-librefm-stream-tune-handshake-string88,2538
(defun emms-librefm-stream-tune-handshake-call ()emms-librefm-stream-tune-handshake-call104,3130
(defun emms-librefm-stream-handle-tune-handshake-response (resbuf)emms-librefm-stream-handle-tune-handshake-response116,3524
(defun emms-librefm-stream-tune-handshake ()emms-librefm-stream-tune-handshake147,4574
(defun emms-librefm-stream-tune-string (session-id station)emms-librefm-stream-tune-string157,4916
(defun emms-librefm-stream-tune-call (session-id station)emms-librefm-stream-tune-call171,5352
(defun emms-librefm-stream-handle-tune-response (resbuf)emms-librefm-stream-handle-tune-response184,5759
(defun emms-librefm-stream-tune (station)emms-librefm-stream-tune217,6806
(defun emms-librefm-stream-getplaylist-string (radio-session-id)emms-librefm-stream-getplaylist-string229,7174
(defun emms-librefm-stream-getplaylist-call (session-id)emms-librefm-stream-getplaylist-call242,7604
(defun emms-librefm-stream-handle-getplaylist-response (resbuf)emms-librefm-stream-handle-getplaylist-response254,8010
(defun emms-librefm-stream-getplaylist ()emms-librefm-stream-getplaylist262,8300
(defun emms-librefm-stream-xspf-find (tag data)emms-librefm-stream-xspf-find273,8665
(defun emms-librefm-stream-xspf-tracklist (playlist)emms-librefm-stream-xspf-tracklist285,8992
(defun emms-librefm-stream-xspf-get (tag track)emms-librefm-stream-xspf-get289,9160
(defun emms-librefm-stream-xspf-convert-track (track)emms-librefm-stream-xspf-convert-track293,9312
(defun emms-librefm-stream-xspf-convert-tracklist (tracklist)emms-librefm-stream-xspf-convert-tracklist312,10181
(defun emms-librefm-stream-set-librefm-playlist-buffer ()emms-librefm-stream-set-librefm-playlist-buffer330,10661
(defun emms-librefm-stream-queue ()emms-librefm-stream-queue338,11033
(defun emms-librefm-stream-queue-loader ()emms-librefm-stream-queue-loader359,11670
(defun emms-librefm-stream (station)emms-librefm-stream371,12109

elpa/emms-5.2/emms-history.el,438
(defgroup emms-history nilemms-history40,1251
(defcustom emms-history-file (concat (file-name-as-directory emms-directory) "history")emms-history-file46,1391
(defcustom emms-history-start-playing nilemms-history-start-playing51,1558
(defcustom emms-history-file-coding-system 'utf-8emms-history-file-coding-system57,1737
(defun emms-history-save ()emms-history-save62,1890
(defun emms-history-load ()emms-history-load107,3780

elpa/emms-5.2/jack.el,2163
(defgroup jack ()jack46,1894
(defcustom jack-rc '("~/.jackdrc" "/etc/jackd.conf")jack-rc50,1964
(defcustom jack-use-jack-rc tjack-use-jack-rc55,2079
(defcustom jack-program (executable-find "jackd")jack-program62,2350
(defcustom jack-sample-rate 44100jack-sample-rate67,2458
(defcustom jack-period-size 128jack-period-size72,2563
(defcustom jack-alsa-device niljack-alsa-device77,2686
(defun jack-read-alsa-device ()jack-read-alsa-device82,2811
(defun jack-alsa-device ()jack-alsa-device93,3255
(defcustom jack-output-buffer-name "*JACK output*"jack-output-buffer-name96,3332
(defun jack-args ()jack-args101,3441
(defcustom jack-set-rtlimits tjack-set-rtlimits124,4103
(defcustom jack-set-rtlimits-program (executable-find "set_rtlimits")jack-set-rtlimits-program130,4271
(defun jack-maybe-rtlimits (args)jack-maybe-rtlimits135,4399
(defvar jack-process nil)jack-process142,4634
(defvar jack-load 0)jack-load144,4661
(defvar jack-max-usecs 0)jack-max-usecs146,4683
(defvar jack-spare 0)jack-spare148,4710
(defun jack-output-buffer ()jack-output-buffer150,4733
(defvar jack-xruns nil)jack-xruns161,5133
(defun jack-filter (proc string)jack-filter163,5158
(defun jack-running-p ()jack-running-p179,5930
(defcustom jack-started-hook niljack-started-hook183,6049
(defun jack-start ()jack-start188,6186
(defun jack-kill ()jack-kill199,6554
(defun jack-restart ()jack-restart205,6719
(defun jack-list ()jack-list212,6843
(defun jack-ports (program)jack-ports241,8044
(defun jack-get-port-connections (program port)jack-get-port-connections244,8110
(defun jack-get-port-properties (program port)jack-get-port-properties247,8229
(defun jack-get-direction (program port)jack-get-direction250,8346
(defun jack-read-program (prompt &optional predicate)jack-read-program256,8561
(defun jack-unique-port-name (strings)jack-unique-port-name264,8871
(defun jack-read-port (program prompt &optional predicate)jack-read-port278,9371
(defun jack-connect (from-program from-port to-program to-port)jack-connect285,9688
(defun jack-disconnect (from-program from-port to-program to-port)jack-disconnect315,10887

elpa/emms-5.2/emms-info.el,734
(defgroup emms-info nilemms-info49,1696
(defcustom emms-info-auto-update temms-info-auto-update53,1776
(defcustom emms-info-asynchronously temms-info-asynchronously60,2039
(defcustom emms-info-report-each-num-tracks 200emms-info-report-each-num-tracks66,2240
(defcustom emms-info-functions nilemms-info-functions73,2514
(defvar emms-info-asynchronous-tracks 0emms-info-asynchronous-tracks79,2674
(defun emms-info-initialize-track (track)emms-info-initialize-track82,2767
(defun emms-info-really-initialize-track (track)emms-info-really-initialize-track90,3142
(defun emms-info-track-file-mtime (track)emms-info-track-file-mtime119,4343
(defun emms-info-track-description (track)emms-info-track-description127,4576

elpa/emms-5.2/emms-player-mpg321-remote.el,2143
(defgroup emms-player-mpg321-remote nilemms-player-mpg321-remote46,1591
(defcustom emms-player-mpg321-remote-command "mpg321"emms-player-mpg321-remote-command51,1738
(defcustom emms-player-mpg321-remote-parameters nilemms-player-mpg321-remote-parameters56,1880
(defcustom emms-player-mpg321-remoteemms-player-mpg321-remote62,2094
(defvar emms-player-mpg321-remote-initial-argsemms-player-mpg321-remote-initial-args70,2387
(defvar emms-player-mpg321-remote-process-name "emms-player-mpg321-remote-proc"emms-player-mpg321-remote-process-name74,2530
(defvar emms-player-mpg321-remote-ignore-stop 0emms-player-mpg321-remote-ignore-stop77,2661
(defmacro emms-player-mpg321-remote-add (cmd func)emms-player-mpg321-remote-add80,2770
(defun emms-player-mpg321-remote-start-process ()emms-player-mpg321-remote-start-process97,3333
(defun emms-player-mpg321-remote-stop ()emms-player-mpg321-remote-stop109,3924
(defun emms-player-mpg321-remote-process ()emms-player-mpg321-remote-process116,4165
(defun emms-player-mpg321-remote-running-p ()emms-player-mpg321-remote-running-p120,4311
(defun emms-player-mpg321-remote-sentinel (proc str)emms-player-mpg321-remote-sentinel126,4522
(defun emms-player-mpg321-remote-send (text)emms-player-mpg321-remote-send134,4820
(defun emms-player-mpg321-remote-filter (proc str)emms-player-mpg321-remote-filter147,5337
(defun emms-player-mpg321-remote-start-playing (track)emms-player-mpg321-remote-start-playing166,6073
(defun emms-player-mpg321-remote-notify-emms (&optional user-action)emms-player-mpg321-remote-notify-emms173,6388
(defun emms-player-mpg321-remote-stop-playing ()emms-player-mpg321-remote-stop-playing189,7088
(defun emms-player-mpg321-remote-play-track (track)emms-player-mpg321-remote-play-track194,7260
(defun emms-player-mpg321-remote-playable-p (track)emms-player-mpg321-remote-playable-p200,7504
(defun emms-player-mpg321-remote-pause ()emms-player-mpg321-remote-pause204,7630
(defun emms-player-mpg321-remote-resume ()emms-player-mpg321-remote-resume208,7739
(defun emms-player-mpg321-remote-seek (seconds)emms-player-mpg321-remote-seek212,7850

elpa/emms-5.2/emms-setup.el,364
(defgroup emms-setup nilemms-setup45,1416
(defcustom emms-setup-default-player-listemms-setup-default-player-list50,1535
(defun emms-minimalistic ()emms-minimalistic63,1847
(defun emms-all ()emms-all74,2163
(defun emms-default-players ()emms-default-players134,4222
(defun emms-devel ()emms-devel144,4469
(defun emms-standard ()emms-standard149,4564

elpa/emms-5.2/emms-info-opusinfo.el,306
(defgroup emms-info-opusinfo nilemms-info-opusinfo30,943
(defcustom emms-info-opusinfo-coding-system 'utf-8emms-info-opusinfo-coding-system35,1071
(defcustom emms-info-opusinfo-program-name "opusinfo"emms-info-opusinfo-program-name40,1227
(defun emms-info-opusinfo (track)emms-info-opusinfo45,1376

elpa/emms-5.2/emms-volume-amixer.el,227
(defcustom emms-volume-amixer-control "Master"emms-volume-amixer-control43,1472
(defcustom emms-volume-amixer-card 0emms-volume-amixer-card52,1844
(defun emms-volume-amixer-change (amount)emms-volume-amixer-change60,2068

elpa/emms-5.2/emms-pkg.el,70
(define-package "emms" "5.2" "The Emacs Multimedia System""emms"1,0

elpa/emms-5.2/emms-cache.el,973
(defvar emms-cache-db (make-hash-tableemms-cache-db49,1607
(defvar emms-cache-dirty nilemms-cache-dirty56,1881
(defcustom emms-cache-file (concat (file-name-as-directory emms-directory) "cache")emms-cache-file59,1963
(defcustom emms-cache-file-coding-system 'utf-8emms-cache-file-coding-system64,2142
(defun emms-cache (arg)emms-cache69,2283
(defun emms-cache-enable ()emms-cache-enable87,2929
(defun emms-cache-disable ()emms-cache-disable94,3079
(defun emms-cache-toggle ()emms-cache-toggle101,3233
(defsubst emms-cache-dirty (&rest ignored)emms-cache-dirty108,3400
(defun emms-cache-get (type path)emms-cache-get112,3502
(defun emms-cache-set (type path track)emms-cache-set117,3662
(defun emms-cache-del (path)emms-cache-del122,3798
(defun emms-cache-save ()emms-cache-save127,3931
(defun emms-cache-restore ()emms-cache-restore151,4883
(defun emms-cache-sync ()emms-cache-sync157,5034
(defun emms-cache-reset ()emms-cache-reset182,6070

elpa/emms-5.2/emms-playlist-sort.el,1759
(defgroup emms-playlist-sort nilemms-playlist-sort31,1001
(defcustom emms-playlist-sort-list '(info-artist info-album)emms-playlist-sort-list36,1130
(defcustom emms-playlist-sort-prefix "S"emms-playlist-sort-prefix44,1471
(defmacro define-emms-playlist-sort (attribute)define-emms-playlist-sort53,1702
(define-emms-playlist-sort name)name66,2237
(define-emms-playlist-sort info-artist)info-artist67,2270
(define-emms-playlist-sort info-composer)info-composer68,2310
(define-emms-playlist-sort info-performer)info-performer69,2352
(define-emms-playlist-sort info-title)info-title70,2395
(define-emms-playlist-sort info-album)info-album71,2434
(define-emms-playlist-sort info-year)info-year72,2473
(define-emms-playlist-sort info-note)info-note73,2511
(defun emms-playlist-sort-by-natural-order ()emms-playlist-sort-by-natural-order75,2550
(defun emms-playlist-sort-by-list ()emms-playlist-sort-by-list81,2748
(defun emms-playlist-sort-by-last-played ()emms-playlist-sort-by-last-played87,2979
(defun emms-playlist-sort-by-play-count ()emms-playlist-sort-by-play-count99,3371
(defun emms-playlist-sort-by-file-extension ()emms-playlist-sort-by-file-extension110,3724
(defun emms-playlist-sort-by-file-mtime ()emms-playlist-sort-by-file-mtime121,4109
(defvar emms-playlist-sort-map nil)emms-playlist-sort-map135,4488
(defun emms-playlist-sort-map-setup ()emms-playlist-sort-map-setup137,4525
(defun emms-playlist-sort (predicate)emms-playlist-sort166,5886
(defun emms-sort-natural-order-less-p (a b)emms-sort-natural-order-less-p184,6604
(defun emms-playlist-sort-by-list-p (a b)emms-playlist-sort-by-list-p201,7418
(defun emms-string< (s1 s2)emms-string<218,8134
(defun emms-string> (s1 s2)emms-string>221,8220

elpa/emms-5.2/emms-mark.el,1428
(defun emms-mark-track-description (track)emms-mark-track-description44,1347
(defun emms-mark-update-descriptions ()emms-mark-update-descriptions53,1761
(defvar emms-mark-char ?*)emms-mark-char63,2040
(defvar emms-mark-face-alistemms-mark-face-alist64,2067
(defun emms-mark-track (&optional arg)emms-mark-track68,2172
(defun emms-mark-unmark-track (&optional arg)emms-mark-unmark-track100,3405
(defun emms-mark-forward (arg)emms-mark-forward108,3684
(defun emms-mark-unmark-forward (arg)emms-mark-unmark-forward115,3902
(defun emms-mark-all ()emms-mark-all122,4130
(defun emms-mark-unmark-all ()emms-mark-unmark-all129,4322
(defun emms-mark-regexp (regexp arg)emms-mark-regexp134,4475
(defun emms-mark-toggle ()emms-mark-toggle150,5005
(defsubst emms-mark-has-markedp ()emms-mark-has-markedp162,5328
(defun emms-mark-do-with-marked-track (func &optional move)emms-mark-do-with-marked-track171,5591
(defun emms-mark-mapcar-marked-track (func &optional move)emms-mark-mapcar-marked-track191,6420
(defun emms-mark-delete-marked-tracks ()emms-mark-delete-marked-tracks207,7089
(defun emms-mark-kill-marked-tracks ()emms-mark-kill-marked-tracks215,7390
(defun emms-mark-copy-marked-tracks ()emms-mark-copy-marked-tracks227,7811
(defvar emms-mark-mode-mapemms-mark-mode-map241,8220
(defun emms-mark-mode ()emms-mark-mode254,8723
(defun emms-mark-mode-disable ()emms-mark-mode-disable278,9511

elpa/emms-5.2/emms-i18n.el,1101
(defvar emms-i18n-never-used-coding-systememms-i18n-never-used-coding-system51,1831
(defvar emms-i18n-coding-system-for-reademms-i18n-coding-system-for-read58,2055
(defvar emms-i18n-default-coding-systememms-i18n-default-coding-system63,2182
(defvar emms-i18n-coding-detect-functionsemms-i18n-coding-detect-functions68,2335
(defvar emms-i18n-detect-max-sizeemms-i18n-detect-max-size73,2460
(defun emms-i18n-iconv (from to str)emms-i18n-iconv78,2598
(defun emms-i18n-iconv-region (beg end from to)emms-i18n-iconv-region86,2798
(defun emms-i18n-iconv-buffer (from to &optional buf)emms-i18n-iconv-buffer93,3041
(defun emms-i18n-set-default-coding-system (read-coding write-coding)emms-i18n-set-default-coding-system100,3299
(defun emms-i18n-call-process-simple (&rest args)emms-i18n-call-process-simple115,4091
(defun emms-i18n-call-process (&rest args)emms-i18n-call-process144,5472
(defun emms-i18n-detect-coding-function (size)emms-i18n-detect-coding-function157,6042
(defun emms-i18n-detect-buffer-coding-system (&optional buf)emms-i18n-detect-buffer-coding-system164,6329

elpa/emms-5.2/emms-player-mpd.el,7668
(defgroup emms-player-mpd nilemms-player-mpd120,4152
(defcustom emms-player-mpd (emms-player 'emms-player-mpd-startemms-player-mpd125,4264
(defcustom emms-player-mpd-music-directory nilemms-player-mpd-music-directory132,4552
(defun emms-player-mpd-get-supported-regexp ()emms-player-mpd-get-supported-regexp145,5086
(defcustom emms-player-mpd-supported-regexpemms-player-mpd-supported-regexp188,7123
(defcustom emms-player-mpd-connect-function 'open-network-streamemms-player-mpd-connect-function202,7596
(defcustom emms-player-mpd-server-name (or (getenv "MPD_HOST") "localhost")emms-player-mpd-server-name208,7825
(defcustom emms-player-mpd-server-port (or (getenv "MPD_PORT") "6600")emms-player-mpd-server-port213,7995
(defcustom emms-player-mpd-server-password nilemms-player-mpd-server-password218,8188
(defcustom emms-player-mpd-check-interval 1emms-player-mpd-check-interval224,8396
(defcustom emms-player-mpd-verbose nilemms-player-mpd-verbose236,8816
(defcustom emms-player-mpd-sync-playlist temms-player-mpd-sync-playlist242,8978
(defvar emms-player-mpd-process nil)emms-player-mpd-process274,9853
(defvar emms-player-mpd-queue nil)emms-player-mpd-queue275,9890
(defvar emms-player-mpd-playlist-id nil)emms-player-mpd-playlist-id277,9926
(defvar emms-player-mpd-current-song nil)emms-player-mpd-current-song280,10026
(defvar emms-player-mpd-last-state nil)emms-player-mpd-last-state281,10068
(defvar emms-player-mpd-status-timer nil)emms-player-mpd-status-timer282,10108
(defvar emms-player-mpd-status-regexpemms-player-mpd-status-regexp284,10151
(defun emms-player-mpd-sentinel (proc event)emms-player-mpd-sentinel289,10362
(defun emms-player-mpd-ensure-process ()emms-player-mpd-ensure-process306,11083
(defun emms-player-mpd-close-process (&optional from-sentinel)emms-player-mpd-close-process333,12286
(defun emms-player-mpd-send (question closure fn)emms-player-mpd-send344,12794
(defun emms-player-mpd-get-mpd-filename (file)emms-player-mpd-get-mpd-filename356,13221
(defun emms-player-mpd-get-emms-filename (file)emms-player-mpd-get-emms-filename366,13571
(defun emms-player-mpd-parse-response (response)emms-player-mpd-parse-response376,13909
(defun emms-player-mpd-parse-line (line)emms-player-mpd-parse-line402,14921
(defun emms-player-mpd-get-alist (info)emms-player-mpd-get-alist415,15333
(defun emms-player-mpd-get-alists (info)emms-player-mpd-get-alists429,15867
(defun emms-player-mpd-get-tracks-1 (closure response)emms-player-mpd-get-tracks-1449,16550
(defun emms-player-mpd-get-tracks (closure callback)emms-player-mpd-get-tracks467,17315
(defun emms-player-mpd-get-status-1 (closure response)emms-player-mpd-get-status-1474,17637
(defun emms-player-mpd-get-status (closure callback)emms-player-mpd-get-status480,17838
(defun emms-player-mpd-get-status-part (closure callback item &optional info)emms-player-mpd-get-status-part488,18177
(defun emms-player-mpd-get-playlist-id (closure callback &optional info)emms-player-mpd-get-playlist-id503,18785
(defun emms-player-mpd-get-volume (closure callback &optional info)emms-player-mpd-get-volume512,19187
(defun emms-player-mpd-get-current-song (closure callback &optional info)emms-player-mpd-get-current-song521,19585
(defun emms-player-mpd-get-mpd-state (closure callback &optional info)emms-player-mpd-get-mpd-state533,20075
(defun emms-player-mpd-get-playing-time (closure callback &optional info)emms-player-mpd-get-playing-time544,20525
(defun emms-player-mpd-select-song (prev-song new-song)emms-player-mpd-select-song569,21434
(defun emms-player-mpd-sync-from-emms-1 (closure)emms-player-mpd-sync-from-emms-1607,23019
(defun emms-player-mpd-sync-from-emms (&optional callback)emms-player-mpd-sync-from-emms616,23270
(defun emms-player-mpd-sync-from-mpd-2 (closure info)emms-player-mpd-sync-from-mpd-2635,23928
(defun emms-player-mpd-sync-from-mpd-1 (closure tracks)emms-player-mpd-sync-from-mpd-1652,24579
(defun emms-player-mpd-sync-from-mpd (&optional closure callback)emms-player-mpd-sync-from-mpd663,25009
(defun emms-player-mpd-detect-song-change-2 (state info)emms-player-mpd-detect-song-change-2678,25672
(defun emms-player-mpd-detect-song-change-1 (closure info)emms-player-mpd-detect-song-change-1686,25989
(defun emms-player-mpd-detect-song-change (&optional info)emms-player-mpd-detect-song-change732,28213
(defun emms-player-mpd-quote-file (file)emms-player-mpd-quote-file742,28584
(defun emms-player-mpd-clear ()emms-player-mpd-clear751,28875
(defun emms-player-mpd-add-file (file closure callback)emms-player-mpd-add-file764,29276
(defun emms-player-mpd-add-buffer-contents (buffer closure callback)emms-player-mpd-add-buffer-contents783,30023
(defun emms-player-mpd-add-playlist (playlist closure callback)emms-player-mpd-add-playlist796,30521
(defun emms-player-mpd-add-streamlist (url closure callback)emms-player-mpd-add-streamlist806,30946
(defun emms-player-mpd-add (track closure callback)emms-player-mpd-add821,31667
(defun emms-player-mpd-add-several-tracks (tracks closure callback)emms-player-mpd-add-several-tracks837,32424
(defun emms-player-mpd-add-several-files (files closure callback)emms-player-mpd-add-several-files847,32832
(defun emms-player-mpd-playable-p (track)emms-player-mpd-playable-p859,33254
(defun emms-player-mpd-play (&optional id)emms-player-mpd-play869,33646
(defun emms-player-mpd-start-and-sync-2 (buffer id)emms-player-mpd-start-and-sync-2895,34571
(defun emms-player-mpd-start-and-sync-1 (closure id)emms-player-mpd-start-and-sync-1915,35316
(defun emms-player-mpd-start-and-sync ()emms-player-mpd-start-and-sync925,35738
(defun emms-player-mpd-connect-1 (closure info)emms-player-mpd-connect-1941,36252
(defun emms-player-mpd-connect ()emms-player-mpd-connect956,36883
(defun emms-player-mpd-start (track)emms-player-mpd-start972,37476
(defun emms-player-mpd-disconnect (&optional no-stop)emms-player-mpd-disconnect982,37868
(defun emms-player-mpd-stop ()emms-player-mpd-stop998,38448
(defun emms-player-mpd-pause ()emms-player-mpd-pause1008,38717
(defun emms-player-mpd-seek (amount)emms-player-mpd-seek1013,38851
(defun emms-player-mpd-seek-to (pos)emms-player-mpd-seek-to1026,39358
(defun emms-player-mpd-next ()emms-player-mpd-next1037,39684
(defun emms-player-mpd-previous ()emms-player-mpd-previous1042,39840
(defun emms-volume-mpd-change (amount)emms-volume-mpd-change1049,40017
(defun emms-player-mpd-show-1 (closure response)emms-player-mpd-show-11063,40478
(defun emms-player-mpd-show (&optional insertp callback)emms-player-mpd-show1111,42477
(defun emms-info-mpd-process (track info)emms-info-mpd-process1131,43172
(defun emms-info-mpd-1 (track response)emms-info-mpd-11151,44107
(defun emms-info-mpd (track &optional info)emms-info-mpd1158,44341
(defun emms-cache-set-from-mpd-track (track-info)emms-cache-set-from-mpd-track1182,45233
(defun emms-cache--info-cleanup (info)emms-cache--info-cleanup1196,45793
(defun emms-cache-set-from-mpd-directory (dir)emms-cache-set-from-mpd-directory1204,46072
(defun emms-cache-set-from-mpd-all ()emms-cache-set-from-mpd-all1237,47523
(defun emms-player-mpd-update-directory (dir)emms-player-mpd-update-directory1247,47780
(defun emms-player-mpd-update-all ()emms-player-mpd-update-all1266,48599
(defvar emms-player-mpd-waiting-for-update-timer nilemms-player-mpd-waiting-for-update-timer1272,48785
(defun emms-player-mpd-update-all-reset-cache ()emms-player-mpd-update-all-reset-cache1275,48896
(defun emms-player-mpd-wait-for-update (&optional closure response)emms-player-mpd-wait-for-update1287,49330

elpa/emms-5.2/emms-cue.el,303
(defun emms-cue-next ()emms-cue-next33,1050
(defun emms-cue-previous ()emms-cue-previous43,1362
(defun emms-cue-next-track (&optional previous-p)emms-cue-next-track53,1686
(defun emms-cue-previous-track ()emms-cue-previous-track89,3436
(defun emms-info-cueinfo (track)emms-info-cueinfo93,3529

elpa/emms-5.2/emms-source-playlist.el,2891
(defvar emms-source-playlist-version "0.5 $Revision: 1.30 $"emms-source-playlist-version35,1179
(defcustom emms-source-playlist-formats '(native pls m3u)emms-source-playlist-formats42,1402
(defcustom emms-source-playlist-default-format nilemms-source-playlist-default-format65,2288
(defcustom emms-source-playlist-ask-before-overwrite temms-source-playlist-ask-before-overwrite75,2686
(defsubst emms-source-playlist-p-sym (format)emms-source-playlist-p-sym83,2911
(defsubst emms-source-playlist-parse-sym (format)emms-source-playlist-parse-sym86,3029
(defsubst emms-source-playlist-unparse-sym (format)emms-source-playlist-unparse-sym89,3152
(defsubst emms-source-playlist-files-sym (format)emms-source-playlist-files-sym92,3279
(defun emms-source-playlist-p (format &optional parse-files)emms-source-playlist-p95,3405
(defun emms-source-playlist-parse (format file)emms-source-playlist-parse102,3682
(defun emms-source-playlist-unparse (format playlist-buf file-buf)emms-source-playlist-unparse105,3789
(defun emms-source-playlist-files (format)emms-source-playlist-files108,3934
(defvar emms-source-playlist-format-history nilemms-source-playlist-format-history114,4156
(defun emms-source-playlist-read-format ()emms-source-playlist-read-format117,4274
(defun emms-playlist-save (format file)emms-playlist-save142,5406
(defun emms-source-playlist-determine-format (&optional parse-files)emms-source-playlist-determine-format158,6204
(define-emms-source playlist (file)playlist171,6831
(defun emms-source-playlist-native-p ()emms-source-playlist-native-p193,7683
(defun emms-source-playlist-parse-native (file)emms-source-playlist-parse-native199,7900
(defun emms-source-playlist-unparse-native (in out)emms-source-playlist-unparse-native205,8083
(define-emms-source native-playlist (file)native-playlist229,9119
(defun emms-source-playlist-m3u-p ()emms-source-playlist-m3u-p257,10057
(defun emms-source-playlist-parse-m3u (playlist-file)emms-source-playlist-parse-m3u266,10395
(defun emms-source-playlist-m3u-files ()emms-source-playlist-m3u-files277,10890
(defun emms-source-playlist-unparse-m3u (in out)emms-source-playlist-unparse-m3u288,11247
(define-emms-source m3u-playlist (file)m3u-playlist302,11913
(defun emms-source-playlist-pls-p ()emms-source-playlist-pls-p329,12801
(defun emms-source-playlist-parse-pls (playlist-file)emms-source-playlist-parse-pls337,13026
(defun emms-source-playlist-pls-files ()emms-source-playlist-pls-files352,13655
(defun emms-source-playlist-unparse-pls (in out)emms-source-playlist-unparse-pls363,14022
(define-emms-source pls-playlist (file)pls-playlist387,15044
(define-emms-source playlist-file (file)playlist-file431,16553
(define-emms-source playlist-directory (dir)playlist-directory448,17336
(define-emms-source playlist-directory-tree (dir)playlist-directory-tree468,18353

elpa/emms-5.2/emms-url.el,506
(defvar emms-url-specials-entireemms-url-specials-entire31,1001
(defun emms-url-quote-entire (url)emms-url-quote-entire39,1234
(defun emms-url-quote (s &optional safe)emms-url-quote56,1746
(defun emms-url-quote-plus (s &optional safe)emms-url-quote-plus82,2667
(defun emms-url-quote-underscore (s &optional safe)emms-url-quote-underscore87,2858
(defun emms-http-content-coding ()emms-http-content-coding92,3055
(defun emms-http-decode-buffer (&optional buffer)emms-http-decode-buffer100,3374

elpa/emms-5.2/emms-tag-editor.el,3611
(defvar emms-tag-editor-tagsemms-tag-editor-tags41,1240
(defvar emms-tag-editor-edit-buffer "*EMMS-TAGS*"emms-tag-editor-edit-buffer54,1621
(defvar emms-tag-editor-log-buffer "*EMMS-LOG*"emms-tag-editor-log-buffer56,1718
(defun emms-tag-editor-make-format (tags)emms-tag-editor-make-format59,1810
(defvar emms-tag-editor-formatsemms-tag-editor-formats74,2412
(defvar emms-tag-editor-get-format-function 'emms-tag-editor-get-formatemms-tag-editor-get-format-function105,3598
(defvar emms-tag-editor-parse-function 'emms-tag-editor-default-parseremms-tag-editor-parse-function109,3775
(defvar emms-tag-editor-tagfile-functionsemms-tag-editor-tagfile-functions119,4226
(defun emms-tag-editor-tag-flac (track)emms-tag-editor-tag-flac140,4939
(defun emms-tag-editor-tag-ogg (track)emms-tag-editor-tag-ogg164,5813
(defun emms-tag-editor-tag-file (track program tags filename)emms-tag-editor-tag-file179,6492
(defun emms-tag-editor-get-format (track)emms-tag-editor-get-format192,7030
(defun emms-tag-editor-format-track (track)emms-tag-editor-format-track201,7353
(defun emms-tag-editor-track-at (&optional pos)emms-tag-editor-track-at220,8238
(defsubst emms-tag-editor-erase-buffer (&optional buf)emms-tag-editor-erase-buffer230,8608
(defsubst emms-tag-editor-insert-track (track)emms-tag-editor-insert-track236,8821
(defsubst emms-tag-editor-display-log-buffer-maybe ()emms-tag-editor-display-log-buffer-maybe241,8975
(defun emms-tag-editor-insert-tracks (tracks)emms-tag-editor-insert-tracks246,9199
(defun emms-tag-editor-edit-track (track)emms-tag-editor-edit-track258,9682
(defun emms-tag-editor-edit-marked-tracks ()emms-tag-editor-edit-marked-tracks265,9921
(defun emms-tag-editor-edit ()emms-tag-editor-edit273,10218
(defvar emms-tag-editor-mode-mapemms-tag-editor-mode-map280,10466
(define-key emms-playlist-mode-map "E" 'emms-tag-editor-edit)emms-playlist-mode-map294,11179
(define-derived-mode emms-tag-editor-mode text-mode "Tag-Edit"emms-tag-editor-mode296,11242
(defun emms-tag-editor-set-all (tag value)emms-tag-editor-set-all300,11371
(defun emms-tag-editor-replace-in-tag (tag from to)emms-tag-editor-replace-in-tag324,12346
(defun emms-tag-editor-transpose-tag (tag1 tag2)emms-tag-editor-transpose-tag386,15735
(defun emms-tag-editor-guess-tag-filename (pattern fullname)emms-tag-editor-guess-tag-filename423,17369
(defun emms-tag-editor-compile-pattern (pattern)emms-tag-editor-compile-pattern487,20025
(defun emms-tag-editor-next-field (arg)emms-tag-editor-next-field537,21964
(defun emms-tag-editor-prev-field (arg)emms-tag-editor-prev-field544,22169
(defun emms-tag-editor-prev-track ()emms-tag-editor-prev-track553,22444
(defun emms-tag-editor-next-track ()emms-tag-editor-next-track568,23005
(defun emms-tag-editor-submit (arg)emms-tag-editor-submit582,23482
(defun emms-tag-editor-apply (tracks)emms-tag-editor-apply593,23910
(defun emms-tag-editor-submit-and-exit ()emms-tag-editor-submit-and-exit658,27138
(defun emms-tag-editor-default-parser ()emms-tag-editor-default-parser663,27292
(defun emms-tag-editor-log (&rest args)emms-tag-editor-log706,29274
(defvar emms-tag-editor-rename-format "%a - %l - %n - %t"emms-tag-editor-rename-format715,29500
(defun emms-tag-editor-rename ()emms-tag-editor-rename722,29785
(defun emms-tag-editor-rename-track (track &optional dont-apply)emms-tag-editor-rename-track731,30106
(defun emms-tag-editor-rename-marked-tracks ()emms-tag-editor-rename-marked-tracks761,31482
(define-key emms-playlist-mode-map "R" 'emms-tag-editor-rename)emms-playlist-mode-map772,31907

elpa/emms-5.2/emms-player-vlc.el,427
(define-emms-simple-player vlc '(file url)vlc32,1068
(define-emms-simple-player vlc-playlist '(streamlist)vlc-playlist38,1247
(defadvice emms-player-vlc-start (around quit-vlc-after-finish activate)emms-player-vlc-start46,1605
(defun emms-player-vlc-pause ()emms-player-vlc-pause59,2241
(defun emms-player-vlc-seek (sec)emms-player-vlc-seek64,2374
(defun emms-player-vlc-seek-to (sec)emms-player-vlc-seek-to71,2580

elpa/emms-5.2/emms.el,11406
(defvar emms-version "5.2"emms-version45,1682
(defgroup emms nilemms51,1762
(defgroup emms-player nilemms-player57,1879
(defgroup emms-source nilemms-source62,1976
(defcustom emms-player-list nilemms-player-list67,2073
(defcustom emms-show-format "Currently playing: %s"emms-show-format72,2226
(defcustom emms-repeat-playlist nilemms-repeat-playlist79,2457
(defcustom emms-random-playlist nilemms-random-playlist86,2725
(defcustom emms-repeat-track nilemms-repeat-track92,2887
(defvar-local emms-single-track nilemms-single-track98,3052
(defcustom emms-completing-read-functionemms-completing-read-function101,3141
(defcustom emms-track-description-function 'emms-track-simple-descriptionemms-track-description-function114,3590
(defcustom emms-player-delay 0emms-player-delay119,3766
(defcustom emms-playlist-shuffle-function 'emms-playlist-simple-shuffleemms-playlist-shuffle-function128,4085
(defcustom emms-playlist-sort-function 'emms-playlist-simple-sortemms-playlist-sort-function133,4245
(defcustom emms-playlist-uniq-function 'emms-playlist-simple-uniqemms-playlist-uniq-function138,4397
(defcustom emms-sort-lessp-function 'emms-sort-track-name-less-pemms-sort-lessp-function143,4570
(defcustom emms-playlist-buffer-name " *EMMS Playlist*"emms-playlist-buffer-name150,4819
(defcustom emms-playlist-default-major-mode 'emms-playlist-modeemms-playlist-default-major-mode155,4959
(defcustom emms-playlist-insert-track-function 'emms-playlist-simple-insert-trackemms-playlist-insert-track-function160,5105
(defcustom emms-playlist-update-track-function 'emms-playlist-simple-update-trackemms-playlist-update-track-function166,5348
(defcustom emms-playlist-delete-track-function 'emms-playlist-simple-delete-trackemms-playlist-delete-track-function174,5697
(defcustom emms-ok-track-function 'emms-default-ok-track-functionemms-ok-track-function180,5949
(defcustom emms-playlist-source-inserted-hook nilemms-playlist-source-inserted-hook185,6110
(defcustom emms-playlist-selection-changed-hook nilemms-playlist-selection-changed-hook191,6293
(defcustom emms-playlist-cleared-hook nilemms-playlist-cleared-hook196,6444
(defcustom emms-track-initialize-functions nilemms-track-initialize-functions203,6663
(defcustom emms-track-info-filters nilemms-track-info-filters209,6854
(defcustom emms-track-updated-functions nilemms-track-updated-functions216,7064
(defcustom emms-player-started-hook nilemms-player-started-hook223,7278
(defcustom emms-player-stopped-hook nilemms-player-stopped-hook229,7423
(defcustom emms-player-finished-hook nilemms-player-finished-hook235,7585
(defcustom emms-player-next-function 'emms-next-noerroremms-player-next-function245,7962
(defcustom emms-player-paused-hook nilemms-player-paused-hook252,8179
(defcustom emms-seek-seconds 10emms-seek-seconds258,8353
(defcustom emms-player-seeked-functions nilemms-player-seeked-functions263,8486
(defcustom emms-player-time-set-functions nilemms-player-time-set-functions270,8701
(defcustom emms-cache-get-function nilemms-cache-get-function277,8962
(defcustom emms-cache-set-function nilemms-cache-set-function283,9151
(defcustom emms-cache-modified-function nilemms-cache-modified-function290,9386
(defcustom emms-directory (expand-file-name "emms" user-emacs-directory)emms-directory296,9582
(defvar emms-player-playing-p nilemms-player-playing-p301,9766
(defvar emms-player-paused-p nilemms-player-paused-p304,9849
(defvar emms-source-old-buffer nilemms-source-old-buffer307,9933
(defvar emms-playlist-buffer nilemms-playlist-buffer312,10113
(defmacro with-current-emms-playlist (&rest body)with-current-emms-playlist320,10275
(defmacro emms-with-inhibit-read-only-t (&rest body)emms-with-inhibit-read-only-t335,10942
(defmacro emms-with-widened-buffer (&rest body)emms-with-widened-buffer341,11152
(defmacro emms-walk-tracks (&rest body)emms-walk-tracks347,11307
(defvar emms-player-base-format-listemms-player-base-format-list371,12081
(defun emms-start ()emms-start381,12370
(defun emms-stop ()emms-stop387,12563
(defun emms-next ()emms-next393,12691
(defun emms-next-noerror ()emms-next-noerror403,12993
(defun emms-previous ()emms-previous429,13861
(defun emms-random ()emms-random437,14066
(defun emms-pause ()emms-pause445,14236
(defun emms-seek (seconds)emms-seek453,14422
(defun emms-seek-to (seconds)emms-seek-to461,14700
(defun emms-seek-forward ()emms-seek-forward469,14990
(defun emms-seek-backward ()emms-seek-backward475,15138
(defun emms-show (&optional insertp)emms-show481,15292
(defun emms-shuffle ()emms-shuffle495,15880
(defun emms-sort ()emms-sort503,16098
(defun emms-uniq ()emms-uniq511,16304
(defun emms-toggle-single-track ()emms-toggle-single-track519,16528
(defun emms-toggle-random-playlist ()emms-toggle-random-playlist531,16902
(defun emms-toggle-repeat-playlist ()emms-toggle-repeat-playlist542,17361
(defun emms-toggle-repeat-track ()emms-toggle-repeat-track551,17708
(defun emms-sort-track-name-less-p (a b)emms-sort-track-name-less-p560,18025
(defun emms-ensure-player-playing-p ()emms-ensure-player-playing-p565,18189
(defun emms-completing-read (&rest args)emms-completing-read570,18368
(defun emms-display-modes ()emms-display-modes577,18623
(defun emms-insert-file-contents (filename &optional visit)emms-insert-file-contents596,19066
(defsubst emms-dictionary (name)emms-dictionary620,19961
(defsubst emms-dictionary-type (dict)emms-dictionary-type624,20052
(defun emms-dictionary-get (dict name &optional default)emms-dictionary-get628,20149
(defun emms-dictionary-set (dict name value)emms-dictionary-set635,20333
(defun emms-track (type name)emms-track651,20816
(defun emms-track-p (obj)emms-track-p668,21527
(defun emms-track-type (track)emms-track-type673,21640
(defun emms-track-name (track)emms-track-name677,21734
(defun emms-track-get (track name &optional default)emms-track-get681,21828
(defun emms-track-set (track name value)emms-track-set686,22027
(defun emms-track-description (track)emms-track-description692,22244
(defun emms-track-updated (track)emms-track-updated702,22619
(defun emms-track-simple-description (track)emms-track-simple-description708,22844
(defun emms-format-url-track-name (name)emms-format-url-track-name722,23432
(defun emms-track-force-description (track)emms-track-force-description726,23551
(defun emms-track-get-year (track)emms-track-get-year738,24048
(defun emms-format-date-to-year (date)emms-format-date-to-year752,24652
(defvar emms-playlist-buffers nilemms-playlist-buffers769,25238
(defvar emms-playlist-selected-marker nilemms-playlist-selected-marker775,25456
(defvar emms-playlist-buffer-p nilemms-playlist-buffer-p779,25609
(defun emms-playlist-ensure-playlist-buffer ()emms-playlist-ensure-playlist-buffer783,25754
(defun emms-playlist-set-playlist-buffer (&optional buffer)emms-playlist-set-playlist-buffer788,25937
(defun emms-playlist-new (&optional name)emms-playlist-new816,27281
(defun emms-playlist-buffer-list ()emms-playlist-buffer-list833,27954
(defun emms-playlist-current-kill ()emms-playlist-current-kill859,29206
(defun emms-playlist-current-clear ()emms-playlist-current-clear873,29759
(defun emms-playlist-clear ()emms-playlist-clear883,30123
(defun emms-playlist-track-at (&optional pos)emms-playlist-track-at894,30424
(defun emms-playlist-next ()emms-playlist-next901,30668
(defun emms-playlist-previous ()emms-playlist-previous915,31177
(defun emms-playlist-first ()emms-playlist-first930,31781
(defun emms-playlist-last ()emms-playlist-last945,32284
(defun emms-playlist-delete-track ()emms-playlist-delete-track959,32710
(defun emms-playlist-selected-track ()emms-playlist-selected-track965,32889
(defun emms-playlist-current-selected-track ()emms-playlist-current-selected-track971,33110
(defun emms-playlist-selected-track-at-p (&optional point)emms-playlist-selected-track-at-p976,33290
(defun emms-playlist-select (pos)emms-playlist-select987,33756
(defun emms-playlist-select-next ()emms-playlist-select-next998,34211
(defun emms-playlist-current-select-next ()emms-playlist-current-select-next1018,34910
(defun emms-playlist-select-previous ()emms-playlist-select-previous1023,35070
(defun emms-playlist-current-select-previous ()emms-playlist-current-select-previous1043,35788
(defun emms-playlist-select-random ()emms-playlist-select-random1048,35960
(defun emms-playlist-current-select-random ()emms-playlist-current-select-random1062,36495
(defun emms-playlist-select-first ()emms-playlist-select-first1067,36659
(defun emms-playlist-current-select-first ()emms-playlist-current-select-first1074,36869
(defun emms-playlist-select-last ()emms-playlist-select-last1079,37032
(defun emms-playlist-current-select-last ()emms-playlist-current-select-last1086,37239
(defun emms-playlist-insert-track (track)emms-playlist-insert-track1092,37425
(defun emms-playlist-update-track ()emms-playlist-update-track1098,37673
(defun emms-playlist-insert-source (source &rest args)emms-playlist-insert-source1104,37877
(defun emms-playlist-current-insert-source (source &rest args)emms-playlist-current-insert-source1113,38193
(defun emms-playlist-tracks-in-region (beg end)emms-playlist-tracks-in-region1119,38448
(defun emms-playlist-track-updated (track)emms-playlist-track-updated1131,38823
(defun emms-playlist-simple-insert-track (track)emms-playlist-simple-insert-track1152,39615
(defun emms-playlist-simple-update-track ()emms-playlist-simple-update-track1160,39917
(defun emms-playlist-simple-delete-track ()emms-playlist-simple-delete-track1166,40076
(defun emms-playlist-simple-shuffle ()emms-playlist-simple-shuffle1176,40431
(defun emms-playlist-simple-sort ()emms-playlist-simple-sort1202,41361
(defun emms-uniq-list (list stringify)emms-uniq-list1222,42116
(defun emms-playlist-simple-uniq ()emms-playlist-simple-uniq1238,42747
(defun emms-default-ok-track-function (track)emms-default-ok-track-function1259,43549
(defun emms-property-region (pos prop)emms-property-region1264,43682
(defun emms-shuffle-vector (vector)emms-shuffle-vector1283,44515
(defmacro define-emms-source (name arglist &rest body)define-emms-source1305,45158
(defun emms-source-play (source &rest args)emms-source-play1352,47087
(defun emms-source-add (source &rest args)emms-source-add1360,47363
(defun emms-source-insert (source &rest args)emms-source-insert1370,47778
(defmacro define-emms-combined-source (name shufflep sources)define-emms-combined-source1378,48103
(defvar emms-player-stopped-p nilemms-player-stopped-p1398,48670
(defun emms-player (start stop playablep)emms-player1401,48767
(defun emms-player-get (player name &optional inexistent)emms-player-get1423,49629
(defun emms-player-set (player name value)emms-player-set1430,49872
(defun emms-player-for (track)emms-player-for1437,50101
(defun emms-player-start (track)emms-player-start1450,50521
(defun emms-player-started (player)emms-player-started1463,51026
(defun emms-player-stop ()emms-player-stop1470,51283
(defun emms-player-stopped ()emms-player-stopped1477,51514
(defun emms-player-pause ()emms-player-pause1487,51880
(defun emms-player-seek (seconds)emms-player-seek1512,52677
(defun emms-player-seek-to (seconds)emms-player-seek-to1524,53189

elpa/emms-5.2/emms-player-mplayer.el,364
(define-emms-simple-player mplayer '(file url)mplayer36,1240
(define-emms-simple-player mplayer-playlist '(streamlist)mplayer-playlist42,1449
(defun emms-player-mplayer-pause ()emms-player-mplayer-pause63,1947
(defun emms-player-mplayer-seek (sec)emms-player-mplayer-seek68,2092
(defun emms-player-mplayer-seek-to (sec)emms-player-mplayer-seek-to74,2257

elpa/emms-5.2/emms-autoloads.el,0

elpa/emms-5.2/emms-volume.el,1178
(defgroup emms-volume nilemms-volume54,1887
(defcustom emms-volume-change-function 'emms-volume-amixer-changeemms-volume-change-function59,1999
(defcustom emms-volume-change-amount 2emms-volume-change-amount68,2426
(defun emms-volume-raise ()emms-volume-raise77,2648
(defun emms-volume-lower ()emms-volume-lower83,2805
(define-key emms-playlist-mode-map (kbd "+") 'emms-volume-raise)emms-playlist-mode-map88,2951
(define-key emms-playlist-mode-map (kbd "-") 'emms-volume-lower)emms-playlist-mode-map89,3016
(define-minor-mode emms-volume-minor-modeemms-volume-minor-mode92,3118
(defvar emms-volume-mode-timeout 2emms-volume-mode-timeout100,3365
(defvar emms-volume-mode-timer nilemms-volume-mode-timer103,3474
(defun emms-volume-mode-plus ()emms-volume-mode-plus107,3571
(defun emms-volume-mode-minus ()emms-volume-mode-minus114,3771
(defun emms-volume-mode-disable-timer ()emms-volume-mode-disable-timer120,3957
(defun emms-volume-mode-set-timer ()emms-volume-mode-set-timer125,4120
(defun emms-volume-mode-timer-timeout ()emms-volume-mode-timer-timeout133,4469
(defun emms-volume-mode-start-or-extend ()emms-volume-mode-start-or-extend138,4639

elpa/emms-5.2/emms-librefm-scrobbler.el,2421
(defvar emms-librefm-scrobbler-handshake-urlemms-librefm-scrobbler-handshake-url36,1167
(defvar emms-librefm-scrobbler-methodemms-librefm-scrobbler-method40,1269
(defvar emms-librefm-scrobbler-username nilemms-librefm-scrobbler-username44,1340
(defvar emms-librefm-scrobbler-password nilemms-librefm-scrobbler-password51,1560
(defvar emms-librefm-scrobbler-debugemms-librefm-scrobbler-debug57,1744
(defvar emms-librefm-scrobbler-session-idemms-librefm-scrobbler-session-id61,1835
(defvar emms-librefm-scrobbler-now-playing-urlemms-librefm-scrobbler-now-playing-url65,1914
(defvar emms-librefm-scrobbler-submission-urlemms-librefm-scrobbler-submission-url69,2007
(defvar emms-librefm-scrobbler-track-play-start-timestampemms-librefm-scrobbler-track-play-start-timestamp73,2085
(defvar emms-librefm-scrobbler-display-submissionsemms-librefm-scrobbler-display-submissions77,2190
(defun emms-librefm-scrobbler--get-auth-detail (token)emms-librefm-scrobbler--get-auth-detail85,2466
(defun emms-librefm-scrobbler--username ()emms-librefm-scrobbler--username97,3049
(defun emms-librefm-scrobbler--password ()emms-librefm-scrobbler--password102,3221
(defun emms-librefm-scrobbler-handshake-string (url username password)emms-librefm-scrobbler-handshake-string113,3655
(defun emms-librefm-scrobbler-handshake-call (url username password)emms-librefm-scrobbler-handshake-call133,4244
(defun emms-librefm-scrobbler-handle-handshake-response (resbuf)emms-librefm-scrobbler-handle-handshake-response146,4716
(defun emms-librefm-scrobbler-handshake ()emms-librefm-scrobbler-handshake182,6095
(defun emms-librefm-scrobbler-make-query (track rating)emms-librefm-scrobbler-make-query195,6569
(defun emms-librefm-scrobbler-get-response-status ()emms-librefm-scrobbler-get-response-status232,7799
(defun emms-librefm-scrobbler-make-async-submission-call (track rating)emms-librefm-scrobbler-make-async-submission-call244,8274
(defun emms-librefm-scrobbler-async-submission-callback (status &optional cbargs)emms-librefm-scrobbler-async-submission-callback255,8768
(defun emms-librefm-scrobbler-start-hook ()emms-librefm-scrobbler-start-hook279,9814
(defun emms-librefm-scrobbler-stop-hook ()emms-librefm-scrobbler-stop-hook283,9946
(defun emms-librefm-scrobbler-enable ()emms-librefm-scrobbler-enable300,10680
(defun emms-librefm-scrobbler-disable ()emms-librefm-scrobbler-disable312,11115

elpa/emms-5.2/emms-show-all.el,873
(defvar emms-show-all-buffer-name "Emms Track Information"emms-show-all-buffer-name35,1114
(defvar emms-show-all-kill-buffer-on-quit-p nilemms-show-all-kill-buffer-on-quit-p38,1219
(defvar emms-show-all-track-alist nilemms-show-all-track-alist41,1319
(defvar emms-show-all-mode-mapemms-show-all-mode-map44,1402
(define-derived-mode emms-show-all-mode text-mode "Emms-Show-All"emms-show-all-mode52,1679
(defun emms-show-all-edit-track ()emms-show-all-edit-track56,1811
(defun emms-show-all-mode-bury-buffer ()emms-show-all-mode-bury-buffer63,2016
(defun emms-show-all-setup-buffer ()emms-show-all-setup-buffer70,2219
(defun emms-show-all-format (track)emms-show-all-format83,2678
(defun emms-show-all-insert (track)emms-show-all-insert94,3003
(defun emms-show-all-track (track)emms-show-all-track105,3367
(defun emms-show-all ()emms-show-all114,3671

elpa/emms-5.2/emms-score.el,2332
(defvar emms-scores-list nil)emms-scores-list67,2457
(defvar emms-score-current-mood 'default)emms-score-current-mood68,2487
(defvar emms-score-min-score 0)emms-score-min-score69,2529
(defvar emms-score-default-score 0)emms-score-default-score70,2561
(defvar emms-score-hash (make-hash-table :test 'equal))emms-score-hash71,2597
(defvar emms-score-enabled-p nilemms-score-enabled-p72,2653
(defcustom emms-score-file (concat (file-name-as-directory emms-directory) "scores")emms-score-file75,2726
(defun emms-score (arg)emms-score83,2910
(defun emms-score-enable ()emms-score-enable100,3490
(defun emms-score-disable ()emms-score-disable107,3625
(defun emms-score-toggle ()emms-score-toggle114,3764
(defun emms-score-change-mood (mood)emms-score-change-mood121,3912
(defun emms-score-up-playing ()emms-score-up-playing128,4128
(defun emms-score-down-playing ()emms-score-down-playing134,4327
(defun emms-score-up-file-on-line ()emms-score-up-file-on-line140,4529
(defun emms-score-down-file-on-line ()emms-score-down-file-on-line144,4645
(defun emms-score-less-tolerant ()emms-score-less-tolerant148,4764
(defun emms-score-more-tolerant ()emms-score-more-tolerant154,4982
(defun emms-score-set-playing (score)emms-score-set-playing160,5207
(defun emms-score-set-file-on-line (score)emms-score-set-file-on-line170,5559
(defun emms-score-set-tolerance (tolerance)emms-score-set-tolerance179,5877
(defun emms-score-show-playing ()emms-score-show-playing185,6120
(defun emms-score-show-file-on-line ()emms-score-show-file-on-line193,6370
(defun emms-score-current-selected-track-filename ()emms-score-current-selected-track-filename204,6650
(defun emms-score-track-at-filename ()emms-score-track-at-filename208,6816
(defun emms-score-ok-track-function (track)emms-score-ok-track-function212,6966
(defun emms-score-save-hash ()emms-score-save-hash216,7105
(defun emms-score-load-hash ()emms-score-load-hash229,7532
(defun emms-score-get-plist (filename)emms-score-get-plist243,8005
(defun emms-score-change-score (score filename)emms-score-change-score246,8083
(defun emms-score-create-entry (filename)emms-score-create-entry254,8367
(defun emms-score-get-score (filename)emms-score-get-score259,8510
(defun emms-score-check-score (filename)emms-score-check-score267,8798

elpa/emms-5.2/emms-stream-info.el,472
(defvar emms-stream-info-backend nilemms-stream-info-backend47,1703
(defmacro emms-stream-info-defreg (symname regexp)emms-stream-info-defreg51,1847
(defun emms-stream-info-mplayer-backend (url)emms-stream-info-mplayer-backend60,2191
(defun emms-stream-info-vlc-backend (url)emms-stream-info-vlc-backend69,2494
(defun emms-stream-info-call-backend (url)emms-stream-info-call-backend78,2795
(defun emms-stream-info-message (url)emms-stream-info-message104,3887

elpa/emms-5.2/emms-last-played.el,729
(defvar emms-last-played-keep-count temms-last-played-keep-count35,1152
(defvar emms-last-played-format-alistemms-last-played-format-alist39,1331
(defun emms-last-played-update-track (track)emms-last-played-update-track65,2576
(defun emms-last-played-increment-count (track)emms-last-played-increment-count69,2719
(defun emms-last-played-update-current ()emms-last-played-update-current77,3031
(defun emms-last-played-seconds-today ()emms-last-played-seconds-today83,3294
(defun emms-last-played-seconds-month ()emms-last-played-seconds-month88,3500
(defun emms-last-played-seconds-year ()emms-last-played-seconds-year94,3757
(defun emms-last-played-format-date (messy-date)emms-last-played-format-date101,4064

elpa/elfeed-org-20181015.1100/elfeed-org-pkg.el,413
(define-package "elfeed-org" "20181015.1100" "Configure elfeed with one or more org-mode files" '((elfeed "1.1.1") (org "8.2.7") (dash "2.10.0") (s "1.9.0") (cl-lib "0.5")) :commit "77b6bbf222487809813de260447d31c4c59902c9" :keywords '("news") :authors '(("Remy Honig" . "remyhonig@gmail.com")) :maintainer '("Remy Honig" . "remyhonig@gmail.com") :url "https://github.com/remyhonig/elfeed-org")"elfeed-org"2,31

elpa/elfeed-org-20181015.1100/elfeed-org-autoloads.el,0

elpa/elfeed-org-20181015.1100/elfeed-org.el,2406
(defgroup elfeed-org nilelfeed-org44,1672
(defcustom rmh-elfeed-org-tree-id "elfeed"rmh-elfeed-org-tree-id49,1772
(defcustom rmh-elfeed-org-ignore-tag "ignore"rmh-elfeed-org-ignore-tag54,1920
(defcustom rmh-elfeed-org-auto-ignore-invalid-feeds nilrmh-elfeed-org-auto-ignore-invalid-feeds59,2057
(defcustom rmh-elfeed-org-files (list "~/.emacs.d/elfeed.org")rmh-elfeed-org-files64,2209
(defvar elfeed-org-new-entry-hook nilelfeed-org-new-entry-hook69,2418
(defun rmh-elfeed-org-check-configuration-file (file)rmh-elfeed-org-check-configuration-file72,2516
(defun rmh-elfeed-org-is-headline-contained-in-elfeed-tree ()rmh-elfeed-org-is-headline-contained-in-elfeed-tree78,2787
(defun rmh-elfeed-org-mark-feed-ignore (url)rmh-elfeed-org-mark-feed-ignore87,3129
(defun rmh-elfeed-org-import-trees (tree-id)rmh-elfeed-org-import-trees105,3964
(defun rmh-elfeed-org-convert-tree-to-headlines (parsed-org)rmh-elfeed-org-convert-tree-to-headlines119,4491
(defun rmh-elfeed-org-flag-headlines (parsed-org)rmh-elfeed-org-flag-headlines149,6081
(defun rmh-elfeed-org-filter-relevant (list)rmh-elfeed-org-filter-relevant157,6375
(defun rmh-elfeed-org-cleanup-headlines (headlines tree-id)rmh-elfeed-org-cleanup-headlines167,6639
(defun rmh-elfeed-org-import-headlines-from-files (files tree-id)rmh-elfeed-org-import-headlines-from-files172,6802
(defun rmh-elfeed-org-convert-headline-to-tagger-params (tagger-headline)rmh-elfeed-org-convert-headline-to-tagger-params185,7490
(defun rmh-elfeed-org-export-entry-hook (tagger-params)rmh-elfeed-org-export-entry-hook192,7757
(defun rmh-elfeed-org-export-feed (headline)rmh-elfeed-org-export-feed199,8035
(defun rmh-elfeed-org-process (files tree-id)rmh-elfeed-org-process210,8486
(defun elfeed-org-run-new-entry-hook (entry)elfeed-org-run-new-entry-hook234,9566
(defun rmh-elfeed-org-filter-taggers (headlines)rmh-elfeed-org-filter-taggers239,9715
(defun rmh-elfeed-org-filter-subscriptions (headlines)rmh-elfeed-org-filter-subscriptions246,9976
(defun rmh-elfeed-org-convert-opml-to-org (xml level)rmh-elfeed-org-convert-opml-to-org261,10785
(defun elfeed-org-import-opml (opml-file)elfeed-org-import-opml273,11412
(defun rmh-elfeed-org-convert-org-to-opml (org-buffer)rmh-elfeed-org-convert-org-to-opml287,11957
(defun elfeed-org-export-opml ()elfeed-org-export-opml341,14828
(defun elfeed-org ()elfeed-org365,15804

elpa/zenburn-theme-2.6/zenburn-theme.el,1117
(deftheme zenburn "The Zenburn color theme")zenburn35,1138
(defgroup zenburn-theme nilzenburn-theme37,1184
(defcustom zenburn-override-colors-alist '()zenburn-override-colors-alist44,1374
(defcustom zenburn-use-variable-pitch nilzenburn-use-variable-pitch54,1679
(defcustom zenburn-height-minus-1 0.8zenburn-height-minus-160,1860
(defcustom zenburn-height-plus-1 1.1zenburn-height-plus-166,1996
(defcustom zenburn-height-plus-2 1.15zenburn-height-plus-272,2131
(defcustom zenburn-height-plus-3 1.2zenburn-height-plus-378,2267
(defcustom zenburn-height-plus-4 1.3zenburn-height-plus-484,2402
(defcustom zenburn-scale-org-headlines nilzenburn-scale-org-headlines90,2537
(defcustom zenburn-scale-outline-headlines nilzenburn-scale-outline-headlines96,2712
(defvar zenburn-default-colors-alistzenburn-default-colors-alist104,2914
(defmacro zenburn-with-color-variables (&rest body)zenburn-with-color-variables156,4773
(defvar zenburn-add-font-lock-keywords nilzenburn-add-font-lock-keywords1579,91780
(defvar zenburn-colors-font-lock-keywords nil)zenburn-colors-font-lock-keywords1586,92106

elpa/zenburn-theme-2.6/zenburn-theme-pkg.el,316
(define-package "zenburn-theme" "2.6" "A low contrast color theme for Emacs." 'nil :commit "4c75edfe7862c903b2584266284ed951004f5b62" :authors '(("Bozhidar Batsov" . "bozhidar@batsov.com")) :maintainer '("Bozhidar Batsov" . "bozhidar@batsov.com") :url "http://github.com/bbatsov/zenburn-emacs")"zenburn-theme"2,31

elpa/zenburn-theme-2.6/zenburn-theme-autoloads.el,83
(defvar zenburn-override-colors-alist 'nil "\zenburn-override-colors-alist12,319

elpa/dashboard-1.6.0/dashboard-widgets.el,4246
(defcustom dashboard-page-separator "\n\f\n"dashboard-page-separator23,617
(defcustom dashboard-image-banner-max-height 0dashboard-image-banner-max-height28,750
(defcustom dashboard-image-banner-max-width 0dashboard-image-banner-max-width37,1057
(defcustom dashboard-set-heading-icons nildashboard-set-heading-icons46,1356
(defcustom dashboard-set-file-icons nildashboard-set-file-icons51,1490
(defcustom dashboard-set-navigator nildashboard-set-navigator56,1615
(defcustom dashboard-set-init-info tdashboard-set-init-info61,1759
(defcustom dashboard-set-footer tdashboard-set-footer66,1899
(defcustom dashboard-show-shortcuts tdashboard-show-shortcuts71,2032
(defconst dashboard-banners-directorydashboard-banners-directory76,2161
(defconst dashboard-banner-official-pngdashboard-banner-official-png81,2296
(defconst dashboard-banner-logo-pngdashboard-banner-logo-png85,2432
(defconst dashboard-banner-length 75dashboard-banner-length89,2563
(defvar dashboard-banner-logo-title "Welcome to Emacs!"dashboard-banner-logo-title92,2625
(defvar dashboard-navigator-buttons nildashboard-navigator-buttons95,2715
(defvar dashboard-init-infodashboard-init-info102,2952
(defvar dashboard-footerdashboard-footer113,3512
(defvar dashboard-footer-icondashboard-footer-icon128,4141
(defvar dashboard-startup-banner 'officialdashboard-startup-banner139,4560
(defvar dashboard-buffer-last-width nildashboard-buffer-last-width147,4877
(defvar dashboard-item-generators  '((recents   . dashboard-insert-recents)dashboard-item-generators150,4959
(defvar dashboard-items '((recents   . 5)dashboard-items156,5346
(defvar dashboard-items-default-length 20dashboard-items-default-length164,5696
(defvar dashboard-heading-icons '((recents   . "history")dashboard-heading-icons168,5835
(defvar recentf-list nil)recentf-list178,6356
(defface dashboard-text-bannerdashboard-text-banner183,6398
(defface dashboard-banner-logo-titledashboard-banner-logo-title188,6526
(defface dashboard-navigatordashboard-navigator193,6647
(defface dashboard-headingdashboard-heading198,6774
(defface dashboard-footerdashboard-footer203,6901
(defun dashboard-subseq (seq start end)dashboard-subseq218,7330
(defmacro dashboard-insert-shortcut (shortcut-chardashboard-insert-shortcut227,7677
(defun dashboard-append (msg &optional _messagebuf)dashboard-append245,8534
(defun dashboard-modify-heading-icons (alist)dashboard-modify-heading-icons253,8833
(defun dashboard-insert-page-break ()dashboard-insert-page-break258,9020
(defun dashboard-insert-heading (heading &optional shortcut)dashboard-insert-heading262,9156
(defun dashboard-center-line (string)dashboard-center-line291,10795
(defun dashboard-insert-ascii-banner-centered (file)dashboard-insert-ascii-banner-centered299,11038
(defun dashboard-insert-image-banner (banner)dashboard-insert-image-banner320,11911
(defun dashboard-insert-init-info ()dashboard-insert-init-info347,13017
(defun dashboard-get-banner-path (index)dashboard-get-banner-path354,13274
(defun dashboard-choose-banner ()dashboard-choose-banner358,13433
(defun dashboard-insert-banner ()dashboard-insert-banner382,14620
(defun dashboard-insert-navigator ()dashboard-insert-navigator395,15096
(defmacro dashboard-insert-section (section-name list list-size shortcut action &rest widget-params)dashboard-insert-section433,16950
(defmacro dashboard-insert-section-list (section-name list action &rest rest)dashboard-insert-section-list453,17796
(defun dashboard-insert-footer ()dashboard-insert-footer499,20300
(defun dashboard-insert-recents (list-size)dashboard-insert-recents512,20615
(defun dashboard-insert-bookmarks (list-size)dashboard-insert-bookmarks526,20927
(defun dashboard-insert-projects (list-size)dashboard-insert-projects544,21385
(defun dashboard-timestamp-to-gregorian-date (timestamp)dashboard-timestamp-to-gregorian-date561,21851
(defun dashboard-date-due-p (timestamp &optional due-date)dashboard-date-due-p571,22185
(defun dashboard-get-agenda ()dashboard-get-agenda587,22838
(defun dashboard-insert-agenda (list-size)dashboard-insert-agenda619,24190
(defun dashboard-insert-registers (list-size)dashboard-insert-registers639,24792

elpa/dashboard-1.6.0/dashboard-autoloads.el,0

elpa/dashboard-1.6.0/dashboard.el,1066
(defvar dashboard-mode-mapdashboard-mode-map32,771
(define-derived-mode dashboard-mode special-mode "Dashboard"dashboard-mode49,1529
(defgroup dashboard nildashboard63,1877
(defcustom dashboard-center-content nildashboard-center-content67,1957
(defconst dashboard-buffer-name "*dashboard*"dashboard-buffer-name72,2085
(defvar dashboard--section-starts nildashboard--section-starts75,2162
(defun dashboard-previous-section ()dashboard-previous-section78,2242
(defun dashboard-next-section ()dashboard-next-section95,2896
(defun dashboard-previous-line (arg)dashboard-previous-line108,3341
(defun dashboard-next-line (arg)dashboard-next-line114,3560
(defun dashboard-maximum-section-length ()dashboard-maximum-section-length129,4191
(defun dashboard-insert-startupify-lists ()dashboard-insert-startupify-lists141,4605
(defun dashboard-refresh-buffer ()dashboard-refresh-buffer200,7298
(defun dashboard-resize-on-hook (&optional _)dashboard-resize-on-hook207,7490
(defun dashboard-setup-startup-hook ()dashboard-setup-startup-hook217,7871

elpa/dashboard-1.6.0/dashboard-pkg.el,96
(define-package "dashboard" "1.6.0" "A startup screen extracted from Spacemacs""dashboard"1,0

elpa/mode-icons-0.4.0/mode-icons-autoloads.el,54
(defvar mode-icons-mode nil "\mode-icons-mode12,307

elpa/mode-icons-0.4.0/mode-icons.el,10705
(defgroup mode-icons nilmode-icons79,2368
(defconst mode-icons--directorymode-icons--directory84,2477
(defun mode-icons-get-icon-file (icon)mode-icons-get-icon-file90,2636
(defmacro mode-icons-save-buffer-state (&rest body)mode-icons-save-buffer-state97,2868
(defcustom mode-iconsmode-icons137,4618
(defvar mode-icons-get-xpm-string (make-hash-table :test 'equal))mode-icons-get-xpm-string275,10339
(defun mode-icons-get-xpm-string (icon-path)mode-icons-get-xpm-string276,10405
(defun mode-icons-get-icon-display-xpm-replace (icon-path rep-alist &optional name)mode-icons-get-icon-display-xpm-replace285,10859
(defun mode-icons-interpolate (c1 c2 &optional factor)mode-icons-interpolate296,11416
(defun mode-icons-interpolate-from-scale (foreground background)mode-icons-interpolate-from-scale308,11987
(defvar mode-icons-get-icon-display-xpm-bw-face (make-hash-table)mode-icons-get-icon-display-xpm-bw-face323,12527
(defun mode-icons-get-icon-display-xpm-bw-face (icon-path &optional face)mode-icons-get-icon-display-xpm-bw-face326,12629
(defun mode-icons-get-xpm-icon-colors (icon-path)mode-icons-get-xpm-icon-colors341,13654
(defun mode-icons-desaturate-colors (colors &optional foreground background)mode-icons-desaturate-colors353,14104
(defun mode-icons-desaturate-xpm (icon-path &optional face)mode-icons-desaturate-xpm379,15269
(defcustom mode-icons-desaturate-inactive tmode-icons-desaturate-inactive399,16475
(defcustom mode-icons-desaturate-active nilmode-icons-desaturate-active406,16679
(defcustom mode-icons-grayscale-transform tmode-icons-grayscale-transform413,16881
(defvar mode-icons-get-icon-display (make-hash-table :test 'equal)mode-icons-get-icon-display418,17025
(defun mode-icons--get-face (&optional face active)mode-icons--get-face421,17143
(defun mode-icons-get-icon-display (icon type &optional face active)mode-icons-get-icon-display426,17357
(defcustom mode-icons-minor-mode-base-text-propertiesmode-icons-minor-mode-base-text-properties502,21833
(defcustom mode-icons-major-mode-base-text-propertiesmode-icons-major-mode-base-text-properties510,22112
(defcustom mode-icons-narrow-text-propertiesmode-icons-narrow-text-properties518,22498
(defcustom mode-icons-read-only-text-propertiesmode-icons-read-only-text-properties528,22844
(defcustom mode-icons-modified-text-propertiesmode-icons-modified-text-properties538,23243
(defun mode-icons-save-steal-or-revert-buffer (event)mode-icons-save-steal-or-revert-buffer550,23736
(defun mode-icons-modified-help-echo (window _object _point)mode-icons-modified-help-echo567,24553
(defcustom mode-icons-read-only-text-propertiesmode-icons-read-only-text-properties593,25631
(defvar mode-icons-powerline-p nil)mode-icons-powerline-p603,26030
(defun mode-icons-need-update-p ()mode-icons-need-update-p604,26066
(defvar mode-icons-font-register-alist nilmode-icons-font-register-alist610,26352
(defun mode-icons-supported-font-p (char font)mode-icons-supported-font-p613,26432
(defun mode-icons-supported-p (icon-spec)mode-icons-supported-p640,27832
(defvar emojify-image-dir)emojify-image-dir661,28949
(defvar emojify-emojis)emojify-emojis663,28977
(defvar mode-icons--gimp (executable-find "gimp")mode-icons--gimp665,29002
(defvar mode-icons--gimp-inferior-args "-i -d -b -")mode-icons--gimp-inferior-args668,29086
(defvar mode-icons--stop-gimp-after nilmode-icons--stop-gimp-after670,29140
(defvar mode-icons--stop-gimp-timer nil)mode-icons--stop-gimp-timer674,29287
(defun mode-icons--start-gimp-inferior ()mode-icons--start-gimp-inferior676,29329
(defvar mode-icons--gimp-ready-p nil)mode-icons--gimp-ready-p687,29807
(defun mode-icons--gimp-ready-p ()mode-icons--gimp-ready-p689,29846
(defvar mode-icons--stop-gimp-inferior nil)mode-icons--stop-gimp-inferior701,30337
(defun mode-icons--stop-gimp-inferior ()mode-icons--stop-gimp-inferior702,30381
(defun mode-icons--process-gimp (scm)mode-icons--process-gimp718,31036
(defvar mode-icons--generic-type-to-xpm-gimp-scriptmode-icons--generic-type-to-xpm-gimp-script732,31650
(defvar mode-icons--font-to-xpm-gimp-scriptmode-icons--font-to-xpm-gimp-script779,33601
(defvar mode-icons--convert-ext-to-xpm (make-hash-table :test 'equal))mode-icons--convert-ext-to-xpm819,35179
(defun mode-icons--convert-ext-to-xpm (ext)mode-icons--convert-ext-to-xpm820,35250
(defun mode-icons--ext-available-p (icon-spec)mode-icons--ext-available-p831,35789
(defcustom mode-icons-generate-font-grayscale nilmode-icons-generate-font-grayscale841,36194
(defvar mode-icons--convert-text-to-xpm (make-hash-table :test 'equal))mode-icons--convert-text-to-xpm849,36476
(defun mode-icons--convert-text-to-xpm (text font xpm &optional face height)mode-icons--convert-text-to-xpm850,36548
(defun mode-icons--get-font-xpm-file (icon-spec &optional icon-name)mode-icons--get-font-xpm-file902,39188
(defun mode-icons--create-font-xpm-file (icon-spec)mode-icons--create-font-xpm-file919,39960
(defun mode-icons--convert-all-font-icons-to-xpm ()mode-icons--convert-all-font-icons-to-xpm929,40343
(defvar mode-icons--png-to-xpm-gimp-scriptmode-icons--png-to-xpm-gimp-script937,40688
(defvar mode-icons--convert-png-to-xpm (make-hash-table :test 'equal)mode-icons--convert-png-to-xpm954,41425
(defun mode-icons--convert-png-to-xpm (png xpm)mode-icons--convert-png-to-xpm957,41548
(defun mode-icons--get-png-xpm-file (icon-spec &optional icon-name)mode-icons--get-png-xpm-file965,41981
(defun mode-icons--get-emoji-xpm-file (icon-spec &optional icon-name)mode-icons--get-emoji-xpm-file973,42265
(defun mode-icons--get-png (mode icon-spec &optional face active)mode-icons--get-png989,42896
(defcustom mode-icons-prefer-xpm-over-emoji nilmode-icons-prefer-xpm-over-emoji1027,44757
(defcustom mode-icons-generate-emoji-xpms nilmode-icons-generate-emoji-xpms1034,44963
(defun mode-icons--get-emoji (mode icon-spec &optional face active)mode-icons--get-emoji1039,45097
(defcustom mode-icons-prefer-xpm-over-font nilmode-icons-prefer-xpm-over-font1082,47462
(defcustom mode-icons-generate-font-xpms nilmode-icons-generate-font-xpms1089,47667
(defun mode-icons--get-font (mode icon-spec &optional face active)mode-icons--get-font1094,47800
(defun mode-icons-propertize-mode (mode icon-spec &optional face active)mode-icons-propertize-mode1127,49520
(defvar mode-icons-get-icon-spec (make-hash-table :test 'equal)mode-icons-get-icon-spec1168,51735
(defun mode-icons-get-icon-spec (mode)mode-icons-get-icon-spec1170,51839
(defcustom mode-icons-show-mode-name nilmode-icons-show-mode-name1194,53343
(defcustom mode-icons-change-mode-name tmode-icons-change-mode-name1199,53455
(defun mode-icons-get-mode-icon (mode &optional face active)mode-icons-get-mode-icon1207,53652
(defvar mode-icons-cached-mode-name nilmode-icons-cached-mode-name1226,54432
(defvar mode-icons--mode-name nilmode-icons--mode-name1229,54533
(defun mode-icons-set-mode-icon (mode)mode-icons-set-mode-icon1232,54608
(defun mode-icons-major-mode-icons-undo ()mode-icons-major-mode-icons-undo1242,54981
(defun mode-icons-major-mode-icons ()mode-icons-major-mode-icons1250,55255
(defun mode-icons-set-current-mode-icon ()mode-icons-set-current-mode-icon1256,55435
(defvar mode-icons-set-minor-mode-icon-alist nil)mode-icons-set-minor-mode-icon-alist1260,55564
(defun mode-icons-set-minor-mode-icon-undo (&optional dont-update)mode-icons-set-minor-mode-icon-undo1262,55615
(defcustom mode-icons-separate-images-with-spaces tmode-icons-separate-images-with-spaces1274,56054
(defun mode-icons-set-minor-mode-icon (&optional dont-update)mode-icons-set-minor-mode-icon1279,56189
(defun mode-icons--generate-major-mode-item (&optional face)mode-icons--generate-major-mode-item1303,57367
(defvar mode-icons--selected-window (frame-selected-window)mode-icons--selected-window1313,57899
(defun mode-icons--set-selected-window ()mode-icons--set-selected-window1316,57982
(defun mode-icons--unset-selected-window ()mode-icons--unset-selected-window1321,58223
(defadvice handle-switch-framehandle-switch-frame1337,58878
(defadvice select-window (after mode-icons--select-window activate)select-window1342,59067
(defun mode-icons--selected-window-active ()mode-icons--selected-window-active1346,59221
(defun mode-icons--property-substrings (str prop)mode-icons--property-substrings1350,59370
(defun mode-icons--recolor-string (string &optional active face)mode-icons--recolor-string1362,59819
(defun mode-icons--recolor-minor-mode-image (mode active &optional face)mode-icons--recolor-minor-mode-image1375,60291
(defun mode-icons--generate-minor-mode-list (&optional face)mode-icons--generate-minor-mode-list1394,61273
(defun mode-icons--generate-narrow (&optional face)mode-icons--generate-narrow1404,61954
(defcustom mode-icons-read-only-space tmode-icons-read-only-space1421,63049
(defun mode-icons--read-only-status (&optional face)mode-icons--read-only-status1426,63165
(defcustom mode-icons-modified-status-space tmode-icons-modified-status-space1450,64350
(defun mode-icons--modified-status (&optional face)mode-icons--modified-status1455,64470
(defvar mode-icons--backup-construct nil)mode-icons--backup-construct1497,67034
(defvar mode-icons--mode-line-constructmode-icons--mode-line-construct1498,67076
(defvar mode-icons--major-backup-construct nil)mode-icons--major-backup-construct1502,67218
(defvar mode-icons--major-constructmode-icons--major-construct1503,67266
(defvar mode-icons--narrow-backup-construct nil)mode-icons--narrow-backup-construct1507,67397
(defvar mode-icons--narrow-constructmode-icons--narrow-construct1508,67446
(defvar mode-icons--read-only-backup-construct nil)mode-icons--read-only-backup-construct1513,67582
(defvar mode-icons--read-only-constructmode-icons--read-only-construct1514,67634
(defvar mode-icons--modified-backup-construct nil)mode-icons--modified-backup-construct1519,67778
(defvar mode-icons--modified-constructmode-icons--modified-construct1520,67829
(defvar mode-icons--backup-eol-construct nil)mode-icons--backup-eol-construct1524,67970
(defvar mode-icons--eol-constructmode-icons--eol-construct1525,68016
(defcustom mode-icons-eol-space tmode-icons-eol-space1529,68123
(defcustom mode-icons-eol-text nilmode-icons-eol-text1534,68247
(defun mode-icons--mode-line-eol-desc (&optional string face)mode-icons--mode-line-eol-desc1542,68395
(defun mode-icons-fix (&optional enable)mode-icons-fix1588,70327
(define-minor-mode mode-icons-modemode-icons-mode1660,73860
(defun mode-icons-reset-hash ()mode-icons-reset-hash1674,74350
(defun mode-icons-reset ()mode-icons-reset1680,74604

elpa/mode-icons-0.4.0/mode-icons-pkg.el,77
(define-package "mode-icons" "0.4.0" "Show icons for modes""mode-icons"1,0

elpa/all-the-icons-ivy-20190508.1803/all-the-icons-ivy-pkg.el,291
(define-package "all-the-icons-ivy" "20190508.1803" "Shows icons while using ivy and counsel" '((emacs "24.4") (all-the-icons "2.4.0") (ivy "0.8.0")) :commit "babea626db20773de4c408acb2788e2b9c8277e3" :keywords '("faces") :authors '(("asok")) :maintainer '("asok"))"all-the-icons-ivy"2,31

elpa/all-the-icons-ivy-20190508.1803/all-the-icons-ivy-autoloads.el,0

elpa/all-the-icons-ivy-20190508.1803/all-the-icons-ivy.el,1190
(defface all-the-icons-ivy-dir-faceall-the-icons-ivy-dir-face40,1268
(defgroup all-the-icons-ivy nilall-the-icons-ivy46,1469
(defcustom all-the-icons-ivy-buffer-commandsall-the-icons-ivy-buffer-commands50,1562
(defcustom all-the-icons-spacerall-the-icons-spacer56,1819
(defcustom all-the-icons-ivy-family-fallback-for-bufferall-the-icons-ivy-family-fallback-for-buffer62,1973
(defcustom all-the-icons-ivy-name-fallback-for-bufferall-the-icons-ivy-name-fallback-for-buffer69,2230
(defcustom all-the-icons-ivy-file-commandsall-the-icons-ivy-file-commands76,2472
(defun all-the-icons-ivy--buffer-propertize (b s)all-the-icons-ivy--buffer-propertize88,2804
(defun all-the-icons-ivy--icon-for-mode (mode)all-the-icons-ivy--icon-for-mode95,3051
(defun all-the-icons-ivy--buffer-transformer (b s)all-the-icons-ivy--buffer-transformer101,3268
(defun all-the-icons-ivy-icon-for-file (s)all-the-icons-ivy-icon-for-file115,4136
(defun all-the-icons-ivy-file-transformer (s)all-the-icons-ivy-file-transformer124,4486
(defun all-the-icons-ivy-buffer-transformer (s)all-the-icons-ivy-buffer-transformer130,4736
(defun all-the-icons-ivy-setup ()all-the-icons-ivy-setup141,5180

elpa/transient-0.1.0/transient-pkg.el,73
(define-package "transient" "0.1.0" "Transient commands""transient"1,0

elpa/transient-0.1.0/transient-autoloads.el,0

elpa/transient-0.1.0/transient.el,12763
(defgroup transient niltransient65,2243
(defcustom transient-show-popup ttransient-show-popup69,2312
(defcustom transient-show-common-commands niltransient-show-common-commands83,2901
(defcustom transient-highlight-mismatched-keys niltransient-highlight-mismatched-keys93,3277
(defcustom transient-substitute-key-function niltransient-substitute-key-function109,3942
(defcustom transient-detect-key-conflicts niltransient-detect-key-conflicts134,4913
(defcustom transient-default-level 4transient-default-level144,5223
(defcustom transient-levels-filetransient-levels-file177,6654
(defcustom transient-values-filetransient-values-file184,6905
(defcustom transient-history-filetransient-history-file191,7137
(defcustom transient-history-limit 10transient-history-limit198,7390
(defcustom transient-save-history ttransient-save-history204,7569
(defgroup transient-faces niltransient-faces212,7767
(defface transient-heading '((t :inherit font-lock-keyword-face))transient-heading216,7848
(defface transient-key '((t :inherit font-lock-builtin-face))transient-key220,7970
(defface transient-argument '((t :inherit font-lock-warning-face))transient-argument224,8084
(defface transient-value '((t :inherit font-lock-string-face))transient-value228,8216
(defface transient-inactive-argument '((t :inherit shadow))transient-inactive-argument232,8333
(defface transient-inactive-value '((t :inherit shadow))transient-inactive-value236,8459
(defface transient-unreachable '((t :inherit shadow))transient-unreachable240,8579
(defface transient-unreachable-key '((t :inherit shadow))transient-unreachable-key244,8734
(defface transient-nonstandard-key '((t :underline t))transient-nonstandard-key248,8889
(defface transient-mismatched-key '((t :underline t))transient-mismatched-key253,9103
(defface transient-enabled-suffixtransient-enabled-suffix258,9309
(defface transient-disabled-suffixtransient-disabled-suffix264,9555
(defun transient--read-file-contents (file)transient--read-file-contents272,9818
(defvar transient-valuestransient-values279,10048
(defun transient-save-values ()transient-save-values285,10271
(defvar transient-levelstransient-levels291,10530
(defun transient-save-levels ()transient-save-levels297,10753
(defvar transient-historytransient-history303,11012
(defun transient-save-history ()transient-save-history310,11299
(defun transient-maybe-save-history ()transient-maybe-save-history321,11787
(defclass transient-prefix ()transient-prefix333,12095
(defclass transient-child ()transient-child358,13157
(defclass transient-suffix (transient-child)transient-suffix401,14381
(defclass transient-infix (transient-suffix)transient-infix409,14678
(defclass transient-argument (transient-infix) ()transient-argument424,15326
(defclass transient-switch (transient-argument) ()transient-switch428,15437
(defclass transient-option (transient-argument) ()transient-option431,15562
(defclass transient-variable (transient-infix)transient-variable434,15679
(defclass transient-switches (transient-argument)transient-switches440,15904
(defclass transient-files (transient-infix) ()transient-files445,16122
(defclass transient-group (transient-child)transient-group452,16314
(defclass transient-column (transient-group) ()transient-column459,16580
(defclass transient-row (transient-group) ()transient-row462,16693
(defclass transient-columns (transient-group) ()transient-columns465,16801
(defclass transient-subgroups (transient-group) ()transient-subgroups471,17090
(defmacro define-transient-command (name arglist &rest args)define-transient-command481,17404
(defmacro define-suffix-command (name arglist &rest args)define-suffix-command542,19876
(defmacro define-infix-command (name _arglist &rest args)define-infix-command575,21331
(defalias 'define-infix-argument 'define-infix-commanddefine-infix-argument622,23250
(defun transient--expand-define-args (args)transient--expand-define-args631,23588
(defun transient--parse-child (prefix spec)transient--parse-child652,24170
(defun transient--parse-group (prefix spec)transient--parse-group659,24446
(defun transient--parse-suffix (prefix spec)transient--parse-suffix682,25221
(defun transient--default-infix-command ()transient--default-infix-command740,27524
(defun transient--ensure-infix-command (obj)transient--ensure-infix-command748,27812
(defun transient--derive-shortarg (arg)transient--derive-shortarg755,28067
(defun transient--insert-suffix (prefix loc suffix action)transient--insert-suffix762,28232
(defun transient-insert-suffix (prefix loc suffix)transient-insert-suffix779,28986
(defun transient-append-suffix (prefix loc suffix)transient-append-suffix789,29412
(defun transient-replace-suffix (prefix loc suffix)transient-replace-suffix799,29835
(defun transient-remove-suffix (prefix loc)transient-remove-suffix809,30270
(defun transient-get-suffix (prefix loc)transient-get-suffix819,30635
(defun transient-suffix-put (prefix loc prop value)transient-suffix-put828,30974
(defun transient--layout-member (prefix loc)transient--layout-member839,31443
(defvar current-transient-prefix nilcurrent-transient-prefix870,32641
(defvar current-transient-command nilcurrent-transient-command875,32852
(defvar current-transient-suffixes nilcurrent-transient-suffixes880,33061
(defvar post-transient-hook nilpost-transient-hook887,33381
(defvar transient--prefix nil)transient--prefix890,33455
(defvar transient--layout nil)transient--layout891,33486
(defvar transient--suffixes nil)transient--suffixes892,33517
(defconst transient--stay t   "Do not exist the transient.")transient--stay894,33551
(defconst transient--exit nil "Do exit the transient.")transient--exit895,33612
(defvar transient--exitp nil "Whether to exit the transient.")transient--exitp897,33669
(defvar transient--showp nil "Whether the transient is show in echo area.")transient--showp898,33732
(defvar transient--helpp nil "Whether help-mode is active.")transient--helpp899,33808
(defvar transient--editp nil "Whether edit-mode is active.")transient--editp900,33869
(defvar transient--timer nil)transient--timer902,33931
(defvar transient--stack nil)transient--stack904,33962
(defvar transient--debug nil "Whether put debug information into *Messages*.")transient--debug906,33993
(defvar transient--history nil)transient--history908,34073
(defun transient-suffix-object (&optional command)transient-suffix-object912,34122
(defun transient--suffix-command (arg)transient--suffix-command958,36001
(defvar transient-maptransient-map1017,38547
(defvar transient-edit-maptransient-edit-map1034,39297
(defvar transient-sticky-maptransient-sticky-map1045,39761
(defvar transient--common-command-prefixes '(?\C-x))transient--common-command-prefixes1053,40065
(defvar transient-predicate-maptransient-predicate-map1085,41511
(defvar transient--transient-map nil)transient--transient-map1124,43529
(defvar transient--predicate-map nil)transient--predicate-map1125,43567
(defvar transient--redisplay-map nil)transient--redisplay-map1126,43605
(defvar transient--redisplay-key nil)transient--redisplay-key1127,43643
(defun transient--push-keymap (map)transient--push-keymap1129,43682
(defun transient--pop-keymap (map)transient--pop-keymap1134,43925
(defun transient--make-transient-map ()transient--make-transient-map1139,44165
(defun transient--make-predicate-map ()transient--make-predicate-map1164,45184
(defun transient--make-redisplay-map ()transient--make-redisplay-map1186,46108
(defun transient-setup (&optional name layout edit &rest params)transient-setup1219,47325
(defun transient--init-objects (name layout params)transient--init-objects1252,48779
(defun transient--init-child (levels spec)transient--init-child1285,50366
(defun transient--init-group (levels spec)transient--init-group1292,50587
(defun transient--init-suffix (levels spec)transient--init-suffix1303,51060
(defun transient--use-level-p (level &optional edit)transient--use-level-p1341,52665
(defun transient--use-suffix-p (obj)transient--use-suffix-p1346,52839
(defun transient--init-transient ()transient--init-transient1363,53433
(defun transient--pre-command ()transient--pre-command1378,54161
(defun transient--pre-exit ()transient--pre-exit1416,55741
(defun transient--export ()transient--export1437,56433
(defun transient--minibuffer-setup ()transient--minibuffer-setup1443,56667
(defun transient--minibuffer-exit ()transient--minibuffer-exit1452,57050
(defun transient--post-command ()transient--post-command1461,57427
(defun transient--stack-push ()transient--stack-push1491,58891
(defun transient--stack-pop ()transient--stack-pop1499,59147
(defun transient--stack-zap ()transient--stack-zap1504,59303
(defun transient--redisplay ()transient--redisplay1508,59398
(defun transient--timer-start ()transient--timer-start1517,59667
(defun transient--timer-cancel ()transient--timer-cancel1524,59898
(defun transient--debug (arg &rest args)transient--debug1529,60028
(defun transient--emergency-exit ()transient--emergency-exit1536,60251
(defmacro transient--with-emergency-exit (&rest body)transient--with-emergency-exit1551,60851
(defun transient--do-stay ()transient--do-stay1559,61047
(defun transient--do-noop ()transient--do-noop1563,61165
(defun transient--do-warn ()transient--do-warn1568,61298
(defun transient--do-call ()transient--do-call1573,61441
(defun transient--do-exit ()transient--do-exit1578,61579
(defun transient--do-replace ()transient--do-replace1584,61746
(defun transient--do-suspend ()transient--do-suspend1591,61952
(defun transient--do-quit-one ()transient--do-quit-one1597,62127
(defun transient--do-quit-all ()transient--do-quit-all1608,62467
(defun transient-noop ()transient-noop1615,62619
(defun transient-undefined ()transient-undefined1619,62685
(defun transient-toggle-common ()transient-toggle-common1628,63094
(defun transient-suspend ()transient-suspend1633,63276
(defun transient-quit-all ()transient-quit-all1639,63442
(defun transient-quit-one ()transient-quit-one1643,63549
(defun transient-quit-seq ()transient-quit-seq1647,63665
(defun transient-update ()transient-update1651,63759
(defun transient-show ()transient-show1655,63855
(defvar-local transient--restore-winconf nil)transient--restore-winconf1660,63975
(defvar transient-resume-mode)transient-resume-mode1662,64022
(defun transient-help ()transient-help1664,64054
(defun transient-set-level (&optional command level)transient-set-level1685,64902
(defun transient-set ()transient-set1716,66145
(defun transient-save ()transient-save1722,66349
(defun transient-history-next ()transient-history-next1731,66698
(defun transient-history-prev ()transient-history-prev1743,67104
(defun transient-resume ()transient-resume1756,67549
(defun transient-args (&optional prefix separate)transient-args1778,68240
(defun transient--value-match (re)transient--value-match1859,71527
(defun transient-read-existing-directory (prompt _initial-input _history)transient-read-existing-directory1963,75917
(defun transient-read-number-N0 (prompt initial-input history)transient-read-number-N01967,76085
(defun transient-read-number-N+ (prompt initial-input history)transient-read-number-N+1971,76280
(defun transient--read-number-N (prompt initial-input history include-zero)transient--read-number-N1975,76477
(defun transient-read-date (prompt default-time _history)transient-read-date1991,77147
(defun transient--history-push ()transient--history-push2108,81256
(defvar transient--source-buffer nil)transient--source-buffer2129,81996
(defun transient--show-brief ()transient--show-brief2131,82035
(defun transient--show ()transient--show2159,83119
(defun transient--key-unreachable-p (obj)transient--key-unreachable-p2401,93554
(defun transient--lookup-key (keymap key)transient--lookup-key2409,93937
(defun transient--show-manpage (manpage &optional argument)transient--show-manpage2448,95426
(defun transient--describe-function (fn)transient--describe-function2453,95610
(defun transient--goto-argument-description (arg)transient--goto-argument-description2457,95730
(defun transient--insert-help ()transient--insert-help2498,97801
(defvar transient-resume-mode-maptransient-resume-mode-map2532,99201
(define-minor-mode transient-resume-modetransient-resume-mode2544,99662
(defun transient--suspend-which-key-mode ()transient--suspend-which-key-mode2551,99859
(defun transient--resume-which-key-mode ()transient--resume-which-key-mode2556,100042
(defconst transient-font-lock-keywordstransient-font-lock-keywords2563,100227

elpa/yaml-mode-0.0.14/yaml-mode.el,2653
(defgroup yaml nilyaml69,2374
(defcustom yaml-mode-hook nilyaml-mode-hook74,2479
(defcustom yaml-indent-offset 2yaml-indent-offset79,2570
(defcustom yaml-backspace-function 'backward-delete-char-untabifyyaml-backspace-function85,2701
(defcustom yaml-block-literal-search-lines 100yaml-block-literal-search-lines91,2933
(defcustom yaml-block-literal-electric-alistyaml-block-literal-electric-alist96,3082
(defface yaml-tab-faceyaml-tab-face105,3425
(defcustom yaml-imenu-generic-expressionyaml-imenu-generic-expression112,3632
(defconst yaml-mode-version "0.0.14" "Version of `yaml-mode'.")yaml-mode-version121,3827
(defconst yaml-blank-line-re "^ *$"yaml-blank-line-re123,3892
(defconst yaml-directive-re "^\\(?:--- \\)? *%\\(\\w+\\)"yaml-directive-re126,3993
(defconst yaml-document-delimiter-re "^\\(?:---\\|[.][.][.]\\)"yaml-document-delimiter-re129,4110
(defconst yaml-node-anchor-alias-re "[&*][a-zA-Z0-9_-]+"yaml-node-anchor-alias-re132,4228
(defconst yaml-tag-re "!!?[^ \n]+"yaml-tag-re135,4336
(defconst yaml-bare-scalar-reyaml-bare-scalar-re138,4405
(defconst yaml-hash-key-reyaml-hash-key-re142,4532
(defconst yaml-scalar-context-reyaml-scalar-context-re149,4776
(defconst yaml-nested-map-reyaml-nested-map-re154,4979
(defconst yaml-block-literal-base-re " *[>|][-+0-9]* *\\(?:\n\\|\\'\\)"yaml-block-literal-base-re158,5130
(defconst yaml-block-literal-reyaml-block-literal-re161,5264
(defconst yaml-nested-sequence-reyaml-nested-sequence-re167,5465
(defconst yaml-constant-scalars-reyaml-constant-scalars-re172,5688
(defvar yaml-mode-mapyaml-mode-map188,6214
(defvar yaml-mode-syntax-tableyaml-mode-syntax-table198,6595
(define-derived-mode yaml-mode text-mode "YAML"yaml-mode219,7460
(defvar yaml-font-lock-keywordsyaml-font-lock-keywords237,8086
(defun yaml-mode-syntax-propertize-function (beg end)yaml-mode-syntax-propertize-function248,8621
(defun yaml-font-lock-block-literals (bound)yaml-font-lock-block-literals282,10176
(defun yaml-compute-indentation ()yaml-compute-indentation331,12205
(defun yaml-indent-line ()yaml-indent-line345,12790
(defun yaml-electric-backspace (arg)yaml-electric-backspace364,13576
(defun yaml-electric-bar-and-angle (arg)yaml-electric-bar-and-angle378,14161
(defun yaml-electric-dash-and-dot (arg)yaml-electric-dash-and-dot397,14903
(defun yaml-narrow-to-block-literal ()yaml-narrow-to-block-literal409,15354
(defun yaml-fill-paragraph (&optional justify region)yaml-fill-paragraph440,16369
(defun yaml-set-imenu-generic-expression ()yaml-set-imenu-generic-expression452,16831
(defun yaml-mode-version ()yaml-mode-version461,17182

elpa/yaml-mode-0.0.14/yaml-mode-autoloads.el,0

elpa/yaml-mode-0.0.14/yaml-mode-pkg.el,360
(define-package "yaml-mode" "0.0.14" "Major mode for editing YAML files" '((emacs "24.1")) :commit "5b4a0db384f996554454b5642e4531c502421de8" :keywords '("data" "yaml") :authors '(("Yoshiki Kurihara" . "clouder@gmail.com") ("Marshall T. Vandegrift" . "llasram@gmail.com")) :maintainer '("Vasilij Schneidermann" . "v.schneidermann@gmail.com"))"yaml-mode"2,31

elpa/terraform-mode-0.6/terraform-mode-autoloads.el,0

elpa/terraform-mode-0.6/terraform-mode.el,626
(defgroup terraform nilterraform39,1379
(defcustom terraform-indent-level 2terraform-indent-level43,1473
(defconst terraform--block-regexpterraform--block-regexp47,1569
(defconst terraform--atlas-regexpterraform--atlas-regexp50,1684
(defconst terraform--provisioner-regexpterraform--provisioner-regexp53,1747
(defvar terraform-font-lock-keywordsterraform-font-lock-keywords56,1824
(defun terraform-format-buffer ()terraform-format-buffer62,2085
(define-minor-mode terraform-format-on-save-modeterraform-format-on-save-mode77,2709
(define-derived-mode terraform-mode hcl-mode "Terraform"terraform-mode85,3019

elpa/terraform-mode-0.6/terraform-mode-pkg.el,353
(define-package "terraform-mode" "0.6" "Major mode for terraform configuration file" '((emacs "24.3") (hcl-mode "0.3")) :commit "6286aa42132a7fcad49271d63be33deeeb8d4efc" :authors '(("Syohei YOSHIDA" . "syohex@gmail.com")) :maintainer '("Syohei YOSHIDA" . "syohex@gmail.com") :url "https://github.com/syohex/emacs-terraform-mode")"terraform-mode"2,31

elpa/ht-2.2/ht.el,2185
(defmacro ht (&rest pairs)ht34,1053
(defsubst ht-create (&optional test)ht-create48,1464
(defun ht<-alist (alist &optional test)ht<-alist56,1753
(defalias 'ht-from-alist 'ht<-alist)ht-from-alist70,2301
(defun ht<-plist (plist &optional test)ht<-plist72,2339
(defalias 'ht-from-plist 'ht<-plist)ht-from-plist84,2787
(defsubst ht-get (table key &optional default)ht-get86,2825
(defun ht-get* (table &rest keys)ht-get*91,3022
(defsubst ht-set! (table key value)ht-set!99,3340
(defalias 'ht-set 'ht-set!)ht-set104,3451
(defun ht-update! (table from-table)ht-update!106,3480
(defalias 'ht-update 'ht-update!)ht-update113,3667
(defun ht-merge (&rest tables)ht-merge115,3702
(defsubst ht-remove! (table key)ht-remove!123,3992
(defalias 'ht-remove 'ht-remove!)ht-remove127,4076
(defsubst ht-clear! (table)ht-clear!129,4111
(defalias 'ht-clear 'ht-clear!)ht-clear134,4197
(defun ht-map (function table)ht-map136,4230
(defmacro ht-amap (form table)ht-amap146,4533
(defun ht-keys (table)ht-keys152,4736
(defun ht-values (table)ht-values156,4827
(defun ht-items (table)ht-items160,4924
(defalias 'ht-each 'maphashht-each164,5049
(defmacro ht-aeach (form table)ht-aeach168,5172
(defun ht-select-keys (table keys)ht-select-keys174,5378
(defun ht->plist (table)ht->plist182,5712
(defalias 'ht-to-plist 'ht->plist)ht-to-plist193,6045
(defsubst ht-copy (table)ht-copy195,6081
(defun ht->alist (table)ht->alist199,6200
(defalias 'ht-to-alist 'ht->alist)ht-to-alist210,6542
(defalias 'ht? 'hash-table-p)ht?212,6578
(defalias 'ht-p 'hash-table-p)ht-p214,6609
(defun ht-contains? (table key)ht-contains?216,6641
(defalias 'ht-contains-p 'ht-contains?)ht-contains-p220,6774
(defsubst ht-size (table)ht-size222,6815
(defsubst ht-empty? (table)ht-empty?226,6920
(defun ht-select (function table)ht-select230,7042
(defun ht-reject (function table)ht-reject243,7407
(defun ht-reject! (function table)ht-reject!256,7773
(defalias 'ht-delete-if 'ht-reject!)ht-delete-if267,8056
(defun ht-find (function table)ht-find269,8094
(defun ht-equal? (table1 table2)ht-equal?281,8435
(defalias 'ht-equal-p 'ht-equal?)ht-equal-p293,8852

elpa/ht-2.2/ht-autoloads.el,0

elpa/ht-2.2/ht-pkg.el,300
(define-package "ht" "2.2" "The missing hash table library for Emacs" '((dash "2.12.0")) :commit "a23a72342fda1eb3cc8d792f86efabe45eb0d1fd" :keywords '("hash table" "hash map" "hash") :authors '(("Wilfred Hughes" . "me@wilfred.me.uk")) :maintainer '("Wilfred Hughes" . "me@wilfred.me.uk"))"ht"2,31

elpa/pyvenv-1.21/pyvenv-pkg.el,357
(define-package "pyvenv" "1.21" "Python virtual environment interface" 'nil :commit "103d2f158ef2a760741682e18741e44107c68f3f" :keywords '("python" "virtualenv" "tools") :authors '(("Jorgen Schaefer" . "contact@jorgenschaefer.de")) :maintainer '("Jorgen Schaefer" . "contact@jorgenschaefer.de") :url "http://github.com/jorgenschaefer/pyvenv")"pyvenv"2,31

elpa/pyvenv-1.21/pyvenv-autoloads.el,111
(defvar pyvenv-mode nil "\pyvenv-mode30,722
(defvar pyvenv-tracking-mode nil "\pyvenv-tracking-mode48,1245

elpa/pyvenv-1.21/pyvenv.el,2336
(defgroup pyvenv nilpyvenv45,1610
(defcustom pyvenv-workon nilpyvenv-workon50,1715
(defcustom pyvenv-activate nilpyvenv-activate63,2154
(defcustom pyvenv-tracking-ask-before-change nilpyvenv-tracking-ask-before-change76,2566
(defcustom pyvenv-virtualenvwrapper-pythonpyvenv-virtualenvwrapper-python86,2946
(defcustom pyvenv-exec-shellpyvenv-exec-shell101,3456
(defvar pyvenv-virtual-env nilpyvenv-virtual-env113,3775
(defvar pyvenv-virtual-env-name nilpyvenv-virtual-env-name119,3923
(defvar pyvenv-pre-create-hooks nilpyvenv-pre-create-hooks125,4067
(defvar pyvenv-post-create-hooks nilpyvenv-post-create-hooks129,4161
(defvar pyvenv-pre-activate-hooks nilpyvenv-pre-activate-hooks133,4255
(defvar pyvenv-post-activate-hooks nilpyvenv-post-activate-hooks138,4390
(defvar pyvenv-pre-deactivate-hooks nilpyvenv-pre-deactivate-hooks143,4517
(defvar pyvenv-post-deactivate-hooks nilpyvenv-post-deactivate-hooks148,4648
(defvar pyvenv-mode-line-indicator '(pyvenv-virtual-env-namepyvenv-mode-line-indicator153,4785
(defvar pyvenv-old-process-environment nilpyvenv-old-process-environment159,5018
(defvar pyvenv-old-exec-path nilpyvenv-old-exec-path162,5121
(defvar pyvenv-old-eshell-path nilpyvenv-old-eshell-path165,5204
(defun pyvenv-create (venv-name python-executable)pyvenv-create169,5292
(defun pyvenv-activate (directory)pyvenv-activate199,6622
(defun pyvenv-deactivate ()pyvenv-deactivate263,9843
(defvar pyvenv-workon-history nilpyvenv-workon-history296,11176
(defun pyvenv-workon (name)pyvenv-workon300,11267
(defun pyvenv-virtualenv-list (&optional noerror)pyvenv-virtualenv-list314,11794
(define-widget 'pyvenv-workon 'choicepyvenv-workon338,12905
(defvar pyvenv-mode-map (make-sparse-keymap)pyvenv-mode-map360,13762
(define-minor-mode pyvenv-modepyvenv-mode386,14795
(define-minor-mode pyvenv-tracking-modepyvenv-tracking-mode402,15398
(defun pyvenv-track-virtualenv ()pyvenv-track-virtualenv413,15841
(defun pyvenv-run-virtualenvwrapper-hook (hook &rest args)pyvenv-run-virtualenvwrapper-hook434,16826
(defun pyvenv-restart-python ()pyvenv-restart-python486,19187
(defun pyvenv-hook-dir ()pyvenv-hook-dir510,20141
(defun pyvenv-workon-home ()pyvenv-workon-home519,20473
(defun pyvenv-virtualenvwrapper-supported ()pyvenv-virtualenvwrapper-supported526,20666

elpa/autothemer-0.2.2/autothemer.el,1620
(defvar autothemer--current-theme nilautothemer--current-theme25,685
(defun autothemer--reduced-spec-to-facespec (display reduced-specs)autothemer--reduced-spec-to-facespec30,898
(defun autothemer--demote-heads (expr)autothemer--demote-heads41,1383
(defmacro autothemer-deftheme (name description palette reduced-specs &rest body)autothemer-deftheme51,1777
(defun autothemer--color-distance (color autothemer-color)autothemer--color-distance107,4974
(defun autothemer--find-closest-color (colors color)autothemer--find-closest-color115,5373
(defun autothemer--unthemed-faces ()autothemer--unthemed-faces130,6038
(defun autothemer--face-to-alist (face)autothemer--face-to-alist139,6422
(defun autothemer--cons-to-tree (the-cons)autothemer--cons-to-tree143,6577
(defun autothemer--alist-to-reduced-spec (facename alist)autothemer--alist-to-reduced-spec152,6897
(defun autothemer--approximate-spec (reduced-spec theme)autothemer--approximate-spec159,7191
(defun autothemer--pad-with-nil (row min-number-of-elements)autothemer--pad-with-nil178,8170
(defun autothemer--replace-nil-by-precursor (palette-row)autothemer--replace-nil-by-precursor182,8397
(defun autothemer--fill-empty-palette-slots (palette)autothemer--fill-empty-palette-slots193,8968
(defun autothemer--extract-display (palette n)autothemer--extract-display201,9462
(defun autothemer--extract-let-block (palette n)autothemer--extract-let-block205,9586
(defun autothemer-generate-templates ()autothemer-generate-templates211,9862
(defun autothemer--append-column (list-of-lists new-column)autothemer--append-column230,10821

elpa/autothemer-0.2.2/autothemer-pkg.el,301
(define-package "autothemer" "0.2.2" "Conveniently define themes." '((dash "2.10.0") (emacs "24") (cl-lib "0.5")) :commit "8c467f57571c154129d660dfccebd151c998f2d9" :authors '(("Sebastian Sturm")) :maintainer '("Sebastian Sturm") :url "https://github.com/sebastiansturm/autothemer")"autothemer"2,31

elpa/autothemer-0.2.2/autothemer-autoloads.el,0

elpa/flymake-go-20150714.733/flymake-go.el,161
(defvar flymake-go-executable "go" "The go executable to use for syntax checking")flymake-go-executable22,479
(defun flymake-go-init ()flymake-go-init24,563

elpa/flymake-go-20150714.733/flymake-go-autoloads.el,0

elpa/flymake-go-20150714.733/flymake-go-pkg.el,396
(define-package "flymake-go" "20150714.733" "A flymake handler for go-mode files" 'nil :commit "ae83761aa908c1a50ff34af04f00dcc46bca2ce9" :keywords '("go" "flymake") :authors '(("Michael Fellinger" . "michael@iron.io") ("Robert Zaremba" . "robert.marek.zaremba@wp.eu")) :maintainer '("Michael Fellinger" . "michael@iron.io") :url "https://github.com/robert-zaremba/flymake-go")"flymake-go"2,31

elpa/rainbow-delimiters-2.1.4/rainbow-delimiters-pkg.el,437
(define-package "rainbow-delimiters" "2.1.4" "Highlight brackets according to their depth" 'nil :commit "455bcee19c92bf85db0ba7e926f0b5a176b69865" :keywords '("faces" "convenience" "lisp" "tools") :authors '(("Jeremy Rayman" . "opensource@jeremyrayman.com") ("Fanael Linithien" . "fanael4@gmail.com")) :maintainer '("Fanael Linithien" . "fanael4@gmail.com") :url "https://github.com/Fanael/rainbow-delimiters")"rainbow-delimiters"2,31

elpa/rainbow-delimiters-2.1.4/rainbow-delimiters-autoloads.el,0

elpa/rainbow-delimiters-2.1.4/rainbow-delimiters.el,1520
(defgroup rainbow-delimiters nilrainbow-delimiters77,3174
(defgroup rainbow-delimiters-faces nilrainbow-delimiters-faces84,3469
(defcustom rainbow-delimiters-pick-face-functionrainbow-delimiters-pick-face-function93,3763
(defface rainbow-delimiters-base-facerainbow-delimiters-base-face108,4487
(defface rainbow-delimiters-base-error-facerainbow-delimiters-base-error-face113,4657
(defface rainbow-delimiters-unmatched-facerainbow-delimiters-unmatched-face119,4888
(defface rainbow-delimiters-mismatched-facerainbow-delimiters-mismatched-face124,5084
(defcustom rainbow-delimiters-max-face-count 9rainbow-delimiters-max-face-count147,6224
(defcustom rainbow-delimiters-outermost-only-face-count 0rainbow-delimiters-outermost-only-face-count157,6593
(defun rainbow-delimiters-default-pick-face (depth match _loc)rainbow-delimiters-default-pick-face165,6836
(defun rainbow-delimiters--apply-color (loc depth match)rainbow-delimiters--apply-color195,8173
(defun rainbow-delimiters--char-ineligible-p (loc ppss delim-syntax-code)rainbow-delimiters--char-ineligible-p205,8640
(defun rainbow-delimiters--propertize (end)rainbow-delimiters--propertize231,9706
(defconst rainbow-delimiters--font-lock-keywordsrainbow-delimiters--font-lock-keywords264,11245
(define-minor-mode rainbow-delimiters-moderainbow-delimiters-mode268,11347
(defun rainbow-delimiters-mode-enable ()rainbow-delimiters-mode-enable294,12773
(defun rainbow-delimiters-mode-disable ()rainbow-delimiters-mode-disable299,12899

elpa/ivy-hydra-0.13.0/ivy-hydra-autoloads.el,0

elpa/ivy-hydra-0.13.0/ivy-hydra.el,435
(defun ivy--matcher-desc ()ivy--matcher-desc38,1232
(defhydra hydra-ivy (:hint nilhydra-ivy45,1428
(defvar ivy-dispatching-done-columns 2ivy-dispatching-done-columns90,3070
(defvar ivy-dispatching-done-idle nilivy-dispatching-done-idle93,3178
(defvar ivy-dispatching-done-hydra-exit-keys '(("M-o" nil "back")ivy-dispatching-done-hydra-exit-keys96,3283
(defun ivy-dispatching-done-hydra ()ivy-dispatching-done-hydra100,3475

elpa/ivy-hydra-0.13.0/ivy-hydra-pkg.el,363
(define-package "ivy-hydra" "0.13.0" "Additional key bindings for Ivy" '((emacs "24.5") (ivy "0.13.0") (hydra "0.15.0")) :commit "cd634c6f51458f81898ecf2821ac3169cb65a1eb" :keywords '("convenience") :authors '(("Oleh Krehel" . "ohwoeowho@gmail.com")) :maintainer '("Oleh Krehel" . "ohwoeowho@gmail.com") :url "https://github.com/abo-abo/swiper")"ivy-hydra"2,31

elpa/dockerfile-mode-1.2/dockerfile-mode-autoloads.el,0

elpa/dockerfile-mode-1.2/dockerfile-mode.el,858
(defvar docker-image-name nil)docker-image-name23,731
(defgroup dockerfile nildockerfile25,763
(defcustom dockerfile-mode-hook nildockerfile-mode-hook31,956
(defcustom dockerfile-use-sudo nildockerfile-use-sudo36,1068
(defvar dockerfile-font-lock-keywordsdockerfile-font-lock-keywords39,1148
(defvar dockerfile-mode-mapdockerfile-mode-map51,1641
(defvar dockerfile-mode-syntax-tabledockerfile-mode-syntax-table70,2513
(define-abbrev-table 'dockerfile-mode-abbrev-table nildockerfile-mode-abbrev-table78,2759
(defun dockerfile-build-buffer (image-name)dockerfile-build-buffer85,2977
(defun dockerfile-build-no-cache-buffer (image-name)dockerfile-build-no-cache-buffer99,3559
(defalias 'dockerfile-parent-modedockerfile-parent-mode113,4212
(define-derived-mode dockerfile-mode dockerfile-parent-mode "Dockerfile"dockerfile-mode117,4320

elpa/dockerfile-mode-1.2/dockerfile-mode-pkg.el,166
(define-package "dockerfile-mode" "1.2" "Major mode for editing Docker's Dockerfiles" 'nil :commit "9a75fcd119c5b2a1d723d440bbe4b1db56df90cc")"dockerfile-mode"2,31

elpa/popup-0.5.3/popup-pkg.el,282
(define-package "popup" "0.5.3" "Visual Popup User Interface" '((cl-lib "0.3")) :commit "46632ab9652dacad56fd961cd6def25a015170ae" :keywords '("lisp") :authors '(("Tomohiro Matsuyama" . "m2ym.pub@gmail.com")) :maintainer '("Tomohiro Matsuyama" . "m2ym.pub@gmail.com"))"popup"2,31

elpa/popup-0.5.3/popup.el,6239
(defconst popup-version "0.5.3")popup-version35,1140
(defun popup-calculate-max-width (max-width)popup-calculate-max-width41,1192
(defvar popup-use-optimized-column-computation tpopup-use-optimized-column-computation48,1470
(defmacro popup-aif (test then &rest else)popup-aif52,1613
(defmacro popup-awhen (test &rest body)popup-awhen58,1747
(defun popup-x-to-string (x)popup-x-to-string64,1876
(defun popup-substring-by-width (string width)popup-substring-by-width74,2160
(defun popup-fill-string (string &optional width max-width justify squeeze)popup-fill-string89,2709
(defmacro popup-save-buffer-state (&rest body)popup-save-buffer-state142,4796
(defun popup-vertical-motion (column direction)popup-vertical-motion152,5089
(defun popup-last-line-of-buffer-p ()popup-last-line-of-buffer-p159,5348
(defun popup-lookup-key-by-event (function event)popup-lookup-key-by-event164,5511
(defgroup popup nilpopup177,5910
(defface popup-facepopup-face182,5998
(defface popup-summary-facepopup-summary-face187,6111
(defface popup-scroll-bar-foreground-facepopup-scroll-bar-foreground-face192,6238
(defface popup-scroll-bar-background-facepopup-scroll-bar-background-face197,6365
(defvar popup-instances nilpopup-instances202,6491
(defvar popup-scroll-bar-foreground-charpopup-scroll-bar-foreground-char205,6542
(defvar popup-scroll-bar-background-charpopup-scroll-bar-background-char209,6685
(defun popup-item-propertize (item &rest properties)popup-item-propertize221,7139
(defun popup-item-property (item property)popup-item-property231,7503
(defsubst popup-item-value (item)               (popup-item-property item 'value))popup-item-value259,8512
(defsubst popup-item-value-or-self (item)       (or (popup-item-value item) item))popup-item-value-or-self260,8595
(defsubst popup-item-face (item)                (popup-item-property item 'popup-face))popup-item-face261,8678
(defsubst popup-item-mouse-face (item)          (popup-item-property item 'popup-mouse-face))popup-item-mouse-face262,8766
(defsubst popup-item-selection-face (item)      (popup-item-property item 'selection-face))popup-item-selection-face263,8860
(defsubst popup-item-document (item)            (popup-item-property item 'document))popup-item-document264,8952
(defsubst popup-item-summary (item)             (popup-item-property item 'summary))popup-item-summary265,9038
(defsubst popup-item-symbol (item)              (popup-item-property item 'symbol))popup-item-symbol266,9123
(defsubst popup-item-sublist (item)             (popup-item-property item 'sublist))popup-item-sublist267,9207
(defun popup-item-documentation (item)popup-item-documentation269,9293
(defun popup-item-show-help-1 (item)popup-item-show-help-1275,9475
(defun popup-item-show-help-with-event-loop (item)popup-item-show-help-with-event-loop285,9767
(defun popup-item-show-help (item &optional persist)popup-item-show-help300,10362
(defun popup-set-list (popup list)popup-set-list311,10792
(defun popup-set-filtered-list (popup list)popup-set-filtered-list316,10945
(defun popup-selected-item (popup)popup-selected-item324,11200
(defun popup-selected-line (popup)popup-selected-line327,11285
(defun popup-line-overlay (popup line)popup-line-overlay330,11374
(defun popup-selected-line-overlay (popup)popup-selected-line-overlay333,11452
(defun popup-hide-line (popup line)popup-hide-line336,11554
(defun popup-line-hidden-p (popup line)popup-line-hidden-p341,11727
(defun popup-live-p (popup)popup-live-p425,15438
(defun popup-child-point (popup &optional offset)popup-child-point429,15545
(defun popup-calculate-direction (height row)popup-calculate-direction436,15699
(defun popup-delete (popup)popup-delete650,24256
(defun popup-draw (popup)popup-draw668,24834
(defun popup-hide (popup)popup-hide769,29950
(defun popup-hidden-p (popup)popup-hidden-p776,30176
(defun popup-jump (popup cursor)popup-jump785,30427
(defun popup-select (popup i)popup-select795,30832
(defun popup-next (popup)popup-next803,31060
(defun popup-previous (popup)popup-previous821,31663
(defun popup-page-next (popup)popup-page-next839,32252
(defun popup-page-previous (popup)popup-page-previous845,32438
(defun popup-scroll-down (popup &optional n)popup-scroll-down851,32634
(defun popup-scroll-up (popup &optional n)popup-scroll-up859,32975
(defface popup-isearch-matchpopup-isearch-match871,33294
(defvar popup-isearch-cursor-color "blue")popup-isearch-cursor-color876,33405
(defvar popup-isearch-keymappopup-isearch-keymap878,33449
(defvar popup-menu-show-quick-help-function 'popup-menu-show-quick-helppopup-menu-show-quick-help-function888,33852
(defsubst popup-isearch-char-p (char)popup-isearch-char-p891,33985
(defun popup-isearch-filter-list (pattern list)popup-isearch-filter-list896,34090
(defun popup-isearch-prompt (popup pattern)popup-isearch-prompt917,34961
(defun popup-isearch-update (popup filter pattern &optional callback)popup-isearch-update922,35174
(defface popup-tip-facepopup-tip-face1000,38418
(defvar popup-tip-max-width 80)popup-tip-max-width1005,38536
(defface popup-menu-facepopup-menu-face1086,41202
(defface popup-menu-mouse-facepopup-menu-mouse-face1091,41301
(defface popup-menu-selection-facepopup-menu-selection-face1096,41425
(defface popup-menu-summary-facepopup-menu-summary-face1101,41568
(defvar popup-menu-show-tip-function 'popup-tippopup-menu-show-tip-function1106,41686
(defun popup-menu-show-help (menu &optional persist item)popup-menu-show-help1109,41807
(defun popup-menu-documentation (menu &optional item)popup-menu-documentation1112,41937
(defun popup-menu-show-quick-help (menu &optional item &rest args)popup-menu-show-quick-help1115,42059
(defun popup-menu-item-of-mouse-event (event)popup-menu-item-of-mouse-event1139,42959
(defun popup-menu-read-key-sequence (keymap &optional prompt timeout)popup-menu-read-key-sequence1147,43289
(defun popup-menu-fallback (event default))popup-menu-fallback1174,44615
(defun popup-preferred-width (list)popup-preferred-width1257,48468
(defvar popup-menu-keymappopup-menu-keymap1269,48980
(defun popup-cascade-menu (list &rest args)popup-cascade-menu1404,54249

elpa/popup-0.5.3/popup-autoloads.el,0

elpa/solarized-theme-1.3.0/solarized-light-theme.el,100
(deftheme solarized-light "The light variant of the Solarized colour theme")solarized-light26,854

elpa/solarized-theme-1.3.0/solarized-dark-theme.el,97
(deftheme solarized-dark "The dark variant of the Solarized colour theme")solarized-dark26,851

elpa/solarized-theme-1.3.0/solarized.el,1438
(defgroup solarized nilsolarized49,1423
(defcustom solarized-distinct-fringe-background nilsolarized-distinct-fringe-background54,1562
(defcustom solarized-distinct-doc-face nilsolarized-distinct-doc-face60,1766
(defcustom solarized-use-variable-pitch tsolarized-use-variable-pitch66,1968
(defcustom solarized-use-less-bold nilsolarized-use-less-bold71,2107
(defcustom solarized-use-more-italic nilsolarized-use-more-italic76,2217
(defcustom solarized-emphasize-indicators tsolarized-emphasize-indicators81,2330
(defcustom solarized-high-contrast-mode-line nilsolarized-high-contrast-mode-line86,2490
(defcustom solarized-height-minus-1 0.8solarized-height-minus-191,2633
(defcustom solarized-height-plus-1 1.1solarized-height-plus-196,2729
(defcustom solarized-height-plus-2 1.15solarized-height-plus-2101,2824
(defcustom solarized-height-plus-3 1.2solarized-height-plus-3106,2920
(defcustom solarized-height-plus-4 1.3solarized-height-plus-4111,3015
(defcustom solarized-scale-org-headlines tsolarized-scale-org-headlines116,3110
(defcustom solarized-scale-outline-headlines tsolarized-scale-outline-headlines121,3243
(defun solarized-color-blend (color1 color2 alpha)solarized-color-blend129,3414
(defmacro solarized-with-color-variables (variant &rest body)solarized-with-color-variables143,3894
(defun create-solarized-theme (variant theme-name &optional childtheme)create-solarized-theme264,9233

elpa/solarized-theme-1.3.0/solarized-theme.el,0

elpa/solarized-theme-1.3.0/solarized-theme-utils.el,96
(defun solarized-import-faces (&optional regexp already-defined)solarized-import-faces30,1005

elpa/solarized-theme-1.3.0/solarized-theme-pkg.el,110
(define-package "solarized-theme" "1.3.0" "The Solarized color theme, ported to Emacs.""solarized-theme"1,0

elpa/solarized-theme-1.3.0/solarized-theme-autoloads.el,0

elpa/evil-org-0.1.1/evil-org-pkg.el,355
(define-package "evil-org" "0.1.1" "evil keybindings for org-mode" '((evil "0") (org "0")) :commit "2d7c58dbeca0d4ac7b4eab5f47b77946951f27e9" :keywords '("evil" "vim-emulation" "org-mode" "key-bindings" "presets") :authors '(("Edward Tjörnhammar")) :maintainer '("Edward Tjörnhammar") :url "https://github.com/edwtjo/evil-org-mode.git")"evil-org"2,31

elpa/evil-org-0.1.1/evil-org.el,168
(define-minor-mode evil-org-modeevil-org-mode34,1202
(defun clever-insert-item ()clever-insert-item43,1465
(defun evil-org-eol-call (fun)evil-org-eol-call50,1603

elpa/evil-org-0.1.1/evil-org-autoloads.el,0

elpa/json-reformat-0.0.6/json-reformat-pkg.el,320
(define-package "json-reformat" "0.0.6" "Reformatting tool for JSON" 'nil :commit "b9bd375ec1deb10d2ba09c409bdcf99c56d7a716" :keywords '("json") :authors '(("Wataru MIYAGUNI" . "gonngo@gmail.com")) :maintainer '("Wataru MIYAGUNI" . "gonngo@gmail.com") :url "https://github.com/gongo/json-reformat")"json-reformat"2,31

elpa/json-reformat-0.0.6/json-reformat.el,1174
(defconst json-reformat:special-chars-as-pretty-stringjson-reformat:special-chars-as-pretty-string64,2057
(defcustom json-reformat:indent-width 4json-reformat:indent-width68,2147
(defcustom json-reformat:pretty-string? niljson-reformat:pretty-string?73,2303
(defun json-reformat:indent (level)json-reformat:indent100,2810
(defun json-reformat:number-to-string (val)json-reformat:number-to-string103,2904
(defun json-reformat:symbol-to-string (val)json-reformat:symbol-to-string106,2975
(defun json-reformat:encode-char-as-pretty (char)json-reformat:encode-char-as-pretty111,3125
(defun json-reformat:string-to-string (val)json-reformat:string-to-string118,3389
(defun json-reformat:vector-to-string (val level)json-reformat:vector-to-string123,3580
(defun json-reformat:print-node (val level)json-reformat:print-node137,4052
(defun json-reformat:tree-sibling-to-plist (root)json-reformat:tree-sibling-to-plist145,4513
(defun json-reformat:tree-to-string (root level)json-reformat:tree-to-string150,4687
(defun json-reformat-from-string (string)json-reformat-from-string169,5331
(defun json-reformat-region (begin end)json-reformat-region186,5871

elpa/json-reformat-0.0.6/json-reformat-autoloads.el,0

elpa/go-mode-1.5.0/go-mode.el,10973
(defun go--delete-whole-line (&optional arg)go--delete-whole-line35,801
(defun go-goto-opening-parenthesis (&optional _legacy-unused)go-goto-opening-parenthesis61,1869
(defconst go-dangling-operators-regexp "[^-]-\\|[^+]\\+\\|[/*&><.=|^]")go-dangling-operators-regexp73,2267
(defconst go--max-dangling-operator-length 2go--max-dangling-operator-length74,2339
(defconst go-identifier-regexp "[[:word:][:multibyte:]]+")go-identifier-regexp80,2590
(defconst go-type-name-no-prefix-regexp "\\(?:[[:word:][:multibyte:]]+\\.\\)?[[:word:][:multibyte:]]+")go-type-name-no-prefix-regexp81,2649
(defconst go-qualified-identifier-regexp (concat go-identifier-regexp "\\." go-identifier-regexp))go-qualified-identifier-regexp82,2753
(defconst go-label-regexp go-identifier-regexp)go-label-regexp83,2852
(defconst go-type-regexp "[[:word:][:multibyte:]*]+")go-type-regexp84,2900
(defconst go-func-regexp (concat "\\_<func\\_>\\s *\\(" go-identifier-regexp "\\)"))go-func-regexp85,2954
(defconst go-func-meth-regexp (concatgo-func-meth-regexp86,3039
(defconst go-builtinsgo-builtins93,3369
(defconst go-mode-keywordsgo-mode-keywords99,3611
(defconst go-constants '("nil" "true" "false" "iota"))go-constants107,3992
(defconst go-type-name-regexp (concat "\\(?:[*(]\\)*\\(\\(?:" go-identifier-regexp "\\.\\)?" go-identifier-regexp "\\)"))go-type-name-regexp108,4047
(defconst go--font-lock-func-param-num-groups 16)go--font-lock-func-param-num-groups112,4278
(defvar go-dangling-cache)go-dangling-cache114,4329
(defvar go-godoc-history nil)go-godoc-history115,4356
(defvar go--coverage-current-file-name)go--coverage-current-file-name116,4386
(defgroup go nilgo118,4427
(defgroup go-cover nilgo-cover123,4563
(defgroup godoc nilgodoc127,4634
(defcustom go-fontify-function-calls tgo-fontify-function-calls131,4702
(defcustom go-mode-hook nilgo-mode-hook136,4831
(defcustom go-command "go"go-command141,4918
(defcustom gofmt-command "gofmt"gofmt-command150,5218
(defcustom gofmt-args nilgofmt-args157,5399
(defcustom gofmt-show-errors 'buffergofmt-show-errors162,5508
(defcustom godef-command "godef"godef-command175,5964
(defcustom go-other-file-alistgo-other-file-alist180,6053
(defcustom go-packages-function 'go-packages-nativego-packages-function187,6290
(defcustom go-guess-gopath-functions (list #'go-godep-gopathgo-guess-gopath-functions200,6849
(defcustom godoc-command "go doc"godoc-command215,7555
(defcustom godoc-and-godef-command "godoc"godoc-and-godef-command222,7752
(defcustom godoc-use-completing-read nilgodoc-use-completing-read229,7983
(defcustom godoc-at-point-function #'godoc-and-godefgodoc-at-point-function235,8160
(defun godoc-and-godef (point)godoc-and-godef249,8719
(defun godoc-gogetdoc (point)godoc-gogetdoc273,9792
(defun go--kill-new-message (url)go--kill-new-message295,10825
(defcustom go-play-browse-function 'go--kill-new-messagego-play-browse-function300,10949
(defcustom go-coverage-display-buffer-func 'display-buffer-reuse-windowgo-coverage-display-buffer-func310,11311
(defface go-coverage-untrackedgo-coverage-untracked316,11535
(defface go-coverage-0go-coverage-0321,11658
(defface go-coverage-1go-coverage-1325,11773
(defface go-coverage-2go-coverage-2329,11900
(defface go-coverage-3go-coverage-3333,12027
(defface go-coverage-4go-coverage-4337,12154
(defface go-coverage-5go-coverage-5341,12281
(defface go-coverage-6go-coverage-6345,12408
(defface go-coverage-7go-coverage-7349,12535
(defface go-coverage-8go-coverage-8353,12662
(defface go-coverage-9go-coverage-9358,12844
(defface go-coverage-10go-coverage-10362,12971
(defface go-coverage-coveredgo-coverage-covered366,13100
(defvar go-mode-syntax-tablego-mode-syntax-table371,13219
(defun go--build-font-lock-keywords ()go--build-font-lock-keywords396,14067
(defvar go-mode-mapgo-mode-map440,17117
(defun go-mode-insert-and-indent (key)go-mode-insert-and-indent474,18329
(defmacro go-paren-level ()go-paren-level481,18566
(defmacro go-in-string-or-comment-p ()go-in-string-or-comment-p484,18619
(defmacro go-in-string-p ()go-in-string-p487,18685
(defmacro go-in-comment-p ()go-in-comment-p490,18740
(defmacro go-goto-beginning-of-string-or-comment ()go-goto-beginning-of-string-or-comment493,18796
(defun go--backward-irrelevant (&optional stop-at-string)go--backward-irrelevant496,18887
(defun go--buffer-narrowed-p ()go--buffer-narrowed-p526,19974
(defun go-previous-line-has-dangling-op-p ()go-previous-line-has-dangling-op-p532,20126
(defun go--at-function-definition ()go--at-function-definition546,20738
(defun go--indentation-for-opening-parenthesis ()go--indentation-for-opening-parenthesis568,21620
(defun go-indentation-at-point ()go-indentation-at-point582,22123
(defun go-mode-indent-line ()go-mode-indent-line612,23261
(defun go-beginning-of-defun (&optional count)go-beginning-of-defun635,24090
(defun go-end-of-defun ()go-end-of-defun658,24829
(defun go--find-enclosing-parentheses (position)go--find-enclosing-parentheses680,25662
(defun go--search-next-comma (end)go--search-next-comma707,26581
(defun go--looking-at-keyword ()go--looking-at-keyword720,27072
(defun go--match-func (end)go--match-func724,27220
(defun go--match-func-type-names (end)go--match-func-type-names741,27946
(defun go--parameter-list-type (end)go--parameter-list-type758,28719
(defconst go--opt-dotdotdot-regexp "\\(?:\\.\\.\\.\\)?")go--opt-dotdotdot-regexp776,29457
(defconst go--parameter-type-regexpgo--parameter-type-regexp777,29514
(defconst go--func-type-in-parameter-list-regexpgo--func-type-in-parameter-list-regexp779,29674
(defun go--match-parameters-common (identifier-regexp end)go--match-parameters-common782,29800
(defun go--match-parameters-with-identifier-list (end)go--match-parameters-with-identifier-list805,30695
(defun go--match-parameters-without-identifier-list (end)go--match-parameters-without-identifier-list810,30841
(defun go--filter-match-data (regions end)go--filter-match-data813,30940
(defun go--make-match-data (regions)go--make-match-data835,31650
(defun go--match-parameter-list (end)go--match-parameter-list843,31970
(defun go--match-function-result (end)go--match-function-result877,33366
(defun go--reset-dangling-cache-before-change (&optional _beg _end)go--reset-dangling-cache-before-change891,33948
(define-derived-mode go-mode prog-mode "Go"go-mode898,34183
(defun go--apply-rcs-patch (patch-buffer)go--apply-rcs-patch1020,38719
(defun gofmt--is-goimports-p ()gofmt--is-goimports-p1062,40568
(defun gofmt ()gofmt1065,40662
(defun gofmt--process-errors (filename tmpfile errbuf)gofmt--process-errors1116,42872
(defun gofmt--kill-error-buffer (errbuf)gofmt--kill-error-buffer1138,43897
(defun gofmt-before-save ()gofmt-before-save1145,44066
(defun godoc--read-query ()godoc--read-query1155,44409
(defun godoc--get-buffer (query)godoc--get-buffer1162,44684
(defun godoc--buffer-sentinel (proc event)godoc--buffer-sentinel1170,44988
(define-derived-mode godoc-mode special-mode "Godoc"godoc-mode1182,45503
(defun godoc (query)godoc1187,45638
(defun go--godoc (query command)go--godoc1192,45809
(defun godoc-at-point (point)godoc-at-point1200,46068
(defun go-goto-imports ()go-goto-imports1207,46282
(defun go-play-buffer ()go-play-buffer1253,47498
(defun go-play-region (start end)go-play-region1258,47642
(defun go-download-play (url)go-download-play1284,48779
(defun go-propertize-syntax (start end)go-propertize-syntax1300,49500
(defun go-import-add (arg import)go-import-add1306,49719
(defun go-root-and-paths ()go-root-and-paths1349,51468
(defun go--string-prefix-p (s1 s2 &optional ignore-case)go--string-prefix-p1355,51681
(defun go--directory-dirs (dir)go--directory-dirs1361,51939
(defun go-packages ()go-packages1378,52525
(defun go-packages-native ()go-packages-native1381,52582
(defun go-packages-go-list ()go-packages-go-list1401,53424
(defun go-unused-imports-lines ()go-unused-imports-lines1405,53558
(defun go-remove-unused-imports (arg)go-remove-unused-imports1423,54668
(defun godef--find-file-line-column (specifier other-window)godef--find-file-line-column1446,55576
(defun godef--call (point)godef--call1462,56419
(defun godef--successful-p (output)godef--successful-p1487,57518
(defun godef--error (output)godef--error1493,57795
(defun godef-describe (point)godef-describe1502,57969
(defun godef-jump (point &optional other-window)godef-jump1512,58369
(defun godef-jump-other-window (point)godef-jump-other-window1527,59023
(defun go--goto-line (line)go--goto-line1531,59107
(defun go--line-column-to-point (line column)go--line-column-to-point1535,59190
(defun go--coverage-file ()go--coverage-file1544,59413
(defun go--coverage-origin-buffer ()go--coverage-origin-buffer1551,59692
(defun go--coverage-face (count divisor)go--coverage-face1555,59823
(defun go--coverage-make-overlay (range divisor)go--coverage-make-overlay1571,60498
(defun go--coverage-clear-overlays ()go--coverage-clear-overlays1584,61201
(defun go--coverage-parse-file (coverage-file file-name)go--coverage-parse-file1592,61463
(defun go-coverage (&optional coverage-file)go-coverage1624,62738
(defun go-goto-function (&optional arg)go-goto-function1657,64294
(defun go--goto-opening-curly-brace ()go--goto-opening-curly-brace1720,66678
(defun go--in-function-p (compare-point)go--in-function-p1736,67282
(defun go-goto-function-name (&optional arg)go-goto-function-name1750,67758
(defun go-goto-arguments (&optional arg)go-goto-arguments1773,68491
(defun go--goto-return-values (&optional arg)go--goto-return-values1782,68728
(defun go-goto-return-values (&optional arg)go-goto-return-values1789,68923
(defun go-goto-method-receiver (&optional arg)go-goto-method-receiver1808,69463
(defun go-goto-docstring (&optional arg)go-goto-docstring1830,70180
(defun go--function-name (&optional arg)go--function-name1870,71466
(defun go--in-anonymous-funcion-p ()go--in-anonymous-funcion-p1883,71912
(defun go-guess-gopath (&optional buffer)go-guess-gopath1889,72091
(defun go-plain-gopath ()go-plain-gopath1903,72611
(defun go-godep-gopath ()go-godep-gopath1910,72821
(defun go-gb-gopath ()go-gb-gopath1923,73359
(defun go--gb-vendor-gopath ()go--gb-vendor-gopath1928,73476
(defun go--gb-vendor-gopath-reverse ()go--gb-vendor-gopath-reverse1935,73712
(defun go-wgo-gopath ()go-wgo-gopath1943,74012
(defun go--wgo-gocfg (needle)go--wgo-gocfg1948,74124
(defun go-set-project (&optional buffer)go-set-project1959,74588
(defun go-reset-gopath ()go-reset-gopath1975,75189
(defun go-original-gopath ()go-original-gopath1982,75399
(defun go--insert-modified-files ()go--insert-modified-files1986,75569
(defun go--insert-modified-file (name buffer)go--insert-modified-file1996,75998
(defun go--buffer-size-bytes (&optional buffer)go--buffer-size-bytes2000,76148

elpa/go-mode-1.5.0/go-mode-autoloads.el,0

elpa/go-mode-1.5.0/go-mode-pkg.el,300
(define-package "go-mode" "1.5.0" "Major mode for the Go programming language" 'nil :commit "35f6826e435c3004dabf134d0f2ae2f31ea7b6a2" :keywords '("languages" "go") :authors '(("The go-mode Authors")) :maintainer '("The go-mode Authors") :url "https://github.com/dominikh/go-mode.el")"go-mode"2,31

elpa/sbt-mode-2.0.0/sbt-mode.el,1420
(defvar sbt:error-face 'sbt:error)sbt:error-face28,603
(defvar sbt:info-face 'sbt:info)sbt:info-face29,638
(defvar sbt:warning-face 'sbt:warning)sbt:warning-face30,671
(defvar-local sbt:previous-command sbt:default-command)sbt:previous-command32,711
(defvar sbt:command-history-temp nil)sbt:command-history-temp34,768
(defun sbt-start () "Start sbt" (interactive) (sbt:run-sbt nil t))sbt-start41,853
(defun sbt-clear ()sbt-clear43,921
(defun run-scala ()run-scala48,1064
(defun sbt-command (command &optional focus)sbt-command61,1456
(defun sbt:get-sbt-completions-for-command (input)sbt:get-sbt-completions-for-command85,2459
(defun sbt-run-previous-command ()sbt-run-previous-command89,2617
(defun sbt-completion-at-point ()sbt-completion-at-point95,2837
(defun sbt-send-region (start end)sbt-send-region100,2992
(defun sbt-paste-region (&optional no-exit)sbt-paste-region108,3281
(defun sbt-send-eol ()sbt-send-eol120,3894
(defun sbt:clear (&optional buffer)sbt:clear126,4095
(defun sbt:command (command &optional focus)sbt:command135,4441
(defun sbt:get-previous-command ()sbt:get-previous-command166,5646
(defun sbt:run-sbt (&optional kill-existing-p pop-p)sbt:run-sbt172,5824
(defun sbt:initialize-for-compilation-mode ()sbt:initialize-for-compilation-mode208,7445
(defvar sbt:mode-mapsbt:mode-map230,8773
(define-derived-mode sbt-mode comint-mode "sbt"sbt-mode242,9202

elpa/sbt-mode-2.0.0/sbt-mode-project.el,287
(defvar sbt:buffer-project-root nil)sbt:buffer-project-root8,201
(defun sbt:find-root-impl (name-or-pred &optional dir best-root)sbt:find-root-impl10,239
(defun sbt:find-root ()sbt:find-root26,972
(defun sbt:buffer-in-project-function (root)sbt:buffer-in-project-function51,1961

elpa/sbt-mode-2.0.0/sbt-mode-comint.el,1865
(defvar ansi-color-regexp)ansi-color-regexp18,404
(defcustom sbt:sbt-history-file "target/.history"sbt:sbt-history-file25,688
(defcustom sbt:console-history-file "~/.scala_history"sbt:console-history-file31,899
(defcustom sbt:sbt-prompt-regexp "^\\(sbt:[^>]+\\)?>[ ]+"sbt:sbt-prompt-regexp37,1097
(defcustom sbt:console-prompt-regexp "^scala>[ ]+"sbt:console-prompt-regexp42,1237
(defcustom sbt:paste-mode-prompt-regexp "^// Entering paste mode"sbt:paste-mode-prompt-regexp47,1372
(defcustom sbt:prompt-regexp "^\\(\\(sbt:[^>]+\\)?\\|scala\\)>[ ]+"sbt:prompt-regexp52,1516
(defcustom sbt:ansi-support tsbt:ansi-support57,1729
(defcustom sbt:scroll-to-bottom-on-output nilsbt:scroll-to-bottom-on-output64,1969
(defvar sbt:quit-paste-command (if (eq system-type 'windows-nt)sbt:quit-paste-command71,2241
(defun sbt:initialize-for-comint-mode ()sbt:initialize-for-comint-mode76,2434
(defconst sbt:ansi-clear-line "M\\[2K"sbt:ansi-clear-line96,3394
(defun sbt:input-sender (proc string)sbt:input-sender100,3504
(defun sbt:ansi-filter (input)sbt:ansi-filter107,3830
(defun sbt:move-marker-before-prompt-filter (input-string)sbt:move-marker-before-prompt-filter119,4285
(defun sbt:move-marker-after-prompt-filter (input-string)sbt:move-marker-after-prompt-filter145,5436
(defun sbt:switch-submode (input)sbt:switch-submode156,5842
(defun sbt:scala-escape-char (c)sbt:scala-escape-char186,7068
(defun sbt:scala-escape-string (str)sbt:scala-escape-string192,7239
(defconst sbt:completions-regex "^\\[completions\\] \\(.*?\\)?$")sbt:completions-regex195,7322
(defun sbt:get-completions (input)sbt:get-completions197,7390
(defun sbt:completion-at-point ()sbt:completion-at-point223,8502
(defun sbt:send-region (start end)sbt:send-region246,9415
(defun sbt:paste-region (start end &optional no-exit)sbt:paste-region275,10553

elpa/sbt-mode-2.0.0/sbt-mode-vars.el,658
(defcustom sbt:program-name "sbt"sbt:program-name12,220
(defcustom sbt:program-options '("-Djline.terminal=none")sbt:program-options17,336
(defcustom sbt:default-command "test:compile"sbt:default-command23,550
(defcustom sbt:save-some-buffers tsbt:save-some-buffers28,677
(defcustom sbt:clear-buffer-before-command tsbt:clear-buffer-before-command33,810
(defcustom sbt:display-command-buffer tsbt:display-command-buffer38,950
(defcustom sbt:prefer-nested-projects nilsbt:prefer-nested-projects43,1081
(defface sbt:errorsbt:error49,1257
(defface sbt:infosbt:info54,1364
(defface sbt:warningsbt:warning59,1473
(defgroup sbt nilsbt64,1588

elpa/sbt-mode-2.0.0/sbt-mode-hydra.el,8661
(defvar-local sbt-hydra:current-hydra nil)sbt-hydra:current-hydra31,994
(defvar-local sbt-hydra:test-hydra-active nil)sbt-hydra:test-hydra-active32,1037
(defvar-local sbt-hydra:hydra-previous-commands nil)sbt-hydra:hydra-previous-commands33,1084
(defvar-local sbt-hydra:last-command-run-play nil)sbt-hydra:last-command-run-play34,1137
(defvar-local sbt-hydra:sbt-output-cleared "")sbt-hydra:sbt-output-cleared35,1188
(defvar-local sbt-hydra:sbt-test-substring "")sbt-hydra:sbt-test-substring36,1235
(defvar-local sbt-hydra:main-methods nil)sbt-hydra:main-methods37,1282
(defvar-local sbt-hydra:jetty-projects nil)sbt-hydra:jetty-projects38,1324
(defvar-local sbt-hydra:revolver-projects nil)sbt-hydra:revolver-projects39,1368
(defvar-local sbt-hydra:play-framework-projects nil)sbt-hydra:play-framework-projects40,1415
(defvar-local sbt-hydra:projects nil)               ;; dir-localsbt-hydra:projects41,1468
(defvar-local sbt-hydra:command-line-arguments nil) ;; dir-localsbt-hydra:command-line-arguments42,1533
(defvar-local sbt-hydra:system-properties nil)      ;; dir-localsbt-hydra:system-properties43,1598
(defcustom sbt-hydra:allowed-files-regexp '(".*.scala$" ".*/routes$" ".*.html$")sbt-hydra:allowed-files-regexp75,2919
(defcustom sbt-hydra:history-file ".sbt-hydra-history"sbt-hydra:history-file80,3111
(defgroup sbt-hydra nilsbt-hydra85,3315
(defun sbt-hydra:is-list-of-alist (list-of-alist)sbt-hydra:is-list-of-alist90,3403
(defun sbt-hydra:is-list-of-strings (list)sbt-hydra:is-list-of-strings97,3765
(defun sbt-hydra:check-modified-buffers ()sbt-hydra:check-modified-buffers102,3955
(defun sbt-hydra:sbt-buffer ()sbt-hydra:sbt-buffer117,4831
(defmacro sbt-hydra:with-sbt-buffer (body)sbt-hydra:with-sbt-buffer135,5797
(defun sbt-hydra ()sbt-hydra143,6020
(defun sbt-hydra:create-new-hydra ()sbt-hydra:create-new-hydra156,6522
(defun sbt-hydra:send-newline ()sbt-hydra:send-newline162,6749
(defun sbt-hydra:quit-running-play ()sbt-hydra:quit-running-play165,6829
(defun sbt-hydra:send-eof-if-need ()sbt-hydra:send-eof-if-need169,6934
(defun sbt-hydra:run-previous-command ()sbt-hydra:run-previous-command173,7048
(defmacro sbt-hydra:test-hydra (hydra-name hexpr)sbt-hydra:test-hydra186,7644
(defmacro sbt-hydra:main-hydra (project-switcher hydra-name heads-expr)sbt-hydra:main-hydra194,7890
(defun sbt-hydra:add-command-key (key command)sbt-hydra:add-command-key207,8500
(defun sbt-hydra-command:clean (project)sbt-hydra-command:clean210,8570
(defun sbt-hydra-command:test-test (project)sbt-hydra-command:test-test213,8671
(defun sbt-hydra-command:test-test-quick (project)sbt-hydra-command:test-test-quick216,8780
(defun sbt-hydra-command:test-compile (project)sbt-hydra-command:test-compile219,8900
(defun sbt-hydra-command:compile (project)sbt-hydra-command:compile222,9015
(defun sbt-hydra-command:no-op (project)sbt-hydra-command:no-op226,9180
(defun sbt-hydra-command:switch-to-sbt-buffer ()sbt-hydra-command:switch-to-sbt-buffer229,9280
(defun sbt-hydra-command:reload ()sbt-hydra-command:reload232,9374
(defun sbt-hydra-command:run-previous-sbt-command ()sbt-hydra-command:run-previous-sbt-command235,9457
(defun sbt-hydra-command:run-test-only (project projects)sbt-hydra-command:run-test-only238,9558
(defun sbt-hydra-command:edit-last-command ()sbt-hydra-command:edit-last-command241,9673
(defun sbt-hydra-command:run (project)sbt-hydra-command:run244,9776
(defun sbt-hydra-command:eof ()sbt-hydra-command:eof247,9851
(defun sbt-hydra-command:parse-failed-test ()sbt-hydra-command:parse-failed-test250,9910
(defun sbt-hydra-command:test-only-hydra ()sbt-hydra-command:test-only-hydra253,9998
(defun sbt-hydra-command:it-test (project)sbt-hydra-command:it-test256,10092
(defun sbt-hydra-command:quit ()sbt-hydra-command:quit259,10197
(defun sbt-hydra-command:help ()sbt-hydra-command:help262,10245
(defun sbt-hydra-command:history ()sbt-hydra-command:history265,10306
(defun sbt-hydra:help ()sbt-hydra:help270,10430
(defun sbt-hydra:run (project)sbt-hydra:run336,14324
(defun sbt-hydra:previous-command-play-run (play-project)sbt-hydra:previous-command-play-run362,15818
(defun sbt-hydra:read-from-history ()sbt-hydra:read-from-history365,15966
(defun sbt-hydra:history (current-prefix-arg)sbt-hydra:history373,16339
(defun sbt-hydra:add-to-history (command)sbt-hydra:add-to-history393,17239
(defun sbt-hydra:save-history ()sbt-hydra:save-history398,17411
(defun sbt-hydra:load-history ()sbt-hydra:load-history414,18201
(defun sbt-hydra:run-sbt-command (command)sbt-hydra:run-sbt-command424,18598
(defun sbt-hydra:run-previous-sbt-command ()sbt-hydra:run-previous-sbt-command429,18755
(defun sbt-hydra:edit-and-run-previous-sbt-command ()sbt-hydra:edit-and-run-previous-sbt-command436,19099
(defun sbt-hydra:should-text-from-sbt-output ()sbt-hydra:should-text-from-sbt-output440,19305
(defun sbt-hydra:project-name-from-current-hydra ()sbt-hydra:project-name-from-current-hydra445,19535
(defun sbt-hydra:run-test-with-substring (substring)sbt-hydra:run-test-with-substring449,19720
(defun sbt-hydra:run-test-only (current-project projects)sbt-hydra:run-test-only454,19909
(defun sbt-hydra:on-prompt ()sbt-hydra:on-prompt492,22455
(defun sbt-hydra:eof ()sbt-hydra:eof498,22632
(defun sbt-hydra:test-only-hydra-on ()sbt-hydra:test-only-hydra-on505,22925
(defun sbt-hydra:test-only-hydra-off ()sbt-hydra:test-only-hydra-off515,23233
(defun sbt-hydra:run-current-hydra ()sbt-hydra:run-current-hydra520,23395
(defun sbt-hydra:no-test-hydra ()sbt-hydra:no-test-hydra528,23650
(defun sbt-test-hydra-command:switch-to-sbt-hydra ()sbt-test-hydra-command:switch-to-sbt-hydra531,23738
(defun sbt-test-hydra-command:set-substring ()sbt-test-hydra-command:set-substring534,23842
(defun sbt-test-hydra-command:clear-substring ()sbt-test-hydra-command:clear-substring537,23931
(defun sbt-hydra:switch-hydra (project)sbt-hydra:switch-hydra540,24024
(defun sbt-hydra:keys-and-projects (current-project key project-name)sbt-hydra:keys-and-projects547,24369
(defun sbt-hydra:project-switcher (current-project project-names)sbt-hydra:project-switcher552,24597
(defun sbt-hydra:generate-hydra (current-project projects)sbt-hydra:generate-hydra557,24955
(defun sbt-hydra:generate-hydras (project-names)sbt-hydra:generate-hydras587,27042
(defun sbt-hydra:get-system-properties (project)sbt-hydra:get-system-properties593,27404
(defun sbt-hydra:run-run-project-command (command project)sbt-hydra:run-run-project-command601,27932
(defun sbt-hydra:run-project-command (command project)sbt-hydra:run-project-command611,28311
(defun sbt-hydra:get-text-at-point ()sbt-hydra:get-text-at-point618,28541
(defun sbt-test-hydra:set-substring ()sbt-test-hydra:set-substring630,29221
(defun sbt-test-hydra:clear-substring ()sbt-test-hydra:clear-substring637,29536
(defun sbt-test-hydra:test-only (command project)sbt-test-hydra:test-only641,29685
(defun sbt-hydra:projects-info (sbt-output)sbt-hydra:projects-info646,29983
(defun sbt-hydra:projects-for-plugin (sbt-output plugin)sbt-hydra:projects-for-plugin660,30655
(defun sbt-hydra:create-hydra ()sbt-hydra:create-hydra665,30870
(defun sbt-hydra:parse-main-class (sbt-output)sbt-hydra:parse-main-class692,32488
(defun sbt-hydra:parse-plugins-info (sbt-output)sbt-hydra:parse-plugins-info695,32633
(defun sbt-hydra:parse-plugins-info-skip-init (sbt-output)sbt-hydra:parse-plugins-info-skip-init698,32801
(defun sbt-hydra:parse-sbt-output-skip-init (sbt-output)sbt-hydra:parse-sbt-output-skip-init701,32914
(defun sbt-hydra:parse-sbt-output (sbt-output f hook)sbt-hydra:parse-sbt-output707,33294
(defun sbt-hydra:match-regex-in-sbt-output (sbt-output regexp)sbt-hydra:match-regex-in-sbt-output718,33919
(defconst sbt-main-class-regexp "^\\[info\\][[:space:]]+\\(Some([[:word:]\\|\\.]*)\\|None\\)$")sbt-main-class-regexp729,34372
(defun sbt-hydra:get-main-class-for-project (sbt-output project)sbt-hydra:get-main-class-for-project731,34469
(defun sbt-hydra:get-main-class (sbt-output)sbt-hydra:get-main-class757,35567
(defun sbt-hydra:generate-hydras-from-projects (projects)sbt-hydra:generate-hydras-from-projects763,35876
(defun sbt-hydra:generate-hydras-from-plugins-info (sbt-output)sbt-hydra:generate-hydras-from-plugins-info769,36096
(defun sbt-test-hydra-command:test-only (project failing-test)sbt-test-hydra-command:test-only772,36243
(defun sbt-test-hydra:generate-hydra (project failing-tests)sbt-test-hydra:generate-hydra775,36432
(defun sbt-hydra:parse-failing-test ()sbt-hydra:parse-failing-test790,37565

elpa/sbt-mode-2.0.0/sbt-mode-autoloads.el,0

elpa/sbt-mode-2.0.0/sbt-mode-pkg.el,89
(define-package "sbt-mode" "2.0.0" "Interactive support for sbt projects""sbt-mode"1,0

elpa/sbt-mode-2.0.0/sbt-mode-rgrep.el,424
(defun sbt:regexp-for-id (id)sbt:regexp-for-id31,1059
(defun sbt:verify-defaults-for-rgrep ()sbt:verify-defaults-for-rgrep36,1211
(defun sbt-grep (regexp &optional files dir confirm)sbt-grep44,1520
(defun sbt-find-usages (id &optional dir confirm)sbt-find-usages62,2310
(defun sbt-find-definitions (id &optional confirm)sbt-find-definitions74,2841
(defun sbt:grep-setup-function ()sbt:grep-setup-function84,3436

elpa/sbt-mode-2.0.0/sbt-mode-buffer.el,292
(defcustom sbt:buffer-name-base "*sbt*"sbt:buffer-name-base11,247
(defun sbt:buffer-name ()sbt:buffer-name16,343
(defun sbt:require-buffer ()sbt:require-buffer22,515
(defun sbt:mode-p ()sbt:mode-p27,720
(defun sbt-switch-to-active-sbt-buffer ()sbt-switch-to-active-sbt-buffer32,842

elpa/flycheck-31/flycheck.el,34398
(defvar sh-shell)                       ; For shell script checker predicatessh-shell86,3466
(defvar ess-language)                   ; For r-lintr predicateess-language87,3544
(defgroup flycheck nilflycheck135,5274
(defgroup flycheck-config-files nilflycheck-config-files142,5524
(defgroup flycheck-options nilflycheck-options147,5659
(defgroup flycheck-executables nilflycheck-executables152,5777
(defgroup flycheck-faces nilflycheck-faces157,5891
(defcustom flycheck-checkersflycheck-checkers162,6009
(defcustom flycheck-disabled-checkers nilflycheck-disabled-checkers283,8297
(defvar-local flycheck-checker nilflycheck-checker305,9153
(defcustom flycheck-locate-config-file-functions nilflycheck-locate-config-file-functions328,10123
(defcustom flycheck-checker-error-threshold 400flycheck-checker-error-threshold347,10811
(defcustom flycheck-process-error-functions nilflycheck-process-error-functions365,11570
(defcustom flycheck-display-errors-delay 0.9flycheck-display-errors-delay389,12437
(defcustom flycheck-display-errors-function #'flycheck-display-error-messagesflycheck-display-errors-function398,12694
(defcustom flycheck-help-echo-function #'flycheck-help-echo-all-error-messagesflycheck-help-echo-function415,13406
(defcustom flycheck-command-wrapper-function #'identityflycheck-command-wrapper-function433,14207
(defcustom flycheck-executable-find #'executable-findflycheck-executable-find451,14969
(defcustom flycheck-indication-mode 'left-fringeflycheck-indication-mode468,15669
(defcustom flycheck-highlighting-mode 'symbolsflycheck-highlighting-mode485,16379
(defcustom flycheck-check-syntax-automatically '(saveflycheck-check-syntax-automatically520,17636
(defcustom flycheck-idle-change-delay 0.5flycheck-idle-change-delay560,19170
(defcustom flycheck-standard-error-navigation tflycheck-standard-error-navigation575,19679
(define-widget 'flycheck-minimum-level 'lazyflycheck-minimum-level594,20402
(defcustom flycheck-navigation-minimum-level nilflycheck-navigation-minimum-level605,20832
(defcustom flycheck-error-list-minimum-level nilflycheck-error-list-minimum-level615,21183
(defcustom flycheck-completing-read-function #'completing-readflycheck-completing-read-function631,21780
(defcustom flycheck-temp-prefix "flycheck"flycheck-temp-prefix643,22208
(defcustom flycheck-mode-hook nilflycheck-mode-hook650,22391
(defcustom flycheck-after-syntax-check-hook nilflycheck-after-syntax-check-hook656,22530
(defcustom flycheck-before-syntax-check-hook nilflycheck-before-syntax-check-hook676,23188
(defcustom flycheck-syntax-check-failed-hook nilflycheck-syntax-check-failed-hook693,23678
(defcustom flycheck-status-changed-functions nilflycheck-status-changed-functions708,24107
(defcustom flycheck-error-list-after-refresh-hook nilflycheck-error-list-after-refresh-hook722,24533
(defface flycheck-errorflycheck-error733,24850
(defface flycheck-warningflycheck-warning742,25101
(defface flycheck-infoflycheck-info751,25364
(defface flycheck-fringe-errorflycheck-fringe-error760,25639
(defface flycheck-fringe-warningflycheck-fringe-warning766,25808
(defface flycheck-fringe-infoflycheck-fringe-info772,25983
(defface flycheck-error-list-errorflycheck-error-list-error780,26250
(defface flycheck-error-list-warningflycheck-error-list-warning786,26432
(defface flycheck-error-list-infoflycheck-error-list-info792,26620
(defface flycheck-error-list-line-numberflycheck-error-list-line-number799,26881
(defface flycheck-error-list-column-numberflycheck-error-list-column-number805,27076
(defface flycheck-error-list-idflycheck-error-list-id811,27273
(defface flycheck-error-list-id-with-explainerflycheck-error-list-id-with-explainer817,27455
(defface flycheck-error-list-checker-nameflycheck-error-list-checker-name824,27725
(defface flycheck-error-list-highlightflycheck-error-list-highlight830,27937
(defvar flycheck-command-mapflycheck-command-map836,28128
(defcustom flycheck-keymap-prefix (kbd "C-c !")flycheck-keymap-prefix857,29164
(defcustom flycheck-mode-line '(:eval (flycheck-mode-line-status-text))flycheck-mode-line882,30076
(defcustom flycheck-mode-line-prefix "FlyC"flycheck-mode-line-prefix908,31052
(defcustom flycheck-error-list-mode-lineflycheck-error-list-mode-line920,31392
(defcustom flycheck-global-modes tflycheck-global-modes941,32182
(defvar flycheck-mode-menu-mapflycheck-mode-menu-map982,34079
(defun flycheck-version (&optional show-version)flycheck-version1017,35600
(defun flycheck-unload-function ()flycheck-unload-function1035,36238
(defun flycheck-manual ()flycheck-manual1044,36590
(define-obsolete-function-alias 'flycheck-infoflycheck-info1049,36705
(defun flycheck-sexp-to-string (sexp)flycheck-sexp-to-string1054,36830
(defun flycheck-string-to-number-safe (string)flycheck-string-to-number-safe1064,37080
(defun flycheck-string-list-p (obj)flycheck-string-list-p1073,37461
(defun flycheck-symbol-list-p (obj)flycheck-symbol-list-p1077,37590
(defun flycheck-same-files-p (file-a file-b)flycheck-same-files-p1081,37719
(defvar-local flycheck-temporaries nilflycheck-temporaries1094,38461
(defun flycheck-temp-dir-system ()flycheck-temp-dir-system1097,38559
(defun flycheck-temp-file-system (filename)flycheck-temp-file-system1108,38881
(defun flycheck-temp-file-inplace (filename)flycheck-temp-file-inplace1130,39727
(defun flycheck-save-buffer-to-file (file-name)flycheck-save-buffer-to-file1150,40465
(defun flycheck-save-buffer-to-temp (temp-file-fn)flycheck-save-buffer-to-temp1156,40701
(defun flycheck-prepend-with-option (option items &optional prepend-fn)flycheck-prepend-with-option1166,41072
(defun flycheck-find-in-buffer (pattern)flycheck-find-in-buffer1194,42256
(defun flycheck-buffer-empty-p (&optional buffer)flycheck-buffer-empty-p1206,42610
(defun flycheck-ephemeral-buffer-p ()flycheck-ephemeral-buffer-p1214,42835
(defun flycheck-encrypted-buffer-p ()flycheck-encrypted-buffer-p1221,43056
(defun flycheck-autoloads-file-p ()flycheck-autoloads-file-p1232,43542
(defun flycheck-in-user-emacs-directory-p (filename)flycheck-in-user-emacs-directory-p1238,43752
(defun flycheck-safe-delete (file-or-dir)flycheck-safe-delete1243,43984
(defun flycheck-safe-delete-temporaries ()flycheck-safe-delete-temporaries1250,44199
(defun flycheck-rx-file-name (form)flycheck-rx-file-name1258,44506
(defun flycheck-rx-message (form)flycheck-rx-message1264,44758
(defun flycheck-rx-id (form)flycheck-rx-id1269,44958
(defun flycheck-rx-to-string (form &optional no-group)flycheck-rx-to-string1273,45090
(defun flycheck-current-load-file ()flycheck-current-load-file1308,46176
(defun flycheck-module-root-directory (module &optional file-name)flycheck-module-root-directory1326,46961
(defvar read-flycheck-checker-history nilread-flycheck-checker-history1363,48608
(defun flycheck-completing-read (prompt candidates default &optional history)flycheck-completing-read1366,48710
(defun read-flycheck-checker (prompt &optional default property candidates)read-flycheck-checker1377,49156
(defun read-flycheck-error-level (prompt)read-flycheck-error-level1411,50771
(defun flycheck-defined-checkers (&optional property)flycheck-defined-checkers1425,51321
(defun flycheck-registered-checker-p (checker)flycheck-registered-checker-p1441,51953
(defun flycheck-disabled-checker-p (checker)flycheck-disabled-checker-p1449,52198
(defconst flycheck-generic-checker-version 2flycheck-generic-checker-version1458,52437
(defsubst flycheck--checker-property-name (property)flycheck--checker-property-name1464,52638
(defun flycheck-checker-get (checker property)flycheck-checker-get1468,52801
(defun flycheck-validate-next-checker (next &optional strict)flycheck-validate-next-checker1475,53092
(defun flycheck-define-generic-checker (symbol docstring &rest properties)flycheck-define-generic-checker1501,54032
(defun flycheck-valid-checker-p (checker)flycheck-valid-checker-p1802,66616
(defun flycheck-checker-supports-major-mode-p (checker &optional mode)flycheck-checker-supports-major-mode-p1811,66920
(defvar-local flycheck-enabled-checkers nilflycheck-enabled-checkers1824,67436
(defun flycheck-may-enable-checker (checker)flycheck-may-enable-checker1830,67623
(defun flycheck-may-use-checker (checker)flycheck-may-use-checker1845,68271
(defun flycheck-may-use-next-checker (next-checker)flycheck-may-use-next-checker1856,68705
(define-button-type 'help-flycheck-checker-defhelp-flycheck-checker-def1869,69169
(defconst flycheck-find-checker-regexpflycheck-find-checker-regexp1874,69356
(defun flycheck-goto-checker-definition (checker file)flycheck-goto-checker-definition1887,69808
(defun flycheck-checker-at-point ()flycheck-checker-at-point1896,70170
(defun flycheck-describe-checker (checker)flycheck-describe-checker1904,70411
(defun flycheck-verify-generic-checker (checker)flycheck-verify-generic-checker2001,74464
(define-button-type 'help-flycheck-checker-dochelp-flycheck-checker-doc2026,75484
(defun flycheck--verify-princ-checker (checker buffer &optional with-mm)flycheck--verify-princ-checker2031,75657
(defun flycheck--verify-print-header (desc buffer)flycheck--verify-print-header2073,77477
(defun flycheck--verify-print-footer (buffer)flycheck--verify-print-footer2091,78100
(defun flycheck-verify-checker (checker)flycheck-verify-checker2115,79104
(defun flycheck-verify-setup ()flycheck-verify-setup2145,80460
(defun flycheck-buffer-saved-p (&optional buffer)flycheck-buffer-saved-p2197,82721
(defun flycheck-add-next-checker (checker next &optional append)flycheck-add-next-checker2210,83155
(defun flycheck-add-mode (checker mode)flycheck-add-mode2235,84196
(defun flycheck-syntax-check-start (syntax-check callback)flycheck-syntax-check-start2271,85151
(defun flycheck-syntax-check-interrupt (syntax-check)flycheck-syntax-check-interrupt2278,85531
(defvar flycheck-mode-mapflycheck-mode-map2289,85910
(defvar-local flycheck-old-next-error-function nilflycheck-old-next-error-function2300,86399
(defconst flycheck-hooks-alistflycheck-hooks-alist2303,86496
(define-minor-mode flycheck-modeflycheck-mode2339,88469
(defun flycheck-get-checker-for-buffer ()flycheck-get-checker-for-buffer2383,90006
(defun flycheck-get-next-checker-for-buffer (checker)flycheck-get-next-checker-for-buffer2398,90600
(defun flycheck-select-checker (checker)flycheck-select-checker2405,90909
(defun flycheck-disable-checker (checker &optional enable)flycheck-disable-checker2436,92106
(defvar-local flycheck-current-syntax-check nilflycheck-current-syntax-check2471,93671
(defun flycheck-start-current-syntax-check (checker)flycheck-start-current-syntax-check2475,93826
(defun flycheck-running-p ()flycheck-running-p2492,94596
(defun flycheck-stop ()flycheck-stop2496,94743
(defun flycheck-buffer-status-callback (syntax-check)flycheck-buffer-status-callback2506,95218
(defun flycheck-buffer ()flycheck-buffer2512,95448
(defun flycheck-report-buffer-checker-statusflycheck-report-buffer-checker-status2539,96544
(defun flycheck-finish-current-syntax-check (errors working-dir)flycheck-finish-current-syntax-check2612,99503
(defun flycheck-disable-excessive-checker (checker errors)flycheck-disable-excessive-checker2652,101396
(defun flycheck-clear (&optional shall-interrupt)flycheck-clear2669,102122
(defun flycheck-teardown ()flycheck-teardown2682,102491
(defun flycheck-may-check-automatically (&optional condition)flycheck-may-check-automatically2695,102899
(defun flycheck-buffer-automatically (&optional condition force-deferred)flycheck-buffer-automatically2708,103411
(defvar-local flycheck-idle-change-timer nilflycheck-idle-change-timer2722,103993
(defun flycheck-clear-idle-change-timer ()flycheck-clear-idle-change-timer2725,104095
(defun flycheck-handle-change (beg end _len)flycheck-handle-change2731,104297
(defun flycheck--handle-idle-change-in-buffer (buffer)flycheck--handle-idle-change-in-buffer2751,105108
(defun flycheck-handle-idle-change ()flycheck-handle-idle-change2760,105510
(defun flycheck-handle-save ()flycheck-handle-save2765,105690
(defvar-local flycheck-deferred-syntax-check nilflycheck-deferred-syntax-check2771,105827
(defun flycheck-must-defer-check ()flycheck-must-defer-check2774,105930
(defun flycheck-deferred-check-p ()flycheck-deferred-check-p2791,106692
(defun flycheck-buffer-deferred ()flycheck-buffer-deferred2797,106861
(defun flycheck-clean-deferred-check ()flycheck-clean-deferred-check2801,106987
(defun flycheck-perform-deferred-syntax-check ()flycheck-perform-deferred-syntax-check2805,107118
(defun flycheck-may-enable-mode ()flycheck-may-enable-mode2813,107354
(defun flycheck-mode-on-safe ()flycheck-mode-on-safe2841,108412
(define-globalized-minor-mode global-flycheck-mode flycheck-modeglobal-flycheck-mode2850,108673
(defun flycheck-global-teardown ()flycheck-global-teardown2861,109037
(defmacro flycheck-error-with-buffer (err &rest forms)flycheck-error-with-buffer2932,111501
(defun flycheck-error-line-region (err)flycheck-error-line-region2941,111829
(defun flycheck-error-column-region (err)flycheck-error-column-region2965,112811
(defun flycheck-error-thing-region (thing err)flycheck-error-thing-region2997,114190
(defun flycheck-error-region-for-mode (err mode)flycheck-error-region-for-mode3015,114827
(defun flycheck-error-pos (err)flycheck-error-pos3049,116037
(defun flycheck-error-format-message-and-id (err)flycheck-error-format-message-and-id3059,116373
(defun flycheck-error-format (err &optional with-file-name)flycheck-error-format3065,116624
(defun flycheck-error-< (err1 err2)flycheck-error-<3084,117491
(defun flycheck-error-level-< (err1 err2)flycheck-error-level-<3098,117998
(defun flycheck-assert-error-list-p (errors)flycheck-assert-error-list-p3114,118619
(defvar-local flycheck-current-errors nilflycheck-current-errors3129,119113
(defun flycheck-report-current-errors (errors)flycheck-report-current-errors3132,119218
(defun flycheck-clear-errors ()flycheck-clear-errors3145,119757
(defun flycheck-fill-and-expand-error-file-names (errors directory)flycheck-fill-and-expand-error-file-names3150,119926
(defun flycheck-relevant-error-p (err)flycheck-relevant-error-p3166,120526
(defun flycheck-relevant-errors (errors)flycheck-relevant-errors3185,121307
(defun flycheck-related-errors (err)flycheck-related-errors3192,121523
(defvar-local flycheck-last-status-change 'not-checkedflycheck-last-status-change3206,121990
(defun flycheck-report-failed-syntax-check (&optional status)flycheck-report-failed-syntax-check3209,122097
(defun flycheck-report-status (status)flycheck-report-status3222,122548
(defun flycheck-mode-line-status-text (&optional status)flycheck-mode-line-status-text3256,123393
(defun flycheck-define-error-level (level &rest properties)flycheck-define-error-level3278,124171
(defun flycheck-error-level-p (level)flycheck-error-level-p3340,126673
(defun flycheck-error-level-severity (level)flycheck-error-level-severity3344,126804
(defun flycheck-error-level-compilation-level (level)flycheck-error-level-compilation-level3348,126936
(defun flycheck-error-level-overlay-category (level)flycheck-error-level-overlay-category3352,127075
(defun flycheck-error-level-fringe-bitmap (level)flycheck-error-level-fringe-bitmap3356,127211
(defun flycheck-error-level-fringe-face (level)flycheck-error-level-fringe-face3360,127351
(defun flycheck-error-level-error-list-face (level)flycheck-error-level-error-list-face3364,127472
(defun flycheck-error-level-make-fringe-icon (level side)flycheck-error-level-make-fringe-icon3368,127605
(defun flycheck-filter-errors (errors checker)flycheck-filter-errors3445,130009
(defun flycheck-sanitize-errors (errors)flycheck-sanitize-errors3455,130376
(defun flycheck-remove-error-file-names (file-name errors)flycheck-remove-error-file-names3478,131167
(defun flycheck-increment-error-columns (errors &optional offset)flycheck-increment-error-columns3492,131647
(defun flycheck-collapse-error-message-whitespace (errors)flycheck-collapse-error-message-whitespace3505,132071
(defun flycheck-dedent-error-messages (errors)flycheck-dedent-error-messages3516,132480
(defun flycheck-fold-include-levels (errors sentinel-message)flycheck-fold-include-levels3547,133752
(defun flycheck-dequalify-error-ids (errors)flycheck-dequalify-error-ids3603,136590
(defun flycheck-remove-error-ids (errors)flycheck-remove-error-ids3627,137538
(defun flycheck-fill-empty-line-numbers (errors)flycheck-fill-empty-line-numbers3632,137697
(defun flycheck-count-errors (errors)flycheck-count-errors3647,138058
(defun flycheck-has-max-errors-p (errors level)flycheck-has-max-errors-p3662,138554
(defun flycheck-has-max-current-errors-p (level)flycheck-has-max-current-errors-p3670,138921
(defun flycheck-has-errors-p (errors level)flycheck-has-errors-p3674,139095
(defun flycheck-has-current-errors-p (&optional level)flycheck-has-current-errors-p3678,139260
(defun flycheck-add-overlay (err)flycheck-add-overlay3688,139594
(defun flycheck-help-echo (_window object pos)flycheck-help-echo3715,140871
(defun flycheck-help-echo-all-error-messages (errs)flycheck-help-echo-all-error-messages3731,141542
(defun flycheck-filter-overlays (overlays)flycheck-filter-overlays3741,141872
(defun flycheck-overlays-at (pos)flycheck-overlays-at3745,142033
(defun flycheck-overlays-in (beg end)flycheck-overlays-in3749,142154
(defun flycheck-overlay-errors-at (pos)flycheck-overlay-errors-at3753,142296
(defun flycheck-overlay-errors-in (beg end)flycheck-overlay-errors-in3758,142492
(defvar-local flycheck-overlays-to-delete nilflycheck-overlays-to-delete3763,142709
(defun flycheck-delete-all-overlays ()flycheck-delete-all-overlays3767,142877
(defun flycheck-mark-all-overlays-for-deletion ()flycheck-mark-all-overlays-for-deletion3775,143153
(defun flycheck-delete-marked-overlays ()flycheck-delete-marked-overlays3781,143394
(defun flycheck-error-level-interesting-at-pos-p (pos)flycheck-error-level-interesting-at-pos-p3789,143658
(defun flycheck-error-level-interesting-p (err)flycheck-error-level-interesting-p3793,143874
(defun flycheck-next-error-pos (n &optional reset)flycheck-next-error-pos3801,144219
(defun flycheck-next-error-function (n reset)flycheck-next-error-function3847,146303
(defun flycheck-next-error (&optional n reset)flycheck-next-error3861,146767
(defun flycheck-previous-error (&optional n)flycheck-previous-error3875,147240
(defun flycheck-first-error (&optional n)flycheck-first-error3883,147486
(defconst flycheck-error-list-buffer "*Flycheck errors*"flycheck-error-list-buffer3893,147764
(defvar flycheck-error-list-mode-mapflycheck-error-list-mode-map3896,147871
(defun flycheck-error-list-make-last-column (message checker)flycheck-error-list-make-last-column3908,148462
(defconst flycheck-error-list-formatflycheck-error-list-format3918,148897
(defconst flycheck-error-list-padding 1flycheck-error-list-padding3926,149199
(defconst flycheck--error-list-msg-offsetflycheck--error-list-msg-offset3929,149273
(define-derived-mode flycheck-error-list-mode tabulated-list-mode "Flycheck errors"flycheck-error-list-mode3939,149649
(defvar-local flycheck-error-list-source-buffer nilflycheck-error-list-source-buffer3958,150574
(defun flycheck-error-list-set-source (buffer)flycheck-error-list-set-source3964,150825
(defun flycheck-error-list-update-source ()flycheck-error-list-update-source3973,151232
(defun flycheck-error-list-check-source ()flycheck-error-list-check-source3980,151557
(define-button-type 'flycheck-error-listflycheck-error-list3988,151846
(defun flycheck-error-list-button-goto-error (button)flycheck-error-list-button-goto-error3992,151979
(define-button-type 'flycheck-error-list-explain-errorflycheck-error-list-explain-error3996,152123
(defun flycheck-error-list-button-explain-error (button)flycheck-error-list-button-explain-error4000,152276
(defsubst flycheck-error-list-make-cell (text &optional face help-echo type)flycheck-error-list-make-cell4004,152428
(defsubst flycheck-error-list-make-number-cell (number face)flycheck-error-list-make-number-cell4024,153279
(defun flycheck-error-list-make-entry (error)flycheck-error-list-make-entry4033,153585
(defun flycheck-flush-multiline-message (msg)flycheck-flush-multiline-message4064,155218
(defun flycheck-error-list-current-errors ()flycheck-error-list-current-errors4074,155683
(defun flycheck-error-list-entries ()flycheck-error-list-entries4080,155965
(defun flycheck-error-list-entry-< (entry1 entry2)flycheck-error-list-entry-<4086,156235
(defun flycheck-error-list-entry-level-< (entry1 entry2)flycheck-error-list-entry-level-<4092,156419
(defvar flycheck-error-list-mode-line-mapflycheck-error-list-mode-line-map4098,156624
(defun flycheck-error-list-propertized-source-name ()flycheck-error-list-propertized-source-name4105,156842
(defun flycheck-error-list-mouse-switch-to-source (event)flycheck-error-list-mouse-switch-to-source4119,157466
(defun flycheck-get-error-list-window-list (&optional all-frames)flycheck-get-error-list-window-list4128,157837
(defun flycheck-get-error-list-window (&optional all-frames)flycheck-get-error-list-window4136,158138
(defun flycheck-error-list-recenter-at (pos)flycheck-error-list-recenter-at4144,158433
(defun flycheck-error-list-refresh ()flycheck-error-list-refresh4151,158649
(defun flycheck-error-list-mode-line-filter-indicator ()flycheck-error-list-mode-line-filter-indicator4171,159530
(defun flycheck-error-list-set-filter (level)flycheck-error-list-set-filter4177,159761
(defun flycheck-error-list-reset-filter ()flycheck-error-list-reset-filter4192,160405
(defun flycheck-error-list-apply-filter (errors)flycheck-error-list-apply-filter4197,160583
(defun flycheck-error-list-goto-error (&optional pos)flycheck-error-list-goto-error4207,161053
(defun flycheck-error-list-explain-error (&optional pos)flycheck-error-list-explain-error4229,161969
(defun flycheck-error-list-next-error-pos (pos &optional n)flycheck-error-list-next-error-pos4240,162425
(defun flycheck-error-list-previous-error (n)flycheck-error-list-previous-error4264,163332
(defun flycheck-error-list-next-error (n)flycheck-error-list-next-error4269,163501
(defvar-local flycheck-error-list-highlight-overlays nilflycheck-error-list-highlight-overlays4281,163986
(defun flycheck-error-list-highlight-errors (&optional preserve-pos)flycheck-error-list-highlight-errors4285,164165
(defun flycheck-list-errors ()flycheck-list-errors4330,166552
(defalias 'list-flycheck-errors 'flycheck-list-errors)list-flycheck-errors4347,167248
(defun flycheck-display-errors (errors)flycheck-display-errors4351,167350
(defvar-local flycheck-display-error-at-point-timer nilflycheck-display-error-at-point-timer4356,167549
(defun flycheck-cancel-error-display-error-at-point-timer ()flycheck-cancel-error-display-error-at-point-timer4359,167673
(defun flycheck-display-error-at-point ()flycheck-display-error-at-point4365,167952
(defun flycheck-display-error-at-point-soon ()flycheck-display-error-at-point-soon4376,168406
(defconst flycheck-error-message-buffer "*Flycheck error messages*"flycheck-error-message-buffer4385,168792
(defun flycheck-error-message-buffer ()flycheck-error-message-buffer4388,168921
(defun flycheck-may-use-echo-area-p ()flycheck-may-use-echo-area-p4395,169170
(defun flycheck-display-error-messages (errors)flycheck-display-error-messages4402,169444
(defun flycheck-display-error-messages-unless-error-list (errors)flycheck-display-error-messages-unless-error-list4419,170236
(defun flycheck-hide-error-buffer ()flycheck-hide-error-buffer4428,170618
(defun flycheck-copy-errors-as-kill (pos &optional formatter)flycheck-copy-errors-as-kill4442,171154
(defun flycheck-explain-error-at-point ()flycheck-explain-error-at-point4463,172147
(defconst flycheck-explain-error-buffer "*Flycheck error explanation*"flycheck-explain-error-buffer4483,173129
(defun flycheck-display-error-explanation (explanation)flycheck-display-error-explanation4486,173257
(defun flycheck-command-argument-p (arg)flycheck-command-argument-p4493,173509
(defun flycheck-compute-working-directory (checker)flycheck-compute-working-directory4525,174684
(defun flycheck-define-command-checker (symbol docstring &rest properties)flycheck-define-command-checker4548,175718
(defun flycheck-checker-default-executable (checker)flycheck-checker-default-executable4698,182093
(defun flycheck-checker-executable (checker)flycheck-checker-executable4702,182239
(defun flycheck-find-checker-executable (checker)flycheck-find-checker-executable4712,182666
(defun flycheck-checker-arguments (checker)flycheck-checker-arguments4719,182947
(defun flycheck-substitute-argument (arg checker)flycheck-substitute-argument4723,183083
(defun flycheck-checker-substituted-arguments (checker)flycheck-checker-substituted-arguments4906,190993
(defun flycheck--process-send-buffer-contents-chunked (process)flycheck--process-send-buffer-contents-chunked4916,191376
(defvar flycheck-chunked-process-inputflycheck-chunked-process-input4929,191913
(defun flycheck-process-send-buffer (process)flycheck-process-send-buffer4947,192676
(defun flycheck-start-command-checker (checker callback)flycheck-start-command-checker4965,193376
(defun flycheck-interrupt-command-checker (_checker process)flycheck-interrupt-command-checker5017,196290
(defun flycheck-command-checker-print-doc (checker)flycheck-command-checker-print-doc5023,196503
(defun flycheck-verify-command-checker (checker)flycheck-verify-command-checker5054,197784
(defun flycheck-receive-checker-output (process output)flycheck-receive-checker-output5076,198761
(defun flycheck-get-output (process)flycheck-get-output5080,198928
(defun flycheck-handle-signal (process _event)flycheck-handle-signal5086,199200
(defun flycheck-finish-checker-processflycheck-finish-checker-process5112,200297
(defmacro flycheck-def-executable-var (checker default-executable)flycheck-def-executable-var5143,201765
(defun flycheck-set-checker-executable (checker &optional executable)flycheck-set-checker-executable5168,202737
(defun flycheck-register-config-file-var (var checkers)flycheck-register-config-file-var5206,204545
(defmacro flycheck-def-config-file-var (symbol checker &optional file-nameflycheck-def-config-file-var5216,204881
(defun flycheck-locate-config-file (filename checker)flycheck-locate-config-file5252,206356
(defun flycheck-locate-config-file-by-path (filepath _checker)flycheck-locate-config-file-by-path5266,206857
(defun flycheck-locate-config-file-ancestor-directories (filename _checker)flycheck-locate-config-file-ancestor-directories5279,207363
(defun flycheck-locate-config-file-home (filename _checker)flycheck-locate-config-file-home5292,207908
(defun flycheck-register-option-var (var checkers)flycheck-register-option-var5307,208484
(defmacro flycheck-def-option-var (symbol init-value checkers docstringflycheck-def-option-var5319,208906
(defun flycheck-option-int (value)flycheck-option-int5348,209987
(defun flycheck-option-symbol (value)flycheck-option-symbol5355,210190
(defun flycheck-option-comma-separated-list (value &optional separator filter)flycheck-option-comma-separated-list5362,210385
(defmacro flycheck-def-args-var (symbol checkers &rest custom-args)flycheck-def-args-var5382,211171
(defun flycheck-checker-pattern-to-error-regexp (pattern)flycheck-checker-pattern-to-error-regexp5404,211957
(defun flycheck-checker-compilation-error-regexp-alist (checker)flycheck-checker-compilation-error-regexp-alist5414,212333
(defun flycheck-checker-shell-command (checker)flycheck-checker-shell-command5422,212683
(defun flycheck-compile-name (_name)flycheck-compile-name5450,214052
(defun flycheck-compile (checker)flycheck-compile5456,214206
(defun flycheck-parse-output (output checker buffer)flycheck-parse-output5488,215704
(defun flycheck-fix-error-filename (err buffer-files cwd)flycheck-fix-error-filename5497,216051
(defun flycheck-parse-xml-region (beg end)flycheck-parse-xml-region5520,217034
(defvar flycheck-xml-parserflycheck-xml-parser5529,217353
(defun flycheck-parse-xml-string (xml)flycheck-parse-xml-string5537,217650
(defun flycheck-parse-checkstyle (output checker buffer)flycheck-parse-checkstyle5549,218134
(defun flycheck-parse-cppcheck (output checker buffer)flycheck-parse-cppcheck5586,219647
(defun flycheck-parse-phpmd (output checker buffer)flycheck-parse-phpmd5629,221463
(defun flycheck-parse-reek (output checker buffer)flycheck-parse-reek5659,222594
(defun flycheck-parse-tslint (output checker buffer)flycheck-parse-tslint5683,223316
(defun flycheck-parse-rust-collect-spans (span)flycheck-parse-rust-collect-spans5706,224165
(defun flycheck-parse-rustc-diagnostic (diagnostic checker buffer)flycheck-parse-rustc-diagnostic5723,224843
(defun flycheck-parse-json (output)flycheck-parse-json5838,229433
(defun flycheck-parse-rustc (output checker buffer)flycheck-parse-rustc5859,230101
(defun flycheck-parse-cargo-rustc (output checker buffer)flycheck-parse-cargo-rustc5876,230856
(defun flycheck-get-regexp (patterns)flycheck-get-regexp5902,232012
(defun flycheck-tokenize-output-with-patterns (output patterns)flycheck-tokenize-output-with-patterns5907,232212
(defun flycheck-try-parse-error-with-pattern (err pattern checker)flycheck-try-parse-error-with-pattern5925,232886
(defun flycheck-parse-error-with-patterns (err patterns checker)flycheck-parse-error-with-patterns5949,233797
(defun flycheck-parse-with-patterns (output checker buffer)flycheck-parse-with-patterns5964,234380
(defmacro flycheck-define-checker (symbol docstring &rest properties)flycheck-define-checker5984,235175
(defun flycheck-c/c++-quoted-include-directory ()flycheck-c/c++-quoted-include-directory6260,245579
(defconst flycheck-stylelint-args '("--formatter" "json")flycheck-stylelint-args6687,263067
(defconst flycheck-stylelint-error-reflycheck-stylelint-error-re6703,263570
(defun flycheck-parse-stylelint (output checker buffer)flycheck-parse-stylelint6707,263703
(defun flycheck-parse-stylelint-json (output checker buffer)flycheck-parse-stylelint-json6733,264646
(defconst flycheck-d-module-reflycheck-d-module-re6804,267454
(defun flycheck-d-base-directory ()flycheck-d-base-directory6811,267698
(defun flycheck-elixir--find-default-directory (_checker)flycheck-elixir--find-default-directory6877,270242
(defun flycheck-elixir--parse-dogma-json (output checker buffer)flycheck-elixir--parse-dogma-json6889,270632
(defun flycheck-elixir--check-for-dogma ()flycheck-elixir--check-for-dogma6917,271582
(defconst flycheck-this-emacs-executableflycheck-this-emacs-executable6936,272254
(defconst flycheck-emacs-args '("-Q" "--batch")flycheck-emacs-args6940,272401
(defmacro flycheck-prepare-emacs-lisp-form (&rest body)flycheck-prepare-emacs-lisp-form6943,272494
(defconst flycheck-emacs-lisp-check-formflycheck-emacs-lisp-check-form6961,273296
(defconst flycheck-emacs-lisp-package-initialize-formflycheck-emacs-lisp-package-initialize-form7020,275822
(defun flycheck-option-emacs-lisp-package-initialize (value)flycheck-option-emacs-lisp-package-initialize7026,276039
(defun flycheck-option-emacs-lisp-package-user-dir (value)flycheck-option-emacs-lisp-package-user-dir7058,277581
(defun flycheck-option-emacs-lisp-check-declare (value)flycheck-option-emacs-lisp-check-declare7072,278240
(defconst flycheck-emacs-lisp-checkdoc-formflycheck-emacs-lisp-checkdoc-form7148,281967
(defconst flycheck-emacs-lisp-checkdoc-variablesflycheck-emacs-lisp-checkdoc-variables7179,283465
(defun flycheck-emacs-lisp-checkdoc-variables-form ()flycheck-emacs-lisp-checkdoc-variables-form7192,283928
(defun contains-rebar-config (dir-name)contains-rebar-config7261,286749
(defun locate-rebar3-project-root (file-name &optional prev-file-name acc)locate-rebar3-project-root7266,286940
(defun flycheck-rebar3-project-root (&optional _checker)flycheck-rebar3-project-root7289,287760
(defun flycheck-option-gfortran-layout (value)flycheck-option-gfortran-layout7372,290844
(defconst flycheck-haskell-module-reflycheck-haskell-module-re7727,304752
(defvar flycheck-haskell-ghc-cache-directory nilflycheck-haskell-ghc-cache-directory7785,306976
(defun flycheck-haskell-ghc-cache-directory ()flycheck-haskell-ghc-cache-directory7788,307069
(defun flycheck--locate-dominating-file-matching (directory regexp)flycheck--locate-dominating-file-matching7797,307443
(defun flycheck-haskell--find-default-directory (checker)flycheck-haskell--find-default-directory7807,307780
(defun flycheck-eslint-config-exists-p ()flycheck-eslint-config-exists-p8073,318243
(defun flycheck-parse-jscs (output checker buffer)flycheck-parse-jscs8119,320149
(defun flycheck-proselint-parse-errors (output checker buffer)flycheck-proselint-parse-errors8462,332917
(defun flycheck-puppet-lint-disabled-arg-name (check)flycheck-puppet-lint-disabled-arg-name8585,337703
(defun flycheck-flake8-fix-error-level (err)flycheck-flake8-fix-error-level8675,341679
(defun flycheck-r-has-lintr (R)flycheck-r-has-lintr8796,346303
(defun flycheck-racket-has-expand-p (checker)flycheck-racket-has-expand-p8841,348154
(defun flycheck-locate-sphinx-source-directory ()flycheck-locate-sphinx-source-directory8997,353862
(defun flycheck-rust-error-explainer (error)flycheck-rust-error-explainer9261,364469
(defun flycheck-rust-error-filter (errors)flycheck-rust-error-filter9267,364742
(defun flycheck-rust-valid-crate-type-p (crate-type)flycheck-rust-valid-crate-type-p9276,365097
(defvar flycheck-sass-scss-cache-directory nilflycheck-sass-scss-cache-directory9362,369101
(defun flycheck-sass-scss-cache-location ()flycheck-sass-scss-cache-location9365,369197
(defconst flycheck-scss-lint-checkstyle-reflycheck-scss-lint-checkstyle-re9534,375792
(defun flycheck-parse-scss-lint (output checker buffer)flycheck-parse-scss-lint9538,375975
(defconst flycheck-shellcheck-supported-shells '(bash ksh88 sh)flycheck-shellcheck-supported-shells9707,382307

elpa/flycheck-31/flycheck-buttercup.el,98
(defun flycheck-buttercup-format-error-list (errors)flycheck-buttercup-format-error-list49,1608

elpa/flycheck-31/flycheck-ert.el,2152
(defvar flycheck-ert--resource-directory nilflycheck-ert--resource-directory90,3159
(defmacro flycheck-ert-with-temp-buffer (&rest body)flycheck-ert-with-temp-buffer96,3300
(defmacro flycheck-ert-with-file-buffer (file-name &rest body)flycheck-ert-with-file-buffer112,3956
(defmacro flycheck-ert-with-help-buffer (&rest body)flycheck-ert-with-help-buffer130,4622
(defmacro flycheck-ert-with-global-mode (&rest body)flycheck-ert-with-global-mode140,4955
(defmacro flycheck-ert-with-env (env &rest body)flycheck-ert-with-env152,5332
(defun flycheck-ert-resource-filename (resource-file)flycheck-ert-resource-filename169,5845
(defmacro flycheck-ert-with-resource-buffer (resource-file &rest body)flycheck-ert-with-resource-buffer176,6104
(defun flycheck-ert-initialize (resource-dir)flycheck-ert-initialize189,6493
(defmacro flycheck-ert-def-checker-test (checker language nameflycheck-ert-def-checker-test214,7514
(defun flycheck-ert-syntax-check-timed-out-p (result)flycheck-ert-syntax-check-timed-out-p273,10141
(defvar-local flycheck-ert-syntax-checker-finished nilflycheck-ert-syntax-checker-finished284,10448
(defconst flycheck-ert-checker-wait-time 10flycheck-ert-checker-wait-time290,10668
(define-error 'flycheck-ert-syntax-check-timed-out "Syntax check timed out.")flycheck-ert-syntax-check-timed-out296,10878
(defun flycheck-ert-wait-for-syntax-checker ()flycheck-ert-wait-for-syntax-checker298,10957
(defun flycheck-ert-buffer-sync ()flycheck-ert-buffer-sync309,11470
(defun flycheck-ert-ensure-clear ()flycheck-ert-ensure-clear323,12161
(defun flycheck-ert-should-overlay (error)flycheck-ert-should-overlay335,12511
(defun flycheck-ert-should-errors (&rest errors)flycheck-ert-should-errors360,13792
(define-error 'flycheck-ert-suspicious-checker "Suspicious state from checker")flycheck-ert-suspicious-checker381,14683
(defun flycheck-ert-should-syntax-check (resource-file modes &rest errors)flycheck-ert-should-syntax-check383,14764
(defun flycheck-ert-at-nth-error (n)flycheck-ert-at-nth-error433,17015
(defun flycheck-ert-explain--at-nth-error (n)flycheck-ert-explain--at-nth-error444,17475

elpa/flycheck-31/flycheck-pkg.el,76
(define-package "flycheck" "31" "On-the-fly syntax checking""flycheck"1,0

elpa/flycheck-31/flycheck-autoloads.el,65
(defvar global-flycheck-mode nil "\global-flycheck-mode37,1037

elpa/highlight-indentation-0.7.0/highlight-indentation-pkg.el,367
(define-package "highlight-indentation" "0.7.0" "Minor modes for highlighting indentation" 'nil :commit "cd6d8168ccb04c6c0394f42e9512c58f23c01689" :authors '(("Anton Johansson" . "anton.johansson@gmail.com")) :maintainer '("Anton Johansson" . "anton.johansson@gmail.com") :url "https://github.com/antonj/Highlight-Indentation-for-Emacs")"highlight-indentation"2,31

elpa/highlight-indentation-0.7.0/highlight-indentation.el,2092
(defgroup highlight-indentation nilhighlight-indentation24,940
(defface highlight-indentation-facehighlight-indentation-face29,1061
(defcustom highlight-indentation-offset 4highlight-indentation-offset35,1265
(defconst highlight-indentation-hookshighlight-indentation-hooks42,1562
(defun highlight-indentation-get-buffer-windows (&optional all-frames)highlight-indentation-get-buffer-windows57,2305
(defun highlight-indentation-delete-overlays-buffer (overlay)highlight-indentation-delete-overlays-buffer61,2505
(defun highlight-indentation-delete-overlays-region (start end overlay)highlight-indentation-delete-overlays-region67,2732
(defun highlight-indentation-redraw-window (win overlay func &optional start)highlight-indentation-redraw-window73,2965
(defun highlight-indentation-redraw-region (start end overlay func)highlight-indentation-redraw-region77,3183
(defun highlight-indentation-redraw-all-windows (overlay func &optional all-frames)highlight-indentation-redraw-all-windows86,3584
(defun highlight-indentation-put-overlays-region (start end overlay)highlight-indentation-put-overlays-region91,3855
(defun highlight-indentation-guess-offset ()highlight-indentation-guess-offset113,4683
(define-minor-mode highlight-indentation-modehighlight-indentation-mode147,6082
(defun highlight-indentation-set-offset (offset)highlight-indentation-set-offset167,6963
(defface highlight-indentation-current-column-facehighlight-indentation-current-column-face182,7662
(defvar highlight-indentation-overlay-priority 1)highlight-indentation-overlay-priority188,7887
(defvar highlight-indentation-current-column-overlay-priority 2)highlight-indentation-current-column-overlay-priority189,7937
(defconst highlight-indentation-current-column-hookshighlight-indentation-current-column-hooks191,8003
(defun highlight-indentation-current-column-put-overlays-region (start end overlay)highlight-indentation-current-column-put-overlays-region196,8341
(define-minor-mode highlight-indentation-current-column-modehighlight-indentation-current-column-mode221,9314

elpa/highlight-indentation-0.7.0/highlight-indentation-autoloads.el,0

elpa/org-gcal-20191018.921/org-gcal-pkg.el,394
(define-package "org-gcal" "20191018.921" "Org sync with Google Calendar" '((request "20190901") (request-deferred "20181129") (alert "0") (emacs "26")) :commit "36e9933b0238acb245e6d8dc89944583482fee1e" :keywords '("convenience") :authors '(("myuhe <yuhei.maeda_at_gmail.com>")) :maintainer '("Raimon Grau" . "raimonster@gmail.com") :url "https://github.com/kidd/org-gcal.el")"org-gcal"2,31

elpa/org-gcal-20191018.921/org-gcal.el,5226
(defgroup org-gcal nil "Org sync with Google Calendar"org-gcal48,1478
(defcustom org-gcal-up-days 30org-gcal-up-days52,1578
(defcustom org-gcal-down-days 60org-gcal-down-days57,1694
(defcustom org-gcal-auto-archive torg-gcal-auto-archive62,1811
(defcustom org-gcal-dirorg-gcal-dir67,1934
(defcustom org-gcal-token-fileorg-gcal-token-file73,2072
(defcustom org-gcal-client-id nilorg-gcal-client-id79,2225
(defcustom org-gcal-client-secret nilorg-gcal-client-secret84,2321
(defcustom org-gcal-fetch-file-alist nilorg-gcal-fetch-file-alist89,2438
(defvaralias 'org-gcal-file-alist 'org-gcal-fetch-file-alist)org-gcal-file-alist97,2772
(defcustom org-gcal-logo-file nilorg-gcal-logo-file99,2835
(defcustom org-gcal-fetch-event-filters '()org-gcal-fetch-event-filters104,2966
(defcustom org-gcal-notify-p torg-gcal-notify-p111,3188
(defcustom org-gcal-calendar-id-property "calendar-id"org-gcal-calendar-id-property116,3321
(defcustom org-gcal-etag-property "ETag"org-gcal-etag-property122,3487
(defcustom org-gcal-drawer-name "org-gcal"org-gcal-drawer-name128,3632
(defvar org-gcal-token-plist nilorg-gcal-token-plist135,3801
(defconst org-gcal-auth-url "https://accounts.google.com/o/oauth2/auth"org-gcal-auth-url138,3853
(defconst org-gcal-token-url "https://www.googleapis.com/oauth2/v3/token"org-gcal-token-url141,3957
(defconst org-gcal-resource-url "https://www.googleapis.com/auth/calendar"org-gcal-resource-url144,4063
(defconst org-gcal-events-url "https://www.googleapis.com/calendar/v3/calendars/%s/events")org-gcal-events-url147,4194
(defun org-gcal-sync (&optional a-token skip-export silent)org-gcal-sync159,4581
(defun org-gcal-fetch ()org-gcal-fetch298,11313
(defun org-gcal-sync-buffer (&optional _a-token skip-export silent)org-gcal-sync-buffer304,11438
(defun org-gcal-fetch-buffer (&optional _a-token _skip-export _silent)org-gcal-fetch-buffer367,13666
(defun org-gcal--filter (items)org-gcal--filter374,13901
(defun org-gcal--all-property-local-values (pom property literal-nil)org-gcal--all-property-local-values388,14398
(defun org-gcal--put-id (pom calendar-id event-id)org-gcal--put-id413,15527
(defun org-gcal--event-id-from-entry-id (entry-id)org-gcal--event-id-from-entry-id442,16825
(defun org-gcal--format-entry-id (calendar-id event-id)org-gcal--format-entry-id458,17332
(defun org-gcal--property-from-name (name)org-gcal--property-from-name462,17509
(defun org-gcal--back-to-heading ()org-gcal--back-to-heading468,17720
(defun org-gcal-post-at-point (&optional skip-import skip-export)org-gcal-post-at-point475,17951
(defun org-gcal-delete-at-point ()org-gcal-delete-at-point569,22039
(defun org-gcal-request-authorization ()org-gcal-request-authorization615,24092
(defun org-gcal-request-token ()org-gcal-request-token626,24684
(defun org-gcal--refresh-token ()org-gcal--refresh-token666,26396
(defun org-gcal--archive-old-event ()org-gcal--archive-old-event694,27553
(defun org-gcal--save-sexp (data file)org-gcal--save-sexp719,28881
(defun org-gcal--json-read ()org-gcal--json-read735,29498
(defun org-gcal--get-refresh-token ()org-gcal--get-refresh-token745,29828
(defun org-gcal--get-access-token ()org-gcal--get-access-token757,30361
(defun org-gcal--safe-substring (string from &optional to)org-gcal--safe-substring769,30858
(defun org-gcal--alldayp (s e)org-gcal--alldayp785,31363
(defun org-gcal--parse-date (str)org-gcal--parse-date802,31948
(defun org-gcal--adjust-date (fn day)org-gcal--adjust-date810,32401
(defun org-gcal--add-time ()org-gcal--add-time814,32556
(defun org-gcal--subtract-time ()org-gcal--subtract-time817,32642
(defun org-gcal--time-zone (seconds)org-gcal--time-zone820,32736
(defun org-gcal--format-iso2org (str &optional tz)org-gcal--format-iso2org823,32823
(defun org-gcal--format-org2iso (year mon day &optional hour min tz)org-gcal--format-org2iso836,33268
(defun org-gcal--iso-next-day (str &optional previous-p)org-gcal--iso-next-day848,33752
(defun org-gcal--iso-previous-day (str)org-gcal--iso-previous-day859,34182
(defun org-gcal--update-entry (calendar-id event)org-gcal--update-entry862,34257
(defun org-gcal--format-date (str format &optional tz)org-gcal--format-date954,38163
(defun org-gcal--param-date (str)org-gcal--param-date963,38519
(defun org-gcal--param-date-alt (str)org-gcal--param-date-alt966,38600
(defun org-gcal--get-calendar-id-of-buffer ()org-gcal--get-calendar-id-of-buffer969,38685
(defun org-gcal--get-event (calendar-id event-id &optional a-token)org-gcal--get-event978,39128
(defun org-gcal--post-event (start end smry loc desc calendar-id marker &optional etag event-id a-token skip-import skip-export)org-gcal--post-event1033,41544
(defun org-gcal--delete-event (calendar-id event-id etag marker &optional a-token)org-gcal--delete-event1147,47088
(defun org-gcal--capture-post ()org-gcal--capture-post1234,51051
(defun org-gcal--ensure-token ()org-gcal--ensure-token1242,51331
(defun org-gcal--timestamp-successor ()org-gcal--timestamp-successor1253,51725
(defun org-gcal--notify (title message)org-gcal--notify1267,52219
(defun org-gcal--time-to-seconds (plst)org-gcal--time-to-seconds1274,52452

elpa/org-gcal-20191018.921/org-gcal-autoloads.el,0

elpa/super-save-0.3.0/super-save-autoloads.el,54
(defvar super-save-mode nil "\super-save-mode12,307

elpa/super-save-0.3.0/super-save.el,1204
(defgroup super-save nilsuper-save34,1210
(defvar super-save-mode-map (make-sparse-keymap)super-save-mode-map39,1304
(defcustom super-save-triggerssuper-save-triggers42,1385
(defcustom super-save-hook-triggerssuper-save-hook-triggers49,1690
(defcustom super-save-auto-save-when-idle nilsuper-save-auto-save-when-idle56,1923
(defcustom super-save-idle-duration 5super-save-idle-duration62,2110
(defcustom super-save-remote-files tsuper-save-remote-files69,2356
(defun super-save-command ()super-save-command75,2529
(defvar super-save-idle-timer)super-save-idle-timer83,2824
(defun super-save-command-advice (&rest _args)super-save-command-advice85,2856
(defun super-save-advise-trigger-commands ()super-save-advise-trigger-commands89,3001
(defun super-save-remove-advice-from-trigger-commands ()super-save-remove-advice-from-trigger-commands95,3248
(defun super-save-initialize-idle-timer ()super-save-initialize-idle-timer101,3508
(defun super-save-stop-idle-timer ()super-save-stop-idle-timer107,3792
(defun super-save-initialize ()super-save-initialize112,3969
(defun super-save-stop ()super-save-stop119,4205
(define-minor-mode super-save-modesuper-save-mode127,4461

elpa/super-save-0.3.0/super-save-pkg.el,355
(define-package "super-save" "0.3.0" "Auto-save buffers, based on your activity." '((emacs "24.4")) :commit "2a905b8bdfc93bee16e2d62a61c6211bbe009331" :keywords '("convenience") :authors '(("Bozhidar Batsov" . "bozhidar@batsov.com")) :maintainer '("Bozhidar Batsov" . "bozhidar@batsov.com") :url "https://github.com/bbatsov/super-save")"super-save"2,31

elpa/treepy-0.1.1/treepy.el,2857
(defun treepy-walk (inner outer form)treepy-walk48,1656
(defun treepy-postwalk (f form)treepy-postwalk62,2439
(defun treepy-prewalk (f form)treepy-prewalk69,2733
(defun treepy-postwalk-demo (form)treepy-postwalk-demo74,2940
(defun treepy-prewalk-demo (form)treepy-prewalk-demo82,3198
(defun treepy-postwalk-replace (smap form &optional testfn)treepy-postwalk-replace90,3452
(defun treepy-prewalk-replace (smap form &optional testfn)treepy-prewalk-replace98,3882
(defun treepy--context (loc &optional key)treepy--context110,4418
(defun treepy--context-assoc-1 (context k v)treepy--context-assoc-1118,4661
(defun treepy--context-assoc (context &rest kvs)treepy--context-assoc128,4971
(defun treepy--meta (loc &optional key)treepy--meta135,5246
(defun treepy--with-meta (obj meta)treepy--with-meta144,5475
(defun treepy--join-children (left-children right-children)treepy--join-children148,5572
(defmacro treepy--with-loc (loc vars &rest body)treepy--with-loc154,5816
(defun treepy-zipper (branchp children make-node root)treepy-zipper168,6387
(defun treepy-list-zip (root)treepy-list-zip185,6943
(defun treepy-vector-zip (root)treepy-vector-zip190,7139
(defun treepy-node (loc)treepy-node198,7425
(defun treepy-branch-p (loc)treepy-branch-p202,7493
(defun treepy-children (loc)treepy-children206,7628
(defun treepy-make-node (loc node children)treepy-make-node212,7868
(defun treepy-path (loc)treepy-path218,8125
(defun treepy-lefts (loc)treepy-lefts222,8248
(defun treepy-rights (loc)treepy-rights226,8366
(defun treepy-down (loc)treepy-down232,8493
(defun treepy-up (loc)treepy-up247,9049
(defun treepy-root (loc)treepy-root260,9534
(defun treepy-right (loc)treepy-right270,9824
(defun treepy-rightmost (loc)treepy-rightmost289,10502
(defun treepy-left (loc)treepy-left302,11009
(defun treepy-leftmost (loc)treepy-leftmost315,11463
(defun treepy-leftmost-descendant (loc)treepy-leftmost-descendant328,11966
(defun treepy-insert-left (loc item)treepy-insert-left337,12175
(defun treepy-insert-right (loc item)treepy-insert-right350,12631
(defun treepy-replace (loc node)treepy-replace363,13088
(defun treepy-edit (loc f &rest args)treepy-edit372,13390
(defun treepy-insert-child (loc item)treepy-insert-child376,13552
(defun treepy-append-child (loc item)treepy-append-child381,13791
(defun treepy-remove (loc)treepy-remove386,14065
(defun treepy--preorder-next (loc)treepy--preorder-next410,15068
(defun treepy--postorder-next (loc)treepy--postorder-next426,15678
(defun treepy-next (loc &optional order)treepy-next438,16165
(defun treepy--preorder-prev (loc)treepy--preorder-prev447,16532
(defun treepy--postorder-prev (loc)treepy--postorder-prev459,16929
(defun treepy-prev (loc &optional order)treepy-prev469,17255
(defun treepy-end-p (loc)treepy-end-p478,17626

elpa/treepy-0.1.1/treepy-autoloads.el,0

elpa/treepy-0.1.1/treepy-pkg.el,353
(define-package "treepy" "0.1.1" "Generic tree traversal tools" '((emacs "25.1")) :commit "b40e6b09eb9be45da67b8c9e4990a5a0d7a2a09d" :keywords '("lisp" "maint" "tools") :authors '(("Daniel Barreto" . "daniel.barreto.n@gmail.com")) :maintainer '("Daniel Barreto" . "daniel.barreto.n@gmail.com") :url "https://github.com/volrath/treepy.el")"treepy"2,31

elpa/pkg-info-0.6/pkg-info-autoloads.el,0

elpa/pkg-info-0.6/pkg-info.el,1852
(defvar url-http-end-of-headers)url-http-end-of-headers62,2037
(defun pkg-info-format-version (version)pkg-info-format-version66,2097
(defsubst pkg-info--show-version-and-return (version show)pkg-info--show-version-and-return73,2330
(defun pkg-info--read-library ()pkg-info--read-library83,2589
(defun pkg-info--read-function ()pkg-info--read-function90,2866
(defun pkg-info--read-package ()pkg-info--read-package95,3072
(defun pkg-info-library-source (library)pkg-info-library-source106,3522
(defun pkg-info-defining-library (function)pkg-info-defining-library115,3805
(defun pkg-info-x-original-version (file)pkg-info-x-original-version130,4314
(defun pkg-info-library-original-version (library &optional show)pkg-info-library-original-version143,4777
(defun pkg-info-library-version (library &optional show)pkg-info-library-version169,5717
(defun pkg-info-defining-library-original-version (function &optional show)pkg-info-defining-library-original-version188,6417
(defun pkg-info-defining-library-version (function &optional show)pkg-info-defining-library-version210,7247
(defun pkg-info-package-version (package &optional show)pkg-info-package-version228,7896
(defun pkg-info-version-info (library &optional package show)pkg-info-version-info242,8462
(defconst pkg-info-melpa-recipe-url "http://melpa.org/recipes.json"pkg-info-melpa-recipe-url284,10535
(defvar pkg-info-melpa-recipes nilpkg-info-melpa-recipes287,10652
(defun pkg-info-retrieve-melpa-recipes ()pkg-info-retrieve-melpa-recipes290,10720
(defun pkg-info-get-melpa-recipes ()pkg-info-get-melpa-recipes304,11338
(defun pkg-info-get-melpa-recipe (package)pkg-info-get-melpa-recipe310,11514
(defun pkg-info-get-melpa-fetcher (package)pkg-info-get-melpa-fetcher316,11689
(defun pkg-info-wiki-package-p (package)pkg-info-wiki-package-p320,11834

elpa/pkg-info-0.6/pkg-info-pkg.el,343
(define-package "pkg-info" "0.6" "Information about packages" '((epl "0.8")) :commit "f9bb471ee95d1c5fe9adc6b0e98db2ddff3ddc0e" :keywords '("convenience") :authors '(("Sebastian Wiesner" . "swiesner@lunaryorn.com")) :maintainer '("Sebastian Wiesner" . "swiesner@lunaryorn.com") :url "https://github.com/lunaryorn/pkg-info.el")"pkg-info"2,31

elpa/git-timemachine-4.11/git-timemachine.el,3675
(defcustom git-timemachine-abbreviation-length 12git-timemachine-abbreviation-length38,1192
(defcustom git-timemachine-show-minibuffer-details tgit-timemachine-show-minibuffer-details43,1353
(defface git-timemachine-commitgit-timemachine-commit49,1571
(defface git-timemachine-minibuffer-detail-facegit-timemachine-minibuffer-detail-face54,1696
(defface git-timemachine-minibuffer-author-facegit-timemachine-minibuffer-author-face62,1948
(defcustom git-timemachine-minibuffer-detailgit-timemachine-minibuffer-detail70,2207
(defcustom git-timemachine-show-authorgit-timemachine-show-author79,2553
(defcustom git-timemachine-global-git-argumentsgit-timemachine-global-git-arguments85,2679
(defcustom git-timemachine-quit-to-invoking-buffergit-timemachine-quit-to-invoking-buffer91,2857
(defvar-local git-timemachine-directory nil)git-timemachine-directory97,3014
(defvar-local git-timemachine-revision nil)git-timemachine-revision98,3059
(defvar-local git-timemachine-file nil)git-timemachine-file99,3103
(defvar-local git-timemachine--revisions-cache nil)git-timemachine--revisions-cache100,3143
(defun git-timemachine-completing-read-fn (&rest args)git-timemachine-completing-read-fn102,3196
(defun git-timemachine--process-file (&rest args)git-timemachine--process-file109,3501
(defun git-timemachine--revisions (&optional git-branch)git-timemachine--revisions113,3745
(defun git-timemachine-show-current-revision ()git-timemachine-show-current-revision150,5589
(defun git-timemachine-show-latest-revision-in-branch (git-branch)git-timemachine-show-latest-revision-in-branch155,5763
(defun git-timemachine--next-revision (revisions)git-timemachine--next-revision160,5997
(defun git-timemachine-show-previous-revision ()git-timemachine-show-previous-revision165,6238
(defun git-timemachine-show-next-revision ()git-timemachine-show-next-revision177,6823
(defun git-timemachine-show-revision-fuzzy ()git-timemachine-show-revision-fuzzy189,7406
(defun git-timemachine-show-nth-revision (rev-number)git-timemachine-show-nth-revision201,7838
(defun git-timemachine-show-revision (revision)git-timemachine-show-revision217,8587
(defun git-timemachine--erm-workaround ()git-timemachine--erm-workaround245,9927
(defun git-timemachine--show-minibuffer-details (revision)git-timemachine--show-minibuffer-details250,10115
(defun git-timemachine--find-new-current-line (curr-revision new-revision current-line)git-timemachine--find-new-current-line260,10692
(defun git-timemachine--get-cursor-position ()git-timemachine--get-cursor-position295,12525
(defun git-timemachine--set-cursor-position (POS)git-timemachine--set-cursor-position301,12805
(defun git-timemachine-abbreviate (revision)git-timemachine-abbreviate305,12964
(defun git-timemachine-quit ()git-timemachine-quit309,13150
(defun git-timemachine-blame ()git-timemachine-blame318,13467
(defun git-timemachine-kill-revision ()git-timemachine-kill-revision326,13737
(defun git-timemachine-kill-abbreviated-revision ()git-timemachine-kill-abbreviated-revision333,13943
(defun git-timemachine-show-commit ()git-timemachine-show-commit340,14183
(define-transient-command git-timemachine-help ()git-timemachine-help348,14440
(define-minor-mode git-timemachine-modegit-timemachine-mode364,15155
(defun git-timemachine-validate (file)git-timemachine-validate381,15739
(defun git-timemachine--start (get-revision-fn)git-timemachine--start389,16034
(defun git-timemachine-toggle ()git-timemachine-toggle417,17354
(defun git-timemachine ()git-timemachine425,17542
(defun git-timemachine-switch-branch (git-branch)git-timemachine-switch-branch431,17720

elpa/git-timemachine-4.11/git-timemachine-pkg.el,379
(define-package "git-timemachine" "4.11" "Walk through git revisions of a file" '((emacs "24.3") (transient "0.1.0")) :commit "391eb61050de321101e631fcf373fc70ec6e7700" :keywords '("vc") :authors '(("Peter Stiernström" . "peter@stiernstrom.se")) :maintainer '("Peter Stiernström" . "peter@stiernstrom.se") :url "https://gitlab.com/pidu/git-timemachine")"git-timemachine"2,31

elpa/git-timemachine-4.11/git-timemachine-autoloads.el,0

elpa/magit-2.90.1/magit-remote.el,2700
(defcustom magit-remote-add-set-remote.pushDefault 'ask-if-unsetmagit-remote-add-set-remote.pushDefault34,1075
(defcustom magit-remote-popup-show-variables tmagit-remote-popup-show-variables49,1764
(defvar magit-remote-config-variables)magit-remote-config-variables60,2144
(defun magit-read-url (prompt &optional initial-input)magit-read-url80,2998
(defun magit-remote-add (remote url &optional args)magit-remote-add87,3206
(defun magit-remote-rename (old new)magit-remote-rename103,3952
(defun magit-remote-remove (remote)magit-remote-remove114,4339
(defun magit-remote--cleanup-push-variables (remote &optional new-name)magit-remote--cleanup-push-variables121,4578
(defconst magit--refspec-re "\\`\\(\\+\\)?\\([^:]+\\):\\(.*\\)\\'")magit--refspec-re130,5054
(defun magit-remote-prune (remote)magit-remote-prune133,5138
(defun magit-remote-prune-refspecs (remote)magit-remote-prune-refspecs139,5368
(defun magit-remote-set-head (remote &optional branch)magit-remote-set-head218,9107
(defun magit-remote-unset-head (remote)magit-remote-unset-head233,9781
(defvar magit-remote-config--remote nil)magit-remote-config--remote241,10080
(defun magit-remote-config-popup (remote)magit-remote-config-popup244,10137
(defvar magit-remote-config-variablesmagit-remote-config-variables255,10610
(defvar magit-remote-config-popupmagit-remote-config-popup276,11281
(defun magit-remote-config-popup-setup (val def)magit-remote-config-popup-setup281,11443
(defun magit-remote-config--remote (&optional prompt)magit-remote-config--remote285,11603
(defun magit-remote-config--remote-1 ()magit-remote-config--remote-1295,11945
(defun magit-set-remote*url (remote urls)magit-set-remote*url302,12154
(defun magit-set-remote*fetch (remote values)magit-set-remote*fetch307,12377
(defun magit-set-remote*pushurl (remote urls)magit-set-remote*pushurl313,12633
(defun magit-set-remote*push (remote values)magit-set-remote*push318,12881
(defun magit-cycle-remote*tagOpt (remote)magit-cycle-remote*tagOpt324,13132
(defun magit-format-remote*url ()magit-format-remote*url329,13351
(defun magit-format-remote*fetch ()magit-format-remote*fetch332,13434
(defun magit-format-remote*pushurl ()magit-format-remote*pushurl335,13521
(defun magit-format-remote*push ()magit-format-remote*push338,13612
(defun magit-format-remote*tagOpt ()magit-format-remote*tagOpt341,13697
(defun magit-remote-config--read-args (var prompt)magit-remote-config--read-args348,13934
(defun magit-remote-config--set-url (remote var values &optional arg)magit-remote-config--set-url360,14447
(defun magit-remote-config--format-variable (variable)magit-remote-config--format-variable369,14856

elpa/magit-2.90.1/magit-repos.el,2092
(defvar x-stretch-cursor)x-stretch-cursor39,1312
(defcustom magit-repository-directoriesmagit-repository-directories43,1352
(defgroup magit-repolist nilmagit-repolist56,1941
(defcustom magit-repolist-mode-hook '(hl-line-mode)magit-repolist-mode-hook61,2075
(defcustom magit-repolist-columnsmagit-repolist-columns69,2312
(defun magit-list-repositories ()magit-list-repositories108,4067
(defvar magit-repolist-mode-mapmagit-repolist-mode-map125,4624
(defun magit-repolist-status (&optional _button)magit-repolist-status133,4897
(define-derived-mode magit-repolist-mode tabulated-list-mode "Repos"magit-repolist-mode140,5153
(defun magit-repolist-refresh ()magit-repolist-refresh157,5970
(defun magit-repolist-column-ident (id)magit-repolist-column-ident171,6526
(defun magit-repolist-column-path (_id)magit-repolist-column-path176,6657
(defun magit-repolist-column-version (_id)magit-repolist-column-version180,6790
(defun magit-repolist-column-branch (_id)magit-repolist-column-branch193,7394
(defun magit-repolist-column-upstream (_id)magit-repolist-column-upstream197,7498
(defun magit-repolist-column-dirty (_id)magit-repolist-column-dirty201,7628
(defun magit-repolist-column-unpulled-from-upstream (_id)magit-repolist-column-unpulled-from-upstream212,8031
(defun magit-repolist-column-unpulled-from-pushremote (_id)magit-repolist-column-unpulled-from-pushremote218,8334
(defun magit-repolist-column-unpushed-to-upstream (_id)magit-repolist-column-unpushed-to-upstream224,8646
(defun magit-repolist-column-unpushed-to-pushremote (_id)magit-repolist-column-unpushed-to-pushremote230,8954
(defun magit-repolist-column-branches (_id)magit-repolist-column-branches236,9263
(defun magit-repolist-column-stashes (_id)magit-repolist-column-stashes241,9462
(defun magit-read-repository (&optional read-directory-name)magit-read-repository248,9673
(defun magit-list-repos ()magit-list-repos277,11013
(defun magit-list-repos-1 (directory depth)magit-list-repos-1282,11178
(defun magit-list-repos-uniquify (alist)magit-list-repos-uniquify291,11619

elpa/magit-2.90.1/magit-obsolete.el,1841
(define-obsolete-function-alias 'magit-reset-head 'magit-reset-mixed "Magit 2.90.0")magit-reset-head34,1118
(define-obsolete-function-alias 'magit-gitignore 'magit-gitignore-globally "Magit 2.90.0")magit-gitignore35,1203
(define-obsolete-function-alias 'magit-branch 'magit-branch-create "Magit 2.90.0")magit-branch36,1294
(define-obsolete-function-alias 'magit-tag 'magit-tag-create "Magit 2.90.0")magit-tag37,1377
(define-obsolete-function-alias 'magit-fetch 'magit-fetch-other "Magit 2.90.0")magit-fetch38,1454
(define-obsolete-function-alias 'magit-pull 'magit-pull-branch "Magit 2.90.0")magit-pull39,1534
(define-obsolete-function-alias 'magit-rebase 'magit-rebase-branch "Magit 2.90.0")magit-rebase40,1613
(define-obsolete-function-alias 'magit-blame 'magit-blame-addition "Magit 2.90.0")magit-blame41,1696
(define-obsolete-function-alias 'magit-revert 'magit-revert-and-commit "Magit 2.90.0")magit-revert42,1779
(define-obsolete-function-alias 'magit-reset 'magit-reset-quickly "Magit 2.90.0")magit-reset43,1866
(define-obsolete-function-alias 'magit-merge 'magit-merge-plain "Magit 2.90.0")magit-merge44,1948
(define-obsolete-function-alias 'magit-stash 'magit-stash-both "Magit 2.90.0")magit-stash45,2028
(define-obsolete-function-alias 'magit-snapshot 'magit-snapshot-both "Magit 2.90.0")magit-snapshot46,2107
(define-obsolete-function-alias 'magit-push 'magit-push-other "Magit 2.90.0")magit-push47,2192
(define-obsolete-function-alias 'magit-commit 'magit-commit-create "Magit 2.90.0")magit-commit48,2270
(define-obsolete-function-alias 'magit-log 'magit-log-other "Magit 2.90.0")magit-log49,2353
(define-obsolete-function-alias 'magit-reflog 'magit-reflog-other "Magit 2.90.0")magit-reflog50,2429
(define-obsolete-function-alias 'magit-diff 'magit-diff-range "Magit 2.90.0")magit-diff51,2511

elpa/magit-2.90.1/magit-log.el,11405
(defvar magit-refs-focus-column-width)magit-refs-focus-column-width44,1706
(defvar magit-refs-margin)magit-refs-margin45,1745
(defvar magit-refs-show-commit-count)magit-refs-show-commit-count46,1772
(defvar magit-buffer-margin)magit-buffer-margin47,1810
(defvar magit-status-margin)magit-status-margin48,1839
(defvar magit-status-sections-hook)magit-status-sections-hook49,1868
(defvar bookmark-make-record-function)bookmark-make-record-function58,2006
(defgroup magit-log nilmagit-log63,2073
(defcustom magit-log-mode-hook nilmagit-log-mode-hook68,2199
(defcustom magit-log-arguments '("-n256" "--graph" "--decorate")magit-log-arguments73,2314
(defcustom magit-log-remove-graph-args '("--follow" "--grep" "-G" "-S" "-L")magit-log-remove-graph-args80,2568
(defcustom magit-log-revision-headers-format "\magit-log-revision-headers-format87,2868
(defcustom magit-log-auto-more nilmagit-log-auto-more96,3103
(defcustom magit-log-margin '(t age magit-log-margin-width t 18)magit-log-margin103,3338
(defcustom magit-log-show-refname-after-summary nilmagit-log-show-refname-after-summary126,4394
(defcustom magit-log-highlight-keywords tmagit-log-highlight-keywords133,4628
(defcustom magit-log-header-line-function 'magit-log-header-line-sentencemagit-log-header-line-function139,4813
(defcustom magit-log-trace-definition-function 'which-functionmagit-log-trace-definition-function147,5176
(defface magit-log-graphmagit-log-graph154,5470
(defface magit-log-authormagit-log-author160,5691
(defface magit-log-datemagit-log-date166,5917
(defface magit-header-line-log-selectmagit-header-line-log-select172,6136
(defcustom magit-log-buffer-file-locked tmagit-log-buffer-file-locked179,6295
(defcustom magit-log-select-arguments '("-n256" "--graph" "--decorate")magit-log-select-arguments188,6518
(defcustom magit-log-select-show-usage 'bothmagit-log-select-show-usage194,6756
(defcustom magit-log-select-marginmagit-log-select-margin206,7339
(defcustom magit-cherry-sections-hookmagit-cherry-sections-hook236,8564
(defcustom magit-cherry-marginmagit-cherry-margin244,8797
(defcustom magit-reflog-arguments '("-n256")magit-reflog-arguments274,10010
(defcustom magit-reflog-marginmagit-reflog-margin280,10227
(defface magit-reflog-commit '((t :foreground "green"))magit-reflog-commit308,11424
(defface magit-reflog-amend '((t :foreground "magenta"))magit-reflog-amend312,11545
(defface magit-reflog-merge '((t :foreground "green"))magit-reflog-merge316,11666
(defface magit-reflog-checkout '((t :foreground "blue"))magit-reflog-checkout320,11806
(defface magit-reflog-reset '((t :foreground "red"))magit-reflog-reset324,11930
(defface magit-reflog-rebase '((t :foreground "magenta"))magit-reflog-rebase328,12047
(defface magit-reflog-cherry-pick '((t :foreground "green"))magit-reflog-cherry-pick332,12170
(defface magit-reflog-remote '((t :foreground "cyan"))magit-reflog-remote336,12301
(defface magit-reflog-other '((t :foreground "cyan"))magit-reflog-other340,12429
(defcustom magit-log-section-commit-count 10magit-log-section-commit-count346,12566
(defcustom magit-log-section-arguments '("-n256" "--decorate")magit-log-section-arguments355,12921
(defvar magit-log-popupmagit-log-popup366,13241
(defvar magit-log-mode-refresh-popupmagit-log-mode-refresh-popup399,15089
(defvar magit-reflog-mode-refresh-popupmagit-reflog-mode-refresh-popup425,16511
(defvar magit-log-refresh-popupmagit-log-refresh-popup430,16670
(defun magit-log-select-order (&rest _ignored)magit-log-select-order452,17726
(defun magit-log++header ()magit-log++header462,18140
(defun magit-log-get-buffer-args ()magit-log-get-buffer-args468,18305
(defun magit-log-arguments (&optional refresh)magit-log-arguments481,18849
(defun magit-log-popup (arg)magit-log-popup490,19219
(defun magit-log-buffer-file-popup ()magit-log-buffer-file-popup502,19652
(defun magit-log-refresh-popup (arg)magit-log-refresh-popup520,20361
(defun magit-read-file-trace (&rest _ignored)magit-read-file-trace544,21463
(defun magit-log-refresh (args files)magit-log-refresh551,21693
(defun magit-log-set-default-arguments (args files)magit-log-set-default-arguments563,22140
(defun magit-log-save-default-arguments (args files)magit-log-save-default-arguments578,22805
(defun magit-log-refresh-assert ()magit-log-refresh-assert593,23484
(defvar magit-log-read-revs-mapmagit-log-read-revs-map601,23773
(defun magit-log-read-revs (&optional use-current)magit-log-read-revs607,23952
(defun magit-git-log (revs args files)magit-git-log622,24790
(defun magit-log-current (revs &optional args files)magit-log-current628,24950
(defun magit-log-other (revs &optional args files)magit-log-other637,25287
(defun magit-log-head (&optional args files)magit-log-head648,25733
(defun magit-log-branches (&optional args files)magit-log-branches654,25901
(defun magit-log-all-branches (&optional args files)magit-log-all-branches663,26206
(defun magit-log-all (&optional args files)magit-log-all672,26562
(defun magit-log-buffer-file (&optional follow beg end)magit-log-buffer-file681,26860
(defun magit-log-trace-definition (file fn rev)magit-log-trace-definition724,28709
(defun magit-diff-trace-definition ()magit-diff-trace-definition743,29457
(defun magit-log-merged (commit branch &optional args files)magit-log-merged757,29871
(defun magit-git-reflog (ref args)magit-git-reflog777,30801
(defun magit-reflog-current (args)magit-reflog-current782,30922
(defun magit-reflog-other (ref args)magit-reflog-other788,31119
(defun magit-reflog-head (args)magit-reflog-head795,31372
(defun magit-log-toggle-commit-limit ()magit-log-toggle-commit-limit802,31537
(defun magit-log-double-commit-limit ()magit-log-double-commit-limit809,31817
(defun magit-log-half-commit-limit ()magit-log-half-commit-limit814,31980
(defun magit-log-set-commit-limit (fn)magit-log-set-commit-limit819,32139
(defun magit-log-get-commit-limit ()magit-log-get-commit-limit831,32596
(defun magit-log-bury-buffer (&optional arg)magit-log-bury-buffer838,32815
(defun magit-log-move-to-parent (&optional n)magit-log-move-to-parent855,33529
(defvar magit-log-mode-mapmagit-log-mode-map875,34456
(define-derived-mode magit-log-mode magit-mode "Magit Log"magit-log-mode888,34979
(defvar magit-log-disable-graph-hack-argsmagit-log-disable-graph-hack-args913,35933
(defun magit-log-refresh-buffer (revs args files)magit-log-refresh-buffer917,36059
(defun magit-log-header-line-arguments (revs args files)magit-log-header-line-arguments949,37616
(defun magit-log-header-line-sentence (revs args files)magit-log-header-line-sentence958,37930
(defun magit-insert-log (revs &optional args files)magit-insert-log970,38388
(defvar magit-commit-section-mapmagit-commit-section-map1002,39876
(defvar magit-module-commit-section-mapmagit-module-commit-section-map1009,40101
(defconst magit-log-heading-remagit-log-heading-re1015,40295
(defconst magit-log-cherry-remagit-log-cherry-re1027,40884
(defconst magit-log-module-remagit-log-module-re1033,41104
(defconst magit-log-bisect-vis-remagit-log-bisect-vis-re1039,41322
(defconst magit-log-bisect-log-remagit-log-bisect-log-re1046,41603
(defconst magit-log-reflog-remagit-log-reflog-re1052,41829
(defconst magit-reflog-subject-remagit-reflog-subject-re1060,42181
(defconst magit-log-stash-remagit-log-stash-re1065,42395
(defvar magit-log-count nil)magit-log-count1072,42674
(defvar magit-log-format-message-function 'magit-log-propertize-keywords)magit-log-format-message-function1074,42704
(defun magit-log-wash-log (style args)magit-log-wash-log1076,42779
(defun magit-log-propertize-keywords (_rev msg)magit-log-propertize-keywords1237,50252
(defun magit-log-maybe-show-more-commits (section)magit-log-maybe-show-more-commits1252,50832
(defvar magit--update-revision-buffer nil)magit--update-revision-buffer1268,51443
(defun magit-log-maybe-update-revision-buffer (&optional _)magit-log-maybe-update-revision-buffer1270,51487
(defun magit-log-maybe-update-revision-buffer-1 ()magit-log-maybe-update-revision-buffer-11276,51768
(defvar magit--update-blob-buffer nil)magit--update-blob-buffer1292,52532
(defun magit-log-maybe-update-blob-buffer (&optional _)magit-log-maybe-update-blob-buffer1294,52572
(defun magit-log-maybe-update-blob-buffer-1 ()magit-log-maybe-update-blob-buffer-11300,52837
(defun magit-log-goto-same-commit (&optional default)magit-log-goto-same-commit1320,53863
(defvar-local magit-log-margin-show-shortstat nil)magit-log-margin-show-shortstat1333,54470
(defun magit-toggle-log-margin-style ()magit-toggle-log-margin-style1335,54522
(defun magit-log-format-margin (rev author date)magit-log-format-margin1343,54817
(defun magit-log-format-shortstat-margin (rev)magit-log-format-shortstat-margin1370,56180
(defun magit-log-margin-width (style details details-width)magit-log-margin-width1391,56921
(defvar magit-log-select-mode-mapmagit-log-select-mode-map1408,57526
(define-derived-mode magit-log-select-mode magit-log-mode "Magit Select"magit-log-select-mode1424,58182
(defun magit-log-select-refresh-buffer (rev args)magit-log-select-refresh-buffer1440,58764
(defvar-local magit-log-select-pick-function nil)magit-log-select-pick-function1444,58882
(defvar-local magit-log-select-quit-function nil)magit-log-select-quit-function1445,58932
(defun magit-log-select (pick &optional msg quit branch args initial)magit-log-select1447,58983
(defun magit-log-select-pick ()magit-log-select-pick1478,60448
(defun magit-log-select-quit ()magit-log-select-quit1488,60762
(defvar magit-cherry-mode-mapmagit-cherry-mode-map1497,61002
(define-derived-mode magit-cherry-mode magit-mode "Magit Cherry"magit-cherry-mode1505,61251
(defun magit-cherry (head upstream)magit-cherry1524,61895
(defun magit-cherry-refresh-buffer (_upstream _head)magit-cherry-refresh-buffer1533,62289
(defun magit-insert-cherry-headers ()magit-insert-cherry-headers1537,62435
(defun magit-insert-cherry-commits ()magit-insert-cherry-commits1545,62802
(defvar magit-reflog-mode-mapmagit-reflog-mode-map1554,63119
(define-derived-mode magit-reflog-mode magit-log-mode "Magit Reflog"magit-reflog-mode1561,63324
(defun magit-reflog-refresh-buffer (ref args)magit-reflog-refresh-buffer1580,63968
(defvar magit-reflog-labelsmagit-reflog-labels1587,64270
(defun magit-reflog-format-subject (subject)magit-reflog-format-subject1602,64852
(defvar magit-unpulled-section-mapmagit-unpulled-section-map1623,65677
(defun magit-insert-unpulled-from-upstream ()magit-insert-unpulled-from-upstream1632,65982
(defun magit-insert-unpulled-from-pushremote ()magit-insert-unpulled-from-pushremote1645,66580
(defvar magit-unpushed-section-mapmagit-unpushed-section-map1660,67394
(defun magit-insert-unpushed-to-upstream-or-recent ()magit-insert-unpushed-to-upstream-or-recent1669,67695
(defun magit-insert-unpushed-to-upstream ()magit-insert-unpushed-to-upstream1682,68368
(defun magit-insert-recent-commits (&optional type value)magit-insert-recent-commits1691,68809
(defun magit-insert-unpushed-to-pushremote ()magit-insert-unpushed-to-pushremote1710,69694
(defun magit-insert-unpulled-cherries ()magit-insert-unpulled-cherries1727,70527
(defun magit-insert-unpushed-cherries ()magit-insert-unpushed-cherries1740,71133

elpa/magit-2.90.1/magit-section.el,8170
(defvar magit-keep-region-overlay)magit-keep-region-overlay46,1608
(defgroup magit-section nilmagit-section50,1657
(defcustom magit-section-show-child-count tmagit-section-show-child-count55,1767
(defcustom magit-section-movement-hookmagit-section-movement-hook62,2020
(defcustom magit-section-highlight-hookmagit-section-highlight-hook78,2648
(defcustom magit-section-unhighlight-hookmagit-section-unhighlight-hook92,3128
(defcustom magit-section-set-visibility-hookmagit-section-set-visibility-hook104,3614
(defcustom magit-section-cache-visibility tmagit-section-cache-visibility118,4205
(defcustom magit-section-initial-visibility-alistmagit-section-initial-visibility-alist135,4933
(defface magit-section-highlightmagit-section-highlight163,6161
(defface magit-section-headingmagit-section-heading169,6390
(defface magit-section-secondary-heading '((t :weight bold))magit-section-secondary-heading175,6644
(defface magit-section-heading-selectionmagit-section-heading-selection179,6787
(defvar magit--current-section-hook nilmagit--current-section-hook187,7037
(defvar magit--section-type-alistmagit--section-type-alist190,7135
(defclass magit-section ()magit-section197,7313
(defclass magit-file-section (magit-section)magit-file-section211,7797
(defclass magit-hunk-section (magit-section)magit-hunk-section215,7901
(defclass magit-module-section (magit-file-section)magit-module-section218,7977
(defvar-local magit-root-section nilmagit-root-section223,8046
(defun magit-current-section ()magit-current-section230,8319
(defun magit-section-ident (section)magit-section-ident234,8455
(defun magit-get-section (ident &optional root)magit-get-section253,9451
(defun magit-section-lineage (section)magit-section-lineage269,10064
(defvar magit-insert-section--current nil "For internal use only.")magit-insert-section--current276,10303
(defvar magit-insert-section--parent  nil "For internal use only.")magit-insert-section--parent277,10371
(defvar magit-insert-section--oldroot nil "For internal use only.")magit-insert-section--oldroot278,10439
(defun magit-section-forward ()magit-section-forward283,10536
(defun magit-section-backward ()magit-section-backward302,11309
(defun magit-section-up ()magit-section-up340,12886
(defun magit-section-forward-sibling ()magit-section-forward-sibling347,13098
(defun magit-section-backward-sibling ()magit-section-backward-sibling358,13511
(defun magit-section-goto (arg)magit-section-goto369,13935
(defun magit-section-set-window-start (section)magit-section-set-window-start376,14161
(defun magit-hunk-set-window-start (section)magit-hunk-set-window-start381,14377
(defmacro magit-define-section-jumper (name heading type &optional value)magit-define-section-jumper387,14631
(defun magit-section-show (section)magit-section-show407,15423
(defun magit-section-hide (section)magit-section-hide432,16420
(defun magit-section-toggle (section)magit-section-toggle446,16964
(defun magit-section-toggle-children (section)magit-section-toggle-children456,17334
(defun magit-section-show-children (section &optional depth)magit-section-show-children466,17715
(defun magit-section-show-children-1 (section &optional depth)magit-section-show-children-1474,18045
(defun magit-section-hide-children (section)magit-section-hide-children483,18363
(defun magit-section-show-headings (section)magit-section-show-headings488,18578
(defun magit-section-show-headings-1 (section)magit-section-show-headings-1496,18881
(defun magit-section-cycle (section)magit-section-cycle503,19124
(defun magit-section-cycle-global ()magit-section-cycle-global519,19807
(defun magit-section-cycle-diffs ()magit-section-cycle-diffs531,20327
(defun magit-section-hidden-body (section &optional pred)magit-section-hidden-body559,21641
(defun magit-section-invisible-p (section)magit-section-invisible-p565,21866
(defun magit-section-show-level (level)magit-section-show-level573,22185
(defun magit-section-show-level-1 ()magit-section-show-level-1592,22980
(defun magit-section-show-level-1-all ()magit-section-show-level-1-all597,23112
(defun magit-section-show-level-2 ()magit-section-show-level-2602,23241
(defun magit-section-show-level-2-all ()magit-section-show-level-2-all607,23377
(defun magit-section-show-level-3 ()magit-section-show-level-3612,23510
(defun magit-section-show-level-3-all ()magit-section-show-level-3-all617,23645
(defun magit-section-show-level-4 ()magit-section-show-level-4622,23777
(defun magit-section-show-level-4-all ()magit-section-show-level-4-all627,23913
(defun magit-describe-section-briefly (section &optional message ident)magit-describe-section-briefly634,24062
(defun magit-describe-section (section &optional interactive-p)magit-describe-section663,25491
(defun magit-section-match-1 (condition section)magit-section-match-1739,29050
(defun magit-section-match-2 (condition section)magit-section-match-2749,29450
(defun magit-section-value-if (condition &optional section)magit-section-value-if764,30123
(defmacro magit-section-when (condition &rest body)magit-section-when777,30649
(defmacro magit-section-case (&rest clauses)magit-section-case801,31717
(defun magit-section-match-assoc (section alist)magit-section-match-assoc825,32756
(defvar magit-insert-section-hook nilmagit-insert-section-hook833,33006
(defmacro magit-insert-section (&rest args)magit-insert-section838,33204
(defun magit-cancel-section ()magit-cancel-section963,39163
(defun magit-insert-heading (&rest args)magit-insert-heading972,39498
(defun magit-insert-headers (hook)magit-insert-headers1010,41249
(defun magit-insert-child-count (section)magit-insert-child-count1034,42310
(defvar-local magit-section-highlight-overlays nil)magit-section-highlight-overlays1057,43160
(defvar-local magit-section-highlighted-section nil)magit-section-highlighted-section1058,43212
(defvar-local magit-section-highlighted-sections nil)magit-section-highlighted-sections1059,43265
(defvar-local magit-section-unhighlight-sections nil)magit-section-unhighlight-sections1060,43319
(defun magit-section-update-region (_)magit-section-update-region1062,43374
(defun magit-section-update-highlight ()magit-section-update-highlight1070,43787
(defun magit-section-highlight (section selection)magit-section-highlight1095,44945
(defun magit-section-highlight-selection (_ selection)magit-section-highlight-selection1118,45958
(defun magit-section-make-overlay (start end face)magit-section-make-overlay1140,46915
(defun magit-section-goto-successor (section line char arg)magit-section-goto-successor1154,47534
(defun magit-section-goto-successor-1 (section)magit-section-goto-successor-11192,49389
(defvar-local magit-section-visibility-cache nil)magit-section-visibility-cache1209,50094
(defun magit-section-cached-visibility (section)magit-section-cached-visibility1212,50202
(defun magit-preserve-section-visibility-cache ()magit-preserve-section-visibility-cache1234,51079
(defun magit-restore-section-visibility-cache (mode)magit-restore-section-visibility-cache1240,51317
(defun magit-section-parent-value (section)magit-section-parent-value1256,51950
(defun magit-section-siblings (section &optional direction)magit-section-siblings1260,52066
(defun magit-region-values (&optional condition multiple)magit-region-values1274,52661
(defun magit-region-sections (&optional condition multiple)magit-region-sections1282,52950
(defun magit-section-position-in-heading-p (&optional section pos)magit-section-position-in-heading-p1329,55128
(defun magit-section-internal-region-p (&optional section)magit-section-internal-region-p1343,55572
(defun magit-section--backward-protected ()magit-section--backward-protected1355,56182
(defun magit-section--backward-find (predicate)magit-section--backward-find1367,56637
(defun magit-wash-sequence (function)magit-wash-sequence1376,56948
(defun magit-add-section-hook (hook function &optional at append local)magit-add-section-hook1381,57155
(defun magit-run-section-hook (hook &rest args)magit-run-section-hook1438,59710

elpa/magit-2.90.1/magit-collab.el,794
(defvar magit-github-token-scopes '(repo)magit-github-token-scopes42,1450
(defun magit-browse-pull-request (pr)magit-browse-pull-request63,2171
(defun magit-read-pull-request (prompt)magit-read-pull-request78,2741
(defun magit-upstream-repository ()magit-upstream-repository101,3947
(defun magit--forge-id (remote)magit--forge-id115,4497
(defconst magit--github-url-regexp "\magit--github-url-regexp120,4680
(defun magit--github-url-p (url)magit--github-url-p126,4838
(defun magit--github-remote-p (remote)magit--github-remote-p141,5506
(defun magit--github-url-equal (r1 r2)magit--github-url-equal147,5759
(defun magit--pullreq-from-upstream-p (pr)magit--pullreq-from-upstream-p156,6105
(defun magit--pullreq-branch (pr &optional assert-new)magit--pullreq-branch161,6232

elpa/magit-2.90.1/magit-notes.el,1331
(defun magit-notes-merging-p ()magit-notes-merging-p67,2593
(defun magit-format-core.notesRef ()magit-format-core.notesRef72,2758
(defun magit-format-notes.displayRef ()magit-format-notes.displayRef75,2855
(defun magit-format-global-core.notesRef ()magit-format-global-core.notesRef78,2959
(defun magit-format-global-notes.displayRef ()magit-format-global-notes.displayRef81,3065
(defun magit-notes-edit (commit &optional ref)magit-notes-edit86,3192
(defun magit-notes-remove (commit &optional ref)magit-notes-remove97,3628
(defun magit-notes-merge (ref)magit-notes-merge108,4079
(defun magit-notes-merge-commit ()magit-notes-merge-commit121,4606
(defun magit-notes-merge-abort ()magit-notes-merge-abort127,4786
(defun magit-notes-prune (&optional dry-run)magit-notes-prune133,4963
(defun magit-set-core.notesRef (ref)magit-set-core.notesRef140,5246
(defun magit-set-global-core.notesRef (ref)magit-set-global-core.notesRef147,5494
(defun magit-set-notes.displayRef (refs)magit-set-notes.displayRef154,5762
(defun magit-set-global-notes.displayRef (refs)magit-set-global-notes.displayRef161,6031
(defun magit-notes-read-ref (prompt)magit-notes-read-ref168,6320
(defun magit-notes-read-refs (prompt)magit-notes-read-refs179,6711
(defun magit-notes-read-args (prompt)magit-notes-read-args194,7264

elpa/magit-2.90.1/magit-status.el,2551
(defvar bookmark-make-record-function)bookmark-make-record-function35,1103
(defgroup magit-status nilmagit-status39,1156
(defcustom magit-status-mode-hook nilmagit-status-mode-hook44,1296
(defcustom magit-status-headers-hookmagit-status-headers-hook49,1420
(defcustom magit-status-sections-hookmagit-status-sections-hook73,2273
(defcustom magit-status-initial-section '(1)magit-status-initial-section95,2983
(defcustom magit-status-show-hashes-in-headers nilmagit-status-show-hashes-in-headers122,4182
(defcustom magit-status-marginmagit-status-margin132,4524
(defun magit-init (directory)magit-init163,5732
(defun magit-status (&optional directory cache)magit-status191,7006
(defalias 'magit 'magit-statusmagit223,8519
(defun magit-status-internal (directory)magit-status-internal232,8832
(defvar magit--remotes-using-recent-git nil)magit--remotes-using-recent-git237,8993
(defun magit--tramp-asserts (directory)magit--tramp-asserts239,9039
(defvar magit-status-mode-mapmagit-status-mode-map274,10569
(define-derived-mode magit-status-mode magit-mode "Magit"magit-status-mode290,11290
(defun magit-status-refresh-buffer ()magit-status-refresh-buffer323,12407
(defun magit-status-goto-initial-section ()magit-status-goto-initial-section328,12589
(defun magit-status-goto-initial-section-1 ()magit-status-goto-initial-section-1339,13126
(defun magit-status-maybe-update-revision-buffer (&optional _)magit-status-maybe-update-revision-buffer358,14029
(defun magit-status-maybe-update-blob-buffer (&optional _)magit-status-maybe-update-blob-buffer364,14319
(defun magit-insert-status-headers ()magit-insert-status-headers373,14628
(defvar magit-error-section-mapmagit-error-section-map381,14976
(defun magit-insert-error-header ()magit-insert-error-header387,15157
(defun magit-insert-diff-filter-header ()magit-insert-diff-filter-header404,15968
(defun magit-insert-tags-header ()magit-insert-tags-header487,19676
(defun magit-insert-user-header ()magit-insert-user-header513,20860
(defun magit-insert-repo-header ()magit-insert-repo-header523,21234
(defun magit-insert-remote-header ()magit-insert-remote-header529,21494
(defvar magit-untracked-section-mapmagit-untracked-section-map546,22171
(defun magit-insert-untracked-files ()magit-insert-untracked-files555,22478
(defun magit-insert-tracked-files ()magit-insert-tracked-files591,24158
(defun magit-insert-ignored-files ()magit-insert-ignored-files605,24733
(defun magit-insert-files (files directory)magit-insert-files619,25305

elpa/magit-2.90.1/magit-merge.el,1392
(defun magit-merge-plain (rev &optional args nocommit)magit-merge-plain60,2183
(defun magit-merge-editmsg (rev &optional args)magit-merge-editmsg77,2890
(defun magit-merge-nocommit (rev &optional args)magit-merge-nocommit90,3400
(defun magit-merge-into (branch &optional args)magit-merge-into102,3923
(defun magit-merge-absorb (branch &optional args)magit-merge-absorb124,4932
(defun magit--merge-absort (branch args)magit--merge-absort137,5575
(defun magit--merge-absort-1 (branch args)magit--merge-absort-1156,6392
(defun magit-merge-squash (rev)magit-merge-squash171,6986
(defun magit-merge-preview (rev)magit-merge-preview179,7270
(define-derived-mode magit-merge-preview-mode magit-diff-mode "Magit Merge"magit-merge-preview-mode184,7491
(defun magit-merge-preview-refresh-buffer (rev)magit-merge-preview-refresh-buffer189,7668
(defun magit-merge-abort ()magit-merge-abort200,8170
(defun magit-checkout-stage (file arg)magit-checkout-stage209,8446
(defun magit-merge-in-progress-p ()magit-merge-in-progress-p235,9551
(defun magit--merge-range (&optional head)magit--merge-range238,9636
(defun magit-merge-assert ()magit-merge-assert246,9915
(defun magit-checkout-read-stage (file)magit-checkout-read-stage251,10082
(defvar magit-unmerged-section-mapmagit-unmerged-section-map259,10304
(defun magit-insert-merge-log ()magit-insert-merge-log265,10486

elpa/magit-2.90.1/magit-clone.el,318
(defcustom magit-clone-set-remote-head nilmagit-clone-set-remote-head34,1071
(defcustom magit-clone-set-remote.pushDefault 'askmagit-clone-set-remote.pushDefault40,1258
(defcustom magit-clone-default-directory nilmagit-clone-default-directory51,1645
(defun magit-clone (repository directory)magit-clone65,2216

elpa/magit-2.90.1/magit-git.el,17278
(defvar magit-process-error-message-regexps)magit-process-error-message-regexps46,1642
(defvar magit-refresh-args) ; from `magit-mode' for `magit-current-file'magit-refresh-args47,1687
(defvar magit-branch-prefer-remote-upstream)magit-branch-prefer-remote-upstream48,1760
(defvar magit-published-branches)magit-published-branches49,1805
(defvar magit-diff-section-arguments)magit-diff-section-arguments50,1839
(defvar magit-tramp-process-environment nil)magit-tramp-process-environment52,1878
(defgroup magit-process nilmagit-process57,2004
(defvar magit-git-environmentmagit-git-environment61,2102
(defcustom magit-git-output-coding-systemmagit-git-output-coding-system65,2248
(defvar magit-git-w32-path-hack nilmagit-git-w32-path-hack77,2715
(defcustom magit-git-executablemagit-git-executable83,2930
(defcustom magit-git-global-argumentsmagit-git-global-arguments121,4696
(defvar magit-git-debug nilmagit-git-debug144,5647
(defcustom magit-prefer-remote-upstream nilmagit-prefer-remote-upstream163,6404
(defcustom magit-list-refs-sortby nilmagit-list-refs-sortby177,6985
(defvar magit--refresh-cache nil)magit--refresh-cache204,8150
(defmacro magit--with-refresh-cache (key &rest body)magit--with-refresh-cache206,8185
(defvar magit-with-editor-envvar "GIT_EDITOR"magit-with-editor-envvar221,8743
(defmacro magit-with-editor (&rest body)magit-with-editor227,8995
(defun magit-process-git-arguments (args)magit-process-git-arguments247,10011
(defun magit-git-exit-code (&rest args)magit-git-exit-code267,10797
(defun magit-git-success (&rest args)magit-git-success272,10999
(defun magit-git-failure (&rest args)magit-git-failure276,11136
(defun magit-git-str (&rest args)magit-git-str280,11273
(defun magit-git-output (&rest args)magit-git-output294,11889
(define-error 'magit-invalid-git-boolean "Not a Git boolean")magit-invalid-git-boolean303,12278
(defun magit-git-true (&rest args)magit-git-true305,12341
(defun magit-git-false (&rest args)magit-git-false314,12693
(defun magit-git-insert (&rest args)magit-git-insert323,13046
(defun magit-git-string (&rest args)magit-git-string360,14918
(defun magit-git-lines (&rest args)magit-git-lines372,15395
(defun magit-git-items (&rest args)magit-git-items382,15770
(defun magit-git-wash (washer &rest args)magit-git-wash392,16151
(defun magit-git-version (&optional raw)magit-git-version415,16971
(defun magit-config-get-from-cached-list (key)magit-config-get-from-cached-list423,17269
(defun magit-get (&rest keys)magit-get438,17979
(defun magit-get-all (&rest keys)magit-get-all442,18114
(defun magit-get-boolean (&rest keys)magit-get-boolean453,18568
(defun magit-set (value &rest keys)magit-set460,18888
(defun magit-set-all (values &rest keys)magit-set-all474,19370
(defun magit--safe-default-directory (&optional file)magit--safe-default-directory487,19822
(defmacro magit--with-safe-default-directory (file &rest body)magit--with-safe-default-directory499,20282
(defun magit-gitdir (&optional directory)magit-gitdir504,20476
(defun magit-git-dir (&optional path)magit-git-dir514,20918
(defvar magit--separated-gitdirs nil)magit--separated-gitdirs529,21666
(defun magit--record-separated-gitdir ()magit--record-separated-gitdir531,21705
(defun magit-toplevel (&optional directory)magit-toplevel547,22560
(defmacro magit-with-toplevel (&rest body)magit-with-toplevel626,26770
(define-error 'magit-outside-git-repo "Not inside Git repository")magit-outside-git-repo635,27080
(define-error 'magit-git-executable-not-foundmagit-git-executable-not-found636,27147
(defun magit--not-inside-repository-error ()magit--not-inside-repository-error639,27267
(defun magit-inside-gitdir-p (&optioal noerror)magit-inside-gitdir-p644,27483
(defun magit-inside-worktree-p (&optional noerror)magit-inside-worktree-p658,28195
(defun magit-bare-repo-p (&optional noerror)magit-bare-repo-p670,28743
(defun magit--assert-default-directory (&optional noerror)magit--assert-default-directory682,29270
(defun magit-git-repo-p (directory &optional non-bare)magit-git-repo-p693,29768
(defvar-local magit-buffer-revision  nil)magit-buffer-revision705,30400
(defvar-local magit-buffer-refname   nil)magit-buffer-refname706,30442
(defvar-local magit-buffer-file-name nil)magit-buffer-file-name707,30484
(defun magit-file-relative-name (&optional file tracked)magit-file-relative-name712,30674
(defun magit-file-tracked-p (file)magit-file-tracked-p733,31605
(defun magit-list-files (&rest args)magit-list-files736,31698
(defun magit-tracked-files ()magit-tracked-files739,31800
(defun magit-untracked-files (&optional all files)magit-untracked-files742,31864
(defun magit-unstaged-files (&optional nomodules files)magit-unstaged-files745,31993
(defun magit-staged-files (&optional nomodules files)magit-staged-files750,32190
(defun magit-binary-files (&rest args)magit-binary-files755,32412
(defun magit-unmerged-files ()magit-unmerged-files762,32679
(defun magit-ignored-files ()magit-ignored-files765,32782
(defun magit-revision-files (rev)magit-revision-files769,32927
(defun magit-changed-files (rev-or-range &optional other-rev)magit-changed-files773,33047
(defun magit-renamed-files (revA revB)magit-renamed-files781,33464
(defun magit-file-status (&rest args)magit-file-status787,33689
(defcustom magit-cygwin-mount-pointsmagit-cygwin-mount-points806,34392
(defun magit-expand-git-file-name (filename)magit-expand-git-file-name829,35635
(defun magit-convert-filename-for-git (filename)magit-convert-filename-for-git838,35992
(defun magit-decode-git-path (path)magit-decode-git-path851,36569
(defun magit-file-at-point ()magit-file-at-point859,36849
(defun magit-current-file ()magit-current-file864,36974
(defun magit-no-commit-p ()magit-no-commit-p872,37172
(defun magit-merge-commit-p (commit)magit-merge-commit-p876,37302
(defun magit-anything-staged-p (&optional ignore-submodules &rest files)magit-anything-staged-p880,37430
(defun magit-anything-unstaged-p (&optional ignore-submodules &rest files)magit-anything-unstaged-p888,37779
(defun magit-anything-modified-p (&optional ignore-submodules &rest files)magit-anything-modified-p896,38121
(defun magit-anything-unmerged-p (&rest files)magit-anything-unmerged-p903,38466
(defun magit-module-worktree-p (module)magit-module-worktree-p909,38702
(defun magit-module-no-worktree-p (module)magit-module-no-worktree-p913,38840
(defun magit-ignore-submodules-p ()magit-ignore-submodules-p916,38926
(defun magit-rev-parse (&rest args)magit-rev-parse923,39127
(defun magit-rev-parse-safe (&rest args)magit-rev-parse-safe928,39312
(defun magit-rev-parse-true (&rest args)magit-rev-parse-true934,39553
(defun magit-rev-parse-false (&rest args)magit-rev-parse-false940,39781
(defun magit-rev-parse-p (&rest args)magit-rev-parse-p946,40011
(defun magit-rev-verify (rev)magit-rev-verify952,40269
(defun magit-rev-verify-commit (rev)magit-rev-verify-commit955,40341
(defun magit-rev-equal (a b)magit-rev-equal959,40487
(defun magit-rev-eq (a b)magit-rev-eq962,40561
(defun magit-rev-ancestor-p (a b)magit-rev-ancestor-p967,40683
(defun magit-rev-head-p (rev)magit-rev-head-p971,40833
(defun magit-rev-author-p (rev)magit-rev-author-p978,41038
(defun magit-rev-name (rev &optional pattern)magit-rev-name986,41387
(defun magit-rev-branch (rev)magit-rev-branch1006,42369
(defun magit-get-shortname (rev)magit-get-shortname1010,42495
(defun magit-name-branch (rev &optional lax)magit-name-branch1023,43024
(defun magit-name-local-branch (rev &optional lax)magit-name-local-branch1029,43250
(defun magit-name-remote-branch (rev &optional lax)magit-name-remote-branch1033,43409
(defun magit-name-tag (rev &optional lax)magit-name-tag1038,43594
(defun magit-ref-fullname (name)magit-ref-fullname1043,43766
(defun magit-ref-ambiguous-p (name)magit-ref-ambiguous-p1054,44226
(defun magit-ref-exists-p (ref)magit-ref-exists-p1063,44500
(defun magit-ref-equal (a b)magit-ref-equal1066,44582
(defun magit-ref-eq (a b)magit-ref-eq1073,44836
(defun magit-headish ()magit-headish1086,45298
(defun magit-branch-at-point ()magit-branch-at-point1092,45469
(defun magit--painted-branch-at-point (&optional type)magit--painted-branch-at-point1098,45658
(defun magit-local-branch-at-point ()magit-local-branch-at-point1111,46211
(defun magit-remote-branch-at-point ()magit-remote-branch-at-point1119,46554
(defun magit-commit-at-point ()magit-commit-at-point1127,46875
(defun magit-branch-or-commit-at-point ()magit-branch-or-commit-at-point1132,47035
(defun magit-tag-at-point ()magit-tag-at-point1147,47673
(defun magit-stash-at-point ()magit-stash-at-point1152,47802
(defun magit-remote-at-point ()magit-remote-at-point1155,47869
(defun magit-module-at-point (&optional predicate)magit-module-at-point1160,48000
(defun magit-get-current-branch ()magit-get-current-branch1167,48257
(defvar magit-get-previous-branch-timeout 0.5magit-get-previous-branch-timeout1172,48457
(defun magit-get-previous-branch ()magit-get-previous-branch1176,48593
(defun magit-get-upstream-ref (&optional branch)magit-get-upstream-ref1193,49314
(defun magit-set-upstream-branch (branch upstream)magit-set-upstream-branch1202,49764
(defun magit-get-upstream-branch (&optional branch verify)magit-get-upstream-branch1210,50140
(defun magit-get-indirect-upstream-branch (branch &optional force)magit-get-indirect-upstream-branch1229,51159
(defun magit-get-upstream-remote (&optional branch non-local)magit-get-upstream-remote1248,52052
(defun magit-get-push-remote (&optional branch)magit-get-push-remote1256,52332
(defun magit-get-push-branch (&optional branch verify)magit-get-push-branch1261,52539
(defun magit-get-@{push}-branch (&optional branch)magit-get-@{push}-branch1269,52924
(defun magit-get-remote (&optional branch)magit-get-remote1275,53174
(defun magit-get-some-remote (&optional branch)magit-get-some-remote1281,53388
(defun magit-branch-merged-p (branch &optional target)magit-branch-merged-p1289,53664
(defun magit-split-branch-name (branch)magit-split-branch-name1310,54625
(defun magit-get-current-tag (&optional rev with-distance)magit-get-current-tag1322,55174
(defun magit-get-next-tag (&optional rev with-distance)magit-get-next-tag1341,56013
(defvar magit-list-refs-namespacesmagit-list-refs-namespaces1358,56759
(defun magit-list-refs (&optional namespaces format sortby)magit-list-refs1361,56853
(defun magit-list-branches ()magit-list-branches1386,58034
(defun magit-list-local-branches ()magit-list-local-branches1389,58121
(defun magit-list-remote-branches (&optional remote)magit-list-remote-branches1392,58192
(defun magit-list-related-branches (relation &optional commit arg)magit-list-related-branches1395,58299
(defun magit-list-containing-branches (&optional commit arg)magit-list-containing-branches1400,58532
(defun magit-list-publishing-branches (&optional commit)magit-list-publishing-branches1403,58651
(defun magit-list-merged-branches (&optional commit arg)magit-list-merged-branches1407,58793
(defun magit-list-unmerged-branches (&optional commit arg)magit-list-unmerged-branches1410,58906
(defun magit-list-unmerged-to-upstream-branches ()magit-list-unmerged-to-upstream-branches1413,59024
(defun magit-list-branches-pointing-at (commit)magit-list-branches-pointing-at1418,59255
(defun magit-list-refnames (&optional namespaces)magit-list-refnames1427,59644
(defun magit-list-branch-names ()magit-list-branch-names1430,59746
(defun magit-list-local-branch-names ()magit-list-local-branch-names1433,59841
(defun magit-list-remote-branch-names (&optional remote relative)magit-list-remote-branch-names1436,59920
(defun magit-format-refs (format &rest args)magit-format-refs1444,60294
(defun magit-list-remotes ()magit-list-remotes1452,60604
(defun magit-list-tags ()magit-list-tags1455,60664
(defun magit-list-stashes (&optional format)magit-list-stashes1458,60718
(defun magit-list-active-notes-refs ()magit-list-active-notes-refs1461,60839
(defun magit-list-notes-refnames ()magit-list-notes-refnames1467,61139
(defun magit-remote-list-tags (remote)magit-remote-list-tags1470,61239
(defun magit-remote-list-branches (remote)magit-remote-list-branches1475,61421
(defun magit-remote-list-refs (remote)magit-remote-list-refs1480,61608
(defun magit-list-module-paths ()magit-list-module-paths1485,61781
(defun magit-get-submodule-name (path)magit-get-submodule-name1490,61994
(defun magit-list-worktrees ()magit-list-worktrees1502,62507
(defun magit-symbolic-ref-p (name)magit-symbolic-ref-p1527,63834
(defun magit-ref-p (rev)magit-ref-p1530,63923
(defun magit-branch-p (rev)magit-branch-p1534,64041
(defun magit-local-branch-p (rev)magit-local-branch-p1538,64170
(defun magit-remote-branch-p (rev)magit-remote-branch-p1542,64317
(defun magit-branch-set-face (branch)magit-branch-set-face1546,64467
(defun magit-tag-p (rev)magit-tag-p1551,64671
(defun magit-remote-p (string)magit-remote-p1554,64737
(defun magit-rev-diff-count (a b)magit-rev-diff-count1557,64815
(defun magit-abbrev-length ()magit-abbrev-length1566,65188
(defun magit-abbrev-arg (&optional arg)magit-abbrev-arg1577,65719
(defun magit-rev-abbrev (rev)magit-rev-abbrev1580,65822
(defun magit-commit-children (commit &optional args)magit-commit-children1583,65905
(defun magit-commit-parents (commit)magit-commit-parents1592,66291
(defun magit-patch-id (rev)magit-patch-id1596,66427
(defun magit-rev-format (format &optional rev args)magit-rev-format1604,66732
(defun magit-rev-insert-format (format &optional rev args)magit-rev-insert-format1611,67027
(defun magit-format-rev-summary (rev)magit-format-rev-summary1616,67248
(defvar magit-ref-namespacesmagit-ref-namespaces1622,67434
(defun magit-format-ref-labels (string)magit-format-ref-labels1649,68735
(defun magit-object-type (object)magit-object-type1745,73518
(defmacro magit-with-blob (commit file &rest body)magit-with-blob1748,73598
(defmacro magit-with-temp-index (tree arg &rest body)magit-with-temp-index1760,74017
(defun magit-commit-tree (message &optional tree &rest parents)magit-commit-tree1784,75129
(defun magit-commit-worktree (message &optional arg &rest other-parents)magit-commit-worktree1791,75462
(defun magit-update-files (files)magit-update-files1796,75698
(defun magit-update-ref (ref message rev &optional stashish)magit-update-ref1799,75801
(defconst magit-range-remagit-range-re1820,76905
(defun magit-split-range (range)magit-split-range1825,77080
(defvar magit-thingatpt--git-revision-chars "-_./[:alnum:]@{}^~!"magit-thingatpt--git-revision-chars1834,77433
(defun magit-thingatpt--git-revision ()magit-thingatpt--git-revision1852,78003
(defvar magit-revision-history nil)magit-revision-history1859,78235
(defun magit-read-branch (prompt &optional secondary-default)magit-read-branch1861,78272
(defun magit-read-branch-or-commit (prompt &optional secondary-default)magit-read-branch-or-commit1868,78611
(defun magit-read-range-or-commit (prompt &optional secondary-default)magit-read-range-or-commit1876,79041
(defun magit-read-range (prompt &optional default)magit-read-range1886,79382
(defun magit-read-remote-branchmagit-read-remote-branch1892,79646
(defun magit-read-refspec (prompt remote)magit-read-refspec1907,80386
(defun magit-read-local-branch (prompt &optional secondary-default)magit-read-local-branch1913,80672
(defun magit-read-local-branch-or-commit (prompt)magit-read-local-branch-or-commit1920,81029
(defun magit-read-local-branch-or-ref (prompt &optional secondary-default)magit-read-local-branch-or-ref1929,81483
(defun magit-read-other-branchmagit-read-other-branch1937,81920
(defun magit-read-other-branch-or-commitmagit-read-other-branch-or-commit1950,82569
(defun magit-read-other-local-branchmagit-read-other-local-branch1963,83220
(defun magit-read-branch-prefer-other (prompt)magit-read-branch-prefer-other1977,83914
(defun magit-read-starting-point (prompt &optional branch)magit-read-starting-point2011,85541
(defun magit--default-starting-point ()magit--default-starting-point2028,86237
(defun magit-read-tag (prompt &optional require-match)magit-read-tag2036,86527
(defun magit-read-stash (prompt)magit-read-stash2041,86752
(defun magit-read-remote (prompt &optional default use-only)magit-read-remote2047,86976
(defun magit-read-remote-or-url (prompt &optional default)magit-read-remote-or-url2057,87388
(defun magit-read-module-path (prompt &optional predicate)magit-read-module-path2066,87782
(defun magit-module-confirm (verb &optional predicate)magit-module-confirm2071,88006
(defun magit--format-popup-variable:value (variable width &optional global)magit--format-popup-variable:value2094,88900
(defun magit--format-popup-variable:values (variable width &optional global)magit--format-popup-variable:values2101,89273
(defun magit--set-popup-variablemagit--set-popup-variable2115,89946
(defun magit--format-popup-variable:choicesmagit--format-popup-variable:choices2127,90370
(defun magit--format-popup-variable:choices*magit--format-popup-variable:choices*2134,90652

elpa/magit-2.90.1/magit-margin.el,1217
(defgroup magit-margin nilmagit-margin41,1343
(defvar-local magit-buffer-margin nil)magit-buffer-margin55,1965
(defvar-local magit-set-buffer-margin-refresh nil)magit-set-buffer-margin-refresh58,2051
(defvar magit--age-spec)magit--age-spec60,2103
(defun magit-toggle-margin ()magit-toggle-margin77,2764
(defun magit-cycle-margin-style ()magit-cycle-margin-style85,3032
(defun magit-toggle-margin-details ()magit-toggle-margin-details100,3624
(defun magit-buffer-margin-p ()magit-buffer-margin-p111,3945
(defun magit-margin-option ()magit-margin-option114,4007
(defun magit-set-buffer-margin (&optional reset refresh)magit-set-buffer-margin124,4410
(defun magit-set-window-margin (&optional window)magit-set-window-margin146,5489
(defun magit-make-margin-overlay (&optional string previous-line)magit-make-margin-overlay154,5768
(defun magit-maybe-make-margin-overlay ()magit-maybe-make-margin-overlay169,6400
(defun magit-margin-set-variable (mode symbol value)magit-margin-set-variable181,6823
(defconst magit-log-margin--custom-typemagit-log-margin--custom-type191,7178
(defvar magit--age-specmagit--age-spec204,7750
(defun magit--age (date &optional abbreviate)magit--age224,8595

elpa/magit-2.90.1/magit-reset.el,560
(defun magit-reset-mixed (commit)magit-reset-mixed46,1747
(defun magit-reset-soft (commit)magit-reset-soft53,2010
(defun magit-reset-hard (commit)magit-reset-hard60,2277
(defun magit-reset-index (commit)magit-reset-index69,2622
(defun magit-reset-worktree (commit)magit-reset-worktree78,2948
(defun magit-reset-quickly (commit &optional hard)magit-reset-quickly88,3345
(defun magit-reset-read-branch-or-commit (prompt)magit-reset-read-branch-or-commit100,3930
(defun magit-reset-internal (arg commit &optional path)magit-reset-internal108,4245

elpa/magit-2.90.1/magit-sequence.el,4893
(defface magit-sequence-pickmagit-sequence-pick40,1271
(defface magit-sequence-stopmagit-sequence-stop45,1386
(defface magit-sequence-partmagit-sequence-part51,1616
(defface magit-sequence-headmagit-sequence-head57,1843
(defface magit-sequence-dropmagit-sequence-drop63,2066
(defface magit-sequence-donemagit-sequence-done69,2286
(defface magit-sequence-ontomagit-sequence-onto74,2404
(defface magit-sequence-execmagit-sequence-exec79,2531
(defun magit-sequencer-continue ()magit-sequencer-continue87,2676
(defun magit-sequencer-skip ()magit-sequencer-skip98,3113
(defun magit-sequencer-abort ()magit-sequencer-abort107,3432
(defun magit-sequencer-in-progress-p ()magit-sequencer-in-progress-p116,3796
(defvar magit-perl-executable "perl"magit-perl-executable122,3931
(defun magit-cherry-pick-read-args (prompt)magit-cherry-pick-read-args149,5203
(defun magit--cherry-move-read-args (verb away fn)magit--cherry-move-read-args154,5397
(defun magit--cherry-spinoff-read-args (verb)magit--cherry-spinoff-read-args173,6308
(defun magit-cherry-copy (commits &optional args)magit-cherry-copy180,6541
(defun magit-cherry-apply (commits &optional args)magit-cherry-apply189,6905
(defun magit-cherry-harvest (commits branch &optional args)magit-cherry-harvest198,7317
(defun magit-cherry-donate (commits branch &optional args)magit-cherry-donate216,8107
(defun magit-cherry-spinout (commits branch start-point &optional args)magit-cherry-spinout229,8695
(defun magit-cherry-spinoff (commits branch start-point &optional args)magit-cherry-spinoff239,9153
(defun magit--cherry-move (commits src dst argsmagit--cherry-move248,9594
(defun magit--cherry-pick (commits args &optional revert)magit--cherry-pick301,12194
(defun magit-cherry-pick-in-progress-p ()magit-cherry-pick-in-progress-p325,13112
(defun magit-revert-read-args (prompt)magit-revert-read-args349,14233
(defun magit-revert-and-commit (commit &optional args)magit-revert-and-commit355,14415
(defun magit-revert-no-commit (commit &optional args)magit-revert-no-commit364,14766
(defun magit-revert-in-progress-p ()magit-revert-in-progress-p372,15140
(defun magit-am-apply-patches (&optional files args)magit-am-apply-patches404,16608
(defun magit-am-apply-maildir (&optional maildir args)magit-am-apply-maildir420,17356
(defun magit-am-continue ()magit-am-continue428,17708
(defun magit-am-skip ()magit-am-skip438,18046
(defun magit-am-abort ()magit-am-abort446,18289
(defun magit-am-in-progress-p ()magit-am-in-progress-p454,18551
(defun magit-git-rebase (target args)magit-git-rebase496,20661
(defun magit-rebase-onto-pushremote (args)magit-rebase-onto-pushremote500,20765
(defun magit-rebase-onto-upstream (args)magit-rebase-onto-upstream513,21374
(defun magit-rebase-branch (target args)magit-rebase-branch523,21777
(defun magit-rebase-subset (newbase start args)magit-rebase-subset534,22213
(defun magit-rebase-interactive-1magit-rebase-interactive-1553,23061
(defvar magit--rebase-published-symbol nil)magit--rebase-published-symbol580,24247
(defvar magit--rebase-public-edit-confirmed nil)magit--rebase-public-edit-confirmed581,24291
(defun magit-rebase-interactive-assert (since &optional delay-edit-confirm)magit-rebase-interactive-assert583,24341
(defun magit-rebase-interactive (commit args)magit-rebase-interactive616,26065
(defun magit-rebase-autosquash (args)magit-rebase-autosquash625,26381
(defun magit-rebase-edit-commit (commit args)magit-rebase-edit-commit633,26711
(defun magit-rebase-reword-commit (commit args)magit-rebase-reword-commit644,27093
(defun magit-rebase-remove-commit (commit args)magit-rebase-remove-commit654,27486
(defun magit-rebase-continue (&optional noedit)magit-rebase-continue665,27884
(defun magit-rebase-skip ()magit-rebase-skip689,29057
(defun magit-rebase-edit ()magit-rebase-edit697,29337
(defun magit-rebase-abort ()magit-rebase-abort705,29586
(defun magit-rebase-in-progress-p ()magit-rebase-in-progress-p713,29896
(defun magit--rebase-resume-command ()magit--rebase-resume-command718,30088
(defun magit-insert-sequencer-sequence ()magit-insert-sequencer-sequence723,30216
(defun magit-insert-am-sequence ()magit-insert-am-sequence747,31439
(defun magit-sequence-insert-am-patch (type patch face)magit-sequence-insert-am-patch773,32546
(defun magit-insert-rebase-sequence ()magit-insert-rebase-sequence786,33073
(defun magit-rebase-insert-merge-sequence (onto)magit-rebase-insert-merge-sequence804,34002
(defun magit-rebase-insert-apply-sequence (onto)magit-rebase-insert-apply-sequence826,34983
(defun magit-rebase-patches ()magit-rebase-patches840,35650
(defun magit-sequence-insert-sequence (stop onto &optional orig)magit-sequence-insert-sequence843,35753
(defun magit-sequence-insert-commit (type hash face &optional exec)magit-sequence-insert-commit905,39019

elpa/magit-2.90.1/magit-bookmark.el,2614
(defun magit-bookmark--jump (bookmark fn &rest args)magit-bookmark--jump38,1162
(defun magit-bookmark--make-record (mode handler &optional make-props)magit-bookmark--make-record73,2596
(defun magit-bookmark--status-jump (bookmark)magit-bookmark--status-jump106,3809
(defun magit-bookmark--status-make-record ()magit-bookmark--status-make-record112,4002
(defun magit-bookmark--refs-jump (bookmark)magit-bookmark--refs-jump120,4195
(defun magit-bookmark--refs-make-record ()magit-bookmark--refs-make-record127,4432
(defun magit-bookmark--log-jump (bookmark)magit-bookmark--log-jump138,4700
(defun magit-bookmark--log-make-name (buffer-name revs _args files)magit-bookmark--log-make-name145,4966
(defun magit-bookmark--log-make-record ()magit-bookmark--log-make-record153,5241
(defun magit-bookmark--reflog-jump (bookmark)magit-bookmark--reflog-jump167,5662
(defun magit-bookmark--reflog-make-name (buffer-name ref)magit-bookmark--reflog-make-name175,6000
(defun magit-bookmark--reflog-make-record ()magit-bookmark--reflog-make-record180,6159
(defun magit-bookmark--stashes-jump (bookmark)magit-bookmark--stashes-jump192,6516
(defun magit-bookmark--stashes-make-record ()magit-bookmark--stashes-make-record197,6673
(defun magit-bookmark--cherry-jump (bookmark)magit-bookmark--cherry-jump205,6875
(defun magit-bookmark--cherry-make-name (buffer-name head upstream)magit-bookmark--cherry-make-name211,7102
(defun magit-bookmark--cherry-make-record ()magit-bookmark--cherry-make-record216,7294
(defun magit-bookmark--diff-jump (bookmark)magit-bookmark--diff-jump229,7709
(defun magit-bookmark--resolve (rev-or-range)magit-bookmark--resolve237,8032
(defun magit-bookmark--diff-make-namemagit-bookmark--diff-make-name259,8747
(defun magit-bookmark--diff-make-record ()magit-bookmark--diff-make-record272,9246
(defun magit-bookmark--revision-jump (bookmark)magit-bookmark--revision-jump288,9851
(defun magit-bookmark--revision-make-name (buffer-name rev _args files)magit-bookmark--revision-make-name295,10116
(defun magit-bookmark--revision-make-record ()magit-bookmark--revision-make-record304,10494
(defun magit-bookmark--stash-jump (bookmark)magit-bookmark--stash-jump321,11129
(defun magit-bookmark--stash-make-name (buffer-name stash _args files)magit-bookmark--stash-make-name328,11401
(defun magit-bookmark--stash-make-record ()magit-bookmark--stash-make-record336,11688
(defun magit-bookmark--submodules-jump (bookmark)magit-bookmark--submodules-jump359,12638
(defun magit-bookmark--submodules-make-record ()magit-bookmark--submodules-make-record364,12807

elpa/magit-2.90.1/magit-stash.el,2953
(defvar bookmark-make-record-function)bookmark-make-record-function35,1089
(defgroup magit-stash nilmagit-stash39,1142
(defcustom magit-stash-sections-hookmagit-stash-sections-hook45,1250
(defcustom magit-stashes-marginmagit-stashes-margin57,1562
(defun magit-stash-both (message &optional include-untracked)magit-stash-both113,4119
(defun magit-stash-index (message)magit-stash-index122,4513
(defun magit-stash-worktree (message &optional include-untracked)magit-stash-worktree132,4940
(defun magit-stash-keep-index (message &optional include-untracked)magit-stash-keep-index141,5357
(defun magit-stash-read-args ()magit-stash-read-args149,5771
(defun magit-stash-read-untracked ()magit-stash-read-untracked153,5878
(defun magit-stash-read-message ()magit-stash-read-message159,6147
(defun magit-snapshot-both (&optional include-untracked)magit-snapshot-both168,6467
(defun magit-snapshot-index ()magit-snapshot-index177,6857
(defun magit-snapshot-worktree (&optional include-untracked)magit-snapshot-worktree184,7046
(defun magit-snapshot-read-args ()magit-snapshot-read-args192,7437
(defun magit-snapshot-save (index worktree untracked &optional refresh)magit-snapshot-save195,7512
(defun magit-stash-apply (stash)magit-stash-apply200,7718
(defun magit-stash-pop (stash)magit-stash-pop209,8098
(defun magit-stash-drop (stash)magit-stash-drop220,8557
(defun magit-stash-clear (ref)magit-stash-clear242,9552
(defun magit-stash-branch (stash branch)magit-stash-branch250,9885
(defun magit-stash-branch-here (stash branch)magit-stash-branch-here257,10155
(defun magit-stash-format-patch (stash)magit-stash-format-patch268,10623
(defun magit-stash-save (message index worktree untrackedmagit-stash-save277,10904
(defun magit-stash-store (message ref commit)magit-stash-store306,12303
(defun magit-stash-create (message index worktree untracked)magit-stash-create309,12393
(defun magit-stash-summary ()magit-stash-summary336,13876
(defvar magit-stashes-section-mapmagit-stashes-section-map342,14021
(defvar magit-stash-section-mapmagit-stash-section-map348,14203
(defun magit-stash-list ()magit-stash-list401,16307
(define-derived-mode magit-stashes-mode magit-reflog-mode "Magit Stashes"magit-stashes-mode406,16441
(defun magit-stash-show (stash &optional args files)magit-stash-show424,17113
(define-derived-mode magit-stash-mode magit-diff-mode "Magit Stash"magit-stash-mode433,17576
(defun magit-stash-refresh-buffer (stash _const _args _files)magit-stash-refresh-buffer440,17851
(defun magit-stash-insert-section (commit range message &optional files)magit-stash-insert-section449,18226
(defun magit-insert-stash-notes ()magit-insert-stash-notes457,18542
(defun magit-insert-stash-index ()magit-insert-stash-index469,18958
(defun magit-insert-stash-worktree ()magit-insert-stash-worktree476,19255
(defun magit-insert-stash-untracked ()magit-insert-stash-untracked483,19542

elpa/magit-2.90.1/magit-imenu.el,1795
(defun magit-imenu--index-function (entry-types menu-types)magit-imenu--index-function42,1463
(defun magit-imenu--log-prev-index-position-function ()magit-imenu--log-prev-index-position-function83,3079
(defun magit-imenu--log-extract-index-name-function ()magit-imenu--log-extract-index-name-function93,3415
(defun magit-imenu--diff-prev-index-position-function ()magit-imenu--diff-prev-index-position-function107,3838
(defun magit-imenu--diff-extract-index-name-function ()magit-imenu--diff-extract-index-name-function119,4276
(defun magit-imenu--status-create-index-function ()magit-imenu--status-create-index-function130,4643
(defun magit-imenu--refs-create-index-function ()magit-imenu--refs-create-index-function141,4970
(defun magit-imenu--cherry-create-index-function ()magit-imenu--cherry-create-index-function152,5263
(defun magit-imenu--submodule-prev-index-position-function ()magit-imenu--submodule-prev-index-position-function163,5546
(defun magit-imenu--submodule-extract-index-name-function ()magit-imenu--submodule-extract-index-name-function171,5804
(defun magit-imenu--repolist-prev-index-position-function ()magit-imenu--repolist-prev-index-position-function181,6101
(defun magit-imenu--repolist-extract-index-name-function ()magit-imenu--repolist-extract-index-name-function189,6352
(defun magit-imenu--process-prev-index-position-function ()magit-imenu--process-prev-index-position-function202,6748
(defun magit-imenu--process-extract-index-name-function ()magit-imenu--process-extract-index-name-function211,7063
(defun magit-imenu--rebase-prev-index-position-function ()magit-imenu--rebase-prev-index-position-function222,7434
(defun magit-imenu--rebase-extract-index-name-function ()magit-imenu--rebase-extract-index-name-function233,7774

elpa/magit-2.90.1/magit-ediff.el,1497
(defvar smerge-ediff-buf)smerge-ediff-buf35,1113
(defvar smerge-ediff-windows)smerge-ediff-windows36,1139
(defgroup magit-ediff nilmagit-ediff40,1183
(defcustom magit-ediff-quit-hookmagit-ediff-quit-hook45,1306
(defcustom magit-ediff-dwim-show-on-hunks nilmagit-ediff-dwim-show-on-hunks60,1917
(defcustom magit-ediff-show-stash-with-index tmagit-ediff-show-stash-with-index70,2314
(defvar magit-ediff-previous-winconf nil)magit-ediff-previous-winconf104,3465
(defun magit-ediff-resolve (file)magit-ediff-resolve121,4203
(defun magit-ediff-stage (file)magit-ediff-stage158,5811
(defun magit-ediff-compare (revA revB fileA fileB)magit-ediff-compare205,8007
(defun magit-ediff-compare--read-revisions (&optional arg mbase)magit-ediff-compare--read-revisions247,9743
(defun magit-ediff-read-files (revA revB &optional fileB)magit-ediff-read-files255,10046
(defun magit-ediff-dwim ()magit-ediff-dwim277,11056
(defun magit-ediff-show-staged (file)magit-ediff-show-staged349,14260
(defun magit-ediff-show-unstaged (file)magit-ediff-show-unstaged377,15376
(defun magit-ediff-show-working-tree (file)magit-ediff-show-working-tree406,16526
(defun magit-ediff-show-commit (commit)magit-ediff-show-commit431,17577
(defun magit-ediff-show-stash (stash)magit-ediff-show-stash441,17930
(defun magit-ediff-cleanup-auxiliary-buffers ()magit-ediff-cleanup-auxiliary-buffers477,19595
(defun magit-ediff-restore-previous-winconf ()magit-ediff-restore-previous-winconf505,20879

elpa/magit-2.90.1/magit-bisect.el,1102
(defcustom magit-bisect-show-graph tmagit-bisect-show-graph34,1100
(defface magit-bisect-goodmagit-bisect-good40,1293
(defface magit-bisect-skipmagit-bisect-skip45,1418
(defface magit-bisect-badmagit-bisect-bad50,1545
(defun magit-bisect-start (bad good)magit-bisect-start71,2350
(defun magit-bisect-start-read-args ()magit-bisect-start-read-args90,3129
(defun magit-bisect-reset ()magit-bisect-reset95,3330
(defun magit-bisect-good ()magit-bisect-good103,3603
(defun magit-bisect-bad ()magit-bisect-bad111,3833
(defun magit-bisect-skip ()magit-bisect-skip119,4056
(defun magit-bisect-run (cmdline &optional bad good)magit-bisect-run127,4312
(defun magit-git-bisect (subcommand &optional args no-assert)magit-git-bisect140,4912
(defun magit-bisect-in-progress-p ()magit-bisect-in-progress-p149,5201
(defun magit-insert-bisect-output ()magit-insert-bisect-output152,5287
(defun magit-insert-bisect-rest ()magit-insert-bisect-rest174,6428
(defun magit-insert-bisect-log ()magit-insert-bisect-log184,6864
(defun magit-wash-bisect-log (_args)magit-wash-bisect-log192,7163

elpa/magit-2.90.1/magit-pkg.el,77
(define-package "magit" "2.90.1" "A Git porcelain inside Emacs.""magit"1,0

elpa/magit-2.90.1/magit-autoloads.el,529
(defconst git-rebase-filename-regexp "/git-rebase-todo\\'")git-rebase-filename-regexp22,655
(defvar magit-auto-revert-mode (and (not global-auto-revert-mode) (not noninteractive)) "\magit-auto-revert-mode128,4058
(defvar global-magit-file-mode t "\global-magit-file-mode1255,41172
(defvar magit-wip-after-save-mode nil "\magit-wip-after-save-mode2580,83965
(defvar magit-wip-after-apply-mode nil "\magit-wip-after-apply-mode2602,84875
(defvar magit-wip-before-change-mode nil "\magit-wip-before-change-mode2621,85557

elpa/magit-2.90.1/magit-submodule.el,3146
(defvar x-stretch-cursor)x-stretch-cursor31,1051
(defvar bookmark-make-record-function)bookmark-make-record-function32,1077
(defcustom magit-module-sections-hookmagit-module-sections-hook36,1130
(defcustom magit-module-sections-nested tmagit-module-sections-nested51,1652
(defcustom magit-submodule-list-mode-hook '(hl-line-mode)magit-submodule-list-mode-hook61,2005
(defcustom magit-submodule-list-columnsmagit-submodule-list-columns69,2254
(defcustom magit-submodule-remove-trash-gitdirs nilmagit-submodule-remove-trash-gitdirs102,4087
(defun magit-submodule-filtered-arguments (&rest filters)magit-submodule-filtered-arguments149,5991
(defun magit-submodule-add (url &optional path name args)magit-submodule-add154,6148
(defun magit-submodule-read-name-for-path (path &optional prefer-short)magit-submodule-read-name-for-path200,8309
(defun magit-submodule-register (modules)magit-submodule-register213,8927
(defun magit-submodule-populate (modules)magit-submodule-populate231,9687
(defun magit-submodule-update (modules args)magit-submodule-update247,10390
(defun magit-submodule-synchronize (modules args)magit-submodule-synchronize267,11301
(defun magit-submodule-unpopulate (modules args)magit-submodule-unpopulate281,11872
(defun magit-submodule-remove (modules args trash-gitdirs)magit-submodule-remove302,12832
(defun magit-insert-modules ()magit-insert-modules380,16528
(defun magit--insert-modules (&optional _section)magit--insert-modules397,17252
(defun magit-insert-modules-overview ()magit-insert-modules-overview401,17374
(defvar magit-modules-overview-align-numbers t)magit-modules-overview-align-numbers415,17985
(defun magit--insert-modules-overview (&optional _section)magit--insert-modules-overview417,18034
(defvar magit-modules-section-mapmagit-modules-section-map446,19565
(defvar magit-module-section-mapmagit-module-section-map452,19751
(defun magit-submodule-visit (module &optional other-window)magit-submodule-visit465,20291
(defun magit-insert-modules-unpulled-from-upstream ()magit-insert-modules-unpulled-from-upstream491,21489
(defun magit-insert-modules-unpulled-from-pushremote ()magit-insert-modules-unpulled-from-pushremote499,21878
(defun magit-insert-modules-unpushed-to-upstream ()magit-insert-modules-unpushed-to-upstream507,22266
(defun magit-insert-modules-unpushed-to-pushremote ()magit-insert-modules-unpushed-to-pushremote515,22649
(defun magit--insert-modules-logs (heading type range)magit--insert-modules-logs522,23014
(defun magit-list-submodules ()magit-list-submodules554,24474
(defvar magit-submodule-list-mode-mapmagit-submodule-list-mode-map565,24848
(define-derived-mode magit-submodule-list-mode tabulated-list-mode "Modules"magit-submodule-list-mode571,25041
(defun magit-submodule-list-refresh ()magit-submodule-list-refresh591,26010
(defun magit-modulelist-column-path (path)magit-modulelist-column-path603,26547
(defun magit-submodule--maybe-reuse-gitdir (name path)magit-submodule--maybe-reuse-gitdir609,26661
(defun magit-submodule--restore-worktree (worktree gitdir)magit-submodule--restore-worktree627,27534

elpa/magit-2.90.1/magit-autorevert.el,1063
(defgroup magit-auto-revert nilmagit-auto-revert35,1105
(defcustom auto-revert-buffer-list-filter nilauto-revert-buffer-list-filter43,1378
(defcustom magit-auto-revert-tracked-only tmagit-auto-revert-tracked-only70,2582
(defcustom magit-auto-revert-immediately tmagit-auto-revert-immediately82,3013
(defun magit-turn-on-auto-revert-mode-if-desired (&optional file)magit-turn-on-auto-revert-mode-if-desired104,3796
(define-globalized-minor-mode magit-auto-revert-mode auto-revert-modemagit-auto-revert-mode119,4399
(defun magit-auto-revert-mode--init-kludge ()magit-auto-revert-mode--init-kludge149,6120
(defun magit-auto-revert-buffers ()magit-auto-revert-buffers205,8592
(defvar magit-auto-revert-toplevel nil)magit-auto-revert-toplevel214,8961
(defun magit-auto-revert-buffer-p (buffer)magit-auto-revert-buffer-p220,9138
(defun magit-auto-revert-repository-buffer-p (buffer &optional fallback)magit-auto-revert-repository-buffer-p227,9443
(defun auto-revert-buffers--buffer-list-filter ()auto-revert-buffers--buffer-list-filter248,10442

elpa/magit-2.90.1/magit-refs.el,3335
(defvar bookmark-make-record-function)bookmark-make-record-function35,1126
(defgroup magit-refs nilmagit-refs39,1179
(defcustom magit-refs-mode-hook nilmagit-refs-mode-hook44,1326
(defcustom magit-refs-sections-hookmagit-refs-sections-hook50,1482
(defcustom magit-refs-show-commit-count nilmagit-refs-show-commit-count61,1805
(defcustom magit-refs-pad-commit-counts nilmagit-refs-pad-commit-counts79,2506
(defvar magit-refs-show-push-remote nilmagit-refs-show-push-remote93,3014
(defcustom magit-refs-show-remote-prefix nilmagit-refs-show-remote-prefix100,3336
(defcustom magit-refs-marginmagit-refs-margin109,3646
(defcustom magit-refs-margin-for-tags nilmagit-refs-margin-for-tags138,4869
(defcustom magit-refs-primary-column-width (cons 16 32)magit-refs-primary-column-width148,5142
(defcustom magit-refs-focus-column-width 5magit-refs-focus-column-width167,6006
(defcustom magit-refs-filter-alist nilmagit-refs-filter-alist184,6712
(defcustom magit-visit-ref-behavior nilmagit-visit-ref-behavior204,7656
(defvar magit-refs-mode-mapmagit-refs-mode-map273,10261
(define-derived-mode magit-refs-mode magit-mode "Magit Refs"magit-refs-mode281,10523
(defun magit-refs-refresh-buffer (ref &optional args)magit-refs-refresh-buffer305,11474
(defcustom magit-show-refs-arguments nilmagit-show-refs-arguments319,11983
(defvar magit-show-refs-popupmagit-show-refs-popup325,12173
(defun magit-read-ref-sort (prompt initial-input)magit-read-ref-sort352,13440
(defun magit-show-refs-get-buffer-args ()magit-show-refs-get-buffer-args358,13687
(defun magit-show-refs-arguments ()magit-show-refs-arguments369,14125
(defun magit-show-refs-popup (&optional arg)magit-show-refs-popup375,14302
(defun magit-show-refs-head (&optional args)magit-show-refs-head382,14553
(defun magit-show-refs-current (&optional args)magit-show-refs-current389,14781
(defun magit-show-refs (&optional ref args)magit-show-refs397,15075
(defun magit-refs-set-show-commit-count ()magit-refs-set-show-commit-count404,15389
(defun magit-visit-ref ()magit-visit-ref414,15749
(defvar magit-remote-section-mapmagit-remote-section-map468,18436
(defvar magit-branch-section-mapmagit-branch-section-map475,18688
(defvar magit-tag-section-mapmagit-tag-section-map483,19005
(defun magit-insert-branch-description ()magit-insert-branch-description490,19244
(defun magit-insert-tags ()magit-insert-tags507,20003
(defun magit-insert-remote-branches ()magit-insert-remote-branches533,21251
(defun magit-insert-local-branches ()magit-insert-local-branches573,23423
(defun magit-refs--format-local-branches ()magit-refs--format-local-branches590,24092
(defun magit-refs--format-local-branch (line)magit-refs--format-local-branch625,25871
(defun magit-refs--format-focus-column (ref &optional type)magit-refs--format-focus-column684,28878
(defun magit-refs--propertize-branch (branch ref &optional head-face)magit-refs--propertize-branch711,29994
(defun magit-refs--insert-refname-p (refname)magit-refs--insert-refname-p717,30312
(defun magit-refs--insert-cherry-commits (ref section)magit-refs--insert-cherry-commits726,30621
(defun magit-refs--insert-cherry-commits-1 (ref _section)magit-refs--insert-cherry-commits-1732,30869
(defun magit-refs--format-margin (commit)magit-refs--format-margin742,31248

elpa/magit-2.90.1/magit-wip.el,2975
(defgroup magit-wip nilmagit-wip41,1333
(defgroup magit-wip-legacy nilmagit-wip-legacy47,1499
(defcustom magit-wip-mode-lighter " Wip"magit-wip-mode-lighter52,1653
(defcustom magit-wip-after-save-local-mode-lighter ""magit-wip-after-save-local-mode-lighter58,1803
(defcustom magit-wip-after-apply-mode-lighter ""magit-wip-after-apply-mode-lighter64,1989
(defcustom magit-wip-before-change-mode-lighter ""magit-wip-before-change-mode-lighter70,2165
(defcustom magit-wip-initial-backup-mode-lighter ""magit-wip-initial-backup-mode-lighter76,2345
(defcustom magit-wip-merge-branch nilmagit-wip-merge-branch82,2527
(defcustom magit-wip-namespace "refs/wip/"magit-wip-namespace98,3146
(define-minor-mode magit-wip-modemagit-wip-mode110,3514
(define-minor-mode magit-wip-after-save-local-modemagit-wip-after-save-local-mode130,4261
(defun magit-wip-after-save-local-mode-turn-on ()magit-wip-after-save-local-mode-turn-on148,5057
(define-globalized-minor-mode magit-wip-after-save-modemagit-wip-after-save-mode155,5272
(defun magit-wip-commit-buffer-file (&optional msg)magit-wip-commit-buffer-file160,5462
(define-minor-mode magit-wip-after-apply-modemagit-wip-after-apply-mode179,6150
(defun magit-wip-commit-after-apply (&optional files msg)magit-wip-commit-after-apply193,6676
(define-minor-mode magit-wip-before-change-modemagit-wip-before-change-mode198,6820
(defun magit-wip-commit-before-change (&optional files msg)magit-wip-commit-before-change215,7515
(define-minor-mode magit-wip-initial-backup-modemagit-wip-initial-backup-mode220,7676
(defvar-local magit-wip-buffer-backed-up nil)magit-wip-buffer-backed-up230,8090
(defun magit-wip-commit-initial-backup ()magit-wip-commit-initial-backup234,8205
(defun magit-wip-commit (&optional files msg)magit-wip-commit259,9225
(defun magit-wip-commit-index (ref files msg)magit-wip-commit-index275,9863
(defun magit-wip-commit-worktree (ref files msg)magit-wip-commit-worktree281,10131
(defun magit-wip-update-wipref (ref wipref tree parent files msg start-msg)magit-wip-update-wipref292,10638
(defun magit-wip-get-ref ()magit-wip-get-ref331,12585
(defun magit-wip-get-parent (ref wipref)magit-wip-get-parent336,12730
(defun magit--wip-index-ref (&optional ref)magit--wip-index-ref343,12936
(defun magit--wip-wtree-ref (&optional ref)magit--wip-wtree-ref346,13014
(defun magit--wip-ref (namespace &optional ref)magit--wip-ref349,13092
(defun magit-wip-maybe-add-commit-hook ()magit-wip-maybe-add-commit-hook356,13381
(defun magit-wip-any-enabled-p ()magit-wip-any-enabled-p361,13570
(defun magit-wip-log-index (args files)magit-wip-log-index371,13811
(defun magit-wip-log-worktree (args files)magit-wip-log-worktree376,14008
(defun magit-wip-log-current (branch args files count)magit-wip-log-current381,14211
(defun magit-wip-log (branch args files count)magit-wip-log392,14700
(defun magit-wip-log-get-tips (wipref count)magit-wip-log-get-tips417,15806

elpa/magit-2.90.1/magit-core.el,566
(defgroup magit nilmagit41,1431
(defgroup magit-essentials nilmagit-essentials48,1605
(defgroup magit-miscellaneous nilmagit-miscellaneous60,1999
(defgroup magit-commands nilmagit-commands64,2083
(defgroup magit-git-arguments nilmagit-git-arguments68,2184
(defgroup magit-modes nilmagit-modes81,2711
(defgroup magit-buffers nilmagit-buffers85,2792
(defgroup magit-refresh nilmagit-refresh90,2924
(defgroup magit-faces nilmagit-faces96,3119
(defgroup magit-extensions nilmagit-extensions101,3204
(defgroup magit-related nilmagit-related113,3769

elpa/magit-2.90.1/magit-worktree.el,554
(defun magit-worktree-checkout (path branch)magit-worktree-checkout48,1796
(defun magit-worktree-checkout-pull-request (path pr)magit-worktree-checkout-pull-request57,2175
(defun magit-worktree-branch (path branch start-point &optional force)magit-worktree-branch87,3584
(defun magit-worktree-delete (worktree)magit-worktree-delete97,4038
(defun magit-worktree-status (worktree)magit-worktree-status121,5248
(defvar magit-worktree-section-mapmagit-worktree-section-map138,5896
(defun magit-insert-worktrees ()magit-insert-worktrees145,6156

elpa/magit-2.90.1/magit-apply.el,3586
(defvar auto-revert-verbose)auto-revert-verbose46,1664
(defvar borg-user-emacs-directory)borg-user-emacs-directory54,2071
(defcustom magit-delete-by-moving-to-trash tmagit-delete-by-moving-to-trash58,2120
(defcustom magit-unstage-committed tmagit-unstage-committed69,2549
(defcustom magit-reverse-atomically nilmagit-reverse-atomically85,3145
(defcustom magit-post-stage-hook nilmagit-post-stage-hook97,3587
(defvar magit-post-stage-hook-commandsmagit-post-stage-hook-commands105,3843
(defcustom magit-post-unstage-hook nilmagit-post-unstage-hook108,3939
(defvar magit-post-unstage-hook-commandsmagit-post-unstage-hook-commands116,4201
(defun magit-apply (&rest args)magit-apply122,4325
(defun magit-apply--section-content (section)magit-apply--section-content140,5151
(defun magit-apply-diffs (sections &rest args)magit-apply-diffs146,5441
(defun magit-apply-diff (section &rest args)magit-apply-diff155,5805
(defun magit-apply-hunks (sections &rest args)magit-apply-hunks161,6081
(defun magit-apply-hunk (section &rest args)magit-apply-hunk170,6535
(defun magit-apply-region (section &rest args)magit-apply-region177,6912
(defun magit-apply-patch (section:s args patch)magit-apply-patch186,7407
(defun magit-apply--get-selection ()magit-apply--get-selection210,8441
(defun magit-apply--get-diffs (sections)magit-apply--get-diffs220,8876
(defun magit-apply--diff-ignores-whitespace-p ()magit-apply--diff-ignores-whitespace-p230,9220
(defun magit-stage (&optional intent)magit-stage243,9702
(defun magit-stage-file (file)magit-stage-file268,11109
(defun magit-stage-modified (&optional all)magit-stage-modified287,11880
(defun magit-stage-1 (arg &optional files)magit-stage-1299,12349
(defun magit-stage-untracked (&optional intent)magit-stage-untracked306,12659
(defun magit-unstage ()magit-unstage356,14791
(defun magit-unstage-file (file)magit-unstage-file380,16174
(defun magit-unstage-1 (files)magit-unstage-1397,16878
(defun magit-unstage-all ()magit-unstage-all405,17163
(defun magit-discard ()magit-discard417,17537
(defun magit-discard-region (section)magit-discard-region431,18149
(defun magit-discard-hunk (section)magit-discard-hunk435,18285
(defun magit-discard-apply (section apply)magit-discard-apply439,18415
(defun magit-discard-hunks (sections)magit-discard-hunks452,18987
(defun magit-discard-apply-n (sections apply)magit-discard-apply-n458,19274
(defun magit-discard-file (section)magit-discard-file472,19910
(defun magit-discard-files (sections)magit-discard-files475,19987
(defun magit-discard-files--resolve (files)magit-discard-files--resolve520,22118
(defun magit-discard-files--resurrect (files)magit-discard-files--resurrect538,22952
(defun magit-discard-files--delete (files status)magit-discard-files--delete544,23165
(defun magit-discard-files--rename (files status)magit-discard-files--rename567,24359
(defun magit-discard-files--discard (sections new-files)magit-discard-files--discard583,24972
(defun magit-reverse (&rest args)magit-reverse614,26312
(defun magit-reverse-region (section args)magit-reverse-region630,27145
(defun magit-reverse-hunk (section args)magit-reverse-hunk634,27291
(defun magit-reverse-hunks (sections args)magit-reverse-hunks638,27431
(defun magit-reverse-file (section args)magit-reverse-file645,27686
(defun magit-reverse-files (sections args)magit-reverse-files648,27773
(defun magit-reverse-apply (section:s apply args)magit-reverse-apply668,28749
(defun magit-reverse-in-index (&rest args)magit-reverse-in-index674,28966

elpa/magit-2.90.1/magit-utils.el,4038
(defvar magit-wip-before-change-mode)magit-wip-before-change-mode59,2160
(defcustom magit-completing-read-function 'magit-builtin-completing-readmagit-completing-read-function65,2236
(defcustom magit-dwim-selectionmagit-dwim-selection87,3338
(defconst magit--confirm-actionsmagit--confirm-actions141,5679
(defcustom magit-no-confirm nilmagit-no-confirm153,6203
(defcustom magit-slow-confirm '(drop-stashes)magit-slow-confirm311,12745
(defcustom magit-no-message nilmagit-no-message327,13528
(defcustom magit-ellipsis ?…magit-ellipsis350,14526
(defcustom magit-update-other-window-delay 0.2magit-update-other-window-delay359,14812
(defcustom magit-view-git-manual-method 'infomagit-view-git-manual-method377,15571
(defvar helm-completion-in-region-default-sort-fn)helm-completion-in-region-default-sort-fn396,16327
(defvar ivy-sort-functions-alist)ivy-sort-functions-alist397,16378
(defvar magit-completing-read--silent-default nil)magit-completing-read--silent-default399,16413
(defun magit-completing-read (prompt collection &optionalmagit-completing-read401,16465
(defun magit--completion-table (collection)magit--completion-table474,19617
(defun magit-builtin-completing-readmagit-builtin-completing-read480,19840
(defun magit-completing-read-multiplemagit-completing-read-multiple494,20506
(defun magit-completing-read-multiple*magit-completing-read-multiple*527,21907
(defun magit-ido-completing-readmagit-ido-completing-read560,23602
(defun magit-prompt-with-default (prompt def)magit-prompt-with-default579,24480
(defvar magit-minibuffer-local-ns-mapmagit-minibuffer-local-ns-map585,24694
(defun magit-whitespace-disallowed ()magit-whitespace-disallowed592,24938
(defun magit-read-string (prompt &optional initial-input history default-valuemagit-read-string600,25164
(defun magit-read-string-ns (prompt &optional initial-input historymagit-read-string-ns637,26840
(defmacro magit-read-char-case (prompt verbose &rest clauses)magit-read-char-case643,27148
(defun magit-y-or-n-p (prompt &optional action)magit-y-or-n-p653,27564
(defvar magit--no-confirm-alistmagit--no-confirm-alist662,27928
(defun magit-confirm-files (action files &optional prompt)magit-confirm-files695,29551
(defun magit-confirm-make-prompt (action)magit-confirm-make-prompt704,29807
(defun magit-read-number-string (prompt &optional default)magit-read-number-string709,29997
(defun magit-emacs-Q-command ()magit-emacs-Q-command720,30347
(defmacro magit-bind-match-strings (varlist string &rest body)magit-bind-match-strings765,32290
(defun magit-delete-line ()magit-delete-line779,32882
(defun magit-delete-match (&optional num)magit-delete-match783,33004
(defun magit-file-line (file)magit-file-line789,33237
(defun magit-file-lines (file &optional keep-empty-lines)magit-file-lines797,33513
(defun magit-set-header-line-format (string)magit-set-header-line-format805,33866
(defun magit-face-property-all (face string)magit-face-property-all836,35262
(defun magit--format-spec (format specification)magit--format-spec847,35690
(defun magit-kill-this-buffer ()magit-kill-this-buffer885,37226
(defun magit-file-accessible-directory-p (filename)magit-file-accessible-directory-p892,37367
(defun magit-completion-pcm--all-completions (prefix pattern table pred)magit-completion-pcm--all-completions943,39695
(defvar whitespace-mode)whitespace-mode964,40621
(defun whitespace-dont-turn-on-in-magit-mode (fn)whitespace-dont-turn-on-in-magit-mode966,40647
(defun magit-custom-initialize-reset (symbol exp)magit-custom-initialize-reset991,41586
(defun magit-hook-custom-get (symbol)magit-hook-custom-get1009,42290
(defun Info-follow-nearest-node--magit-gitman (fn &optional fork)Info-follow-nearest-node--magit-gitman1038,43353
(defun org-man-export--magit-gitman (fn link description format)org-man-export--magit-gitman1059,44179
(defun magit-message (format-string &rest args)magit-message1083,44699
(defun magit-msg (format-string &rest args)magit-msg1091,45083

elpa/magit-2.90.1/git-rebase.el,3206
(defgroup git-rebase nilgit-rebase85,2984
(defcustom git-rebase-auto-advance tgit-rebase-auto-advance90,3113
(defcustom git-rebase-show-instructions tgit-rebase-show-instructions95,3246
(defcustom git-rebase-confirm-cancel tgit-rebase-confirm-cancel100,3393
(defgroup git-rebase-faces nilgit-rebase-faces107,3532
(defface git-rebase-hash '((t (:inherit magit-hash)))git-rebase-hash112,3637
(defface git-rebase-description nilgit-rebase-description116,3748
(defface git-rebase-killed-actiongit-rebase-killed-action120,3847
(defface git-rebase-comment-hashgit-rebase-comment-hash125,4017
(defface git-rebase-comment-headinggit-rebase-comment-heading130,4183
(defvar git-rebase-mode-mapgit-rebase-mode-map137,4352
(defvar git-rebase-command-descriptionsgit-rebase-command-descriptions202,7300
(defun git-rebase-pick ()git-rebase-pick219,8222
(defun git-rebase-reword ()git-rebase-reword224,8331
(defun git-rebase-edit ()git-rebase-edit229,8456
(defun git-rebase-squash ()git-rebase-squash234,8577
(defun git-rebase-fixup ()git-rebase-fixup239,8726
(defvar-local git-rebase-line nil)git-rebase-line244,8880
(defvar-local git-rebase-comment-re nil)git-rebase-comment-re245,8915
(defun git-rebase-set-action (action)git-rebase-set-action247,8957
(defun git-rebase-line-p (&optional pos)git-rebase-line-p257,9307
(defun git-rebase-region-bounds ()git-rebase-region-bounds263,9477
(defun git-rebase-move-line-down (n)git-rebase-move-line-down273,9882
(defun git-rebase-move-line-up (n)git-rebase-move-line-up307,11207
(defun git-rebase-highlight-region (start end window rol)git-rebase-highlight-region315,11496
(defun git-rebase-unhighlight-region (rol)git-rebase-unhighlight-region328,12106
(defun git-rebase-kill-line ()git-rebase-kill-line332,12281
(defun git-rebase-insert (rev)git-rebase-insert344,12654
(defun git-rebase-exec (arg)git-rebase-exec353,12986
(defun git-rebase-noop (&optional arg)git-rebase-noop383,14153
(defun git-rebase-undo (&optional arg)git-rebase-undo408,15202
(defun git-rebase--show-commit (&optional scroll)git-rebase--show-commit415,15386
(defun git-rebase-show-commit ()git-rebase-show-commit427,15852
(defun git-rebase-show-or-scroll-up ()git-rebase-show-or-scroll-up432,15979
(defun git-rebase-show-or-scroll-down ()git-rebase-show-or-scroll-down442,16330
(defun git-rebase-backward-line (&optional n)git-rebase-backward-line452,16687
(define-derived-mode git-rebase-mode special-mode "Git Rebase"git-rebase-mode461,16920
(defun git-rebase-cancel-confirm (force)git-rebase-cancel-confirm496,18697
(defun git-rebase-autostash-save ()git-rebase-autostash-save501,18854
(defun git-rebase-autostash-apply ()git-rebase-autostash-apply505,19019
(defun git-rebase-match-comment-line (limit)git-rebase-match-comment-line509,19145
(defun git-rebase-mode-font-lock-keywords ()git-rebase-mode-font-lock-keywords512,19258
(defun git-rebase-mode-show-keybindings ()git-rebase-mode-show-keybindings536,20190
(defun git-rebase-mode-disable-before-save-hook ()git-rebase-mode-disable-before-save-hook572,21920
(defconst git-rebase-filename-regexp "/git-rebase-todo\\'")git-rebase-filename-regexp578,22116

elpa/magit-2.90.1/magit-gitignore.el,318
(defun magit-gitignore-globally (file-or-pattern)magit-gitignore-globally46,1476
(defun magit-gitignore-locally (file-or-pattern)magit-gitignore-locally52,1695
(defun magit--gitignore (file-or-pattern local)magit--gitignore57,1893
(defun magit-gitignore-read-pattern (local)magit-gitignore-read-pattern76,2569

elpa/magit-2.90.1/magit-process.el,5937
(defcustom magit-process-connection-type (not (eq system-type 'cygwin))magit-process-connection-type52,1576
(defcustom magit-need-cygwin-noglobmagit-need-cygwin-noglob61,1947
(defcustom magit-process-popup-time -1magit-process-popup-time85,2942
(defcustom magit-process-log-max 32magit-process-log-max92,3232
(defcustom magit-process-error-tooltip-max-lines 20magit-process-error-tooltip-max-lines102,3702
(defcustom magit-credential-cache-daemon-socketmagit-credential-cache-daemon-socket114,4155
(defcustom magit-process-yes-or-no-prompt-regexpmagit-process-yes-or-no-prompt-regexp152,6095
(defcustom magit-process-password-prompt-regexpsmagit-process-password-prompt-regexps159,6353
(defcustom magit-process-find-password-functions nilmagit-process-find-password-functions172,6909
(defcustom magit-process-username-prompt-regexpsmagit-process-username-prompt-regexps191,7769
(defcustom magit-process-ensure-unix-line-ending tmagit-process-ensure-unix-line-ending198,8014
(defcustom magit-process-display-mode-line-error tmagit-process-display-mode-line-error204,8220
(defface magit-process-okmagit-process-ok210,8432
(defface magit-process-ngmagit-process-ng215,8573
(defface magit-mode-line-processmagit-mode-line-process220,8716
(defface magit-mode-line-process-errormagit-mode-line-process-error225,8888
(defvar magit-process-mode-mapmagit-process-mode-map234,9103
(define-derived-mode magit-process-mode magit-mode "Magit Process"magit-process-mode240,9261
(defun magit-process-buffer (&optional nodisplay)magit-process-buffer249,9647
(defun magit-process-kill ()magit-process-kill285,11155
(defvar magit-process-raise-error nil)magit-process-raise-error296,11471
(defun magit-git (&rest args)magit-git298,11511
(defun magit-run-git (&rest args)magit-run-git311,11963
(defvar magit-pre-call-git-hook nil)magit-pre-call-git-hook331,12730
(defun magit-call-git (&rest args)magit-call-git333,12768
(defun magit-call-process (program &rest args)magit-call-process348,13363
(defun magit-process-file (process &optional infile buffer display &rest args)magit-process-file359,13841
(defun magit-process-environment ()magit-process-environment368,14296
(defvar magit-this-process nil)magit-this-process386,15162
(defun magit-run-git-with-input (&rest args)magit-run-git-with-input388,15195
(defun magit-run-git-with-logfile (file &rest args)magit-run-git-with-logfile423,16787
(defun magit-run-git-async (&rest args)magit-run-git-async432,17112
(defun magit-run-git-with-editor (&rest args)magit-run-git-with-editor449,17800
(defun magit-run-git-sequencer (&rest args)magit-run-git-sequencer464,18394
(defvar magit-pre-start-git-hook nil)magit-pre-start-git-hook482,19167
(defun magit-start-git (input &rest args)magit-start-git484,19206
(defun magit-start-process (program &optional input &rest args)magit-start-process506,20134
(defun magit-parse-git-async (&rest args)magit-parse-git-async561,22618
(defun magit-process-setup (program args)magit-process-setup582,23459
(defun magit-process-insert-section (pwd program args &optional errcode errlog)magit-process-insert-section590,23778
(defun magit-process-truncate-log ()magit-process-truncate-log627,25581
(defun magit-process-sentinel (process event)magit-process-sentinel648,26380
(defun magit-sequencer-process-sentinel (process event)magit-sequencer-process-sentinel666,27168
(defun magit-process-filter (proc string)magit-process-filter687,28228
(defmacro magit-process-kill-on-abort (proc &rest body)magit-process-kill-on-abort708,29176
(defun magit-process-yes-or-no-prompt (process string)magit-process-yes-or-no-prompt721,29618
(defun magit-process-password-auth-source (key)magit-process-password-auth-source736,30120
(defun magit-process-password-prompt (process string)magit-process-password-prompt765,31238
(defun magit-process-username-prompt (process string)magit-process-username-prompt782,32108
(defun magit-process-match-prompt (prompts string)magit-process-match-prompt790,32459
(defun magit--process-coding-system ()magit--process-coding-system799,32902
(defvar magit-credential-hook nilmagit-credential-hook808,33288
(defvar magit-credential-cache-daemon-process nil)magit-credential-cache-daemon-process811,33367
(defun magit-maybe-start-credential-cache-daemon ()magit-maybe-start-credential-cache-daemon813,33419
(defun tramp-sh-handle-start-file-process--magit-tramp-process-environmenttramp-sh-handle-start-file-process--magit-tramp-process-environment845,35119
(defun tramp-sh-handle-process-file--magit-tramp-process-environmenttramp-sh-handle-process-file--magit-tramp-process-environment857,35635
(defvar magit-mode-line-process-mapmagit-mode-line-process-map868,36137
(defun magit-process-set-mode-line (program args)magit-process-set-mode-line875,36335
(defun magit-process-set-mode-line-error-status (&optional error str)magit-process-set-mode-line-error-status892,37177
(defun magit-process-unset-mode-line-error-status ()magit-process-unset-mode-line-error-status940,39665
(defun magit-process-unset-mode-line ()magit-process-unset-mode-line949,40053
(defvar magit-process-error-message-regexpsmagit-process-error-message-regexps957,40413
(define-error 'magit-git-error "Git error")magit-git-error962,40587
(defun magit-process-error-summary (process-buf section)magit-process-error-summary964,40632
(defun magit-process-error-tooltip (process-buf section)magit-process-error-tooltip982,41447
(defvar-local magit-this-error nil)magit-this-error1007,42454
(defvar magit-process-finish-apply-ansi-colors nil)magit-process-finish-apply-ansi-colors1009,42491
(defun magit-process-finish (arg &optional process-buf command-bufmagit-process-finish1011,42544
(defun magit-process-display-buffer (process)magit-process-display-buffer1081,45790
(defun magit--log-action (summary line list)magit--log-action1100,46691

elpa/magit-2.90.1/magit-branch.el,4377
(defcustom magit-branch-read-upstream-first tmagit-branch-read-upstream-first43,1417
(defcustom magit-branch-prefer-remote-upstream nilmagit-branch-prefer-remote-upstream58,2152
(defcustom magit-branch-adjust-remote-upstream-alist nilmagit-branch-adjust-remote-upstream-alist105,4170
(defcustom magit-branch-rename-push-target tmagit-branch-rename-push-target156,6395
(defcustom magit-branch-popup-show-variables tmagit-branch-popup-show-variables187,7785
(defcustom magit-published-branches '("origin/master")magit-published-branches197,8202
(defvar magit-branch-config-variables)magit-branch-config-variables205,8424
(defun magit-branch-popup-setup (val def)magit-branch-popup-setup232,9783
(defun magit-checkout (revision)magit-checkout242,10133
(defun magit-branch-create (branch start-point &optional args)magit-branch-create255,10678
(defun magit-branch-and-checkout (branch start-point &optional args)magit-branch-and-checkout264,11038
(defun magit-branch-or-checkout (arg &optional start-point)magit-branch-or-checkout275,11561
(defun magit-branch-checkout (branch &optional start-point)magit-branch-checkout298,12503
(defun magit-branch-maybe-adjust-upstream (branch start-point)magit-branch-maybe-adjust-upstream358,15310
(defun magit-branch-orphan (branch start-point &optional args)magit-branch-orphan371,15973
(defun magit-branch-pull-request (pr)magit-branch-pull-request378,16329
(defun magit-checkout-pull-request (pr)magit-checkout-pull-request441,19580
(defun magit-branch-read-args (prompt)magit-branch-read-args449,19900
(defun magit-branch-spinoff (branch &optional from &rest args)magit-branch-spinoff474,21144
(defun magit-branch-reset (branch to &optional args set-upstream)magit-branch-reset536,24127
(defun magit-branch-delete (branches &optional force)magit-branch-delete572,25770
(defun magit-branch-maybe-delete-pr-remote (branch)magit-branch-maybe-delete-pr-remote662,30132
(defun magit-branch-unset-pushRemote (branch)magit-branch-unset-pushRemote687,31465
(defun magit-delete-remote-branch-sentinel (refs process event)magit-delete-remote-branch-sentinel690,31560
(defun magit-branch-rename (old new &optional force)magit-branch-rename708,32376
(defun magit-branch-shelve (branch)magit-branch-shelve768,35428
(defun magit-branch-unshelve (branch)magit-branch-unshelve781,35932
(defun magit--rename-reflog-file (old new)magit--rename-reflog-file797,36494
(defvar magit-branch-config-branch nil)magit-branch-config-branch806,36773
(defun magit-branch-config-popup (branch)magit-branch-config-popup809,36829
(defvar magit-branch-config-variablesmagit-branch-config-variables820,37302
(defvar magit-branch-config-popupmagit-branch-config-popup852,38454
(defun magit-branch-config-popup-setup (val def)magit-branch-config-popup-setup857,38616
(defun magit-branch-config-branch (&optional prompt)magit-branch-config-branch865,39006
(defun magit-edit-branch*description (branch)magit-edit-branch*description878,39391
(defun magit-edit-branch*description-check-buffers ()magit-edit-branch*description-check-buffers887,39797
(defun magit-format-branch*description ()magit-format-branch*description898,40241
(defun magit-set-branch*merge/remote (branch upstream)magit-set-branch*merge/remote909,40746
(defun magit-format-branch*merge/remote ()magit-format-branch*merge/remote932,41793
(defun magit-cycle-branch*rebase (branch)magit-cycle-branch*rebase950,42629
(defun magit-format-branch*rebase ()magit-format-branch*rebase969,43449
(defun magit-cycle-branch*pushRemote (branch)magit-cycle-branch*pushRemote978,43712
(defun magit-format-branch*pushRemote ()magit-format-branch*pushRemote995,44503
(defun magit-cycle-pull.rebase ()magit-cycle-pull.rebase1004,44780
(defun magit-format-pull.rebase ()magit-format-pull.rebase1016,45227
(defun magit-cycle-remote.pushDefault ()magit-cycle-remote.pushDefault1021,45370
(defun magit-format-remote.pushDefault ()magit-format-remote.pushDefault1030,45740
(defun magit-cycle-branch*autoSetupMerge ()magit-cycle-branch*autoSetupMerge1035,45896
(defun magit-format-branch*autoSetupMerge ()magit-format-branch*autoSetupMerge1057,46756
(defun magit-cycle-branch*autoSetupRebase ()magit-cycle-branch*autoSetupRebase1062,46927
(defun magit-format-branch*autoSetupRebase ()magit-format-branch*autoSetupRebase1083,47762

elpa/magit-2.90.1/magit-fetch.el,760
(defcustom magit-fetch-modules-jobs 4magit-fetch-modules-jobs34,1078
(defun magit-git-fetch (remote args)magit-git-fetch62,2219
(defun magit-fetch-from-pushremote (args)magit-fetch-from-pushremote67,2354
(defun magit-fetch-from-upstream (args)magit-fetch-from-upstream77,2733
(defun magit-fetch-other (remote args)magit-fetch-other87,3110
(defun magit-fetch-branch (remote branch args)magit-fetch-branch94,3336
(defun magit-fetch-refspec (remote refspec args)magit-fetch-refspec104,3684
(defun magit-fetch-all (args)magit-fetch-all114,4037
(defun magit-fetch-all-prune ()magit-fetch-all-prune123,4380
(defun magit-fetch-all-no-prune ()magit-fetch-all-no-prune132,4666
(defun magit-fetch-modules (&optional all)magit-fetch-modules139,4841

elpa/magit-2.90.1/magit-commit.el,2713
(defcustom magit-commit-arguments nilmagit-commit-arguments41,1370
(defcustom magit-commit-ask-to-stage 'verbosemagit-commit-ask-to-stage46,1523
(defcustom magit-commit-show-diff tmagit-commit-show-diff54,1864
(defcustom magit-commit-extend-override-date tmagit-commit-extend-override-date60,2052
(defcustom magit-commit-reword-override-date tmagit-commit-reword-override-date66,2249
(defcustom magit-commit-squash-confirm tmagit-commit-squash-confirm72,2446
(defcustom magit-post-commit-hook nilmagit-post-commit-hook83,2947
(defvar magit-post-commit-hook-commandsmagit-post-commit-hook-commands97,3486
(defun magit-commit-popup (&optional arg)magit-commit-popup106,3675
(defvar magit-commit-popupmagit-commit-popup113,3902
(defun magit-commit-arguments nilmagit-commit-arguments140,5345
(defvar magit-gpg-secret-key-hist nil)magit-gpg-secret-key-hist145,5491
(defun magit-read-gpg-secret-key (prompt &optional _initial-input)magit-read-gpg-secret-key147,5531
(defun magit-read-reuse-message (prompt &optional default)magit-read-reuse-message162,6341
(defun magit-commit-create (&optional args)magit-commit-create172,6697
(defun magit-commit-amend (&optional args)magit-commit-amend186,7261
(defun magit-commit-extend (&optional args override-date)magit-commit-extend194,7508
(defun magit-commit-reword (&optional args override-date)magit-commit-reword213,8397
(defun magit-commit-fixup (&optional commit args)magit-commit-fixup234,9284
(defun magit-commit-squash (&optional commit args)magit-commit-squash245,9716
(defun magit-commit-augment (&optional commit args)magit-commit-augment256,10187
(defun magit-commit-instant-fixup (&optional commit args)magit-commit-instant-fixup267,10657
(defun magit-commit-instant-squash (&optional commit args)magit-commit-instant-squash274,10947
(defun magit-commit-squash-internalmagit-commit-squash-internal280,11225
(defun magit-commit-amend-assert (&optional commit)magit-commit-amend-assert325,13167
(defun magit-commit-assert (args &optional strict)magit-commit-assert334,13516
(defvar magit--reshelve-history nil)magit--reshelve-history368,14893
(defun magit-commit-reshelve (date)magit-commit-reshelve371,14946
(defun magit-commit-absorb (&optional commit args confirmed)magit-commit-absorb407,16625
(defun magit-commit-diff ()magit-commit-diff431,17677
(defun magit-commit-message-buffer ()magit-commit-message-buffer468,19310
(defvar magit-commit-add-log-insert-function 'magit-commit-add-log-insertmagit-commit-add-log-insert-function476,19673
(defun magit-commit-add-log ()magit-commit-add-log479,19810
(defun magit-commit-add-log-insert (buffer file defun)magit-commit-add-log-insert505,20801

elpa/magit-2.90.1/magit-tag.el,262
(defun magit-tag-create (name rev &optional args)magit-tag-create46,1594
(defun magit-tag-delete (tags)magit-tag-delete59,2143
(defun magit-tag-prune (tags remote-tags remote)magit-tag-prune71,2624
(defun magit-tag-release (tag)magit-tag-release100,3747

elpa/magit-2.90.1/magit-blame.el,5969
(defgroup magit-blame nilmagit-blame38,1189
(defcustom magit-blame-stylesmagit-blame-styles43,1306
(defcustom magit-blame-echo-style 'linesmagit-blame-echo-style115,4266
(defcustom magit-blame-time-format "%F %H:%M"magit-blame-time-format123,4550
(defcustom magit-blame-read-only tmagit-blame-read-only128,4683
(defcustom magit-blame-disable-modes '(fci-mode yascroll-bar-mode)magit-blame-disable-modes134,4857
(defcustom magit-blame-mode-lighter " Blame"magit-blame-mode-lighter141,5159
(defcustom magit-blame-goto-chunk-hookmagit-blame-goto-chunk-hook146,5333
(defface magit-blame-highlightmagit-blame-highlight159,5718
(defface magit-blame-marginmagit-blame-margin170,6040
(defface magit-blame-dimmedmagit-blame-dimmed178,6273
(defface magit-blame-headingmagit-blame-heading186,6500
(defface magit-blame-summary nilmagit-blame-summary194,6732
(defface magit-blame-hash nilmagit-blame-hash198,6838
(defface magit-blame-name nilmagit-blame-name202,6938
(defface magit-blame-date nilmagit-blame-date206,7051
(defclass magit-blame-chunk ()magit-blame-chunk212,7155
(defun magit-current-blame-chunk (&optional type)magit-current-blame-chunk224,7527
(defun magit-blame-chunk-at (pos)magit-blame-chunk-at244,8466
(defun magit-blame--overlay-at (&optional pos key)magit-blame--overlay-at248,8577
(defvar magit-blame-mode-mapmagit-blame-mode-map257,8815
(defvar magit-blame-read-only-mode-mapmagit-blame-read-only-mode-map265,9074
(defvar-local magit-blame-buffer-read-only nil)magit-blame-buffer-read-only298,10747
(defvar-local magit-blame-cache nil)magit-blame-cache299,10795
(defvar-local magit-blame-disabled-modes nil)magit-blame-disabled-modes300,10832
(defvar-local magit-blame-process nil)magit-blame-process301,10878
(defvar-local magit-blame-recursive-p nil)magit-blame-recursive-p302,10917
(defvar-local magit-blame-type nil)magit-blame-type303,10960
(defvar-local magit-blame-separator nil)magit-blame-separator304,10996
(defvar-local magit-blame-previous-chunk nil)magit-blame-previous-chunk305,11037
(defvar-local magit-blame--style nil)magit-blame--style307,11084
(defsubst magit-blame--style-get (key)magit-blame--style-get309,11123
(define-minor-mode magit-blame-modemagit-blame-mode314,11225
(defun magit-blame-goto-chunk-hook ()magit-blame-goto-chunk-hook360,13513
(defun magit-blame-toggle-read-only ()magit-blame-toggle-read-only367,13797
(define-minor-mode magit-blame-read-only-modemagit-blame-read-only-mode372,13917
(defun magit-blame-put-keymap-before-view-mode ()magit-blame-put-keymap-before-view-mode387,14446
(defun magit-blame--run ()magit-blame--run399,14948
(defun magit-blame-run-process (revision file args &optional lines)magit-blame-run-process415,15584
(defun magit-blame-process-quickstart-sentinel (process event)magit-blame-process-quickstart-sentinel426,16145
(defun magit-blame-process-sentinel (process _event &optional quiet)magit-blame-process-sentinel436,16595
(defun magit-blame-process-filter (process string)magit-blame-process-filter452,17273
(defun magit-blame--parse-chunk (type)magit-blame--parse-chunk476,18281
(defun magit-blame--commit-alist (rev)magit-blame--commit-alist504,19528
(defun magit-blame-assert-buffer (process)magit-blame-assert-buffer513,19900
(defun magit-blame--make-overlays (buf chunk revinfo)magit-blame--make-overlays520,20102
(defun magit-blame--make-margin-overlays (chunk revinfo _beg end)magit-blame--make-margin-overlays536,20732
(defun magit-blame--make-margin-overlay (chunk revinfo line)magit-blame--make-margin-overlay544,20978
(defun magit-blame--make-heading-overlay (chunk revinfo beg end)magit-blame--make-heading-overlay555,21491
(defun magit-blame--make-highlight-overlay (chunk beg)magit-blame--make-highlight-overlay562,21781
(defun magit-blame--update-margin ()magit-blame--update-margin568,22036
(defun magit-blame--update-overlays ()magit-blame--update-overlays572,22205
(defun magit-blame--update-margin-overlay (ov)magit-blame--update-margin-overlay583,22656
(defun magit-blame--update-heading-overlay (ov)magit-blame--update-heading-overlay604,23497
(defun magit-blame--update-highlight-overlay (ov)magit-blame--update-highlight-overlay620,24223
(defun magit-blame--format-string (ov format face)magit-blame--format-string623,24341
(defun magit-blame--format-string-1 (rev revinfo format face)magit-blame--format-string-1636,24851
(defun magit-blame--format-separator ()magit-blame--format-separator672,26697
(defun magit-blame--format-time-string (time tz)magit-blame--format-time-string679,26957
(defun magit-blame--remove-overlays (&optional beg end)magit-blame--remove-overlays689,27456
(defun magit-blame-maybe-show-message ()magit-blame-maybe-show-message697,27727
(defun magit-blame-echo ()magit-blame-echo712,28323
(defun magit-blame-addition ()magit-blame-addition731,29038
(defun magit-blame-removal ()magit-blame-removal739,29270
(defun magit-blame-reverse ()magit-blame-reverse749,29597
(defun magit-blame--pre-blame-assert (type)magit-blame--pre-blame-assert758,29911
(defun magit-blame--pre-blame-setup (type)magit-blame--pre-blame-setup772,30529
(defun magit-blame-visit-other-file ()magit-blame-visit-other-file784,30968
(defun magit-blame-visit-file ()magit-blame-visit-file797,31413
(defun magit-blame-quit ()magit-blame-quit807,31724
(defun magit-blame-next-chunk ()magit-blame-next-chunk816,31954
(defun magit-blame-previous-chunk ()magit-blame-previous-chunk823,32163
(defun magit-blame-next-chunk-same-commit (&optional previous)magit-blame-next-chunk-same-commit830,32384
(defun magit-blame-previous-chunk-same-commit ()magit-blame-previous-chunk-same-commit851,33367
(defun magit-blame-cycle-style ()magit-blame-cycle-style856,33564
(defun magit-blame-copy-hash ()magit-blame-copy-hash867,33968
(defun magit-blame-maybe-update-revision-buffer ()magit-blame-maybe-update-revision-buffer912,35853

elpa/magit-2.90.1/magit-push.el,1603
(defcustom magit-push-current-set-remote-if-missing tmagit-push-current-set-remote-if-missing37,1122
(defun magit-git-push (branch target args)magit-git-push95,3848
(defun magit-push-current-to-pushremote (args &optional push-remote)magit-push-current-to-pushremote103,4149
(defun magit--push-current-set-pushremote-p (&optional change)magit--push-current-set-pushremote-p133,5696
(defun magit--push-current-to-pushremote-desc ()magit--push-current-to-pushremote-desc139,5919
(defun magit-push-current-to-upstream (args &optional upstream)magit-push-current-to-upstream151,6365
(defun magit--push-current-set-upstream-p (&optional change)magit--push-current-set-upstream-p171,7218
(defun magit--push-current-to-upstream-desc ()magit--push-current-to-upstream-desc177,7443
(defun magit-push-current (target args)magit-push-current185,7741
(defun magit-push-other (source target args)magit-push-other196,8183
(defvar magit-push-refspecs-history nil)magit-push-refspecs-history214,8930
(defun magit-push-refspecs (remote refspecs args)magit-push-refspecs217,8987
(defun magit-push-matching (remote &optional args)magit-push-matching235,9768
(defun magit-push-tags (remote &optional args)magit-push-tags245,10217
(defun magit-push-tag (tag remote &optional args)magit-push-tag256,10670
(defun magit-push-implicitly (args)magit-push-implicitly266,11030
(defun magit-push-implicitly--desc ()magit-push-implicitly--desc290,11990
(defun magit-push-to-remote (remote args)magit-push-to-remote318,13315
(defun magit-push-to-remote--desc ()magit-push-to-remote--desc340,14233

elpa/magit-2.90.1/magit-files.el,3002
(defvar magit-find-file-hook nil)magit-find-file-hook40,1280
(defun magit-find-file (rev file)magit-find-file44,1381
(defun magit-find-file-other-window (rev file)magit-find-file-other-window52,1649
(defun magit-find-file-read-args (prompt)magit-find-file-read-args59,1957
(defun magit-find-file-noselect (rev file)magit-find-file-noselect63,2127
(defun magit-find-file-noselect-1 (rev file hookvar &optional revert)magit-find-file-noselect-168,2356
(defun magit-get-revision-buffer-create (rev file)magit-get-revision-buffer-create93,3549
(defun magit-get-revision-buffer (rev file &optional create)magit-get-revision-buffer96,3643
(defun magit-revert-rev-file-buffer (_ignore-auto noconfirm)magit-revert-rev-file-buffer101,3893
(defvar magit-find-index-hook nil)magit-find-index-hook129,5159
(defun magit-find-file-index-noselect (file &optional revert)magit-find-file-index-noselect131,5195
(defun magit-update-index ()magit-update-index137,5506
(defun magit-find-git-config-file (filename &optional wildcards)magit-find-git-config-file171,7068
(defun magit-find-git-config-file-other-window (filename &optional wildcards)magit-find-git-config-file-other-window187,7705
(defun magit-find-git-config-file-other-frame (filename &optional wildcards)magit-find-git-config-file-other-frame203,8416
(defvar magit-file-mode-mapmagit-file-mode-map221,9137
(defvar magit-file-mode-lighter "")magit-file-mode-lighter259,10795
(define-minor-mode magit-file-modemagit-file-mode261,10832
(defun magit-file-mode-turn-on ()magit-file-mode-turn-on270,11111
(define-globalized-minor-mode global-magit-file-modeglobal-magit-file-mode276,11247
(defvar magit-blob-mode-mapmagit-blob-mode-map293,11884
(define-minor-mode magit-blob-modemagit-blob-mode311,12609
(defun magit-blob-next ()magit-blob-next318,12821
(defun magit-blob-previous ()magit-blob-previous330,13359
(defun magit-blob-visit (blob-or-file line)magit-blob-visit340,13814
(defun magit-blob-ancestor (rev file)magit-blob-ancestor351,14191
(defun magit-blob-successor (rev file)magit-blob-successor357,14460
(defun magit-file-rename (file newname)magit-file-rename369,14871
(defun magit-file-untrack (files &optional force)magit-file-untrack399,16200
(defun magit-file-delete (files &optional force)magit-file-delete413,16917
(defun magit-file-checkout (rev file)magit-file-checkout431,17689
(defvar magit-read-file-hist nil)magit-read-file-hist442,18029
(defun magit-read-file-from-rev (rev prompt &optional default)magit-read-file-from-rev444,18064
(defun magit-read-file (prompt &optional tracked-only)magit-read-file450,18312
(defun magit-read-tracked-file (prompt)magit-read-tracked-file459,18708
(defun magit-read-file-choice (prompt files &optional error default)magit-read-file-choice462,18779
(defun magit-read-changed-file (rev-or-range prompt &optional default)magit-read-changed-file478,19372
(defun magit-read-files (prompt initial-contents)magit-read-files485,19578

elpa/magit-2.90.1/magit-extras.el,1977
(defgroup magit-extras nilmagit-extras34,1091
(defcustom magit-gitk-executablemagit-gitk-executable40,1207
(defun magit-run-git-gui ()magit-run-git-gui53,1651
(defun magit-run-git-gui-blame (commit filename &optional linenum)magit-run-git-gui-blame60,1848
(defun magit-run-gitk ()magit-run-gitk85,2997
(defun magit-run-gitk-branches ()magit-run-gitk-branches91,3148
(defun magit-run-gitk-all ()magit-run-gitk-all97,3336
(defun ido-enter-magit-status ()ido-enter-magit-status105,3526
(defun magit-dired-jump (&optional other-window)magit-dired-jump133,4510
(defun magit-dired-log (&optional follow)magit-dired-log145,5010
(defun magit-do-async-shell-command (file)magit-do-async-shell-command167,5888
(defun magit--turn-on-shift-select-mode-p ()magit--turn-on-shift-select-mode-p180,6362
(defun magit-previous-line (&optional arg try-vscroll)magit-previous-line187,6572
(defun magit-next-line (&optional arg try-vscroll)magit-next-line210,7605
(defun magit-clean (&optional arg)magit-clean234,8583
(defun magit-add-change-log-entry (&optional whoami file-name other-window)magit-add-change-log-entry253,9233
(defun magit-add-change-log-entry-other-window (&optional whoami file-name)magit-add-change-log-entry-other-window271,9944
(defun magit-edit-line-commit (&optional type)magit-edit-line-commit284,10488
(defun magit-diff-edit-hunk-commit ()magit-diff-edit-hunk-commit324,12357
(defun magit-reshelve-since (rev)magit-reshelve-since354,13558
(defvar magit-revision-stack nil)magit-revision-stack425,16784
(defcustom magit-pop-revision-stack-formatmagit-pop-revision-stack-format427,16819
(defun magit-pop-revision-stack (rev toplevel)magit-pop-revision-stack473,19095
(define-key git-commit-mode-mapgit-commit-mode-map549,22535
(defun magit-copy-section-value ()magit-copy-section-value553,22628
(defun magit-copy-buffer-revision ()magit-copy-buffer-revision591,24176
(defun magit-abort-dwim ()magit-abort-dwim638,26250

elpa/magit-2.90.1/magit-patch.el,376
(defcustom magit-patch-save-arguments '(exclude "--stat")magit-patch-save-arguments37,1123
(defun magit-format-patch (range args files)magit-format-patch77,2908
(defun magit-request-pull (url start end)magit-request-pull104,4065
(defun magit-patch-apply (file &rest args)magit-patch-apply134,5295
(defun magit-patch-save (file &optional arg)magit-patch-save145,5809

elpa/magit-2.90.1/magit.el,2799
(defconst magit--minimal-git "2.0.0")magit--minimal-git67,2308
(defconst magit--minimal-emacs "25.1")magit--minimal-emacs68,2346
(defface magit-header-linemagit-header-line72,2397
(defface magit-header-line-keymagit-header-line-key80,2674
(defface magit-dimmedmagit-dimmed85,2803
(defface magit-hashmagit-hash91,3018
(defface magit-tagmagit-tag97,3233
(defface magit-branch-remotemagit-branch-remote103,3459
(defface magit-branch-remote-headmagit-branch-remote-head109,3713
(defface magit-branch-localmagit-branch-local115,3955
(defface magit-branch-currentmagit-branch-current121,4170
(defface magit-branch-upstreammagit-branch-upstream127,4406
(defface magit-headmagit-head135,4651
(defface magit-refnamemagit-refname141,4872
(defface magit-refname-stashmagit-refname-stash147,5092
(defface magit-refname-wipmagit-refname-wip152,5206
(defface magit-refname-pullreqmagit-refname-pullreq157,5316
(defface magit-keywordmagit-keyword162,5434
(defface magit-keyword-squashmagit-keyword-squash167,5576
(defface magit-signature-goodmagit-signature-good172,5732
(defface magit-signature-badmagit-signature-bad177,5845
(defface magit-signature-untrustedmagit-signature-untrusted182,5967
(defface magit-signature-expiredmagit-signature-expired187,6094
(defface magit-signature-expired-keymagit-signature-expired-key192,6224
(defface magit-signature-revokedmagit-signature-revoked197,6375
(defface magit-signature-errormagit-signature-error202,6513
(defface magit-cherry-unmatchedmagit-cherry-unmatched207,6669
(defface magit-cherry-equivalentmagit-cherry-equivalent212,6792
(defface magit-filenamemagit-filename217,6920
(defvar magit-dispatch-popup-mapmagit-dispatch-popup-map285,10318
(defun magit-dispatch-popup-setup (val def)magit-dispatch-popup-setup297,10795
(defcustom magit-shell-command-verbose-prompt tmagit-shell-command-verbose-prompt312,11422
(defvar magit-git-command-history nil)magit-git-command-history320,11738
(defun magit-git-command (command)magit-git-command337,12540
(defun magit-git-command-topdir (command)magit-git-command-topdir349,12999
(defun magit-shell-command (command)magit-shell-command361,13423
(defun magit-shell-command-topdir (command)magit-shell-command-topdir371,13795
(defun magit--shell-command (command &optional directory)magit--shell-command379,14121
(defun magit-read-shell-command (&optional toplevel initial-input)magit-read-shell-command387,14466
(defconst magit-font-lock-keywordsmagit-font-lock-keywords400,15034
(defvar magit-version 'undefinedmagit-version420,15769
(defun magit-version (&optional print-dest)magit-version425,15923
(defun magit-debug-git-executable ()magit-debug-git-executable507,19591
(defun magit-startup-asserts ()magit-startup-asserts543,21383

elpa/magit-2.90.1/magit-pull.el,359
(defun magit-pull-format-branch*rebase ()magit-pull-format-branch*rebase108,4525
(defun magit-git-pull (source args)magit-git-pull114,4728
(defun magit-pull-from-pushremote (args)magit-pull-from-pushremote121,4963
(defun magit-pull-from-upstream (args)magit-pull-from-upstream131,5338
(defun magit-pull-branch (source args)magit-pull-branch143,5829

elpa/magit-2.90.1/magit-subtree.el,781
(defun magit-subtree-read-prefix (prompt &optional default)magit-subtree-read-prefix55,2129
(defun magit-subtree-prefix (prompt)magit-subtree-prefix68,2637
(defun magit-subtree-args ()magit-subtree-args74,2841
(defun magit-git-subtree (subcmd prefix &rest args)magit-git-subtree87,3424
(defun magit-subtree-add (prefix repository ref args)magit-subtree-add91,3567
(defun magit-subtree-add-commit (prefix commit args)magit-subtree-add-commit102,3997
(defun magit-subtree-merge (prefix commit args)magit-subtree-merge110,4312
(defun magit-subtree-pull (prefix repository ref args)magit-subtree-pull118,4630
(defun magit-subtree-push (prefix repository ref args)magit-subtree-push129,5066
(defun magit-subtree-split (prefix commit args)magit-subtree-split138,5500

elpa/magit-2.90.1/magit-diff.el,14581
(defvar gravatar-size)gravatar-size46,1647
(defvar magit-blame-mode)magit-blame-mode52,1926
(defvar git-rebase-line)git-rebase-line53,1952
(defvar bookmark-make-record-function)bookmark-make-record-function61,2183
(defgroup magit-diff nilmagit-diff66,2251
(defcustom magit-diff-mode-hook nilmagit-diff-mode-hook71,2376
(defcustom magit-diff-arguments '("--stat" "--no-ext-diff")magit-diff-arguments76,2494
(defcustom magit-diff-sections-hookmagit-diff-sections-hook82,2732
(defcustom magit-diff-expansion-threshold 60magit-diff-expansion-threshold90,2961
(defcustom magit-diff-highlight-hunk-body tmagit-diff-highlight-hunk-body108,3660
(defcustom magit-diff-highlight-hunk-region-functionsmagit-diff-highlight-hunk-region-functions116,3949
(defcustom magit-diff-unmarked-lines-keep-foreground tmagit-diff-unmarked-lines-keep-foreground149,5535
(defcustom magit-diff-refine-hunk nilmagit-diff-refine-hunk158,5913
(defcustom magit-diff-adjust-tab-width nilmagit-diff-adjust-tab-width172,6421
(defcustom magit-diff-paint-whitespace tmagit-diff-paint-whitespace200,7531
(defcustom magit-diff-highlight-trailing tmagit-diff-highlight-trailing212,8007
(defcustom magit-diff-highlight-indentation nilmagit-diff-highlight-indentation219,8232
(defcustom magit-diff-hide-trailing-cr-charactersmagit-diff-hide-trailing-cr-characters238,9136
(defcustom magit-diff-visit-previous-blob tmagit-diff-visit-previous-blob245,9379
(defcustom magit-diff-highlight-keywords tmagit-diff-highlight-keywords259,9899
(defcustom magit-diff-buffer-file-locked tmagit-diff-buffer-file-locked267,10101
(defgroup magit-revision nilmagit-revision276,10329
(defcustom magit-revision-mode-hook '(bug-reference-mode)magit-revision-mode-hook281,10468
(defcustom magit-revision-sections-hookmagit-revision-sections-hook287,10649
(defcustom magit-revision-headers-format "\magit-revision-headers-format299,11029
(defcustom magit-revision-insert-related-refs tmagit-revision-insert-related-refs316,11600
(defcustom magit-revision-use-hash-sections 'quickermagit-revision-use-hash-sections330,12164
(defcustom magit-revision-show-gravatars nilmagit-revision-show-gravatars354,13233
(defcustom magit-revision-use-gravatar-kludge nilmagit-revision-use-gravatar-kludge379,14505
(defcustom magit-revision-fill-summary-line nilmagit-revision-fill-summary-line398,15214
(defcustom magit-diff-section-arguments '("--no-ext-diff")magit-diff-section-arguments418,16009
(defface magit-diff-file-headingmagit-diff-file-heading429,16331
(defface magit-diff-file-heading-highlightmagit-diff-file-heading-highlight434,16443
(defface magit-diff-file-heading-selectionmagit-diff-file-heading-selection439,16595
(defface magit-diff-hunk-headingmagit-diff-hunk-heading449,16941
(defface magit-diff-hunk-heading-highlightmagit-diff-hunk-heading-highlight459,17217
(defface magit-diff-hunk-heading-selectionmagit-diff-hunk-heading-selection469,17511
(defface magit-diff-hunk-regionmagit-diff-hunk-region479,17857
(defface magit-diff-lines-headingmagit-diff-lines-heading491,18323
(defface magit-diff-lines-boundarymagit-diff-lines-boundary502,18698
(defface magit-diff-conflict-headingmagit-diff-conflict-heading507,18852
(defface magit-diff-addedmagit-diff-added512,18986
(defface magit-diff-removedmagit-diff-removed522,19277
(defface magit-diff-ourmagit-diff-our532,19566
(defface magit-diff-basemagit-diff-base537,19708
(defface magit-diff-theirmagit-diff-their547,20009
(defface magit-diff-contextmagit-diff-context552,20153
(defface magit-diff-added-highlightmagit-diff-added-highlight558,20379
(defface magit-diff-removed-highlightmagit-diff-removed-highlight568,20680
(defface magit-diff-our-highlightmagit-diff-our-highlight578,20985
(defface magit-diff-base-highlightmagit-diff-base-highlight583,21147
(defface magit-diff-their-highlightmagit-diff-their-highlight593,21458
(defface magit-diff-context-highlightmagit-diff-context-highlight598,21622
(defface magit-diff-whitespace-warningmagit-diff-whitespace-warning608,21923
(defface magit-diffstat-addedmagit-diffstat-added613,22081
(defface magit-diffstat-removedmagit-diffstat-removed619,22298
(defconst magit-diff-popup-common-keywordsmagit-diff-popup-common-keywords628,22549
(defconst magit-diff-popup-common-optionsmagit-diff-popup-common-options632,22665
(defconst magit-diff-popup-common-switchesmagit-diff-popup-common-switches641,23022
(defvar magit-diff-popupmagit-diff-popup647,23318
(defvar magit-diff-refresh-popupmagit-diff-refresh-popup663,24023
(defvar magit-diff-mode-refresh-popupmagit-diff-mode-refresh-popup674,24591
(defvar magit-revision-mode-refresh-popupmagit-revision-mode-refresh-popup688,25353
(defvar magit-diff-section-file-args nil)magit-diff-section-file-args705,26226
(defun magit-diff-get-buffer-args ()magit-diff-get-buffer-args712,26461
(defun magit-diff-arguments (&optional refresh)magit-diff-arguments725,27009
(defun magit-diff-popup (arg)magit-diff-popup735,27425
(defun magit-diff-buffer-file-popup ()magit-diff-buffer-file-popup748,28024
(defun magit-diff-refresh-popup (arg)magit-diff-refresh-popup766,28741
(defun magit-diff-select-algorithm (&rest _ignore)magit-diff-select-algorithm782,29546
(defun magit-diff-select-ignore-submodules (&rest _ignored)magit-diff-select-ignore-submodules789,29765
(defun magit-diff-dwim (&optional args files)magit-diff-dwim798,30005
(defun magit-diff--dwim ()magit-diff--dwim818,30838
(defun magit-diff-read-range-or-commit (prompt &optional secondary-default mbase)magit-diff-read-range-or-commit876,32947
(defun magit-diff-setup (rev-or-range const args files)magit-diff-setup908,34442
(defun magit-diff-range (rev-or-range &optional args files)magit-diff-range913,34603
(defun magit-diff-working-tree (&optional rev args files)magit-diff-working-tree932,35484
(defun magit-diff-staged (&optional rev args files)magit-diff-staged943,35942
(defun magit-diff-unstaged (&optional args files)magit-diff-unstaged954,36367
(defun magit-diff-unmerged (&optional args files)magit-diff-unmerged960,36570
(defun magit-diff-while-committing (&optional args)magit-diff-while-committing968,36855
(define-key git-commit-mode-mapgit-commit-mode-map996,38091
(defun magit-diff-while-amending (&optional args)magit-diff-while-amending999,38172
(defun magit-diff-buffer-file ()magit-diff-buffer-file1003,38295
(defun magit-diff-paths (a b)magit-diff-paths1019,39005
(defvar-local magit-buffer-revision-hash nil)magit-buffer-revision-hash1029,39490
(defun magit-show-commit--arguments ()magit-show-commit--arguments1031,39537
(defun magit-show-commit (rev &optional args files module)magit-show-commit1039,39866
(defun magit-diff-refresh (args files)magit-diff-refresh1067,41039
(defun magit-diff-set-default-arguments (args files)magit-diff-set-default-arguments1077,41427
(defun magit-diff-save-default-arguments (args files)magit-diff-save-default-arguments1089,41969
(defun magit-diff-switch-range-type ()magit-diff-switch-range-type1101,42523
(defun magit-diff-flip-revs ()magit-diff-flip-revs1119,43183
(defvar-local magit-diff--last-file-args nil)magit-diff--last-file-args1135,43733
(defun magit-diff--toggle-file-args (files)magit-diff--toggle-file-args1136,43779
(defun magit-diff-toggle-file-filter ()magit-diff-toggle-file-filter1144,44013
(defun magit-diff-less-context (&optional count)magit-diff-less-context1163,44856
(defun magit-diff-more-context (&optional count)magit-diff-more-context1168,45056
(defun magit-diff-default-context ()magit-diff-default-context1173,45248
(defun magit-diff-set-context (fn)magit-diff-set-context1178,45395
(defun magit-diff-context-p ()magit-diff-context-p1192,46031
(defun magit-diff-ignore-any-space-p ()magit-diff-ignore-any-space-p1198,46211
(defun magit-diff-toggle-refine-hunk (&optional style)magit-diff-toggle-refine-hunk1207,46531
(defun magit-diff-visit-filemagit-diff-visit-file1230,47416
(defun magit-diff-visit-file-other-window (file)magit-diff-visit-file-other-window1313,51155
(defvar magit-display-file-buffer-functionmagit-display-file-buffer-function1330,51935
(defun magit-display-file-buffer (buffer)magit-display-file-buffer1340,52357
(defun magit-display-file-buffer-traditional (buffer)magit-display-file-buffer-traditional1343,52455
(defun magit-display-file-buffer-other-window (buffer)magit-display-file-buffer-other-window1352,52828
(defun magit-diff-visit-file-worktree (file &optional other-window)magit-diff-visit-file-worktree1361,53202
(defun magit-diff-visit--range-end ()magit-diff-visit--range-end1381,54058
(defun magit-diff-visit--range-beginning ()magit-diff-visit--range-beginning1392,54346
(defun magit-diff-visit--hunk ()magit-diff-visit--hunk1401,54582
(defun magit-diff-visit--offset (file rev hunk-start line-offset)magit-diff-visit--offset1422,55365
(defun magit-diff-hunk-line (section)magit-diff-hunk-line1452,56648
(defun magit-diff-hunk-column (section visit-beginning)magit-diff-hunk-column1483,57847
(defun magit-diff-visit-directory (directory &optional other-window)magit-diff-visit-directory1492,58165
(defun magit-diff-show-or-scroll-up ()magit-diff-show-or-scroll-up1504,58591
(defun magit-diff-show-or-scroll-down ()magit-diff-show-or-scroll-down1515,59041
(defun magit-diff-show-or-scroll (fn)magit-diff-show-or-scroll1526,59497
(defvar magit-diff-mode-mapmagit-diff-mode-map1579,61592
(define-derived-mode magit-diff-mode magit-mode "Magit Diff"magit-diff-mode1592,62097
(defun magit-diff-refresh-buffer (rev-or-range const _args files)magit-diff-refresh-buffer1622,63175
(defun magit-insert-diff (rev-or-range)magit-insert-diff1647,64288
(defvar magit-file-section-mapmagit-file-section-map1658,64755
(defvar magit-hunk-section-mapmagit-hunk-section-map1676,65574
(defconst magit-diff-headline-remagit-diff-headline-re1694,66393
(defconst magit-diff-statline-remagit-diff-statline-re1699,66583
(defun magit-diff-wash-diffs (args &optional limit)magit-diff-wash-diffs1707,66831
(defun magit-jump-to-diffstat-or-diff ()magit-jump-to-diffstat-or-diff1715,67138
(defun magit-diff-wash-diffstat ()magit-diff-wash-diffstat1730,67780
(defun magit-diff-wash-diff (args)magit-diff-wash-diff1769,69550
(defun magit-diff-insert-file-section (file orig status modes header)magit-diff-insert-file-section1857,73679
(defun magit-diff-wash-submodule ()magit-diff-wash-submodule1875,74420
(defun magit-diff-wash-hunk ()magit-diff-wash-hunk1937,77206
(defun magit-diff-expansion-threshold (section)magit-diff-expansion-threshold1951,77779
(define-derived-mode magit-revision-mode magit-diff-mode "Magit Rev"magit-revision-mode1960,78085
(defun magit-revision-refresh-buffer (rev __const _args files)magit-revision-refresh-buffer1986,78991
(defun magit-insert-revision-diff (rev)magit-insert-revision-diff2000,79540
(defun magit-insert-revision-tag (rev)magit-insert-revision-tag2015,80299
(defvar magit-commit-message-section-mapmagit-commit-message-section-map2051,82030
(defun magit-insert-revision-message (rev)magit-insert-revision-message2057,82226
(defun magit-insert-revision-notes (rev)magit-insert-revision-notes2120,85338
(defun magit-revision--wash-message ()magit-revision--wash-message2147,86585
(defun magit-insert-revision-headers (rev)magit-insert-revision-headers2156,86864
(defun magit--insert-related-refs (rev arg title remote)magit--insert-related-refs2201,88985
(defun magit-insert-revision-gravatars (rev beg)magit-insert-revision-gravatars2216,89638
(defun magit-insert-revision-gravatar (beg rev email regexp)magit-insert-revision-gravatar2231,90357
(defun magit-insert-revision-gravatar-cb (image rev marker align-to column)magit-insert-revision-gravatar-cb2247,91096
(defvar magit-unstaged-section-mapmagit-unstaged-section-map2278,92512
(defun magit-insert-unstaged-changes ()magit-insert-unstaged-changes2289,92925
(defvar magit-staged-section-mapmagit-staged-section-map2297,93236
(defun magit-insert-staged-changes ()magit-insert-staged-changes2309,93712
(defun magit-diff-type (&optional section)magit-diff-type2321,94149
(defun magit-diff-use-hunk-region-p ()magit-diff-use-hunk-region-p2427,99040
(defun magit-diff-unhighlight (section selection)magit-diff-unhighlight2443,99764
(defun magit-diff-highlight (section selection)magit-diff-highlight2449,99969
(defun magit-diff-highlight-recursive (section &optional selection)magit-diff-highlight-recursive2472,100919
(defun magit-diff-highlight-list (section &optional selection)magit-diff-highlight-list2480,101308
(defun magit-diff-highlight-file (section &optional selection)magit-diff-highlight-file2499,102197
(defun magit-diff-highlight-heading (section &optional selection)magit-diff-highlight-heading2505,102446
(defvar magit-diff--tab-width-cache nil)magit-diff--tab-width-cache2585,106220
(defun magit-diff-tab-width (file)magit-diff-tab-width2587,106262
(defun magit-diff-paint-tab (merging width)magit-diff-paint-tab2614,107307
(defun magit-diff-paint-whitespace (merging)magit-diff-paint-whitespace2622,107577
(defun magit-diff-update-hunk-refinement (&optional section)magit-diff-update-hunk-refinement2650,109036
(defun magit-diff-hunk-region-beginning ()magit-diff-hunk-region-beginning2680,110267
(defun magit-diff-hunk-region-end ()magit-diff-hunk-region-end2684,110406
(defun magit-diff-update-hunk-region (section)magit-diff-update-hunk-region2688,110527
(defun magit-diff-highlight-hunk-region-dim-outside (section)magit-diff-highlight-hunk-region-dim-outside2700,111020
(defun magit-diff-highlight-hunk-region-using-face (_section)magit-diff-highlight-hunk-region-using-face2718,111970
(defun magit-diff-highlight-hunk-region-using-overlays (section)magit-diff-highlight-hunk-region-using-overlays2727,112433
(defun magit-diff-highlight-hunk-region-using-underline (section)magit-diff-highlight-hunk-region-using-underline2741,113186
(defun magit-diff--make-hunk-overlay (start end &rest args)magit-diff--make-hunk-overlay2765,114406
(defun magit-diff--hunk-after-string (face)magit-diff--hunk-after-string2772,114647
(defun magit-diff-inside-hunk-body-p ()magit-diff-inside-hunk-body-p2786,115169
(defun magit-diff-file-header (section)magit-diff-file-header2794,115391
(defun magit-diff-hunk-region-header (section)magit-diff-hunk-region-header2800,115580
(defun magit-diff-hunk-region-patch (section &optional args)magit-diff-hunk-region-patch2805,115759

elpa/magit-2.90.1/magit-mode.el,7766
(defvar git-commit-mode)git-commit-mode42,1406
(defvar magit-diff-show-xref-buttons)magit-diff-show-xref-buttons44,1479
(defvar magit-revision-show-xref-buttons)magit-revision-show-xref-buttons45,1517
(defvar magit-post-commit-hook-commands)magit-post-commit-hook-commands47,1582
(defvar magit-post-stage-hook-commands)magit-post-stage-hook-commands48,1623
(defvar magit-post-unstage-hook-commands)magit-post-unstage-hook-commands49,1663
(defcustom magit-mode-hookmagit-mode-hook62,2095
(defcustom magit-mode-setup-hookmagit-mode-setup-hook72,2379
(defcustom magit-pre-refresh-hook '(magit-maybe-save-repository-buffers)magit-pre-refresh-hook88,2972
(defcustom magit-post-refresh-hook nilmagit-post-refresh-hook102,3469
(defcustom magit-display-buffer-function 'magit-display-buffer-traditionalmagit-display-buffer-function115,3880
(defcustom magit-pre-display-buffer-hook '(magit-save-window-configuration)magit-pre-display-buffer-hook131,4691
(defcustom magit-post-display-buffer-hook '(magit-maybe-set-dedicated)magit-post-display-buffer-hook139,4990
(defcustom magit-generate-buffer-name-functionmagit-generate-buffer-name-function147,5277
(defcustom magit-buffer-name-format "%x%M%v: %t%x"magit-buffer-name-format155,5618
(defcustom magit-uniquify-buffer-names tmagit-uniquify-buffer-names197,7119
(defcustom magit-bury-buffer-function 'magit-restore-window-configurationmagit-bury-buffer-function203,7293
(defcustom magit-use-sticky-arguments tmagit-use-sticky-arguments212,7705
(defcustom magit-region-highlight-hookmagit-region-highlight-hook249,9310
(defcustom magit-create-buffer-hook nilmagit-create-buffer-hook261,9782
(defcustom magit-refresh-buffer-hook nilmagit-refresh-buffer-hook267,9963
(defcustom magit-refresh-status-buffer tmagit-refresh-status-buffer273,10150
(defcustom magit-refresh-verbose nilmagit-refresh-verbose287,10629
(defcustom magit-save-repository-buffers tmagit-save-repository-buffers293,10794
(defcustom magit-keep-region-overlay nilmagit-keep-region-overlay310,11472
(defvar magit-mode-mapmagit-mode-map359,13861
(defun magit-delete-thing ()magit-delete-thing468,19662
(defun magit-visit-thing ()magit-visit-thing475,19908
(defun magit-edit-thing ()magit-edit-thing485,20321
(defun magit-browse-thing ()magit-browse-thing495,20765
(defun magit-load-config-extensions ()magit-load-config-extensions552,22631
(define-derived-mode magit-mode special-mode "Magit"magit-mode559,22898
(defvar-local magit-region-overlays nil)magit-region-overlays588,24245
(defun magit-delete-region-overlays ()magit-delete-region-overlays590,24287
(defun magit-highlight-region (start end window rol)magit-highlight-region594,24411
(defun magit-unhighlight-region (rol)magit-unhighlight-region607,25039
(defvar-local magit-refresh-args nilmagit-refresh-args612,25230
(defvar-local magit-previous-section nil)magit-previous-section616,25368
(defun magit-mode-setup (mode &rest args)magit-mode-setup619,25460
(defun magit-mode-setup-internal (mode args &optional locked)magit-mode-setup-internal623,25607
(defvar magit-display-buffer-noselect nilmagit-display-buffer-noselect646,26579
(defun magit-display-buffer (buffer)magit-display-buffer649,26697
(defun magit-display-buffer-traditional (buffer)magit-display-buffer-traditional670,27537
(defun magit-display-buffer-same-window-except-diff-v1 (buffer)magit-display-buffer-same-window-except-diff-v1683,28129
(defun magit--display-buffer-fullframe (buffer alist)magit--display-buffer-fullframe694,28646
(defun magit-display-buffer-fullframe-status-v1 (buffer)magit-display-buffer-fullframe-status-v1702,29026
(defun magit--display-buffer-topleft (buffer alist)magit--display-buffer-topleft710,29407
(defun magit-display-buffer-fullframe-status-topleft-v1 (buffer)magit-display-buffer-fullframe-status-topleft-v1734,30665
(defun magit--display-buffer-fullcolumn (buffer alist)magit--display-buffer-fullcolumn753,31495
(defun magit-display-buffer-fullcolumn-most-v1 (buffer)magit-display-buffer-fullcolumn-most-v1760,31817
(defun magit-maybe-set-dedicated ()magit-maybe-set-dedicated783,32807
(defvar-local magit--default-directory nilmagit--default-directory795,33324
(defun magit-mode-get-buffers ()magit-mode-get-buffers802,33658
(defvar-local magit-buffer-locked-p nil)magit-buffer-locked-p809,33909
(defun magit-mode-get-buffer (mode &optional create frame value)magit-mode-get-buffer812,33999
(defun magit-generate-new-buffer (mode &optional value)magit-generate-new-buffer829,34756
(defun magit-generate-buffer-name-default-function (mode &optional value)magit-generate-buffer-name-default-function849,35691
(defun magit-toggle-buffer-lock ()magit-toggle-buffer-lock870,36619
(defvar magit-buffer-lock-functions nilmagit-buffer-lock-functions905,38191
(defun magit-mode-bury-buffer (&optional kill-buffer)magit-mode-bury-buffer966,40321
(defun magit-mode-quit-window (kill-buffer)magit-mode-quit-window973,40575
(defvar inhibit-magit-refresh nil)inhibit-magit-refresh998,41598
(defun magit-refresh ()magit-refresh1000,41634
(defun magit-refresh-all ()magit-refresh-all1041,43579
(defvar-local magit-refresh-start-time nil)magit-refresh-start-time1056,44140
(defun magit-refresh-buffer ()magit-refresh-buffer1058,44185
(defun magit-refresh-get-relative-position ()magit-refresh-get-relative-position1099,46151
(defvar disable-magit-save-buffers nil)disable-magit-save-buffers1121,47241
(defun magit-pre-command-hook ()magit-pre-command-hook1123,47282
(defvar magit-after-save-refresh-buffers nil)magit-after-save-refresh-buffers1127,47411
(defun magit-after-save-refresh-buffers ()magit-after-save-refresh-buffers1129,47458
(defun magit-after-save-refresh-status ()magit-after-save-refresh-status1137,47771
(defun magit-maybe-save-repository-buffers ()magit-maybe-save-repository-buffers1156,48615
(defvar-local magit-inhibit-refresh-save nil)magit-inhibit-refresh-save1176,49502
(defun magit-save-repository-buffers (&optional arg)magit-save-repository-buffers1178,49549
(defvar magit-inhibit-save-previous-winconf nil)magit-inhibit-save-previous-winconf1212,51172
(defvar-local magit-previous-window-configuration nil)magit-previous-window-configuration1214,51222
(defun magit-save-window-configuration ()magit-save-window-configuration1217,51340
(defun magit-restore-window-configuration (&optional kill-buffer)magit-restore-window-configuration1229,51840
(defun magit-go-backward ()magit-go-backward1243,52425
(defun magit-go-forward ()magit-go-forward1250,52641
(defun magit-insert-xref-buttons (&optional _)magit-insert-xref-buttons1257,52862
(defun magit-xref-insert-button (label type)magit-xref-insert-button1267,53244
(define-button-type 'magit-xref-backwardmagit-xref-backward1272,53432
(define-button-type 'magit-xref-forwardmagit-xref-forward1277,53612
(defun magit-xref-setup ()magit-xref-setup1282,53790
(defun magit-xref-restore (&rest args)magit-xref-restore1299,54533
(defvar magit-repository-local-cache nilmagit-repository-local-cache1307,54726
(defun magit-repository-local-repository ()magit-repository-local-repository1310,54840
(defun magit-repository-local-set (key value &optional repository)magit-repository-local-set1315,55007
(defun magit-repository-local-exists-p (key &optional repository)magit-repository-local-exists-p1338,56018
(defun magit-repository-local-get (key &optional default repository)magit-repository-local-get1351,56465
(defun magit-repository-local-delete (key &optional repository)magit-repository-local-delete1364,56853
(defun magit-zap-caches ()magit-zap-caches1375,57315
(defun magit-run-hook-with-benchmark (hook)magit-run-hook-with-benchmark1392,57900

elpa/ghub-3.2.0/buck.el,78
(defconst buck-default-host "api.bitbucket.org/2.0"buck-default-host38,1346

elpa/ghub-3.2.0/ghub-graphql.el,807
(defconst ghub-fetch-repositoryghub-fetch-repository73,2617
(defun ghub--graphql-prepare-query (query &optional lineage cursor)ghub--graphql-prepare-query271,10057
(defun ghub--graphql-handle-response (status req)ghub--graphql-handle-response313,11839
(defun ghub--graphql-walk-response (loc data req)ghub--graphql-walk-response336,12920
(defun ghub--graphql-lineage (loc)ghub--graphql-lineage377,14718
(defun ghub--graphql-narrow-data (data lineage)ghub--graphql-narrow-data384,14891
(defun ghub--graphql-narrow-query (query lineage cursor)ghub--graphql-narrow-query393,15147
(defun ghub--graphql-encode (g)ghub--graphql-encode427,16629
(defun ghub--alist-zip (root)ghub--alist-zip447,17457
(defun ghub--graphql-set-mode-line (buf string &rest args)ghub--graphql-set-mode-line452,17665

elpa/ghub-3.2.0/gtea.el,78
(defconst gtea-default-host "localhost:3000/api/v1"gtea-default-host38,1334

elpa/ghub-3.2.0/glab.el,74
(defconst glab-default-host "gitlab.com/api/v4"glab-default-host38,1337

elpa/ghub-3.2.0/ghub-autoloads.el,0

elpa/ghub-3.2.0/gogs.el,78
(defconst gogs-default-host "localhost:3000/api/v1"gogs-default-host38,1331

elpa/ghub-3.2.0/ghub.el,3498
(defvar url-callback-arguments)url-callback-arguments63,2354
(defvar url-http-end-of-headers)url-http-end-of-headers64,2386
(defvar url-http-extra-headers)url-http-extra-headers65,2419
(defvar url-http-response-status)url-http-response-status66,2451
(defconst ghub-default-host "api.github.com"ghub-default-host70,2500
(defvar ghub-github-token-scopes '(repo)ghub-github-token-scopes73,2608
(defvar ghub-override-system-name nilghub-override-system-name93,3536
(defalias 'ghub-req-extra 'ghub--req-extra)ghub-req-extra118,4264
(define-error 'ghub-error "Ghub/Url Error" 'error)ghub-error122,4319
(define-error 'ghub-http-error "HTTP Error" 'ghub-error)ghub-http-error123,4370
(defvar ghub-response-headers nilghub-response-headers125,4428
(defun ghub-continue (req)ghub-continue356,15185
(defun ghub-response-link-relations (req &optional headers payload)ghub-response-link-relations401,17132
(defun ghub--handle-response (status req)ghub--handle-response472,20575
(defun ghub--handle-response-headers (status req)ghub--handle-response-headers510,22382
(defun ghub--handle-response-error (status payload req)ghub--handle-response-error529,23098
(defun ghub--signal-error (err &optional payload req)ghub--signal-error541,23464
(defun ghub--errorback (err _headers _status req)ghub--errorback554,23987
(defun ghub--handle-response-value (payload req)ghub--handle-response-value557,24082
(defun ghub--handle-response-payload (req)ghub--handle-response-payload565,24398
(defun ghub--read-json-payload (_status)ghub--read-json-payload570,24559
(defun ghub--decode-payload (&optional _status)ghub--decode-payload591,25446
(defun ghub--encode-payload (payload)ghub--encode-payload597,25623
(defun ghub--url-encode-params (params)ghub--url-encode-params604,25830
(defun ghub-create-token (host username package scopes)ghub-create-token617,26239
(defun ghub-token-scopes (host username package)ghub-token-scopes661,28066
(defun ghub-clear-caches ()ghub-clear-caches677,28723
(defun ghub--headers (headers host auth username forge)ghub--headers692,29165
(defun ghub--auth (host auth &optional username forge)ghub--auth704,29612
(defun ghub--basic-auth (host username)ghub--basic-auth729,30542
(defun ghub--basic-auth-errorback (url &optional prompt _overwrite _realm _args)ghub--basic-auth-errorback734,30711
(defun ghub--token (host username package &optional nocreate forge)ghub--token756,31801
(defun ghub--host (&optional forge)ghub--host780,33080
(defun ghub--username (host &optional forge)ghub--username798,33804
(defun ghub--ident (username package)ghub--ident831,35155
(defun ghub--ident-github (package)ghub--ident-github834,35231
(defun ghub--package-scopes (package)ghub--package-scopes839,35377
(defun ghub--confirm-create-token (host username package)ghub--confirm-create-token845,35583
(defun ghub--get-token-id (host username package)ghub--get-token-id914,38818
(defun ghub--get-token-plist (host username package)ghub--get-token-plist924,39212
(defun ghub--delete-token (host username package)ghub--delete-token929,39432
(defun ghub--read-triplet ()ghub--read-triplet934,39658
(defvar ghub--2fa-cache nil)ghub--2fa-cache940,39869
(defun ghub--read-2fa-code ()ghub--read-2fa-code942,39899
(defun ghub--auth-source-get (keys &rest spec)ghub--auth-source-get953,40418
(defun auth-source-netrc-parse-next-interesting@save-match-data (fn)auth-source-netrc-parse-next-interesting@save-match-data963,40808

elpa/ghub-3.2.0/ghub-pkg.el,91
(define-package "ghub" "3.2.0" "Minuscule client libraries for Git forge APIs.""ghub"1,0

elpa/treemacs-evil-2.6/treemacs-evil.el,2085
(defun treemacs--turn-off-visual-state-after-click (&rest _)treemacs--turn-off-visual-state-after-click39,1225
(defun treemacs--evil-window-move-compatibility-advice (orig-fun &rest args)treemacs--evil-window-move-compatibility-advice47,1557
(define-key evil-treemacs-state-map (kbd "j")   #'treemacs-next-line)evil-treemacs-state-map67,2464
(define-key evil-treemacs-state-map (kbd "k")   #'treemacs-previous-line)evil-treemacs-state-map68,2534
(define-key evil-treemacs-state-map (kbd "M-j") #'treemacs-next-neighbour)evil-treemacs-state-map69,2608
(define-key evil-treemacs-state-map (kbd "M-k") #'treemacs-previous-neighbour)evil-treemacs-state-map70,2683
(define-key evil-treemacs-state-map (kbd "M-J") #'treemacs-next-line-other-window)evil-treemacs-state-map71,2762
(define-key evil-treemacs-state-map (kbd "M-K") #'treemacs-previous-line-other-window)evil-treemacs-state-map72,2845
(define-key evil-treemacs-state-map (kbd "th")  #'treemacs-toggle-show-dotfiles)evil-treemacs-state-map73,2932
(define-key evil-treemacs-state-map (kbd "tw")  #'treemacs-toggle-fixed-width)evil-treemacs-state-map74,3013
(define-key evil-treemacs-state-map (kbd "tv")  #'treemacs-fringe-indicator-mode)evil-treemacs-state-map75,3092
(define-key evil-treemacs-state-map (kbd "tf")  #'treemacs-follow-mode)evil-treemacs-state-map76,3174
(define-key evil-treemacs-state-map (kbd "ta")  #'treemacs-filewatch-mode)evil-treemacs-state-map77,3246
(define-key evil-treemacs-state-map (kbd "tg")  #'treemacs-git-mode)evil-treemacs-state-map78,3321
(define-key evil-treemacs-state-map (kbd "w")   #'treemacs-set-width)evil-treemacs-state-map79,3390
(define-key evil-treemacs-state-map (kbd "b")   #'treemacs-add-bookmark)evil-treemacs-state-map80,3460
(define-key evil-treemacs-state-map (kbd "?")   #'treemacs-helpful-hydra)evil-treemacs-state-map81,3533
(define-key evil-treemacs-state-map (kbd "RET") #'treemacs-RET-action)evil-treemacs-state-map82,3607
(define-key evil-treemacs-state-map (kbd "H")   #'treemacs-collapse-parent-node)evil-treemacs-state-map83,3678

elpa/treemacs-evil-2.6/treemacs-evil-pkg.el,347
(define-package "treemacs-evil" "2.6" "Evil mode integration for treemacs" '((evil "1.2.12") (treemacs "0.0")) :commit "e01ad21ea3cc0eba8cd460737116b51be32ffb45" :authors '(("Alexander Miller" . "alexanderm@web.de")) :maintainer '("Alexander Miller" . "alexanderm@web.de") :url "https://github.com/Alexander-Miller/treemacs")"treemacs-evil"2,31

elpa/treemacs-evil-2.6/treemacs-evil-autoloads.el,0

elpa/company-lsp-2.1.0/company-lsp.el,2678
(defgroup company-lsp nilcompany-lsp38,1262
(defcustom company-lsp-cache-candidates nilcompany-lsp-cache-candidates43,1376
(defcustom company-lsp-async tcompany-lsp-async64,2264
(defcustom company-lsp-enable-snippet tcompany-lsp-enable-snippet69,2394
(defcustom company-lsp-enable-recompletion tcompany-lsp-enable-recompletion79,2785
(defvar company-lsp--snippet-functions '(("rust" . company-lsp--rust-completion-snippet))company-lsp--snippet-functions92,3253
(defvar-local company-lsp--completion-cache nilcompany-lsp--completion-cache95,3410
(defun company-lsp--trigger-characters ()company-lsp--trigger-characters101,3622
(defun company-lsp--completion-prefix ()company-lsp--completion-prefix106,3873
(defun company-lsp--make-candidate (item prefix)company-lsp--make-candidate136,5471
(defun company-lsp--candidate-item (candidate)company-lsp--candidate-item148,5969
(defun company-lsp--candidate-prefix (candidate)company-lsp--candidate-prefix154,6221
(defun company-lsp--resolve-candidate (candidate &rest props)company-lsp--resolve-candidate160,6483
(defun company-lsp--rust-completion-snippet (item)company-lsp--rust-completion-snippet187,7621
(defun company-lsp--fallback-snippet (item)company-lsp--fallback-snippet202,8475
(defun company-lsp--looking-back-trigger-characters-p ()company-lsp--looking-back-trigger-characters-p215,8937
(defun company-lsp--post-completion (candidate)company-lsp--post-completion223,9333
(defun company-lsp--to-yasnippet-snippet (text)company-lsp--to-yasnippet-snippet283,12329
(defun company-lsp--on-completion (response prefix)company-lsp--on-completion300,13062
(defun company-lsp--cleanup-cache (_)company-lsp--cleanup-cache321,14149
(defun company-lsp--cache-put (prefix candidates)company-lsp--cache-put327,14444
(defun company-lsp--cache-get (prefix)company-lsp--cache-get335,14732
(defun company-lsp--cache-item-new (candidates incomplete)company-lsp--cache-item-new358,15821
(defun company-lsp--cache-item-incomplete-p (cache-item)company-lsp--cache-item-incomplete-p365,16093
(defun company-lsp--cache-item-candidates (cache-item)company-lsp--cache-item-candidates369,16239
(defun company-lsp--documentation (candidate)company-lsp--documentation373,16371
(defun company-lsp--candidates-sync (prefix)company-lsp--candidates-sync388,17100
(defun company-lsp--candidates-async (prefix callback)company-lsp--candidates-async398,17484
(defun company-lsp--compute-match (candidate)company-lsp--compute-match409,18011
(defun company-lsp (command &optional arg &rest _)company-lsp445,19325
(defun company-lsp--client-capabilities ()company-lsp--client-capabilities476,20822

elpa/company-lsp-2.1.0/company-lsp-autoloads.el,0

elpa/company-lsp-2.1.0/company-lsp-pkg.el,284
(define-package "company-lsp" "2.1.0" "Company completion backend for lsp-mode." '((emacs "25.1") (lsp-mode "6.0") (company "0.9.0") (s "1.2.0") (dash "2.11.0")) :commit "4eb6949f19892be7bf682381cde005791a48583a" :url "https://github.com/tigersoldier/company-lsp")"company-lsp"2,31

elpa/memoize-1.1/memoize-pkg.el,300
(define-package "memoize" "1.1" "Memoization functions" 'nil :commit "636defefa9168f90bce6fc27431352ac7d01a890" :authors '(("Christopher Wellons" . "mosquitopsu@gmail.com")) :maintainer '("Christopher Wellons" . "mosquitopsu@gmail.com") :url "https://github.com/skeeto/emacs-memoize")"memoize"2,31

elpa/memoize-1.1/memoize.el,525
(defvar memoize-default-timeout "2 hours"memoize-default-timeout54,1979
(defun memoize (func &optional timeout)memoize61,2296
(defun memoize--wrap (func timeout)memoize--wrap77,2890
(defmacro defmemoize (name arglist &rest body)defmemoize99,3862
(defun memoize-by-buffer-contents (func)memoize-by-buffer-contents108,4124
(defun memoize-by-buffer-contents--wrap (func)memoize-by-buffer-contents--wrap120,4594
(defmacro defmemoize-by-buffer-contents (name arglist &rest body)defmemoize-by-buffer-contents163,6825

elpa/memoize-1.1/memoize-autoloads.el,0

elpa/all-the-icons-3.2.0/data/data-material.el,92
(defvar all-the-icons-data/material-icons-alistall-the-icons-data/material-icons-alist1,0

elpa/all-the-icons-3.2.0/data/data-alltheicons.el,86
(defvar all-the-icons-data/alltheicons-alistall-the-icons-data/alltheicons-alist1,0

elpa/all-the-icons-3.2.0/data/data-faicons.el,78
(defvar all-the-icons-data/fa-icon-alistall-the-icons-data/fa-icon-alist1,0

elpa/all-the-icons-3.2.0/data/data-octicons.el,80
(defvar all-the-icons-data/octicons-alistall-the-icons-data/octicons-alist1,0

elpa/all-the-icons-3.2.0/data/data-weathericons.el,90
(defvar all-the-icons-data/weather-icons-alistall-the-icons-data/weather-icons-alist1,0

elpa/all-the-icons-3.2.0/data/data-fileicons.el,82
(defvar all-the-icons-data/file-icon-alistall-the-icons-data/file-icon-alist1,0

elpa/all-the-icons-3.2.0/all-the-icons.el,3733
(defgroup all-the-icons nilall-the-icons100,4070
(defcustom all-the-icons-color-icons tall-the-icons-color-icons106,4214
(defcustom all-the-icons-scale-factor 1.2all-the-icons-scale-factor111,4372
(defcustom all-the-icons-default-adjust -0.2all-the-icons-default-adjust116,4525
(defvar all-the-icons-font-families '() "List of defined icon font families.")all-the-icons-font-families121,4694
(defvar all-the-icons-font-names '() "List of defined font file names this package was built with.")all-the-icons-font-names122,4773
(defvar all-the-icons-icon-alistall-the-icons-icon-alist124,4875
(defvar all-the-icons-dir-icon-alistall-the-icons-dir-icon-alist367,24323
(defvar all-the-icons-weather-icon-alistall-the-icons-weather-icon-alist387,25815
(defvar all-the-icons-mode-icon-alistall-the-icons-mode-icon-alist421,27738
(defun all-the-icons-auto-mode-match? (&optional file)all-the-icons-auto-mode-match?529,38956
(defun all-the-icons-match-to-alist (file alist)all-the-icons-match-to-alist535,39253
(defun all-the-icons-dir-is-submodule (dir)all-the-icons-dir-is-submodule539,39437
(defun all-the-icons-icon-for-dir (dir &optional chevron padding)all-the-icons-icon-for-dir551,39982
(defun all-the-icons-icon-for-buffer ()all-the-icons-icon-for-buffer574,41168
(defun all-the-icons-icon-family-for-buffer ()all-the-icons-icon-family-for-buffer583,41498
(defun all-the-icons--web-mode-icon (&rest arg-overrides) "Get icon for a `web-mode' buffer with ARG-OVERRIDES." (all-the-icons--web-mode nil arg-overrides))all-the-icons--web-mode-icon587,41649
(defun all-the-icons--web-mode-icon-family () "Get icon family for a `web-mode' buffer." (all-the-icons--web-mode t))all-the-icons--web-mode-icon-family588,41807
(defun all-the-icons--web-mode (&optional family arg-overrides)all-the-icons--web-mode589,41925
(defun all-the-icons-icon-for-file (file &rest arg-overrides)all-the-icons-icon-for-file610,43239
(defun all-the-icons-icon-for-mode (mode &rest arg-overrides)all-the-icons-icon-for-mode621,43710
(defun all-the-icons-icon-family-for-file (file)all-the-icons-icon-family-for-file635,44273
(defun all-the-icons-icon-family-for-mode (mode)all-the-icons-icon-family-for-mode640,44497
(defun all-the-icons-icon-family (icon)all-the-icons-icon-family645,44723
(defun all-the-icons--icon-info-for-buffer (&optional f)all-the-icons--icon-info-for-buffer654,45016
(defun all-the-icons-icon-for-weather (weather)all-the-icons-icon-for-weather668,45642
(defun all-the-icons--read-candidates ()all-the-icons--read-candidates694,46695
(defun all-the-icons--read-candidates-for-family (family &optional show-family)all-the-icons--read-candidates-for-family698,46919
(defun all-the-icons-install-fonts (&optional pfx)all-the-icons-install-fonts719,47877
(defun all-the-icons-insert (&optional arg family)all-the-icons-insert748,49516
(defun all-the-icons-insert-icons-for (family &optional height duration)all-the-icons-insert-icons-for768,50315
(defmacro define-icon (name alist family &optional font-name)define-icon785,51058
(define-icon alltheicon all-the-icons-data/alltheicons-alist    "all-the-icons")alltheicon823,52993
(define-icon fileicon   all-the-icons-data/file-icon-alist      "file-icons")fileicon824,53074
(define-icon faicon     all-the-icons-data/fa-icon-alist        "FontAwesome")faicon825,53152
(define-icon octicon    all-the-icons-data/octicons-alist       "github-octicons" "octicons")octicon826,53231
(define-icon wicon      all-the-icons-data/weather-icons-alist  "Weather Icons"   "weathericons")wicon827,53325
(define-icon material   all-the-icons-data/material-icons-alist "Material Icons"  "material-design-icons")material828,53423

elpa/all-the-icons-3.2.0/all-the-icons-autoloads.el,0

elpa/all-the-icons-3.2.0/all-the-icons-pkg.el,102
(define-package "all-the-icons" "3.2.0" "A library for inserting Developer icons""all-the-icons"1,0

elpa/all-the-icons-3.2.0/all-the-icons-faces.el,2021
(defgroup all-the-icons-faces nilall-the-icons-faces31,1076
(defface all-the-icons-redall-the-icons-red39,1247
(defface all-the-icons-lredall-the-icons-lred44,1426
(defface all-the-icons-dredall-the-icons-dred49,1607
(defface all-the-icons-red-altall-the-icons-red-alt54,1788
(defface all-the-icons-greenall-the-icons-green61,1982
(defface all-the-icons-lgreenall-the-icons-lgreen66,2165
(defface all-the-icons-dgreenall-the-icons-dgreen71,2350
(defface all-the-icons-yellowall-the-icons-yellow78,2546
(defface all-the-icons-lyellowall-the-icons-lyellow83,2731
(defface all-the-icons-dyellowall-the-icons-dyellow88,2918
(defface all-the-icons-blueall-the-icons-blue95,3114
(defface all-the-icons-blue-altall-the-icons-blue-alt100,3295
(defface all-the-icons-lblueall-the-icons-lblue105,3480
(defface all-the-icons-dblueall-the-icons-dblue110,3663
(defface all-the-icons-maroonall-the-icons-maroon117,3857
(defface all-the-icons-lmaroonall-the-icons-lmaroon122,4042
(defface all-the-icons-dmaroonall-the-icons-dmaroon127,4229
(defface all-the-icons-purpleall-the-icons-purple134,4427
(defface all-the-icons-lpurpleall-the-icons-lpurple139,4612
(defface all-the-icons-dpurpleall-the-icons-dpurple144,4799
(defface all-the-icons-orangeall-the-icons-orange151,4997
(defface all-the-icons-lorangeall-the-icons-lorange156,5182
(defface all-the-icons-dorangeall-the-icons-dorange161,5369
(defface all-the-icons-cyanall-the-icons-cyan168,5565
(defface all-the-icons-cyan-altall-the-icons-cyan-alt173,5746
(defface all-the-icons-lcyanall-the-icons-lcyan178,5931
(defface all-the-icons-dcyanall-the-icons-dcyan183,6114
(defface all-the-icons-pinkall-the-icons-pink190,6306
(defface all-the-icons-lpinkall-the-icons-lpink195,6487
(defface all-the-icons-dpinkall-the-icons-dpink200,6670
(defface all-the-icons-silverall-the-icons-silver207,6864
(defface all-the-icons-lsilverall-the-icons-lsilver212,7049
(defface all-the-icons-dsilverall-the-icons-dsilver217,7236

elpa/magit-gh-pulls-0.5.3/magit-gh-pulls-autoloads.el,0

elpa/magit-gh-pulls-0.5.3/magit-gh-pulls-pkg.el,421
(define-package "magit-gh-pulls" "0.5.3" "GitHub pull requests extension for Magit" '((emacs "24.4") (gh "0.9.1") (magit "2.1.0") (pcache "0.2.3") (s "1.6.1")) :commit "d526f4c9ee1709c79f8a4630699ce1f25ae054e7" :keywords '("git" "tools") :authors '(("Yann Hodique" . "yann.hodique@gmail.com")) :maintainer '("Yann Hodique" . "yann.hodique@gmail.com") :url "https://github.com/sigma/magit-gh-pulls")"magit-gh-pulls"2,31

elpa/magit-gh-pulls-0.5.3/magit-gh-pulls.el,4010
(defgroup magit-gh-pulls nilmagit-gh-pulls70,2500
(defcustom magit-gh-pulls-open-new-pr-in-browser nilmagit-gh-pulls-open-new-pr-in-browser74,2598
(defvar magit-gh-pulls-maybe-filter-pulls 'identitymagit-gh-pulls-maybe-filter-pulls79,2737
(defvar magit-gh-pulls-collapse-commits tmagit-gh-pulls-collapse-commits84,2954
(defvar magit-gh-pulls-pull-detail-limit 10magit-gh-pulls-pull-detail-limit87,3045
(defvar magit-gh-pulls-status-documentation nilmagit-gh-pulls-status-documentation95,3436
(defvar-local magit-gh-pulls-previous-winconf nil)magit-gh-pulls-previous-winconf101,3618
(defvar magit-gh-pulls-editor-mode-mapmagit-gh-pulls-editor-mode-map103,3670
(define-minor-mode magit-gh-pulls-editor-mode "Magit GitHub Pulls Editor"magit-gh-pulls-editor-mode109,3891
(defun magit-gh-pulls-get-api ()magit-gh-pulls-get-api119,4292
(defun magit-gh-pulls-get-repo-from-config ()magit-gh-pulls-get-repo-from-config122,4399
(defun magit-gh-pulls-collect-hostnames (config-lines)magit-gh-pulls-collect-hostnames133,4824
(defun magit-gh-pulls-get-host-hostnames (config-lines)magit-gh-pulls-get-host-hostnames144,5178
(defun -magit-gh-pulls-filter-and-split-host-lines (lines)-magit-gh-pulls-filter-and-split-host-lines162,5998
(defun magit-gh-pulls-get-ssh-config-hosts ()magit-gh-pulls-get-ssh-config-hosts170,6252
(defun magit-gh-pulls-parse-url (url ssh-config-hosts)magit-gh-pulls-parse-url187,7120
(defun magit-gh-pulls-guess-repo-from-origin ()magit-gh-pulls-guess-repo-from-origin206,8086
(defun magit-gh-pulls-guess-repo ()magit-gh-pulls-guess-repo218,8544
(defun magit-gh-pulls-requests-cached-p (api user proj)magit-gh-pulls-requests-cached-p224,8770
(defvar magit-pull-section-mapmagit-pull-section-map233,9146
(defvar magit-unfetched-pull-section-mapmagit-unfetched-pull-section-map239,9348
(defun magit-gh-pulls-insert-gh-pulls ()magit-gh-pulls-insert-gh-pulls245,9566
(defun magit-gh-pulls-guess-topic-name (req)magit-gh-pulls-guess-topic-name326,14103
(defun magit-gh-section-req-data (&optional section)magit-gh-section-req-data331,14275
(defun magit-gh-pulls-diff-pull-request ()magit-gh-pulls-diff-pull-request337,14490
(defun magit-gh-pulls-create-branch ()magit-gh-pulls-create-branch352,14968
(defun magit-gh-pulls-github-merge-message (pr)magit-gh-pulls-github-merge-message371,15670
(defun magit-gh-pulls-merge-pull-request ()magit-gh-pulls-merge-pull-request379,15989
(defun magit-gh-pulls-fetch-commits ()magit-gh-pulls-fetch-commits397,16682
(defun magit-gh-pulls-url-for-pull (info)magit-gh-pulls-url-for-pull409,17066
(defun magit-gh-pulls-open-in-browser ()magit-gh-pulls-open-in-browser414,17243
(defun magit-gh-pulls-purge-cache ()magit-gh-pulls-purge-cache421,17532
(defun magit-gh-pulls-ensure-branch-pushed (branch)magit-gh-pulls-ensure-branch-pushed433,17974
(defun magit-gh-pulls-pr-template-file ()magit-gh-pulls-pr-template-file455,19139
(defun magit-gh-pulls-init-pull-editor (proj base head callback)magit-gh-pulls-init-pull-editor464,19663
(defun magit-gh-pulls-pull-editor-finish ()magit-gh-pulls-pull-editor-finish487,20902
(defun magit-gh-pulls-pull-editor-quit ()magit-gh-pulls-pull-editor-quit502,21666
(defun magit-gh-pulls-build-req (user proj base-branch head-branch title body)magit-gh-pulls-build-req514,22132
(defun magit-gh-pulls-submit-pull-request (api user proj req)magit-gh-pulls-submit-pull-request522,22637
(defun magit-gh-pulls-create-pull-request ()magit-gh-pulls-create-pull-request534,23290
(defun magit-gh-pulls-reload ()magit-gh-pulls-reload550,24069
(define-key magit-status-mode-map (kbd "jq") 'magit-jump-to-pulls)magit-status-mode-map575,25019
(defvar magit-gh-pulls-mode-mapmagit-gh-pulls-mode-map577,25087
(defvar magit-gh-pulls-mode-lighter " Pulls")magit-gh-pulls-mode-lighter582,25219
(define-minor-mode magit-gh-pulls-mode "Pull requests support for Magit"magit-gh-pulls-mode585,25281
(defun turn-on-magit-gh-pulls ()turn-on-magit-gh-pulls606,26070

elpa/pretty-hydra-0.2.2/pretty-hydra-autoloads.el,0

elpa/pretty-hydra-0.2.2/pretty-hydra.el,2909
(defcustom pretty-hydra-enable-use-package tpretty-hydra-enable-use-package40,1356
(defun pretty-hydra--normalize-head! (head)pretty-hydra--normalize-head!45,1493
(defun pretty-hydra--normalize-heads-plist! (heads-plist)pretty-hydra--normalize-heads-plist!56,1859
(defun pretty-hydra--cell-width (key hint-width)pretty-hydra--cell-width64,2130
(defconst pretty-hydra--default-hint-width 20)pretty-hydra--default-hint-width68,2285
(defun pretty-hydra--calc-column-width (column-name heads)pretty-hydra--calc-column-width70,2333
(defun pretty-hydra--pad-or-trunc-hint (hint len)pretty-hydra--pad-or-trunc-hint86,3045
(defun pretty-hydra--cell-docstring (width head)pretty-hydra--cell-docstring100,3534
(defun pretty-hydra--gen-heads-docstring (column-name separator heads max-heads)pretty-hydra--gen-heads-docstring130,5038
(defun pretty-hydra--gen-body-docstring (separator hydra-plist)pretty-hydra--gen-body-docstring145,5916
(defun pretty-hydra--get-heads (heads-plist)pretty-hydra--get-heads167,7016
(defun pretty-hydra--maybe-add-title (title docstring)pretty-hydra--maybe-add-title176,7374
(defconst pretty-hydra--opts '(:separator :formatter :title :quit-key :width :toggle))pretty-hydra--opts188,7849
(defun pretty-hydra--remove-custom-opts (body)pretty-hydra--remove-custom-opts190,7937
(defun pretty-hydra--dedupe-heads (heads)pretty-hydra--dedupe-heads197,8186
(defun pretty-hydra--merge-heads (old new)pretty-hydra--merge-heads204,8424
(defun pretty-hydra--generate (name body heads-plist)pretty-hydra--generate216,8939
(defmacro pretty-hydra-define (name body heads-plist)pretty-hydra-define251,10519
(defun pretty-hydra--prop-or-nil (name prop-name)pretty-hydra--prop-or-nil297,12442
(defmacro pretty-hydra-define+ (name body heads-plist)pretty-hydra-define+304,12710
(defface pretty-hydra-toggle-on-facepretty-hydra-toggle-on-face317,13288
(defface pretty-hydra-toggle-off-facepretty-hydra-toggle-off-face322,13442
(defun pretty-hydra-toggle (name status)pretty-hydra-toggle328,13612
(defun pretty-hydra--get-cmds (heads-plist)pretty-hydra--get-cmds335,13981
(defconst pretty-hydra--use-package-arg-errorpretty-hydra--use-package-arg-error347,14337
(defun pretty-hydra--normalize-args (default-name args)pretty-hydra--normalize-args350,14466
(defvar use-package-keywords)use-package-keywords380,15744
(defun pretty-hydra--use-package-normalize (package _keyword arglists)pretty-hydra--use-package-normalize382,15775
(defun pretty-hydra--use-package-handler (package _keyword args rest state)pretty-hydra--use-package-handler387,16060
(defun pretty-hydra--use-package-autoloads (_pkg-name _keyword args)pretty-hydra--use-package-autoloads395,16432
(defun pretty-hydra--use-package-add-keyword (keyword)pretty-hydra--use-package-add-keyword399,16660
(defun pretty-hydra--enable-use-package ()pretty-hydra--enable-use-package411,17150

elpa/pretty-hydra-0.2.2/pretty-hydra-pkg.el,398
(define-package "pretty-hydra" "0.2.2" "A macro for creating nice-looking hydras" '((hydra "0.15.0") (s "1.12.0") (dash "2.15.0") (dash-functional "1.2.0") (emacs "24")) :commit "bba876b86f0b80495004bf185b2b1f6083a1ff3a" :authors '(("Jerry Peng" . "pr2jerry@gmail.com")) :maintainer '("Jerry Peng" . "pr2jerry@gmail.com") :url "https://github.com/jerrypnz/major-mode-hydra.el")"pretty-hydra"2,31

elpa/deferred-0.5.1/deferred.el,5418
(defvar deferred:version nil "deferred.el version")deferred:version75,2425
(defmacro deferred:aand (test &rest rest)deferred:aand80,2521
(defmacro deferred:$ (&rest elements)deferred:$86,2714
(defmacro deferred:lambda (args &rest body)deferred:lambda95,2954
(defun deferred:setTimeout (f msec)deferred:setTimeout115,3729
(defun deferred:cancelTimeout (id)deferred:cancelTimeout119,3882
(defun deferred:run-with-idle-timer (sec f)deferred:run-with-idle-timer123,4032
(defun deferred:call-lambda (f &optional arg)deferred:call-lambda127,4169
(defvar deferred:debug-count 0 "[internal] Debug output counter.")deferred:debug-count147,4903
(defmacro deferred:message (&rest args)deferred:message149,4971
(defun deferred:message-mark ()deferred:message-mark159,5329
(defun deferred:pp (d)deferred:pp165,5522
(defvar deferred:debug-on-signal nildeferred:debug-on-signal177,5839
(defmacro deferred:condition-case (var protected-form &rest handlers)deferred:condition-case183,6080
(defvar deferred:tick-time 0.001deferred:tick-time199,6547
(defvar deferred:queue nildeferred:queue205,6824
(defmacro deferred:pack (a b c)deferred:pack209,6971
(defun deferred:schedule-worker ()deferred:schedule-worker212,7031
(defun deferred:post-task (d which &optional arg)deferred:post-task216,7198
(defun deferred:clear-queue ()deferred:clear-queue227,7654
(defun deferred:worker ()deferred:worker233,7855
(defun deferred:flush-queue! ()deferred:flush-queue!249,8398
(defun deferred:sync! (d)deferred:sync!256,8589
(defun deferred:default-callback (i)deferred:default-callback292,9823
(defun deferred:default-errorback (err)deferred:default-errorback296,9919
(defun deferred:resignal (err)deferred:resignal300,10030
(defun deferred:default-cancel (d)deferred:default-cancel317,10639
(defvar deferred:onerror nildeferred:onerror325,10909
(defun deferred:exec-task (d which &optional arg)deferred:exec-task329,11047
(defun deferred:set-next (prev next)deferred:set-next377,12901
(defun deferred:new (&optional callback)deferred:new400,13535
(defun deferred:callback (d &optional arg)deferred:callback406,13685
(defun deferred:errorback (d &optional arg)deferred:errorback410,13813
(defun deferred:callback-post (d &optional arg)deferred:callback-post414,13944
(defun deferred:errorback-post (d &optional arg)deferred:errorback-post418,14079
(defun deferred:cancel (d)deferred:cancel422,14215
(defun deferred:status (d)deferred:status428,14387
(defun deferred:succeed (&optional arg)deferred:succeed438,14787
(defun deferred:fail (&optional arg)deferred:fail444,14941
(defun deferred:next (&optional callback arg)deferred:next450,15092
(defun deferred:nextc (d callback)deferred:nextc460,15440
(defun deferred:error (d callback)deferred:error465,15647
(defun deferred:watch (d callback)deferred:watch470,15853
(defun deferred:wait (msec)deferred:wait484,16536
(defun deferred:wait-idle (msec)deferred:wait-idle499,17082
(defun deferred:call (f &rest args)deferred:call517,17681
(defun deferred:apply (f &optional args)deferred:apply523,17820
(defun deferred:empty-p (times-or-seq)deferred:empty-p534,18042
(defun deferred:loop (times-or-seq func)deferred:loop539,18277
(defun deferred:trans-multi-args (args self-func list-func main-func)deferred:trans-multi-args571,19734
(defun deferred:parallel-array-to-alist (lst)deferred:parallel-array-to-alist588,20406
(defun deferred:parallel-alist-to-array (alst)deferred:parallel-alist-to-array594,20595
(defun deferred:parallel-func-to-deferred (alst)deferred:parallel-func-to-deferred601,20823
(defun deferred:parallel-main (alst)deferred:parallel-main611,21142
(defun deferred:parallel-list (lst)deferred:parallel-list643,22515
(defun deferred:parallel (&rest args)deferred:parallel653,22933
(defun deferred:earlier-main (alst)deferred:earlier-main663,23381
(defun deferred:earlier-list (lst)deferred:earlier-list698,24955
(defun deferred:earlier (&rest args)deferred:earlier709,25357
(defmacro deferred:timeout (timeout-msec timeout-form d)deferred:timeout719,25798
(defvar deferred:uid 0 "[internal] Sequence number for some utilities. See the function `deferred:uid'.")deferred:uid733,26225
(defun deferred:uid ()deferred:uid735,26332
(defun deferred:buffer-string (strformat buf)deferred:buffer-string739,26425
(defun deferred:process (command &rest args)deferred:process744,26614
(defun deferred:process-shell (command &rest args)deferred:process-shell752,26986
(defun deferred:process-buffer (command &rest args)deferred:process-buffer760,27406
(defun deferred:process-shell-buffer (command &rest args)deferred:process-shell-buffer768,27792
(defun deferred:process-gen (f command args)deferred:process-gen776,28226
(defun deferred:process-buffer-gen (f command args)deferred:process-buffer-gen790,28676
(defmacro deferred:processc (d command &rest args)deferred:processc836,30444
(defmacro deferred:process-bufferc (d command &rest args)deferred:process-bufferc841,30624
(defmacro deferred:process-shellc (d command &rest args)deferred:process-shellc846,30826
(defmacro deferred:process-shell-bufferc (d command &rest args)deferred:process-shell-bufferc851,31018
(defvar url-request-data)url-request-data857,31277
(defvar url-request-method)url-request-method858,31303
(defvar url-request-extra-headers)url-request-extra-headers859,31331

elpa/deferred-0.5.1/deferred-pkg.el,371
(define-package "deferred" "0.5.1" "Simple asynchronous functions for emacs lisp" '((emacs "24.4")) :commit "d012a1ab50edcc2c44e3e49006f054dbff47cb6c" :keywords '("deferred" "async") :authors '(("SAKURAI Masashi <m.sakurai at kiwanami.net>")) :maintainer '("SAKURAI Masashi <m.sakurai at kiwanami.net>") :url "https://github.com/kiwanami/emacs-deferred")"deferred"2,31

elpa/deferred-0.5.1/deferred-autoloads.el,0

elpa/spinner-1.7.3/spinner-autoloads.el,0

elpa/spinner-1.7.3/spinner.el,906
(defconst spinner-typesspinner-types103,3900
(defun spinner-make-progress-bar (width &optional char)spinner-make-progress-bar126,5317
(defvar spinner-current nilspinner-current137,5934
(defconst spinner--mode-line-constructspinner--mode-line-construct141,6075
(defvar spinner-frames-per-second 10spinner-frames-per-second146,6283
(defun spinner--type-to-frames (type)spinner--type-to-frames152,6450
(defun spinner-create (&optional type buffer-local fps delay)spinner-create195,8045
(defun spinner-print (spinner)spinner-print218,9028
(defun spinner--timer-function (spinner)spinner--timer-function228,9404
(defun spinner--start-timer (spinner)spinner--start-timer247,10121
(defun spinner-start (&optional type-or-object fps delay)spinner-start273,11142
(defun spinner-start-print (spinner)spinner-start-print314,13004
(defun spinner-stop (&optional spinner)spinner-stop320,13205

elpa/spinner-1.7.3/spinner-pkg.el,343
(define-package "spinner" "1.7.3" "Add spinners and progress-bars to the mode-line for ongoing operations" 'nil :keywords '("processes" "mode-line") :authors '(("Artur Malabarba" . "emacs@endlessparentheses.com")) :maintainer '("Artur Malabarba" . "emacs@endlessparentheses.com") :url "https://github.com/Malabarba/spinner.el")"spinner"2,31

elpa/ivy-0.13.0/ivy.el,26426
(defgroup ivy nilivy47,1460
(defgroup ivy-faces nilivy-faces51,1539
(defface ivy-current-matchivy-current-match56,1626
(defface ivy-minibuffer-match-highlightivy-minibuffer-match-highlight63,1888
(defface ivy-minibuffer-match-face-1ivy-minibuffer-match-face-167,2024
(defface ivy-minibuffer-match-face-2ivy-minibuffer-match-face-274,2253
(defface ivy-minibuffer-match-face-3ivy-minibuffer-match-face-381,2513
(defface ivy-minibuffer-match-face-4ivy-minibuffer-match-face-488,2773
(defface ivy-confirm-faceivy-confirm-face95,3033
(defface ivy-match-required-faceivy-match-required-face99,3171
(defface ivy-subdirivy-subdir103,3310
(defface ivy-orgivy-org107,3433
(defface ivy-modified-bufferivy-modified-buffer111,3553
(defface ivy-modified-outside-bufferivy-modified-outside-buffer115,3680
(defface ivy-remoteivy-remote119,3829
(defface ivy-virtualivy-virtual126,4054
(defface ivy-actionivy-action130,4174
(defface ivy-highlight-faceivy-highlight-face134,4300
(defface ivy-prompt-matchivy-prompt-match138,4412
(defface ivy-separatorivy-separator142,4540
(defface ivy-grep-infoivy-grep-info146,4643
(defface ivy-grep-line-numberivy-grep-line-number150,4766
(defface ivy-completions-annotationsivy-completions-annotations154,4895
(defface ivy-yanked-wordivy-yanked-word158,5024
(defcustom ivy-height 10ivy-height165,5257
(defcustom ivy-count-format "%-4d "ivy-count-format171,5378
(defcustom ivy-pre-prompt-function nilivy-pre-prompt-function181,5811
(defcustom ivy-add-newline-after-prompt nilivy-add-newline-after-prompt187,6014
(defcustom ivy-wrap nilivy-wrap191,6138
(defcustom ivy-display-style (and (fboundp 'add-face-text-property) 'fancy)ivy-display-style195,6251
(defcustom ivy-on-del-error-function #'abort-recursive-editivy-on-del-error-function210,6768
(defcustom ivy-extra-directories '("../" "./")ivy-extra-directories221,7273
(defcustom ivy-use-virtual-buffers nilivy-use-virtual-buffers229,7602
(defvar ivy--display-function nilivy--display-function240,8105
(defvar ivy-display-functions-propsivy-display-functions-props243,8186
(defcustom ivy-display-functions-alistivy-display-functions-alist248,8408
(defvar ivy-completing-read-dynamic-collection nilivy-completing-read-dynamic-collection268,9303
(defcustom ivy-completing-read-handlers-alistivy-completing-read-handlers-alist271,9416
(defcustom ivy-height-alist nilivy-height-alist285,10207
(defvar ivy-completing-read-ignore-handlers-depth -1ivy-completing-read-ignore-handlers-depth295,10554
(defvar ivy-highlight-grep-commands nilivy-highlight-grep-commands301,10769
(defvar ivy--actions-list nilivy--actions-list304,10843
(defun ivy-set-actions (cmd actions)ivy-set-actions307,10916
(defun ivy-add-actions (cmd actions)ivy-add-actions312,11074
(defun ivy--compute-extra-actions (action caller)ivy--compute-extra-actions322,11470
(defvar ivy--prompts-list nil)ivy--prompts-list342,12246
(defun ivy-set-prompt (caller prompt-fn)ivy-set-prompt344,12278
(defvar ivy--display-transformers-list nilivy--display-transformers-list350,12510
(defun ivy-set-display-transformer (cmd transformer)ivy-set-display-transformer353,12604
(defvar ivy--sources-list nilivy--sources-list365,13090
(defun ivy-set-sources (cmd sources)ivy-set-sources368,13163
(defun ivy--compute-extra-candidates (caller)ivy--compute-extra-candidates391,13703
(defvar ivy-current-prefix-arg nilivy-current-prefix-arg402,14122
(defvar ivy-minibuffer-mapivy-minibuffer-map409,14307
(defvar ivy-mode-mapivy-mode-map466,17395
(defvar ivy-last (make-ivy-state)ivy-last504,18325
(defvar ivy-recursive-last nil)ivy-recursive-last510,18492
(defvar ivy-recursive-restore tivy-recursive-restore512,18525
(defsubst ivy-set-action (action)ivy-set-action517,18721
(defvar inhibit-message)inhibit-message521,18849
(defun ivy-thing-at-point ()ivy-thing-at-point523,18875
(defvar ivy-history nilivy-history546,19752
(defvar ivy--directory nilivy--directory552,19920
(defvar ivy--length 0ivy--length555,19999
(defvar ivy-text ""ivy-text558,20066
(defvar ivy--index 0ivy--index561,20135
(defvar ivy--window-index 0ivy--window-index564,20204
(defvar ivy-exit nilivy-exit569,20350
(defvar ivy--all-candidates nilivy--all-candidates573,20457
(defvar ivy--extra-candidates '((original-source))ivy--extra-candidates576,20538
(defcustom ivy-use-ignore-default tivy-use-ignore-default588,20991
(defvar ivy-use-ignore tivy-use-ignore595,21267
(defvar ivy--default nilivy--default600,21468
(defvar ivy--prompt nilivy--prompt603,21522
(defvar ivy--prompt-extra ""ivy--prompt-extra607,21632
(defvar ivy--old-re nilivy--old-re610,21706
(defvar ivy--old-cands nilivy--old-cands614,21804
(defvar ivy--regex-function 'ivy--regexivy--regex-function617,21884
(defvar ivy--highlight-function 'ivy--highlight-defaultivy--highlight-function620,21969
(defvar ivy--subexps 0ivy--subexps623,22079
(defvar ivy--full-length nilivy--full-length626,22154
(defvar ivy--old-text ""ivy--old-text629,22257
(defvar ivy--trying-to-resume-dynamic-collection nilivy--trying-to-resume-dynamic-collection632,22333
(defun ivy--set-index-dynamic-collection ()ivy--set-index-dynamic-collection638,22583
(defcustom ivy-case-fold-search-defaultivy-case-fold-search-default646,22919
(defvar ivy-case-fold-search ivy-case-fold-search-defaultivy-case-fold-search661,23477
(defvar ivy-more-chars-alistivy-more-chars-alist664,23590
(defun ivy-more-chars ()ivy-more-chars670,23807
(defun ivy--case-fold-p (string)ivy--case-fold-p678,24105
(defun ivy--case-fold-string= (s1 s2)ivy--case-fold-string=684,24306
(defmacro ivy-quit-and-run (&rest body)ivy-quit-and-run700,25003
(defun ivy-exit-with-action (action)ivy-exit-with-action712,25385
(defmacro with-ivy-window (&rest body)with-ivy-window721,25636
(defun ivy--done (text)ivy--done728,25851
(defcustom ivy-use-selectable-prompt nilivy-use-selectable-prompt742,26367
(defvar ivy--use-selectable-prompt nilivy--use-selectable-prompt757,27065
(defun ivy--prompt-selectable-p ()ivy--prompt-selectable-p760,27179
(defun ivy--prompt-selected-p ()ivy--prompt-selected-p772,27682
(defun ivy-done ()ivy-done778,27835
(defvar ivy-mouse-1-tooltipivy-mouse-1-tooltip806,28981
(defvar ivy-mouse-3-tooltipivy-mouse-3-tooltip809,29136
(defun ivy-mouse-offset (event)ivy-mouse-offset813,29272
(defun ivy-mouse-done (event)ivy-mouse-done828,29755
(defun ivy-mouse-dispatching-done (event)ivy-mouse-dispatching-done836,29941
(defvar ivy-read-action-format-function 'ivy-read-action-format-defaultivy-read-action-format-function844,30147
(defun ivy-read-action-format-default (actions)ivy-read-action-format-default847,30287
(defcustom ivy-read-action-function #'ivy-read-action-by-keyivy-read-action-function866,30864
(defun ivy-read-action ()ivy-read-action873,31124
(defun ivy-read-action-by-key (actions)ivy-read-action-by-key884,31462
(defun ivy-read-action-ivy (actions)ivy-read-action-ivy906,32284
(defun ivy-shrink-after-dispatching ()ivy-shrink-after-dispatching921,32990
(defun ivy-dispatching-done ()ivy-dispatching-done925,33155
(defun ivy-dispatching-call ()ivy-dispatching-call932,33340
(defun ivy-build-tramp-name (x)ivy-build-tramp-name943,33706
(defun ivy-alt-done (&optional arg)ivy-alt-done956,34092
(defvar ivy-auto-select-single-candidate nilivy-auto-select-single-candidate981,35151
(defun ivy--directory-enter ()ivy--directory-enter987,35452
(defun ivy--handle-directory (input)ivy--handle-directory996,35729
(defun ivy--directory-done ()ivy--directory-done1003,35951
(defun ivy-expand-file-if-directory (file-name)ivy-expand-file-if-directory1060,38348
(defcustom ivy-tab-space nilivy-tab-space1072,38791
(defun ivy-partial-or-done ()ivy-partial-or-done1076,38902
(defun ivy--remove-prefix (prefix string)ivy--remove-prefix1100,39824
(defun ivy--partial-cd-for-single-directory ()ivy--partial-cd-for-single-directory1106,40010
(defun ivy-partial ()ivy-partial1116,40414
(defvar ivy-completion-beg nilivy-completion-beg1148,41823
(defvar ivy-completion-end nilivy-completion-end1151,41885
(defun ivy-immediate-done ()ivy-immediate-done1154,41945
(defun ivy-resume ()ivy-resume1181,43058
(defvar-local ivy-calling nilivy-calling1211,44448
(defun ivy-set-index (index)ivy-set-index1214,44549
(defun ivy-beginning-of-buffer ()ivy-beginning-of-buffer1221,44692
(defun ivy-end-of-buffer ()ivy-end-of-buffer1226,44807
(defun ivy-scroll-up-command ()ivy-scroll-up-command1231,44930
(defun ivy-scroll-down-command ()ivy-scroll-down-command1237,45133
(defun ivy-minibuffer-grow ()ivy-minibuffer-grow1243,45325
(defun ivy-minibuffer-shrink ()ivy-minibuffer-shrink1249,45488
(defun ivy-next-line (&optional arg)ivy-next-line1257,45712
(defun ivy-next-line-or-history (&optional arg)ivy-next-line-or-history1268,46047
(defun ivy-previous-line (&optional arg)ivy-previous-line1276,46325
(defun ivy-previous-line-or-history (arg)ivy-previous-line-or-history1288,46699
(defun ivy-toggle-calling ()ivy-toggle-calling1296,46971
(defun ivy-toggle-ignore ()ivy-toggle-ignore1302,47103
(defun ivy--get-action (state)ivy--get-action1313,47407
(defun ivy--get-window (state)ivy--get-window1321,47630
(defun ivy--actionp (x)ivy--actionp1330,47870
(defcustom ivy-action-wrap nilivy-action-wrap1334,48001
(defun ivy-next-action ()ivy-next-action1338,48115
(defun ivy-prev-action ()ivy-prev-action1350,48500
(defun ivy-action-name ()ivy-action-name1360,48832
(defvar ivy-inhibit-action nilivy-inhibit-action1370,49162
(defun ivy-recursive-restore ()ivy-recursive-restore1380,49407
(defvar ivy-marked-candidates nilivy-marked-candidates1388,49739
(defvar ivy-mark-prefix ">"ivy-mark-prefix1395,49950
(defun ivy-call ()ivy-call1398,50011
(defun ivy-call-and-recenter ()ivy-call-and-recenter1457,52804
(defun ivy-next-line-and-call (&optional arg)ivy-next-line-and-call1464,52986
(defun ivy-previous-line-and-call (&optional arg)ivy-previous-line-and-call1472,53193
(defun ivy-previous-history-element (arg)ivy-previous-history-element1480,53406
(defun ivy--insert-symbol-boundaries ()ivy--insert-symbol-boundaries1488,53626
(defun ivy-next-history-element (arg)ivy-next-history-element1495,53760
(defvar ivy-ffap-url-functions nilivy-ffap-url-functions1516,54579
(defun ivy--cd-maybe ()ivy--cd-maybe1519,54675
(defun ivy--maybe-scroll-history ()ivy--maybe-scroll-history1545,55674
(defun ivy--cd (dir)ivy--cd1557,56029
(defun ivy--parent-dir (filename)ivy--parent-dir1577,56671
(defun ivy-backward-delete-char ()ivy-backward-delete-char1581,56812
(defun ivy-delete-char (arg)ivy-delete-char1598,57426
(defun ivy-forward-char (arg)ivy-forward-char1604,57551
(defun ivy-kill-word (arg)ivy-kill-word1610,57679
(defun ivy-kill-line ()ivy-kill-line1616,57798
(defun ivy-kill-whole-line ()ivy-kill-whole-line1623,57950
(defun ivy-backward-kill-word ()ivy-backward-kill-word1628,58092
(defvar ivy--regexp-quote #'regexp-quoteivy--regexp-quote1640,58459
(defun ivy-toggle-regexp-quote ()ivy-toggle-regexp-quote1643,58538
(defvar avy-all-windows)avy-all-windows1649,58699
(defvar avy-action)avy-action1650,58724
(defvar avy-keys)avy-keys1651,58744
(defvar avy-keys-alist)avy-keys-alist1652,58762
(defvar avy-style)avy-style1653,58786
(defvar avy-styles-alist)avy-styles-alist1654,58805
(defcustom ivy-format-functions-alistivy-format-functions-alist1658,58916
(defun ivy--avy-candidates ()ivy--avy-candidates1674,59513
(defun ivy--avy-action (pt)ivy--avy-action1691,59931
(defun ivy--avy-handler-function (char)ivy--avy-handler-function1699,60217
(defvar avy-handler-function)avy-handler-function1714,60691
(defun ivy-avy ()ivy-avy1716,60722
(defun ivy-sort-file-function-default (x y)ivy-sort-file-function-default1733,61327
(defun ivy-string< (x y)ivy-string<1744,61655
(define-obsolete-function-alias 'ivy-sort-file-function-using-idoivy-sort-file-function-using-ido1749,61818
(defcustom ivy-sort-functions-alistivy-sort-functions-alist1752,61935
(defun ivy--sort-function (collection)ivy--sort-function1781,63083
(defun ivy-rotate-sort ()ivy-rotate-sort1790,63516
(defvar ivy-index-functions-alistivy-index-functions-alist1802,64044
(defvar ivy-re-builders-alistivy-re-builders-alist1809,64320
(defvar ivy-highlight-functions-alistivy-highlight-functions-alist1832,65098
(defcustom ivy-initial-inputs-alistivy-initial-inputs-alist1838,65364
(defcustom ivy-hooks-alist nilivy-hooks-alist1852,65785
(defvar ivy--occurs-list nilivy--occurs-list1858,66035
(defun ivy-set-occur (cmd occur)ivy-set-occur1861,66117
(defcustom ivy-update-fns-alist nilivy-update-fns-alist1866,66265
(defvar ivy-unwind-fns-alist nilivy-unwind-fns-alist1875,66536
(defun ivy--alist-set (alist-sym key val)ivy--alist-set1878,66630
(defcustom ivy-sort-max-size 30000ivy-sort-max-size1931,68551
(defalias 'ivy--dirname-pivy--dirname-p1935,68665
(defun ivy--sorted-files (dir)ivy--sorted-files1942,68872
(defun ivy-alist-setting (alist &optional key)ivy-alist-setting1967,69883
(defun ivy--height (caller)ivy--height1975,70233
(defun ivy--remove-props (str &rest props)ivy--remove-props1984,70479
(defun ivy--cleanup ()ivy--cleanup2149,77163
(defun ivy--display-function-prop (prop)ivy--display-function-prop2163,77604
(defvar Info-complete-menu-buffer)Info-complete-menu-buffer2169,77831
(defun ivy--reset-state (state)ivy--reset-state2171,77867
(defun ivy-add-prompt-count (prompt)ivy-add-prompt-count2354,86934
(defun ivy--quote-format-string (str)ivy--quote-format-string2372,87630
(defun ivy-completing-read (prompt collectionivy-completing-read2377,87791
(defun ivy-completing-read-with-empty-string-defivy-completing-read-with-empty-string-def2439,90770
(defun ivy-completion-in-region-action (str)ivy-completion-in-region-action2456,91454
(defun ivy-completion-common-length (str)ivy-completion-common-length2484,92582
(defun ivy-completion-in-region (start end collection &optional predicate)ivy-completion-in-region2503,93242
(defun ivy-completion-in-region-prompt ()ivy-completion-in-region-prompt2561,96071
(defcustom ivy-do-completion-in-region tivy-do-completion-in-region2569,96384
(define-minor-mode ivy-modeivy-mode2574,96529
(defun ivy--preselect-index (preselect candidates)ivy--preselect-index2597,97199
(defun ivy-re-match (re-seq str)ivy-re-match2609,97635
(defvar ivy--regex-hashivy--regex-hash2632,98259
(defun ivy--split (str)ivy--split2636,98349
(defun ivy--trim-trailing-re (regex)ivy--trim-trailing-re2678,99936
(defun ivy--regex (str &optional greedy)ivy--regex2685,100163
(defun ivy--regex-p (object)ivy--regex-p2716,101481
(defun ivy--regex-or-literal (str)ivy--regex-or-literal2720,101629
(defun ivy--split-negation (str)ivy--split-negation2724,101755
(defun ivy--split-spaces (str)ivy--split-spaces2748,102863
(defun ivy--regex-ignore-order (str)ivy--regex-ignore-order2771,103738
(defun ivy--regex-plus (str)ivy--regex-plus2797,104674
(defun ivy--regex-fuzzy (str)ivy--regex-fuzzy2816,105274
(defcustom ivy-fixed-height-minibuffer nilivy-fixed-height-minibuffer2835,106105
(defcustom ivy-truncate-lines tivy-truncate-lines2842,106405
(defun ivy--minibuffer-setup ()ivy--minibuffer-setup2846,106501
(defun ivy--input ()ivy--input2870,107567
(defun ivy--minibuffer-cleanup ()ivy--minibuffer-cleanup2880,107851
(defun ivy-cleanup-string (str)ivy-cleanup-string2886,108046
(defvar ivy-set-prompt-text-properties-functionivy-set-prompt-text-properties-function2890,108173
(defun ivy-set-prompt-text-properties-default (prompt props)ivy-set-prompt-text-properties-default2898,108586
(defun ivy-prompt ()ivy-prompt2912,109201
(defun ivy--insert-prompt ()ivy--insert-prompt2929,109749
(defun ivy--sort-maybe (collection)ivy--sort-maybe3006,113280
(defcustom ivy-magic-slash-non-match-action 'ivy-magic-slash-non-match-cd-selectedivy-magic-slash-non-match-action3016,113645
(defun ivy--create-and-cd (dir)ivy--create-and-cd3028,114188
(defun ivy--magic-file-doubleslash-directory ()ivy--magic-file-doubleslash-directory3033,114330
(defun ivy--magic-file-slash ()ivy--magic-file-slash3047,114746
(defun ivy-magic-read-file-env ()ivy-magic-read-file-env3084,116516
(defun ivy-make-magic-action (caller key)ivy-make-magic-action3107,117487
(defcustom ivy-magic-tilde tivy-magic-tilde3127,118198
(defcustom ivy-dynamic-exhibit-delay-ms 0ivy-dynamic-exhibit-delay-ms3132,118333
(defvar ivy--exhibit-timer nil)ivy--exhibit-timer3136,118451
(defun ivy--queue-exhibit ()ivy--queue-exhibit3138,118484
(defun ivy--magic-tilde-directory (dir)ivy--magic-tilde-directory3153,119019
(defun ivy-update-candidates (cands)ivy-update-candidates3164,119437
(defun ivy--exhibit ()ivy--exhibit3169,119557
(defun ivy-display-function-fallback (str)ivy-display-function-fallback3223,122056
(defun ivy--insert-minibuffer (text)ivy--insert-minibuffer3229,122195
(defun ivy--resize-minibuffer-to-fit ()ivy--resize-minibuffer-to-fit3252,123041
(defun ivy--add-face (str face)ivy--add-face3271,123999
(defvar ivy--flx-cache nil)ivy--flx-cache3289,124567
(defun ivy-toggle-case-fold ()ivy-toggle-case-fold3294,124669
(defun ivy--re-filter (re candidates &optional mkpred)ivy--re-filter3311,125311
(defun ivy--filter (name candidates)ivy--filter3331,126023
(defun ivy--set-candidates (x)ivy--set-candidates3376,128035
(defun ivy--shorter-matches-first (_name cands)ivy--shorter-matches-first3390,128476
(defcustom ivy-sort-matches-functions-alistivy-sort-matches-functions-alist3399,128728
(defun ivy--sort-files-by-date (_name candidates)ivy--sort-files-by-date3424,129671
(defvar ivy--flx-featurep (require 'flx nil 'noerror))ivy--flx-featurep3429,129891
(defun ivy--sort (name candidates)ivy--sort3431,129947
(defun ivy--prefix-sort (name candidates)ivy--prefix-sort3443,130364
(defvar ivy--virtual-buffers nilivy--virtual-buffers3461,130938
(defun ivy-re-to-str (re)ivy-re-to-str3464,131010
(defun ivy-sort-function-buffer (name candidates)ivy-sort-function-buffer3471,131213
(defvar ivy-flx-limit 200ivy-flx-limit3505,132447
(defvar ivy--recompute-index-inhibit nilivy--recompute-index-inhibit3511,132608
(defun ivy--recompute-index (name re-str cands)ivy--recompute-index3514,132704
(defun ivy-recompute-index-swiper (_re-str cands)ivy-recompute-index-swiper3566,135057
(defun ivy-recompute-index-swiper-backward (re-str cands)ivy-recompute-index-swiper-backward3593,136027
(defun ivy-recompute-index-swiper-async (_re-str cands)ivy-recompute-index-swiper-async3603,136416
(defun ivy-recompute-index-swiper-async-backward (re-str cands)ivy-recompute-index-swiper-async-backward3627,137390
(defun ivy-recompute-index-zero (_re-str _cands)ivy-recompute-index-zero3639,137825
(defcustom ivy-minibuffer-facesivy-minibuffer-faces3644,137990
(defun ivy--minibuffer-face (n)ivy--minibuffer-face3658,138481
(defun ivy--flx-propertize (x)ivy--flx-propertize3664,138708
(defun ivy--flx-sort (name cands)ivy--flx-sort3676,139039
(defun ivy--truncate-string (str width)ivy--truncate-string3727,141159
(defun ivy--format-function-generic (selected-fn other-fn cands separator)ivy--format-function-generic3731,141277
(defun ivy-format-function-default (cands)ivy-format-function-default3746,141825
(defun ivy-format-function-arrow (cands)ivy-format-function-arrow3755,142046
(defun ivy-format-function-line (cands)ivy-format-function-line3765,142306
(defalias 'ivy-add-face-text-propertyivy-add-face-text-property3775,142563
(defun ivy--highlight-ignore-order (str)ivy--highlight-ignore-order3790,143245
(defun ivy--highlight-fuzzy (str)ivy--highlight-fuzzy3803,143621
(defun ivy--highlight-default (str)ivy--highlight-default3812,143989
(defun ivy--format-minibuffer-line (str)ivy--format-minibuffer-line3848,145347
(defun ivy-read-file-transformer (str)ivy-read-file-transformer3880,146639
(defun ivy--minibuffer-index-bounds (idx len wnd-len)ivy--minibuffer-index-bounds3886,146805
(defun ivy--format (cands)ivy--format3894,147102
(defun ivy--wnd-cands-to-str (wnd-cands)ivy--wnd-cands-to-str3918,148235
(defvar recentf-list)recentf-list3929,148706
(defvar bookmark-alist)bookmark-alist3930,148728
(defcustom ivy-virtual-abbreviate 'nameivy-virtual-abbreviate3932,148753
(defun ivy--virtual-buffers ()ivy--virtual-buffers3943,149161
(defcustom ivy-ignore-buffers '("\\` ")ivy-ignore-buffers3987,151066
(defvar ivy-switch-buffer-faces-alist '((dired-mode . ivy-subdir)ivy-switch-buffer-faces-alist3991,151217
(defun ivy--buffer-list (str &optional virtual predicate)ivy--buffer-list3996,151455
(defvar ivy-views (and nilivy-views4020,152395
(defun ivy-default-view-name ()ivy-default-view-name4045,153374
(defun ivy-push-view (&optional arg)ivy-push-view4078,154726
(defun ivy-pop-view-action (view)ivy-pop-view-action4114,156258
(defun ivy-pop-view ()ivy-pop-view4121,156476
(defun ivy-source-views ()ivy-source-views4129,156715
(defun ivy-set-view-recur (view)ivy-set-view-recur4138,156909
(defun ivy--switch-buffer-action (buffer)ivy--switch-buffer-action4191,158901
(defun ivy--switch-buffer-other-window-action (buffer)ivy--switch-buffer-other-window-action4212,159623
(defun ivy--rename-buffer-action (buffer)ivy--rename-buffer-action4223,160047
(defun ivy--find-file-action (buffer)ivy--find-file-action4229,160241
(defun ivy--kill-buffer-or-virtual (buffer)ivy--kill-buffer-or-virtual4241,160850
(defun ivy--kill-current-candidate ()ivy--kill-current-candidate4248,161086
(defun ivy--kill-buffer-action (buffer)ivy--kill-buffer-action4255,161351
(defvar ivy-switch-buffer-mapivy-switch-buffer-map4263,161620
(defun ivy-switch-buffer-kill ()ivy-switch-buffer-kill4268,161754
(defun ivy--switch-buffer-matcher (regexp candidates)ivy--switch-buffer-matcher4297,162444
(defun ivy-append-face (str face)ivy-append-face4316,163064
(defun ivy-switch-buffer-transformer (str)ivy-switch-buffer-transformer4322,163233
(defun ivy-switch-buffer-occur (cands)ivy-switch-buffer-occur4335,163723
(defun ivy-switch-buffer ()ivy-switch-buffer4349,164218
(defun ivy-switch-view ()ivy-switch-view4364,164747
(defun ivy-switch-buffer-other-window ()ivy-switch-buffer-other-window4372,164971
(defun ivy--yank-handle-case-fold (text)ivy--yank-handle-case-fold4385,165513
(defun ivy--yank-by (fn &rest args)ivy--yank-by4391,165674
(defun ivy-yank-word (&optional arg)ivy-yank-word4414,166499
(defun ivy-yank-symbol (&optional arg)ivy-yank-symbol4421,166731
(defun ivy-yank-char (&optional arg)ivy-yank-char4431,167072
(defvar ivy--pulse-overlay nilivy--pulse-overlay4438,167314
(defvar ivy--pulse-timer nilivy--pulse-timer4441,167390
(defcustom ivy-pulse-delay 0.5ivy-pulse-delay4444,167472
(defun ivy--pulse-region (start end)ivy--pulse-region4451,167697
(defun ivy--pulse-cleanup ()ivy--pulse-cleanup4472,168644
(defun ivy-kill-ring-save ()ivy-kill-ring-save4481,168934
(defun ivy-insert-current ()ivy-insert-current4493,169245
(defun ivy-insert-current-full ()ivy-insert-current-full4504,169608
(defcustom ivy-preferred-re-buildersivy-preferred-re-builders4509,169754
(defun ivy-rotate-preferred-builders ()ivy-rotate-preferred-builders4517,170070
(defun ivy-toggle-fuzzy ()ivy-toggle-fuzzy4527,170486
(defvar ivy--reverse-i-search-symbol nilivy--reverse-i-search-symbol4535,170781
(defun ivy-reverse-i-search-kill ()ivy-reverse-i-search-kill4538,170854
(defvar ivy-reverse-i-search-mapivy-reverse-i-search-map4553,171395
(defun ivy-history-contents (history)ivy-history-contents4558,171535
(defun ivy-reverse-i-search ()ivy-reverse-i-search4576,172168
(defun ivy-restrict-to-matches ()ivy-restrict-to-matches4603,173306
(defvar-local ivy-occur-last nilivy-occur-last4616,173764
(defvar ivy-occur-mode-mapivy-occur-mode-map4621,173933
(defun ivy-occur-toggle-calling ()ivy-occur-toggle-calling4640,174764
(defun ivy--find-occur-buffer ()ivy--find-occur-buffer4650,175034
(defun ivy--select-occur-buffer ()ivy--select-occur-buffer4659,175297
(defun ivy-occur-next-line (&optional arg)ivy-occur-next-line4667,175547
(defun ivy-occur-previous-line (&optional arg)ivy-occur-previous-line4688,176261
(defun ivy-occur-next-error (n &optional reset)ivy-occur-next-error4706,176897
(define-derived-mode ivy-occur-mode fundamental-mode "Ivy-Occur"ivy-occur-mode4716,177197
(defvar ivy-occur-grep-mode-mapivy-occur-grep-mode-map4722,177368
(defun ivy-occur-delete-candidate ()ivy-occur-delete-candidate4729,177621
(define-derived-mode ivy-occur-grep-mode grep-mode "Ivy-Occur"ivy-occur-grep-mode4735,177798
(defun ivy--starts-with-dotslash (str)ivy--starts-with-dotslash4743,178022
(defun ivy--occur-insert-lines (cands)ivy--occur-insert-lines4746,178100
(defun ivy--occur-default (cands)ivy--occur-default4767,178843
(defun ivy-occur ()ivy-occur4779,179289
(defun ivy-occur-revert-buffer ()ivy-occur-revert-buffer4811,180490
(defun ivy-wgrep-change-to-wgrep-mode ()ivy-wgrep-change-to-wgrep-mode4834,181311
(defun ivy-occur-read-action ()ivy-occur-read-action4841,181531
(defun ivy-occur-dispatch ()ivy-occur-dispatch4847,181699
(defun ivy-occur-click (event)ivy-occur-click4860,182153
(defvar ivy-occur-timer nil)ivy-occur-timer4872,182568
(defun ivy--occur-press-update-window ()ivy--occur-press-update-window4874,182598
(defun ivy--occur-press-buffer ()ivy--occur-press-buffer4896,183531
(defun ivy-occur-press ()ivy-occur-press4902,183684
(defun ivy-occur-press-and-switch ()ivy-occur-press-and-switch4941,185234
(defun ivy--marked-p ()ivy--marked-p4947,185424
(defun ivy--unmark (cand)ivy--unmark4950,185512
(defun ivy--mark (cand)ivy--mark4957,185768
(defun ivy-mark ()ivy-mark4964,186050
(defun ivy-unmark ()ivy-unmark4978,186481
(defun ivy-unmark-backward ()ivy-unmark-backward4985,186670
(defun ivy-toggle-marks ()ivy-toggle-marks4993,186879
(defconst ivy-help-file (let ((default-directoryivy-help-file5001,187097
(defvar org-hide-emphasis-markers)org-hide-emphasis-markers5011,187618
(defun ivy-help ()ivy-help5013,187654
(defvar ffap-url-fetcher)ffap-url-fetcher5035,188282
(defun ivy-ffap-url-p (string)ivy-ffap-url-p5037,188309
(defun ivy-ffap-url-fetcher (url)ivy-ffap-url-fetcher5042,188411

elpa/ivy-0.13.0/ivy-overlay.el,766
(defface ivy-cursorivy-cursor29,1040
(defvar ivy--old-cursor-type t)ivy--old-cursor-type37,1293
(defvar ivy-overlay-at nilivy-overlay-at39,1326
(defun ivy-left-pad (str width)ivy-left-pad44,1459
(defun ivy-overlay-cleanup ()ivy-overlay-cleanup55,1912
(defvar ivy-height)ivy-height65,2217
(defun ivy-overlay-show-after (str)ivy-overlay-show-after67,2238
(defvar org-indent-indentation-per-level)org-indent-indentation-per-level88,3173
(defvar ivy-height)ivy-height89,3215
(defvar ivy-last)ivy-last90,3235
(defvar ivy-text)ivy-text91,3253
(defvar ivy-completion-beg)ivy-completion-beg92,3271
(defun ivy-overlay-impossible-p (_str)ivy-overlay-impossible-p99,3522
(defun ivy-display-function-overlay (str)ivy-display-function-overlay108,3806

elpa/ivy-0.13.0/ivy-autoloads.el,42
(defvar ivy-mode nil "\ivy-mode109,3945

elpa/ivy-0.13.0/elpa.el,0

elpa/ivy-0.13.0/colir.el,608
(defcustom colir-compose-method #'colir-compose-alphacolir-compose-method37,1195
(defun colir-compose-soft-light (a b)colir-compose-soft-light45,1478
(defun colir-compose-overlay (a b)colir-compose-overlay51,1654
(defun colir-compose-alpha (a b &optional alpha gamma)colir-compose-alpha57,1786
(defun colir-blend (c1 c2)colir-blend66,2206
(defun colir-color-parse (color)colir-color-parse77,2614
(defun colir--blend-background (start next prevn face object)colir--blend-background86,3106
(defun colir-blend-face-background (start end face &optional object)colir-blend-face-background100,3581

elpa/ivy-0.13.0/ivy-pkg.el,75
(define-package "ivy" "0.13.0" "Incremental Vertical completYon""ivy"1,0

elpa/treemacs-icons-dired-2.6/treemacs-icons-dired-autoloads.el,74
(defvar treemacs-icons-dired-mode nil "\treemacs-icons-dired-mode13,355

elpa/treemacs-icons-dired-2.6/treemacs-icons-dired.el,1124
(defvar-local treemacs-icons-dired-displayed niltreemacs-icons-dired-displayed35,1192
(defvar-local treemacs-icons-dired--covered-subdirs niltreemacs-icons-dired--covered-subdirs38,1284
(defun treemacs-icons-dired--display ()treemacs-icons-dired--display41,1392
(defun treemacs-icons-dired--display-icons-for-subdir (path pos)treemacs-icons-dired--display-icons-for-subdir51,1855
(defun treemacs-icons-dired--insert-subdir-advice (&rest args)treemacs-icons-dired--insert-subdir-advice70,2618
(defun treemacs-icons-dired--kill-subdir-advice (&rest _args)treemacs-icons-dired--kill-subdir-advice83,3203
(defun treemacs-icons-dired--reset (&rest _args)treemacs-icons-dired--reset90,3590
(defun treemacs-icons-dired--update-icon-selection ()treemacs-icons-dired--update-icon-selection95,3778
(defun treemacs-icons-dired--enable-highlight-correction ()treemacs-icons-dired--enable-highlight-correction115,4924
(defun treemacs-icons-dired--disable-highlight-correction ()treemacs-icons-dired--disable-highlight-correction119,5138
(define-minor-mode treemacs-icons-dired-modetreemacs-icons-dired-mode124,5370

elpa/treemacs-icons-dired-2.6/treemacs-icons-dired-pkg.el,365
(define-package "treemacs-icons-dired" "2.6" "Treemacs icons for dired" '((treemacs "0.0") (emacs "25.2") (cl-lib "0.5")) :commit "e01ad21ea3cc0eba8cd460737116b51be32ffb45" :authors '(("Alexander Miller" . "alexanderm@web.de")) :maintainer '("Alexander Miller" . "alexanderm@web.de") :url "https://github.com/Alexander-Miller/treemacs")"treemacs-icons-dired"2,31

elpa/company-terraform-1.3/company-terraform-data.el,1111
(defconst company-terraform-toplevel-keywords '(company-terraform-toplevel-keywords8,153
(defconst company-terraform-interpolation-extra '(company-terraform-interpolation-extra15,405
(defconst company-terraform-resource-extra '(company-terraform-resource-extra22,621
(defconst company-terraform-data-extra '(company-terraform-data-extra29,1233
(defconst company-terraform-count-extra '(company-terraform-count-extra35,1770
(defconst company-terraform-resource-arguments-hashcompany-terraform-resource-arguments-hash39,1883
(defconst company-terraform-data-arguments-hashcompany-terraform-data-arguments-hash41,1973
(defconst company-terraform-resource-attributes-hashcompany-terraform-resource-attributes-hash43,2059
(defconst company-terraform-data-attributes-hashcompany-terraform-data-attributes-hash45,2150
(defconst company-terraform-resources-list '(company-terraform-resources-list47,2233
(defconst company-terraform-data-list '(company-terraform-data-list20443,1739974
(defconst company-terraform-interpolation-functions  '(company-terraform-interpolation-functions24711,2022436

elpa/company-terraform-1.3/company-terraform-pkg.el,100
(define-package "company-terraform" "1.3" "A company backend for terraform""company-terraform"1,0

elpa/company-terraform-1.3/company-terraform-autoloads.el,0

elpa/company-terraform-1.3/company-terraform.el,1215
(defun company-terraform--scan-resources (dir)company-terraform--scan-resources28,851
(defconst company-terraform-perdir-resource-cachecompany-terraform-perdir-resource-cache83,4152
(defun company-terraform-get-resource-cache (kind &optional dir)company-terraform-get-resource-cache86,4237
(defun company-terraform-get-context ()company-terraform-get-context113,5392
(defun company-terraform-test-context ()company-terraform-test-context159,7223
(defun company-terraform--prefix ()company-terraform--prefix164,7452
(defun company-terraform--make-candidate (candidate)company-terraform--make-candidate179,8137
(defun company-terraform--filterdoc (prefix lists &optional multi)company-terraform--filterdoc185,8360
(defun company-terraform-is-resource-n (string)company-terraform-is-resource-n200,8982
(defun company-terraform-candidates (prefix)company-terraform-candidates204,9152
(defun company-terraform-doc (candidate)company-terraform-doc283,13601
(defun company-terraform-docbuffer (candidate)company-terraform-docbuffer287,13739
(defun company-terraform (command &optional arg &rest ignored)company-terraform292,13932
(defun company-terraform-init ()company-terraform-init304,14416

elpa/play-routes-mode-1.0/play-routes-mode-autoloads.el,0

elpa/play-routes-mode-1.0/play-routes-mode.el,1083
(defun play-routes-open-route () "Open route in browser"play-routes-open-route18,427
(defvar play-routes-host "localhost" "Play host to open routes")play-routes-host32,1015
(defvar play-routes-port "9000" "Play port to open routes")play-routes-port33,1080
(defvar play-routes-protocol "http" "Play protocol to open routes")play-routes-protocol34,1140
(defconst play-routes-mode-keywords '("GET" "POST" "DELETE" "PUT" "HEAD" "OPTIONS"))play-routes-mode-keywords36,1209
(defconst play-routes-mode-keywords-regexp (regexp-opt play-routes-mode-keywords 'words))play-routes-mode-keywords-regexp37,1294
(defconst play-routes-mode-path-variable-regex (rx ?/ (group (any ?: ?* ?$) (one-or-more (not (any whitespace ?/))))))play-routes-mode-path-variable-regex38,1384
(defconst play-routes-mode-arg-variable-regex (rxplay-routes-mode-arg-variable-regex39,1503
(defvar play-routes-mode-highlightsplay-routes-mode-highlights46,1893
(defvar play-routes-mode-mapplay-routes-mode-map53,2156
(define-derived-mode play-routes-mode prog-mode "PlayRoutes"play-routes-mode60,2344

elpa/play-routes-mode-1.0/play-routes-mode-pkg.el,400
(define-package "play-routes-mode" "1.0" "Play Framework Routes File Support" 'nil :commit "d7eb682cd474d90b3a3d005290cd6d4fe9f94cae" :keywords '("play" "scala") :authors '(("M.Riehl <max@flatmap.ninja>, P.Haun" . "bomgar85@googlemail.com")) :maintainer '("M.Riehl <max@flatmap.ninja>, P.Haun" . "bomgar85@googlemail.com") :url "https://github.com/brocode/play-routes-mode/")"play-routes-mode"2,31

elpa/git-commit-2.90.1/git-commit-pkg.el,315
(define-package "git-commit" "2.90.1" "Edit Git commit messages" '((emacs "25.1") (dash "2.14.1") (with-editor "2.8.0")) :commit "791901b2f1d26fa0a383147fe77948a9abc753da" :keywords '("git" "tools" "vc") :maintainer '("Jonas Bernoulli" . "jonas@bernoul.li") :url "https://github.com/magit/magit")"git-commit"2,31

elpa/git-commit-2.90.1/git-commit.el,5323
(defvar diff-default-read-only)diff-default-read-only128,5348
(defvar flyspell-generic-check-word-predicate)flyspell-generic-check-word-predicate129,5380
(defvar font-lock-beg)font-lock-beg130,5427
(defvar font-lock-end)font-lock-end131,5450
(defgroup git-commit nilgit-commit141,5744
(define-minor-mode global-git-commit-modeglobal-git-commit-mode148,5910
(defcustom git-commit-major-mode 'text-modegit-commit-major-mode166,6642
(defcustom git-commit-setup-hookgit-commit-setup-hook174,6929
(defcustom git-commit-post-finish-hook nilgit-commit-post-finish-hook193,7571
(defcustom git-commit-finish-query-functionsgit-commit-finish-query-functions212,8307
(defcustom git-commit-style-convention-checks '(non-empty-second-line)git-commit-style-convention-checks229,8985
(defcustom git-commit-summary-max-length 68git-commit-summary-max-length237,9403
(defcustom git-commit-fill-column nilgit-commit-fill-column250,9916
(defcustom git-commit-known-pseudo-headersgit-commit-known-pseudo-headers269,10684
(defgroup git-commit-faces nilgit-commit-faces279,11012
(defface git-commit-summarygit-commit-summary285,11159
(defface git-commit-overlong-summarygit-commit-overlong-summary290,11304
(defface git-commit-nonempty-second-linegit-commit-nonempty-second-line295,11476
(defface git-commit-notegit-commit-note300,11659
(defface git-commit-pseudo-headergit-commit-pseudo-header305,11797
(defface git-commit-known-pseudo-headergit-commit-known-pseudo-header310,11953
(defface git-commit-comment-branch-localgit-commit-comment-branch-local315,12138
(define-obsolete-face-alias 'git-commit-comment-branchgit-commit-comment-branch322,12393
(defface git-commit-comment-branch-remotegit-commit-comment-branch-remote325,12505
(defface git-commit-comment-detachedgit-commit-comment-detached333,12804
(defface git-commit-comment-headinggit-commit-comment-heading338,12982
(defface git-commit-comment-filegit-commit-comment-file343,13151
(defface git-commit-comment-actiongit-commit-comment-action348,13313
(defvar git-commit-mode-mapgit-commit-mode-map355,13466
(defconst git-commit-filename-regexp "/\\(\git-commit-filename-regexp417,16000
(defun git-commit-setup-font-lock-in-buffer ()git-commit-setup-font-lock-in-buffer426,16322
(defun git-commit-setup-check-buffer ()git-commit-setup-check-buffer434,16595
(defvar git-commit-mode)git-commit-mode439,16756
(defun git-commit-file-not-found ()git-commit-file-not-found441,16782
(defun git-commit-setup ()git-commit-setup468,18047
(defun git-commit-run-post-finish-hook (previous)git-commit-run-post-finish-hook535,20957
(define-minor-mode git-commit-modegit-commit-mode548,21495
(defun git-commit-setup-changelog-support ()git-commit-setup-changelog-support556,21781
(defun git-commit-turn-on-auto-fill ()git-commit-turn-on-auto-fill560,21940
(defun git-commit-turn-on-flyspell ()git-commit-turn-on-flyspell571,22387
(defun git-commit-flyspell-verify ()git-commit-flyspell-verify590,23043
(defun git-commit-finish-query-functions (force)git-commit-finish-query-functions594,23166
(defun git-commit-check-style-conventions (force)git-commit-check-style-conventions598,23298
(defun git-commit-cancel-message ()git-commit-cancel-message619,24293
(defun git-commit-prev-message (arg)git-commit-prev-message627,24525
(defun git-commit-next-message (arg)git-commit-next-message643,25168
(defun git-commit-save-message ()git-commit-save-message649,25389
(defun git-commit-buffer-message ()git-commit-buffer-message656,25634
(defun git-commit-ack (name mail)git-commit-ack679,26422
(defun git-commit-modified (name mail)git-commit-modified684,26618
(defun git-commit-review (name mail)git-commit-review689,26817
(defun git-commit-signoff (name mail)git-commit-signoff694,27018
(defun git-commit-test (name mail)git-commit-test699,27197
(defun git-commit-cc (name mail)git-commit-cc704,27392
(defun git-commit-reported (name mail)git-commit-reported709,27575
(defun git-commit-suggested (name mail)git-commit-suggested714,27775
(defun git-commit-self-ident ()git-commit-self-ident719,27979
(defun git-commit-read-ident ()git-commit-read-ident731,28462
(defun git-commit-insert-header (header name email)git-commit-insert-header735,28560
(defun git-commit-summary-regexp ()git-commit-summary-regexp754,29181
(defun git-commit-extend-region-summary-line ()git-commit-extend-region-summary-line763,29517
(defvar-local git-commit--branch-name-regexp nil)git-commit--branch-name-regexp777,30139
(defconst git-commit-comment-headingsgit-commit-comment-headings779,30190
(defconst git-commit-font-lock-keywords-1git-commit-font-lock-keywords-1788,30401
(defconst git-commit-font-lock-keywords-2git-commit-font-lock-keywords-2807,31138
(defconst git-commit-font-lock-keywords-3git-commit-font-lock-keywords-3823,31904
(defvar git-commit-font-lock-keywords git-commit-font-lock-keywords-2git-commit-font-lock-keywords851,33005
(defun git-commit-setup-font-lock ()git-commit-setup-font-lock854,33121
(defun git-commit-propertize-diff ()git-commit-propertize-diff898,35266
(define-derived-mode git-commit-elisp-text-mode text-mode "ElText"git-commit-elisp-text-mode929,36463
(defvar git-commit-elisp-text-mode-keywordsgit-commit-elisp-text-mode-keywords937,36907

elpa/git-commit-2.90.1/git-commit-autoloads.el,248
(defvar global-git-commit-mode t "\global-git-commit-mode12,307
(defconst git-commit-filename-regexp "/\\(\\(\\(COMMIT\\|NOTES\\|PULLREQ\\|TAG\\)_EDIT\\|MERGE_\\|\\)MSG\\|\\(BRANCH\\|EDIT\\)_DESCRIPTION\\)\\'")git-commit-filename-regexp31,1017

elpa/highlight-symbol-1.3/highlight-symbol-autoloads.el,89
(defalias 'highlight-symbol-at-point 'highlight-symbol)highlight-symbol-at-point19,559

elpa/highlight-symbol-1.3/highlight-symbol-pkg.el,358
(define-package "highlight-symbol" "1.3" "automatic and manual symbol highlighting" 'nil :commit "6136dac6d4328c19077a838dfbae2efc4caa4db2" :keywords '("faces" "matching") :authors '(("Nikolaj Schumacher <bugs * nschum de>")) :maintainer '("Nikolaj Schumacher <bugs * nschum de>") :url "http://nschum.de/src/emacs/highlight-symbol/")"highlight-symbol"2,31

elpa/highlight-symbol-1.3/highlight-symbol.el,3079
(defgroup highlight-symbol nilhighlight-symbol102,3745
(defface highlight-symbol-facehighlight-symbol-face107,3859
(defvar highlight-symbol-timer nil)highlight-symbol-timer115,4099
(defun highlight-symbol-update-timer (value)highlight-symbol-update-timer117,4136
(defvar highlight-symbol-mode nil)highlight-symbol-mode124,4398
(defun highlight-symbol-set (symbol value)highlight-symbol-set126,4434
(defcustom highlight-symbol-idle-delay 1.5highlight-symbol-idle-delay131,4587
(defcustom highlight-symbol-colorshighlight-symbol-colors140,4935
(defcustom highlight-symbol-on-navigation-p nilhighlight-symbol-on-navigation-p148,5268
(defvar highlight-symbol-color-index 0)highlight-symbol-color-index154,5473
(defvar highlight-symbol nil)highlight-symbol157,5573
(defvar highlight-symbol-list nil)highlight-symbol-list160,5651
(defconst highlight-symbol-border-patternhighlight-symbol-border-pattern163,5739
(defcustom highlight-symbol-foreground-color "black"highlight-symbol-foreground-color166,5854
(define-minor-mode highlight-symbol-modehighlight-symbol-mode173,6082
(defalias 'highlight-symbol-at-point 'highlight-symbol)highlight-symbol-at-point188,6670
(defun highlight-symbol (&optional symbol quiet)highlight-symbol191,6742
(defun highlight-symbol-symbol-highlighted-p (symbol)highlight-symbol-symbol-highlighted-p205,7303
(defun highlight-symbol-add-symbol (symbol)highlight-symbol-add-symbol209,7457
(defun highlight-symbol-add-symbol-with-face (symbol face)highlight-symbol-add-symbol-with-face226,8193
(defun highlight-symbol-remove-symbol (symbol)highlight-symbol-remove-symbol230,8352
(defun highlight-symbol-uncompiled-keywords ()highlight-symbol-uncompiled-keywords236,8628
(defun highlight-symbol-remove-all ()highlight-symbol-remove-all242,8786
(defun highlight-symbol-list-all ()highlight-symbol-list-all248,8962
(defun highlight-symbol-fontify-symbol (symbol)highlight-symbol-fontify-symbol254,9180
(defun highlight-symbol-count (&optional symbol)highlight-symbol-count262,9576
(defun highlight-symbol-next ()highlight-symbol-next273,9991
(defun highlight-symbol-prev ()highlight-symbol-prev279,10156
(defun highlight-symbol-next-in-defun ()highlight-symbol-next-in-defun285,10326
(defun highlight-symbol-prev-in-defun ()highlight-symbol-prev-in-defun293,10544
(defvar highlight-symbol-nav-mode-maphighlight-symbol-nav-mode-map300,10752
(define-minor-mode highlight-symbol-nav-modehighlight-symbol-nav-mode308,10998
(defun highlight-symbol-query-replace (replacement)highlight-symbol-query-replace327,11645
(defun highlight-symbol-occur (&optional nlines)highlight-symbol-occur342,12405
(defun highlight-symbol-get-symbol ()highlight-symbol-get-symbol351,12735
(defun highlight-symbol-temp-highlight ()highlight-symbol-temp-highlight358,13059
(defun highlight-symbol-mode-remove-temp ()highlight-symbol-mode-remove-temp371,13623
(defun highlight-symbol-mode-post-command ()highlight-symbol-mode-post-command377,13827
(defun highlight-symbol-jump (dir)highlight-symbol-jump389,14364

elpa/major-mode-hydra-0.2.2/major-mode-hydra-autoloads.el,0

elpa/major-mode-hydra-0.2.2/major-mode-hydra.el,1565
(defcustom major-mode-hydra-separator "═"major-mode-hydra-separator39,1354
(defcustom major-mode-hydra-title-generator nilmajor-mode-hydra-title-generator45,1551
(defcustom major-mode-hydra-invisible-quit-key nilmajor-mode-hydra-invisible-quit-key52,1833
(defun major-mode-hydra--put-if-absent (plist prop val)major-mode-hydra--put-if-absent58,2036
(defun major-mode-hydra--name-for (mode)major-mode-hydra--name-for64,2224
(defun major-mode-hydra--body-name-for (mode)major-mode-hydra--body-name-for68,2371
(defun major-mode-hydra--generate (mode body heads-plist &optional overwrite-p)major-mode-hydra--generate72,2550
(defmacro major-mode-hydra-define (mode body heads-plist)major-mode-hydra-define88,3509
(defmacro major-mode-hydra-define+ (mode body heads-plist)major-mode-hydra-define+105,4164
(defmacro major-mode-hydra-bind (mode column &rest bindings)major-mode-hydra-bind122,4825
(defun major-mode-hydra-dispatch (mode)major-mode-hydra-dispatch136,5385
(defun major-mode-hydra ()major-mode-hydra144,5671
(defvar use-package-keywords)use-package-keywords151,5928
(defun major-mode-hydra--use-package-normalize (package _keyword arglists)major-mode-hydra--use-package-normalize153,5959
(defun major-mode-hydra--use-package-handler (package _keyword args rest state)major-mode-hydra--use-package-handler157,6182
(defun major-mode-hydra--use-package-autoloads (_pkg-name _keyword args)major-mode-hydra--use-package-autoloads165,6566
(defun major-mode-hydra--enable-use-package ()major-mode-hydra--enable-use-package169,6798

elpa/major-mode-hydra-0.2.2/major-mode-hydra-pkg.el,372
(define-package "major-mode-hydra" "0.2.2" "Major mode keybindings managed by Hydra" '((dash "2.15.0") (pretty-hydra "0.2.2") (emacs "25")) :commit "bba876b86f0b80495004bf185b2b1f6083a1ff3a" :authors '(("Jerry Peng" . "pr2jerry@gmail.com")) :maintainer '("Jerry Peng" . "pr2jerry@gmail.com") :url "https://github.com/jerrypnz/major-mode-hydra.el")"major-mode-hydra"2,31

elpa/treemacs-magit-2.6/treemacs-magit-pkg.el,377
(define-package "treemacs-magit" "2.6" "Magit integration for treemacs" '((emacs "25.2") (treemacs "0.0") (pfuture "1.3") (magit "2.90.0")) :commit "e01ad21ea3cc0eba8cd460737116b51be32ffb45" :authors '(("Alexander Miller" . "alexanderm@web.de")) :maintainer '("Alexander Miller" . "alexanderm@web.de") :url "https://github.com/Alexander-Miller/treemacs")"treemacs-magit"2,31

elpa/treemacs-magit-2.6/treemacs-magit-autoloads.el,0

elpa/treemacs-magit-2.6/treemacs-magit.el,472
(defvar treemacs-magit--timers niltreemacs-magit--timers43,1577
(defun treemacs-magit--schedule-update ()treemacs-magit--schedule-update46,1667
(defun treemacs-magit--simple-git-mode-update (magit-root)treemacs-magit--simple-git-mode-update68,2694
(defun treemacs-magit--extended-git-mode-update (magit-root)treemacs-magit--extended-git-mode-update80,3301
(defun treemacs-magit--update-callback (magit-root pfuture-buffer)treemacs-magit--update-callback109,4693

elpa/page-break-lines-0.11/page-break-lines-pkg.el,373
(define-package "page-break-lines" "0.11" "Display ugly ^L page breaks as tidy horizontal lines" 'nil :commit "67b5928a7f14568baf2716b5741e13659a86b9ea" :keywords '("convenience" "faces") :authors '(("Steve Purcell" . "steve@sanityinc.com")) :maintainer '("Steve Purcell" . "steve@sanityinc.com") :url "https://github.com/purcell/page-break-lines")"page-break-lines"2,31

elpa/page-break-lines-0.11/page-break-lines.el,934
(defgroup page-break-lines nilpage-break-lines61,2336
(defcustom page-break-lines-char ?─page-break-lines-char66,2473
(defcustom page-break-lines-lighter " PgLn"page-break-lines-lighter71,2606
(defcustom page-break-lines-modespage-break-lines-modes76,2786
(defface page-break-linespage-break-lines82,3011
(define-minor-mode page-break-lines-modepage-break-lines-mode93,3350
(defun turn-on-page-break-lines-mode ()turn-on-page-break-lines-mode103,3673
(defun turn-off-page-break-lines-mode ()turn-off-page-break-lines-mode108,3809
(defun page-break-lines--update-display-table (window)page-break-lines--update-display-table120,4134
(defun page-break-lines--update-display-tables  (&optional frame)page-break-lines--update-display-tables139,5165
(defun page-break-lines-mode-maybe ()page-break-lines-mode-maybe146,5403
(define-global-minor-mode global-page-break-lines-modeglobal-page-break-lines-mode155,5753

elpa/page-break-lines-0.11/page-break-lines-autoloads.el,81
(defvar global-page-break-lines-mode nil "\global-page-break-lines-mode38,1083

elpa/which-key-3.3.1/which-key.el,18230
(defvar evil-operator-shortcut-map)evil-operator-shortcut-map46,1789
(defvar evil-operator-state-map)evil-operator-state-map47,1825
(defvar evil-motion-state-map)evil-motion-state-map48,1858
(defvar golden-ratio-mode)golden-ratio-mode49,1889
(defgroup which-key nilwhich-key54,1996
(defcustom which-key-idle-delay 1.0which-key-idle-delay59,2105
(defcustom which-key-idle-secondary-delay nilwhich-key-idle-secondary-delay66,2366
(defcustom which-key-echo-keystrokes (if (and echo-keystrokeswhich-key-echo-keystrokes75,2759
(defcustom which-key-max-description-length 27which-key-max-description-length88,3377
(defcustom which-key-add-column-padding 0which-key-add-column-padding94,3613
(defcustom which-key-unicode-correction 3which-key-unicode-correction100,3775
(defcustom which-key-dont-use-unicode nilwhich-key-dont-use-unicode116,4486
(defcustom which-key-separatorwhich-key-separator121,4634
(defcustom which-key-prefix-prefix "+"which-key-prefix-prefix129,4909
(defcustom which-key-compute-remaps nilwhich-key-compute-remaps135,5096
(defvar which-key-key-replacement-alist nil)which-key-key-replacement-alist141,5280
(defvar which-key-description-replacement-alist nil)which-key-description-replacement-alist144,5449
(defvar which-key-key-based-description-replacement-alist nil)which-key-key-based-description-replacement-alist147,5634
(defcustom which-key-replacement-alistwhich-key-replacement-alist151,5840
(defcustom which-key-allow-multiple-replacements nilwhich-key-allow-multiple-replacements211,8385
(defcustom which-key-show-docstrings nilwhich-key-show-docstrings219,8691
(defcustom which-key-highlighted-command-list '()which-key-highlighted-command-list232,9319
(defcustom which-key-special-keys '()which-key-special-keys242,9756
(defcustom which-key-buffer-name " *which-key*"which-key-buffer-name251,10093
(defcustom which-key-show-prefix 'echowhich-key-show-prefix256,10209
(defcustom which-key-popup-type 'side-windowwhich-key-popup-type268,10749
(defcustom which-key-min-display-lines 1which-key-min-display-lines276,11138
(defcustom which-key-max-display-columns nilwhich-key-max-display-columns282,11299
(defcustom which-key-side-window-location 'bottomwhich-key-side-window-location288,11525
(defcustom which-key-side-window-slot 0which-key-side-window-slot302,12084
(defcustom which-key-side-window-max-width 0.333which-key-side-window-max-width316,12703
(defcustom which-key-side-window-max-height 0.25which-key-side-window-max-height324,12998
(defcustom which-key-frame-max-width 60which-key-frame-max-width332,13295
(defcustom which-key-frame-max-height 20which-key-frame-max-height337,13431
(defcustom which-key-allow-imprecise-window-fit nilwhich-key-allow-imprecise-window-fit342,13569
(defcustom which-key-show-remaining-keys nilwhich-key-show-remaining-keys351,13908
(defcustom which-key-sort-order 'which-key-key-orderwhich-key-sort-order357,14111
(defcustom which-key-sort-uppercase-first twhich-key-sort-uppercase-first377,14967
(defcustom which-key-paging-prefixes '()which-key-paging-prefixes384,15187
(defcustom which-key-paging-key "<f5>"which-key-paging-key389,15313
(defcustom which-key-use-C-h-commands twhich-key-use-C-h-commands406,15838
(defcustom which-key-is-verbose nilwhich-key-is-verbose413,16105
(defvar which-key-C-h-mapwhich-key-C-h-map418,16243
(defvar which-key--paging-functions '(which-key-C-h-dispatchwhich-key--paging-functions445,17540
(defcustom which-key-hide-alt-key-translations twhich-key-hide-alt-key-translations454,18062
(defcustom which-key-delay-functions nilwhich-key-delay-functions463,18399
(defcustom which-key-allow-regexps nilwhich-key-allow-regexps478,19054
(defcustom which-key-inhibit-regexps nilwhich-key-inhibit-regexps486,19386
(defcustom which-key-show-transient-maps nilwhich-key-show-transient-maps495,19760
(defcustom which-key-enable-extended-define-key nilwhich-key-enable-extended-define-key504,20045
(defcustom which-key-init-buffer-hook '()which-key-init-buffer-hook523,20757
(defgroup which-key-faces nilwhich-key-faces530,20898
(defface which-key-key-facewhich-key-key-face535,21002
(defface which-key-separator-facewhich-key-separator-face540,21132
(defface which-key-note-facewhich-key-note-face545,21298
(defface which-key-command-description-facewhich-key-command-description-face550,21452
(defface which-key-local-map-description-facewhich-key-local-map-description-face555,21629
(defface which-key-highlighted-command-facewhich-key-highlighted-command-face560,21833
(defface which-key-group-description-facewhich-key-group-description-face566,22106
(defface which-key-special-key-facewhich-key-special-key-face571,22283
(defface which-key-docstring-facewhich-key-docstring-face576,22460
(defcustom which-key-custom-popup-max-dimensions-function nilwhich-key-custom-popup-max-dimensions-function583,22607
(defcustom which-key-custom-hide-popup-function nilwhich-key-custom-hide-popup-function591,22974
(defcustom which-key-custom-show-popup-function nilwhich-key-custom-show-popup-function597,23193
(defcustom which-key-lighter " WK"which-key-lighter605,23493
(defvar which-key-inhibit nilwhich-key-inhibit610,23614
(defvar which-key-keymap-history nilwhich-key-keymap-history617,23814
(defvar which-key--buffer nilwhich-key--buffer623,23948
(defvar which-key--timer nilwhich-key--timer625,24030
(defvar which-key--secondary-timer-active nilwhich-key--secondary-timer-active627,24112
(defvar which-key--paging-timer nilwhich-key--paging-timer629,24215
(defvar which-key--frame nilwhich-key--frame631,24303
(defvar which-key--echo-keystrokes-backup nilwhich-key--echo-keystrokes-backup634,24426
(defvar which-key--prefix-help-cmd-backup nilwhich-key--prefix-help-cmd-backup636,24534
(defvar which-key--last-try-2-loc nilwhich-key--last-try-2-loc638,24638
(defvar which-key--automatic-display nilwhich-key--automatic-display641,24745
(defvar which-key--multiple-locations nil)which-key--multiple-locations644,24855
(defvar which-key--inhibit-next-operator-popup nil)which-key--inhibit-next-operator-popup645,24898
(defvar which-key--prior-show-keymap-args nil)which-key--prior-show-keymap-args646,24950
(defvar which-key--previous-frame-size nil)which-key--previous-frame-size647,24997
(defvar which-key--prefix-title-alist nil)which-key--prefix-title-alist648,25041
(defvar which-key--debug nil)which-key--debug649,25084
(defvar which-key--evil-keys-regexp (eval-when-compilewhich-key--evil-keys-regexp650,25114
(defvar which-key--ignore-non-evil-keys-regexpwhich-key--ignore-non-evil-keys-regexp652,25234
(defvar which-key--ignore-keys-regexpwhich-key--ignore-keys-regexp656,25433
(defvar which-key--pages-obj nil)which-key--pages-obj665,25795
(defun which-key--rotate (list n)which-key--rotate677,25961
(defun which-key--pages-set-current-page (pages-obj n)which-key--pages-set-current-page683,26151
(defsubst which-key--on-first-page ()which-key--on-first-page694,26674
(defsubst which-key--on-last-page ()which-key--on-last-page697,26772
(defsubst which-key--current-prefix ()which-key--current-prefix701,26922
(defcustom which-key-allow-evil-operators (boundp 'evil-this-operator)which-key-allow-evil-operators708,27087
(defcustom which-key-show-operator-state-maps nilwhich-key-show-operator-state-maps715,27380
(defvar which-key--god-mode-support-enabled nilwhich-key--god-mode-support-enabled725,27739
(defvar which-key--god-mode-key-string nilwhich-key--god-mode-key-string730,27924
(defadvice god-mode-lookup-commandgod-mode-lookup-command733,28019
(defun which-key-enable-god-mode-support (&optional disable)which-key-enable-god-mode-support741,28283
(define-minor-mode which-key-modewhich-key-mode759,28917
(defun which-key--init-buffer ()which-key--init-buffer801,30843
(defun which-key--setup-echo-keystrokes ()which-key--setup-echo-keystrokes817,31458
(defun which-key-remove-default-unicode-chars ()which-key-remove-default-unicode-chars827,31941
(defun which-key-setup-side-window-right ()which-key-setup-side-window-right842,32585
(defun which-key-setup-side-window-right-bottom ()which-key-setup-side-window-right-bottom850,32852
(defun which-key-setup-side-window-bottom ()which-key-setup-side-window-bottom859,33178
(defun which-key-setup-minibuffer ()which-key-setup-minibuffer869,33486
(defun which-key-add-key-based-replacementswhich-key-add-key-based-replacements882,33918
(defun which-key-add-major-mode-key-based-replacementswhich-key-add-major-mode-key-based-replacements921,35508
(defalias 'which-key-add-prefix-title 'which-key-add-key-based-replacements)which-key-add-prefix-title956,37323
(defalias 'which-key-declare-prefixes 'which-key-add-key-based-replacements)which-key-declare-prefixes961,37526
(defalias 'which-key-declare-prefixes-for-modewhich-key-declare-prefixes-for-mode966,37729
(defun which-key-define-key-recursively (map key def &optional at-root)which-key-define-key-recursively972,37974
(defun which-key--process-define-key-args (keymap key def)which-key--process-define-key-args982,38361
(defun which-key--text-width-to-total (text-width)which-key--text-width-to-total997,39000
(defun which-key--total-width-to-text (total-width)which-key--total-width-to-text1013,39713
(defun which-key--char-enlarged-p (&optional _frame)which-key--char-enlarged-p1027,40364
(defun which-key--char-reduced-p (&optional _frame)which-key--char-reduced-p1031,40522
(defun which-key--char-exact-p (&optional _frame)which-key--char-exact-p1035,40679
(defun which-key--width-or-percentage-to-width (width-or-percentage)which-key--width-or-percentage-to-width1039,40834
(defun which-key--height-or-percentage-to-height (height-or-percentage)which-key--height-or-percentage-to-height1049,41320
(defun which-key--frame-size-changed-p ()which-key--frame-size-changed-p1059,41817
(defun which-key--hide-popup ()which-key--hide-popup1070,42249
(defun which-key--hide-popup-ignore-command ()which-key--hide-popup-ignore-command1088,43037
(defun which-key--hide-popup-on-frame-size-change (&optional _)which-key--hide-popup-on-frame-size-change1096,43358
(defun which-key--hide-buffer-side-window ()which-key--hide-buffer-side-window1102,43570
(defun which-key--hide-buffer-frame ()which-key--hide-buffer-frame1109,43908
(defun which-key--popup-showing-p ()which-key--popup-showing-p1114,44078
(defun which-key--show-popup (act-popup-dim)which-key--show-popup1118,44214
(defun which-key--fit-buffer-to-window-horizontallywhich-key--fit-buffer-to-window-horizontally1131,44898
(defun which-key--show-buffer-side-window (act-popup-dim)which-key--show-buffer-side-window1139,45249
(defun which-key--show-buffer-frame (act-popup-dim)which-key--show-buffer-frame1166,46600
(defun which-key--show-buffer-new-frame (frame-height frame-width)which-key--show-buffer-new-frame1192,47894
(defun which-key--show-buffer-reuse-frame (frame-height frame-width)which-key--show-buffer-reuse-frame1216,49071
(defun which-key--popup-max-dimensions ()which-key--popup-max-dimensions1228,49494
(defun which-key--minibuffer-max-dimensions ()which-key--minibuffer-max-dimensions1240,50031
(defun which-key--side-window-max-dimensions ()which-key--side-window-max-dimensions1252,50427
(defun which-key--frame-max-dimensions ()which-key--frame-max-dimensions1276,51436
(defun which-key--string< (a b &optional alpha)which-key--string<1283,51665
(defun which-key--key-description< (a b &optional alpha)which-key--key-description<1293,51996
(defsubst which-key-key-order-alpha (acons bcons)which-key-key-order-alpha1335,53907
(defsubst which-key-key-order (acons bcons)which-key-key-order1345,54299
(defsubst which-key-description-order (acons bcons)which-key-description-order1353,54608
(defsubst which-key--group-p (description)which-key--group-p1358,54806
(defun which-key-prefix-then-key-order (acons bcons)which-key-prefix-then-key-order1362,54949
(defun which-key-prefix-then-key-order-reverse (acons bcons)which-key-prefix-then-key-order-reverse1372,55362
(defun which-key-local-then-key-order (acons bcons)which-key-local-then-key-order1382,55780
(defsubst which-key--string-width (maybe-string)which-key--string-width1394,56242
(defsubst which-key--safe-lookup-key (keymap key)which-key--safe-lookup-key1398,56429
(defsubst which-key--butlast-string (str)which-key--butlast-string1402,56609
(defun which-key--get-replacements (key-binding &optional use-major-mode)which-key--get-replacements1405,56711
(defun which-key--get-pseudo-binding (key-binding &optional prefix)which-key--get-pseudo-binding1429,57822
(defun which-key--maybe-replace (key-binding &optional prefix)which-key--maybe-replace1444,58595
(defsubst which-key--current-key-list (&optional key-str)which-key--current-key-list1473,60127
(defsubst which-key--current-key-string (&optional key-str)which-key--current-key-string1478,60323
(defun which-key--local-binding-p (keydesc)which-key--local-binding-p1481,60443
(defun which-key--map-binding-p (map keydesc)which-key--map-binding-p1486,60633
(defun which-key--pseudo-key (key &optional prefix)which-key--pseudo-key1503,61342
(defun which-key--maybe-get-prefix-title (keys)which-key--maybe-get-prefix-title1512,61751
(defun which-key--propertize (string &rest properties)which-key--propertize1538,62800
(defun which-key--propertize-key (key)which-key--propertize-key1543,62982
(defsubst which-key--truncate-description (desc)which-key--truncate-description1564,63936
(defun which-key--highlight-face (description)which-key--highlight-face1573,64387
(defun which-key--propertize-descriptionwhich-key--propertize-description1590,65018
(defun which-key--extract-key (key-str)which-key--extract-key1629,66933
(defun which-key--maybe-add-docstring (current original)which-key--maybe-add-docstring1637,67252
(defun which-key--format-and-replace (unformatted &optional prefix preserve-full-key)which-key--format-and-replace1656,68094
(defun which-key--get-keymap-bindings (keymap &optional all prefix)which-key--get-keymap-bindings1694,69814
(defun which-key--compute-binding (binding)which-key--compute-binding1743,72153
(defun which-key--get-current-bindings (&optional prefix)which-key--get-current-bindings1753,72483
(defun which-key--get-bindings (&optional prefix keymap filter recursive)which-key--get-bindings1824,75896
(defun which-key--normalize-columns (columns)which-key--normalize-columns1846,76847
(defsubst which-key--join-columns (columns)which-key--join-columns1857,77220
(defsubst which-key--max-len (keys index)which-key--max-len1863,77534
(defun which-key--pad-column (col-keys)which-key--pad-column1870,77783
(defun which-key--partition-list (n list)which-key--partition-list1886,78560
(defun which-key--list-to-pages (keys avl-lines avl-width)which-key--list-to-pages1894,78798
(defun which-key--create-pages-1which-key--create-pages-11935,80537
(defun which-key--create-pages (keys &optional prefix-keys prefix-title)which-key--create-pages1961,81643
(defun which-key--lighter-status ()which-key--lighter-status1992,83176
(defun which-key--lighter-restore ()which-key--lighter-restore2000,83577
(defun which-key--echo (text)which-key--echo2006,83783
(defun which-key--next-page-hint (prefix-keys)which-key--next-page-hint2011,83910
(defun which-key--full-prefix (prefix-keys &optional -prefix-arg dont-prop-keys)which-key--full-prefix2040,85202
(defun which-key--get-popup-map ()which-key--get-popup-map2056,85940
(defun which-key--process-page (pages-obj)which-key--process-page2066,86363
(defun which-key--show-page (&optional n)which-key--show-page2138,89690
(defun which-key-reload-key-sequence (&optional key-seq)which-key-reload-key-sequence2171,91118
(defun which-key-turn-page (delta)which-key-turn-page2182,91646
(defun which-key-show-standard-help (&optional _)which-key-show-standard-help2193,92020
(defun which-key-show-next-page-no-cycle ()which-key-show-next-page-no-cycle2213,92986
(defun which-key-show-previous-page-no-cycle ()which-key-show-previous-page-no-cycle2223,93302
(defun which-key-show-next-page-cycle (&optional _)which-key-show-next-page-cycle2232,93569
(defun which-key-show-previous-page-cycle (&optional _)which-key-show-previous-page-cycle2240,93793
(defun which-key-show-top-level (&optional _)which-key-show-top-level2248,94027
(defun which-key-show-major-mode ()which-key-show-major-mode2254,94206
(defun which-key-undo-key (&optional _)which-key-undo-key2270,94829
(defalias 'which-key-undo 'which-key-undo-key)which-key-undo2285,95561
(defun which-key-abort (&optional _)which-key-abort2287,95609
(defun which-key-digit-argument (key)which-key-digit-argument2294,95783
(defun which-key-toggle-docstrings (&optional _)which-key-toggle-docstrings2302,96058
(defun which-key-C-h-dispatch ()which-key-C-h-dispatch2311,96406
(defun which-key--any-match-p (regexps string)which-key--any-match-p2353,98540
(defun which-key--try-2-side-windowswhich-key--try-2-side-windows2360,98749
(defun which-key--read-keymap ()which-key--read-keymap2384,99640
(defun which-key-show-keymap (keymap)which-key-show-keymap2401,100287
(defun which-key-show-full-keymap (keymap)which-key-show-full-keymap2409,100606
(defun which-key-show-minor-mode-keymap ()which-key-show-minor-mode-keymap2418,100952
(defun which-key--show-keymap (keymap-name keymap &optional prior-args all)which-key--show-keymap2436,101673
(defun which-key--evil-operator-filter (binding)which-key--evil-operator-filter2459,102905
(defun which-key--show-evil-operator-keymap ()which-key--show-evil-operator-keymap2464,103087
(defun which-key--create-buffer-and-showwhich-key--create-buffer-and-show2500,104850
(defun which-key--this-command-keys ()which-key--this-command-keys2523,105999
(defun which-key--update ()which-key--update2549,107343
(defun which-key--start-timer (&optional delay secondary)which-key--start-timer2608,110398
(defun which-key--stop-timer ()which-key--stop-timer2618,110742
(defun which-key--start-paging-timer ()which-key--start-paging-timer2622,110885

elpa/which-key-3.3.1/which-key-pkg.el,321
(define-package "which-key" "3.3.1" "Display available keybindings in popup" '((emacs "24.4")) :commit "2f5661646b771f6c5a00a8a9aaa3f183abd5f84d" :authors '(("Justin Burkett" . "justin@burkett.cc")) :maintainer '("Justin Burkett" . "justin@burkett.cc") :url "https://github.com/justbur/emacs-which-key")"which-key"2,31

elpa/which-key-3.3.1/which-key-autoloads.el,52
(defvar which-key-mode nil "\which-key-mode12,303

elpa/evil-mc-20190916.348/evil-mc-scratch.el,334
(defun evil-mc-clear-buffer-undo-list ()evil-mc-clear-buffer-undo-list13,190
(defun evil-mc-clear-buffer-undo-tree ()evil-mc-clear-buffer-undo-tree18,313
(defun evil-mc-remove-all-overlays ()evil-mc-remove-all-overlays23,436
(defun evil-mc-insert-current-date-at-each-cursor ()evil-mc-insert-current-date-at-each-cursor29,570

elpa/evil-mc-20190916.348/evil-mc-cursor-make.el,4081
(defun evil-mc-cursor-is-of-type (type)evil-mc-cursor-is-of-type15,293
(defun evil-mc-cursor-is-bar ()evil-mc-cursor-is-bar20,465
(defun evil-mc-cursor-is-hbar ()evil-mc-cursor-is-hbar25,666
(defun evil-mc-get-cursor-face ()evil-mc-get-cursor-face29,793
(defun evil-mc-get-hbar-cursor-face ()evil-mc-get-hbar-cursor-face33,928
(defun evil-mc-get-bar-cursor-face ()evil-mc-get-bar-cursor-face37,1072
(defun evil-mc-set-cursor-face (face)evil-mc-set-cursor-face41,1212
(defun evil-mc-print-cursors-info (&optional msg)evil-mc-print-cursors-info45,1327
(defun evil-mc-cursor-overlay (start end)evil-mc-cursor-overlay53,1677
(defun evil-mc-setup-cursor-overlay (overlay default-setup)evil-mc-setup-cursor-overlay60,1958
(defun evil-mc-setup-cursor-overlay-at-eol (overlay face)evil-mc-setup-cursor-overlay-at-eol68,2360
(defun evil-mc-setup-cursor-overlay-inline (overlay face)evil-mc-setup-cursor-overlay-inline72,2552
(defun evil-mc-cursor-overlay-at-eol (pos)evil-mc-cursor-overlay-at-eol76,2708
(defun evil-mc-cursor-overlay-inline (pos)evil-mc-cursor-overlay-inline82,2967
(defun evil-mc-cursor-overlay-at-pos (&optional pos)evil-mc-cursor-overlay-at-pos88,3235
(defun evil-mc-sort-cursors ()evil-mc-sort-cursors97,3508
(defun evil-mc-copy-cursor-state (from &optional to)evil-mc-copy-cursor-state105,3770
(defun evil-mc-read-cursor-state (&optional state)evil-mc-read-cursor-state115,4106
(defun evil-mc-write-cursor-state (state)evil-mc-write-cursor-state125,4501
(defun evil-mc-insert-cursor-into-list (cursor cursor-list)evil-mc-insert-cursor-into-list132,4770
(defun evil-mc-insert-cursor (cursor)evil-mc-insert-cursor148,5506
(defun evil-mc-delete-cursor (cursor)evil-mc-delete-cursor155,5833
(defun evil-mc-delete-all-regions ()evil-mc-delete-all-regions160,6031
(defun evil-mc-undo-cursor (cursor)evil-mc-undo-cursor167,6297
(defun evil-mc-get-default-cursor ()evil-mc-get-default-cursor175,6612
(defun evil-mc-make-cursor-at-pos (pos &optional source-cursor)evil-mc-make-cursor-at-pos187,7003
(defun evil-mc-undo-cursor-at-pos (pos)evil-mc-undo-cursor-at-pos208,8123
(defun evil-mc-undo-last-added-cursor ()evil-mc-undo-last-added-cursor223,8711
(defun evil-mc-find-prev-cursor (&optional pos)evil-mc-find-prev-cursor239,9325
(defun evil-mc-find-next-cursor (&optional pos)evil-mc-find-next-cursor249,9713
(defun evil-mc-find-first-cursor ()evil-mc-find-first-cursor259,10101
(defun evil-mc-find-last-cursor ()evil-mc-find-last-cursor263,10215
(defun evil-mc-make-pattern (text whole-word)evil-mc-make-pattern267,10336
(defun evil-mc-set-pattern-for-range (range whole-word)evil-mc-set-pattern-for-range273,10596
(defun evil-mc-set-pattern ()evil-mc-set-pattern285,11130
(defun evil-mc-make-cursors-for-all ()evil-mc-make-cursors-for-all297,11668
(defun evil-mc-goto-cursor (cursor create)evil-mc-goto-cursor310,12153
(defun evil-mc-goto-match (direction create)evil-mc-goto-match323,12684
(defun evil-mc-find-and-goto-cursor (find create)evil-mc-find-and-goto-cursor354,14251
(defun evil-mc-find-and-goto-match (direction create)evil-mc-find-and-goto-match369,14907
(defun evil-mc-run-cursors-before ()evil-mc-run-cursors-before376,15200
(defun evil-mc-run-cursors-after (had-cursors)evil-mc-run-cursors-after381,15378
(defun evil-mc-cursors-before ()evil-mc-cursors-before386,15591
(defun evil-mc-cursors-after ()evil-mc-cursors-after393,15899
(defun evil-mc-before-undo-all-cursors ()evil-mc-before-undo-all-cursors400,16123
(defun evil-mc-set-killed-rectangle ()evil-mc-set-killed-rectangle404,16259
(defun evil-mc-kill-ring-entries ()evil-mc-kill-ring-entries411,16550
(defun evil-mc-make-cursor-move-by-line (dir count)evil-mc-make-cursor-move-by-line427,17138
(defun evil-mc-toggle-cursor-on-click (event)evil-mc-toggle-cursor-on-click445,17734
(defun evil-mc-make-cursor-in-visual-selection-block (column)evil-mc-make-cursor-in-visual-selection-block464,18478
(defun evil-mc-make-cursor-in-visual-selection (beg)evil-mc-make-cursor-in-visual-selection477,18945

elpa/evil-mc-20190916.348/evil-mc-common.el,690
(defun evil-mc-get-object-property (obj prop)evil-mc-get-object-property9,116
(defun evil-mc-put-object-property (obj prop val &rest properties)evil-mc-put-object-property14,260
(defun evil-mc-put-object-properties (obj &rest properties)evil-mc-put-object-properties24,702
(defun evil-mc-column-number (pos)evil-mc-column-number31,920
(defun evil-mc-message (format-string &rest args)evil-mc-message37,1054
(defun evil-mc-ends-with-newline-p (text)evil-mc-ends-with-newline-p44,1364
(defun evil-mc-goto-char (pos)evil-mc-goto-char48,1486
(defun evil-mc-starts-with-digit-p (vector)evil-mc-starts-with-digit-p55,1775
(defun evil-mc-all-equal (list)evil-mc-all-equal62,1999

elpa/evil-mc-20190916.348/evil-mc-known-commands.el,61
(defvar evil-mc-known-commandsevil-mc-known-commands10,209

elpa/evil-mc-20190916.348/evil-mc-cursor-state.el,2949
(defun evil-mc-get-cursor-variables (&optional categories)evil-mc-get-cursor-variables11,198
(defun evil-mc-get-cursor-property (cursor name)evil-mc-get-cursor-property24,844
(defun evil-mc-put-cursor-property (cursor &rest properties)evil-mc-put-cursor-property28,1008
(defun evil-mc-get-cursor-properties (cursor properties)evil-mc-get-cursor-properties32,1220
(defun evil-mc-get-cursor-overlay (cursor)evil-mc-get-cursor-overlay38,1447
(defun evil-mc-put-cursor-overlay (cursor overlay)evil-mc-put-cursor-overlay42,1572
(defun evil-mc-get-cursor-last-position (cursor)evil-mc-get-cursor-last-position46,1724
(defun evil-mc-put-cursor-last-position (cursor last-position)evil-mc-put-cursor-last-position50,1867
(defun evil-mc-get-cursor-undo-stack (cursor)evil-mc-get-cursor-undo-stack54,2055
(defun evil-mc-put-cursor-undo-stack (cursor undo-stack)evil-mc-put-cursor-undo-stack58,2189
(defun evil-mc-get-cursor-undo-stack-pointer (cursor)evil-mc-get-cursor-undo-stack-pointer62,2359
(defun evil-mc-put-cursor-undo-stack-pointer (cursor undo-stack-pointer)evil-mc-put-cursor-undo-stack-pointer66,2517
(defun evil-mc-get-cursor-region (cursor)evil-mc-get-cursor-region70,2735
(defun evil-mc-put-cursor-region (cursor region)evil-mc-put-cursor-region74,2857
(defun evil-mc-get-cursor-kill-ring (cursor)evil-mc-get-cursor-kill-ring78,3003
(defun evil-mc-put-cursor-kill-ring (cursor kill-ring)evil-mc-put-cursor-kill-ring82,3136
(defun evil-mc-get-cursor-kill-ring-yank-pointer (cursor)evil-mc-get-cursor-kill-ring-yank-pointer86,3302
(defun evil-mc-put-cursor-kill-ring-yank-pointer (cursor kill-ring-yank-pointer)evil-mc-put-cursor-kill-ring-yank-pointer91,3477
(defun evil-mc-get-cursor-temporary-goal-column (cursor)evil-mc-get-cursor-temporary-goal-column96,3724
(defun evil-mc-put-cursor-temporary-goal-column (cursor temporary-goal-column)evil-mc-put-cursor-temporary-goal-column100,3891
(defun evil-mc-get-cursor-evil-markers-alist (cursor)evil-mc-get-cursor-evil-markers-alist104,4127
(defun evil-mc-put-cursor-evil-markers-alist (cursor evil-markers-alist)evil-mc-put-cursor-evil-markers-alist108,4285
(defun evil-mc-get-cursor-evil-jump-list (cursor)evil-mc-get-cursor-evil-jump-list112,4503
(defun evil-mc-put-cursor-evil-jump-list (cursor evil-jump-list)evil-mc-put-cursor-evil-jump-list116,4649
(defun evil-mc-get-cursor-mark-ring (cursor)evil-mc-get-cursor-mark-ring120,4843
(defun evil-mc-put-cursor-mark-ring (cursor mark-ring)evil-mc-put-cursor-mark-ring124,4976
(defun evil-mc-get-cursor-mark-active (cursor)evil-mc-get-cursor-mark-active128,5142
(defun evil-mc-put-cursor-mark-active (cursor mark-active)evil-mc-put-cursor-mark-active132,5281
(defun evil-mc-get-cursor-start (cursor)evil-mc-get-cursor-start136,5459
(defun evil-mc-get-cursor-end (cursor)evil-mc-get-cursor-end141,5608
(defun evil-mc-delete-cursor-overlay (cursor)evil-mc-delete-cursor-overlay146,5751

elpa/evil-mc-20190916.348/evil-mc-region.el,2165
(defun evil-mc-put-region-property (region &rest properties)evil-mc-put-region-property11,176
(defun evil-mc-get-region-property (region name)evil-mc-get-region-property16,388
(defun evil-mc-get-region-overlay (region)evil-mc-get-region-overlay20,557
(defun evil-mc-get-region-mark (region)evil-mc-get-region-mark24,686
(defun evil-mc-get-region-point (region)evil-mc-get-region-point28,806
(defun evil-mc-get-region-start (region)evil-mc-get-region-start32,929
(defun evil-mc-get-region-end (region)evil-mc-get-region-end37,1115
(defun evil-mc-get-region-type (region)evil-mc-get-region-type42,1295
(defun evil-mc-line-region-p (region)evil-mc-line-region-p46,1415
(defun evil-mc-char-region-p (region)evil-mc-char-region-p50,1537
(defun evil-mc-put-region-overlay (region overlay)evil-mc-put-region-overlay54,1659
(defun evil-mc-put-region-mark (region mark)evil-mc-put-region-mark58,1825
(defun evil-mc-put-region-point (region point)evil-mc-put-region-point62,1973
(defun evil-mc-put-region-type (region type)evil-mc-put-region-type66,2127
(defun evil-mc-get-pos-at-bol (pos)evil-mc-get-pos-at-bol70,2275
(defun evil-mc-get-pos-at-eol (pos)evil-mc-get-pos-at-eol74,2423
(defun evil-mc-calculate-region-bounds (prev-mark prev-point point)evil-mc-calculate-region-bounds78,2565
(defun evil-mc-region-overlay (start end)evil-mc-region-overlay87,3048
(defun evil-mc-char-region-overlay (mark point)evil-mc-char-region-overlay94,3334
(defun evil-mc-line-region-overlay (mark point)evil-mc-line-region-overlay103,3695
(defun evil-mc-create-region-overlay (region)evil-mc-create-region-overlay116,4320
(defun evil-mc-update-region-overlay (region)evil-mc-update-region-overlay125,4694
(defun evil-mc-create-region (mark point type)evil-mc-create-region129,4885
(defun evil-mc-update-region (region &optional point)evil-mc-update-region136,5230
(defun evil-mc-change-region-type (region new-type)evil-mc-change-region-type149,5917
(defun evil-mc-exchange-region-point-and-mark (region)evil-mc-exchange-region-point-and-mark154,6139
(defun evil-mc-delete-region-overlay (region)evil-mc-delete-region-overlay163,6599

elpa/evil-mc-20190916.348/evil-mc.el,1085
(defun evil-mc-active-mode-line (prefix)evil-mc-active-mode-line45,1045
(defcustom evil-mc-mode-lineevil-mc-mode-line66,1903
(defvar evil-mc-key-mapevil-mc-key-map79,2385
(define-minor-mode evil-mc-modeevil-mc-mode106,3731
(define-globalized-minor-mode global-evil-mc-modeglobal-evil-mc-mode123,4163
(defun evil-mc-initialize ()evil-mc-initialize127,4264
(defun turn-on-evil-mc-mode ()turn-on-evil-mc-mode132,4378
(defun turn-off-evil-mc-mode ()turn-off-evil-mc-mode138,4509
(defun evil-mc-define-vars ()evil-mc-define-vars143,4628
(defun evil-mc-initialize-vars ()evil-mc-initialize-vars172,5680
(defun evil-mc-pause-incompatible-modes ()evil-mc-pause-incompatible-modes183,6013
(defun evil-mc-resume-incompatible-modes ()evil-mc-resume-incompatible-modes190,6265
(defun evil-mc-initialize-hooks ()evil-mc-initialize-hooks195,6438
(defun evil-mc-teardown-hooks ()evil-mc-teardown-hooks202,6846
(defun evil-mc-initialize-active-state ()evil-mc-initialize-active-state209,7254
(defun evil-mc-teardown-active-state ()evil-mc-teardown-active-state226,8056

elpa/evil-mc-20190916.348/evil-mc-vars.el,3257
(defgroup evil-mc nilevil-mc12,182
(defun evil-mc-cursor-color (state-cursor)evil-mc-cursor-color17,293
(defface evil-mc-cursor-default-faceevil-mc-cursor-default-face25,613
(defface evil-mc-region-faceevil-mc-region-face30,752
(defface evil-mc-cursor-bar-faceevil-mc-cursor-bar-face35,861
(defface evil-mc-cursor-hbar-faceevil-mc-cursor-hbar-face40,1057
(defcustom evil-mc-cursor-overlay-priority 201evil-mc-cursor-overlay-priority45,1264
(defcustom evil-mc-region-overlay-priority 99evil-mc-region-overlay-priority50,1394
(defvar evil-mc-cursor-variablesevil-mc-cursor-variables55,1523
(defun evil-mc-known-command-p (cmd)evil-mc-known-command-p146,4750
(defun evil-mc-has-cursors-p ()evil-mc-has-cursors-p152,5002
(defun evil-mc-has-command-p ()evil-mc-has-command-p156,5111
(defun evil-mc-has-pattern-p ()evil-mc-has-pattern-p160,5233
(defun evil-mc-executing-command-p ()evil-mc-executing-command-p164,5336
(defun evil-mc-recording-command-p ()evil-mc-recording-command-p168,5467
(defun evil-mc-executing-debug-p ()evil-mc-executing-debug-p172,5577
(defun evil-mc-recording-debug-p ()evil-mc-recording-debug-p176,5716
(defun evil-mc-debug (state executing recording)evil-mc-debug180,5855
(defun evil-mc-executing-debug-on ()evil-mc-executing-debug-on185,6102
(defun evil-mc-executing-debug-off ()evil-mc-executing-debug-off190,6228
(defun evil-mc-recording-debug-on ()evil-mc-recording-debug-on195,6358
(defun evil-mc-recording-debug-off ()evil-mc-recording-debug-off200,6484
(defun evil-mc-all-debug-on ()evil-mc-all-debug-on205,6614
(defun evil-mc-all-debug-off ()evil-mc-all-debug-off210,6710
(defun evil-mc-print-pattern ()evil-mc-print-pattern215,6810
(defun evil-mc-print-cursor-list ()evil-mc-print-cursor-list220,6931
(defun evil-mc-print-command ()evil-mc-print-command227,7163
(defun evil-mc-frozen-p ()evil-mc-frozen-p232,7311
(defun evil-mc-pause-cursors ()evil-mc-pause-cursors236,7405
(defun evil-mc-resume-cursors ()evil-mc-resume-cursors242,7537
(defun evil-mc-clear-pattern ()evil-mc-clear-pattern248,7674
(defun evil-mc-clear-command ()evil-mc-clear-command252,7776
(defun evil-mc-clear-command-count ()evil-mc-clear-command-count256,7870
(defun evil-mc-clear-cursor-list ()evil-mc-clear-cursor-list260,7982
(defun evil-mc-update-cursor-list (cursors)evil-mc-update-cursor-list264,8080
(defun evil-mc-clear-executing-command ()evil-mc-clear-executing-command268,8213
(defun evil-mc-clear-recording-command ()evil-mc-clear-recording-command272,8348
(defun evil-mc-clear-executing-debug ()evil-mc-clear-executing-debug276,8483
(defun evil-mc-clear-recording-debug ()evil-mc-clear-recording-debug280,8612
(defun evil-mc-clear-paused-modes ()evil-mc-clear-paused-modes284,8741
(defun evil-mc-clear-cursor-state ()evil-mc-clear-cursor-state288,8861
(defun evil-mc-get-pattern ()evil-mc-get-pattern292,8981
(defun evil-mc-get-pattern-text ()evil-mc-get-pattern-text296,9092
(defun evil-mc-get-pattern-start ()evil-mc-get-pattern-start300,9219
(defun evil-mc-get-pattern-end ()evil-mc-get-pattern-end304,9353
(defun evil-mc-get-pattern-length ()evil-mc-get-pattern-length308,9483
(defun evil-mc-get-cursor-count ()evil-mc-get-cursor-count313,9648

elpa/evil-mc-20190916.348/evil-mc-pkg.el,88
(define-package "evil-mc" "20190916.348" "Multiple cursors for evil-mode""evil-mc"1,0

elpa/evil-mc-20190916.348/evil-mc-command-record.el,1829
(defun evil-mc-command-p (cmd)evil-mc-command-p14,268
(defun evil-mc-command-reset ()evil-mc-command-reset18,398
(defun evil-mc-get-command-property (name)evil-mc-get-command-property23,538
(defun evil-mc-set-command-property (&rest properties)evil-mc-set-command-property27,687
(defun evil-mc-add-command-property (&rest properties)evil-mc-add-command-property32,951
(defun evil-mc-get-command-keys-vector (&optional name)evil-mc-get-command-keys-vector47,1633
(defun evil-mc-get-command-keys-count ()evil-mc-get-command-keys-count51,1812
(defun evil-mc-get-command-keys-string (&optional name)evil-mc-get-command-keys-string55,1958
(defun evil-mc-get-command-undo-list-pointer-pre ()evil-mc-get-command-undo-list-pointer-pre64,2389
(defun evil-mc-get-command-undo-list-pointer-post ()evil-mc-get-command-undo-list-pointer-post69,2615
(defun evil-mc-command-undoable-p ()evil-mc-command-undoable-p74,2842
(defun evil-mc-undo-command-p ()evil-mc-undo-command-p79,3084
(defun evil-mc-get-command-name ()evil-mc-get-command-name83,3250
(defun evil-mc-get-command-state ()evil-mc-get-command-state88,3390
(defun evil-mc-get-command-last-input ()evil-mc-get-command-last-input93,3551
(defun evil-mc-save-keys (flag pre-name post-name keys)evil-mc-save-keys98,3717
(defun evil-mc-update-command-count (keys-vector)evil-mc-update-command-count104,3963
(defun evil-mc-add-current-count (keys-vector)evil-mc-add-current-count111,4319
(defun evil-mc-begin-command-save ()evil-mc-begin-command-save120,4699
(defun evil-mc-save-keys-motion (flag)evil-mc-save-keys-motion144,6054
(defun evil-mc-save-keys-operator (flag)evil-mc-save-keys-operator155,6518
(defun evil-mc-finish-command-save ()evil-mc-finish-command-save167,7041
(defun evil-mc-finalize-command ()evil-mc-finalize-command187,8015

elpa/evil-mc-20190916.348/evil-mc-autoloads.el,62
(defvar global-evil-mc-mode nil "\global-evil-mc-mode17,411

elpa/evil-mc-20190916.348/evil-mc-command-execute.el,3606
(defmacro evil-mc-define-handler (command &rest body)evil-mc-define-handler19,414
(defmacro evil-mc-save-window-scroll (&rest forms)evil-mc-save-window-scroll54,1686
(defmacro evil-mc-define-visual-handler (command &rest body)evil-mc-define-visual-handler69,2196
(defmacro evil-mc-with-region (region form &rest body)evil-mc-with-region79,2523
(defmacro evil-mc-with-region-or-execute-macro (region add-register &rest body)evil-mc-with-region-or-execute-macro89,2907
(defun evil-mc-execute-hippie-expand ()evil-mc-execute-hippie-expand97,3217
(defun evil-mc-execute-evil-find-char ()evil-mc-execute-evil-find-char101,3313
(defun evil-mc-execute-evil-snipe ()evil-mc-execute-evil-snipe105,3456
(defun evil-mc-execute-evil-snipe-reverse ()evil-mc-execute-evil-snipe-reverse109,3563
(defun evil-mc-execute-evil-commentary ()evil-mc-execute-evil-commentary113,3696
(defun evil-mc-execute-evil-join ()evil-mc-execute-evil-join119,3948
(defun evil-mc-execute-evil-shift (cmd)evil-mc-execute-evil-shift125,4143
(defun evil-mc-execute-evil-surround-region ()evil-mc-execute-evil-surround-region133,4407
(defun evil-mc-execute-change-case (cmd)evil-mc-execute-change-case143,4741
(defun evil-mc-execute-evil-replace ()evil-mc-execute-evil-replace150,5015
(defun evil-mc-execute-evil-exchange ()evil-mc-execute-evil-exchange158,5289
(defun evil-mc-execute-with-region-or-macro (cmd)evil-mc-execute-with-region-or-macro164,5517
(defun evil-mc-execute-with-region-or-pos (cmd)evil-mc-execute-with-region-or-pos171,5837
(defun evil-mc-execute-evil-change-line ()evil-mc-execute-evil-change-line182,6204
(defun evil-mc-execute-evil-yank ()evil-mc-execute-evil-yank186,6348
(defun evil-mc-execute-evil-paredit-yank ()evil-mc-execute-evil-paredit-yank194,6682
(defun evil-mc-execute-evil-substitute ()evil-mc-execute-evil-substitute201,7009
(defun evil-mc-execute-evil-change ()evil-mc-execute-evil-change209,7300
(defun evil-mc-execute-evil-paredit-change ()evil-mc-execute-evil-paredit-change221,7777
(defun evil-mc-execute-evil-paste ()evil-mc-execute-evil-paste232,8245
(defun evil-mc-execute-macro (&optional add-register)evil-mc-execute-macro264,9805
(defun evil-mc-execute-evil-goto-line ()evil-mc-execute-evil-goto-line273,10132
(defun evil-mc-execute-evil-repeat ()evil-mc-execute-evil-repeat280,10346
(defun evil-mc-execute-call ()evil-mc-execute-call284,10497
(defun evil-mc-execute-call-with-last-input ()evil-mc-execute-call-with-last-input288,10638
(defun evil-mc-execute-call-with-count ()evil-mc-execute-call-with-count292,10840
(defun evil-mc-execute-not-supported ()evil-mc-execute-not-supported296,11017
(defun evil-mc-clear-current-region ()evil-mc-clear-current-region301,11204
(defun evil-mc-update-current-region ()evil-mc-update-current-region305,11296
(defun evil-mc-execute-visual-region (type)evil-mc-execute-visual-region309,11416
(defun evil-mc-get-command-keys-vector-with-register ()evil-mc-get-command-keys-vector-with-register318,11775
(defun evil-mc-get-command-handler (cmd state)evil-mc-get-command-handler565,20023
(defun evil-mc-get-state-variables (handler)evil-mc-get-state-variables582,20846
(defun evil-mc-get-clear-variables (handler)evil-mc-get-clear-variables589,21213
(defun evil-mc-get-var-name-value (var)evil-mc-get-var-name-value594,21436
(defun evil-mc-execute-for (cursor state-variables clear-variables)evil-mc-execute-for598,21628
(defun evil-mc-execute-for-all ()evil-mc-execute-for-all642,23511
(defun evil-mc-execute-for-all-cursors (cmd)evil-mc-execute-for-all-cursors677,25348

elpa/evil-mc-20190916.348/evil-mc-undo.el,335
(defmacro evil-mc-with-single-undo (&rest body)evil-mc-with-single-undo14,256
(defun evil-mc-has-undo-boundary-p (&optional undo-list)evil-mc-has-undo-boundary-p36,1117
(defun evil-mc-ensure-one-undo-step ()evil-mc-ensure-one-undo-step41,1362
(defun evil-mc-remove-last-undo-boundary ()evil-mc-remove-last-undo-boundary48,1670

elpa/evil-mc-20190916.348/evil-mc-setup.el,332
(defun evil-mc-pause-smartchr-for-mode (mode)evil-mc-pause-smartchr-for-mode15,343
(defun evil-mc-before-cursors-setup-hook ()evil-mc-before-cursors-setup-hook25,811
(defun evil-mc-after-cursors-teardown-hook ()evil-mc-after-cursors-teardown-hook35,1284
(defvar evil-mc-mode-line-prefix "ⓜ"evil-mc-mode-line-prefix43,1623

elpa/lv-0.15.0/lv-autoloads.el,0

elpa/lv-0.15.0/lv-pkg.el,172
(define-package "lv" "0.15.0" "Other echo area" 'nil :commit "f27fce1b2f0a9162e159557bdeb2c0c94defb4d2" :authors '(("Oleh Krehel")) :maintainer '("Oleh Krehel"))"lv"2,31

elpa/lv-0.15.0/lv.el,481
(defgroup lv nillv37,1274
(defcustom lv-use-separator nillv-use-separator42,1355
(defface lv-separatorlv-separator47,1487
(defvar lv-wnd nillv-wnd55,1818
(defvar display-line-numbers)display-line-numbers58,1872
(defun lv-window ()lv-window60,1903
(defvar golden-ratio-mode)golden-ratio-mode83,2715
(defvar lv-force-update nillv-force-update85,2743
(defun lv-message (format-string &rest args)lv-message88,2843
(defun lv-delete-window ()lv-delete-window112,3842

elpa/org-journal-1.15.1/org-journal-autoloads.el,0

elpa/org-journal-1.15.1/org-journal-pkg.el,282
(define-package "org-journal" "1.15.1" "a simple org-mode based journaling mode" '((emacs "25.1")) :commit "af2819c41b34fc88e2aee473fbdf695451ba167c" :authors '(("Bastian Bechtold")) :maintainer '("Bastian Bechtold") :url "http://github.com/bastibe/org-journal")"org-journal"2,31

elpa/org-journal-1.15.1/org-journal.el,5964
(defvar org-journal-file-patternorg-journal-file-pattern68,3051
(defun org-journal-update-auto-mode-alist ()org-journal-update-auto-mode-alist77,3480
(defun org-journal-dir-and-format->regex (dir format)org-journal-dir-and-format->regex88,3859
(defgroup org-journal nilorg-journal102,4320
(defface org-journal-highlightorg-journal-highlight107,4429
(defun org-journal-highlight (str)org-journal-highlight111,4542
(defface org-journal-calendar-entry-faceorg-journal-calendar-entry-face117,4775
(defface org-journal-calendar-scheduled-faceorg-journal-calendar-scheduled-face121,4928
(defcustom org-journal-dir "~/Documents/journal/"org-journal-dir125,5092
(defcustom org-journal-file-format "%Y%m%d"org-journal-file-format141,5888
(defcustom org-journal-date-format "%A, %x"org-journal-date-format160,6738
(defcustom org-journal-date-prefix "* "org-journal-date-prefix167,7013
(defcustom org-journal-time-format "%R "org-journal-time-format173,7243
(defcustom org-journal-time-format-post-midnight ""org-journal-time-format-post-midnight178,7408
(defcustom org-journal-time-prefix "** "org-journal-time-prefix183,7622
(defcustom org-journal-hide-entries-p torg-journal-hide-entries-p188,7794
(defcustom org-journal-enable-encryption nilorg-journal-enable-encryption195,7982
(defcustom org-journal-encrypt-on 'before-save-hookorg-journal-encrypt-on202,8241
(defcustom org-journal-enable-agenda-integration nilorg-journal-enable-agenda-integration207,8406
(defcustom org-journal-find-file 'find-file-other-windoworg-journal-find-file212,8573
(defcustom org-journal-carryover-items "TODO=\"TODO\""org-journal-carryover-items216,8773
(defcustom org-journal-search-results-order-by :ascorg-journal-search-results-order-by221,8996
(defvar org-journal-after-entry-create-hook nilorg-journal-after-entry-create-hook227,9157
(define-derived-mode org-journal-mode org-mode "Journal"org-journal-mode243,9705
(define-key org-journal-mode-map (kbd "C-c C-f") 'org-journal-open-next-entry)org-journal-mode-map252,10096
(define-key org-journal-mode-map (kbd "C-c C-b") 'org-journal-open-previous-entry)org-journal-mode-map253,10175
(define-key org-journal-mode-map (kbd "C-c C-j") 'org-journal-new-entry)org-journal-mode-map254,10258
(define-key org-journal-mode-map (kbd "C-c C-s") 'org-journal-search)org-journal-mode-map255,10331
(defun org-journal-get-entry-path (&optional time)org-journal-get-entry-path274,11275
(defun org-journal-dir-check-or-create ()org-journal-dir-check-or-create282,11557
(defun org-journal-new-entry (prefix &optional time)org-journal-new-entry291,11954
(defun org-journal-carryover ()org-journal-carryover378,15983
(defun org-journal-extract-current-subtree (delete-p)org-journal-extract-current-subtree405,17058
(defun org-journal-time-entry-level ()org-journal-time-entry-level417,17493
(defun org-journal-calendar-date->time (calendar-date)org-journal-calendar-date->time425,17823
(defun org-journal-file-name->calendar-date (file-name)org-journal-file-name->calendar-date432,18138
(defun org-journal-new-date-entry (prefix &optional event)org-journal-new-date-entry453,19252
(defun org-journal-new-scheduled-entry (prefix &optional scheduled-time)org-journal-new-scheduled-entry467,19903
(defun org-journal-open-next-entry ()org-journal-open-next-entry477,20300
(defun org-journal-open-previous-entry ()org-journal-open-previous-entry501,21356
(defun org-journal-list-files ()org-journal-list-files531,22561
(defun org-journal-list-dates ()org-journal-list-dates544,23262
(defun org-journal-mark-entries ()org-journal-mark-entries551,23507
(defun org-journal-read-entry (arg &optional event)org-journal-read-entry561,24021
(defun org-journal-display-entry (arg &optional event)org-journal-display-entry571,24359
(defvar view-exit-action)view-exit-action581,24749
(defun org-journal-read-or-display-entry (time &optional noselect)org-journal-read-or-display-entry584,24791
(defun org-journal-next-entry ()org-journal-next-entry609,25938
(defun org-journal-previous-entry ()org-journal-previous-entry619,26292
(defun org-journal-redraw-calendar ()org-journal-redraw-calendar628,26637
(defun org-journal-search (str &optional period-name)org-journal-search639,26893
(defvar org-journal-search-history nil)org-journal-search-history649,27507
(defun org-journal-search-calendar-week (str)org-journal-search-calendar-week651,27548
(defun org-journal-search-calendar-month (str)org-journal-search-calendar-month656,27799
(defun org-journal-search-calendar-year (str)org-journal-search-calendar-year661,28053
(defun org-journal-search-forever (str)org-journal-search-forever666,28304
(defun org-journal-search-future (str)org-journal-search-future671,28527
(defun org-journal-search-future-scheduled ()org-journal-search-future-scheduled676,28755
(defmacro org-journal-with-find-file (file &rest body)org-journal-with-find-file682,28965
(defun org-journal-update-org-agenda-files ()org-journal-update-org-agenda-files701,29606
(defun org-journal-schedule-view ()org-journal-schedule-view722,30539
(defun org-journal-read-period (period-name)org-journal-read-period770,32793
(defun org-journal-search-by-string (str &optional period-start period-end)org-journal-search-by-string832,35366
(defun org-journal-search-build-file-list (&optional period-start period-end)org-journal-search-build-file-list845,36038
(defun org-journal-search-do-search (str files)org-journal-search-do-search871,37004
(defun org-journal-format-date (time)org-journal-format-date889,37732
(defun org-journal-search-print-results (str results period-start period-end)org-journal-search-print-results895,37969
(defun org-journal-search-follow-link-action (button)org-journal-search-follow-link-action925,39197
(defun org-journal-decrypt ()org-journal-decrypt937,39701
(defun org-journal-encryption-hook ()org-journal-encryption-hook942,39836

elpa/org-jira-4.3.1/org-jira-pkg.el,87
(define-package "org-jira" "4.3.1" "Syncing between Jira and Org-mode.""org-jira"1,0

elpa/org-jira-4.3.1/org-jira-sdk.el,2428
(defclass org-jira-sdk-record ()org-jira-sdk-record45,1411
(defun org-jira-sdk-string-but-first (s) (cl-subseq s 1))org-jira-sdk-string-but-first51,1668
(defun org-jira-sdk-to-string (s) (format "%s" s))org-jira-sdk-to-string53,1727
(defun org-jira-sdk-to-prefixed-string (s) (format "org-jira-sdk-%s" s))org-jira-sdk-to-prefixed-string55,1779
(defun org-jira-sdk-record-type-to-symbol (record-type)org-jira-sdk-record-type-to-symbol57,1853
(defun org-jira-sdk-create-from-id (record-type id &optional parent-id callback)org-jira-sdk-create-from-id60,2011
(defun org-jira-sdk-create-from-data (record-type data)org-jira-sdk-create-from-data68,2372
(defun org-jira-sdk-path (alist key-chain)org-jira-sdk-path90,3404
(defclass org-jira-sdk-issue (org-jira-sdk-record)org-jira-sdk-issue94,3613
(defclass org-jira-sdk-comment (org-jira-sdk-record)org-jira-sdk-comment119,5064
(defclass org-jira-sdk-board (org-jira-sdk-record)org-jira-sdk-board130,5679
(defun org-jira-sdk-create-issue-from-data (d) (org-jira-sdk-create-from-data :issue d))org-jira-sdk-create-issue-from-data197,8566
(defun org-jira-sdk-create-issues-from-data-list (ds) (mapcar #'org-jira-sdk-create-issue-from-data ds))org-jira-sdk-create-issues-from-data-list198,8655
(defun org-jira-sdk-create-issue-from-data-with-filename (filename)org-jira-sdk-create-issue-from-data-with-filename201,8799
(defun org-jira-sdk-create-issues-from-data-list-with-filename (filename ds)org-jira-sdk-create-issues-from-data-list-with-filename207,9001
(defun org-jira-sdk-create-comment-from-data (d) (org-jira-sdk-create-from-data :comment d))org-jira-sdk-create-comment-from-data212,9186
(defun org-jira-sdk-create-comments-from-data-list (ds) (mapcar #'org-jira-sdk-create-comment-from-data ds))org-jira-sdk-create-comments-from-data-list213,9279
(defun org-jira-sdk-isa-record? (i) (typep i 'org-jira-sdk-record))org-jira-sdk-isa-record?215,9389
(defun org-jira-sdk-isa-issue? (i) (typep i 'org-jira-sdk-issue))org-jira-sdk-isa-issue?216,9457
(defun org-jira-sdk-isa-comment? (i) (typep i 'org-jira-sdk-comment))org-jira-sdk-isa-comment?217,9523
(defun org-jira-sdk-create-board-from-data (d) (org-jira-sdk-create-from-data :board d))org-jira-sdk-create-board-from-data220,9603
(defun org-jira-sdk-create-boards-from-data-list (ds) (mapcar #'org-jira-sdk-create-board-from-data ds))org-jira-sdk-create-boards-from-data-list221,9692

elpa/org-jira-4.3.1/org-jira.el,15599
(defconst org-jira-version "4.3.1"org-jira-version129,4291
(defgroup org-jira nilorg-jira132,4364
(defcustom org-jira-working-dir "~/.org-jira"org-jira-working-dir137,4459
(defcustom org-jira-project-filename-alist nilorg-jira-project-filename-alist142,4601
(defcustom org-jira-default-jqlorg-jira-default-jql155,4987
(defcustom org-jira-ignore-comment-user-listorg-jira-ignore-comment-user-list162,5199
(defcustom org-jira-reverse-comment-order nilorg-jira-reverse-comment-order168,5381
(defcustom org-jira-done-statesorg-jira-done-states173,5530
(defcustom org-jira-usersorg-jira-users179,5732
(defcustom org-jira-progress-issue-floworg-jira-progress-issue-flow185,5866
(defcustom org-jira-property-overrides (list)org-jira-property-overrides192,6041
(defcustom org-jira-serv-alist nilorg-jira-serv-alist216,6678
(defcustom org-jira-use-status-as-todo nilorg-jira-use-status-as-todo243,7658
(defcustom org-jira-deadline-duedate-sync-p torg-jira-deadline-duedate-sync-p247,7769
(defcustom org-jira-worklog-sync-p torg-jira-worklog-sync-p255,8038
(defcustom org-jira-download-dir "~/Downloads"org-jira-download-dir263,8293
(defcustom org-jira-download-ask-override torg-jira-download-ask-override268,8424
(defcustom org-jira-jira-status-to-org-keyword-alist nilorg-jira-jira-status-to-org-keyword-alist273,8538
(defcustom org-jira-priority-to-org-priority-omit-default-priority nilorg-jira-priority-to-org-priority-omit-default-priority278,8753
(defcustom org-jira-priority-to-org-priority-alist nilorg-jira-priority-to-org-priority-alist286,9085
(defcustom org-jira-boards-default-limit 50org-jira-boards-default-limit298,9442
(defcustom org-jira-custom-jqlsorg-jira-custom-jqls304,9675
(defvar org-jira-serv nilorg-jira-serv317,10156
(defvar org-jira-serv-name nilorg-jira-serv-name320,10231
(defvar org-jira-projects-list nilorg-jira-projects-list323,10322
(defvar org-jira-current-project nilorg-jira-current-project326,10386
(defvar org-jira-issues-list nilorg-jira-issues-list329,10472
(defvar org-jira-server-rpc-url nilorg-jira-server-rpc-url332,10558
(defvar org-jira-server-userid nilorg-jira-server-userid335,10622
(defvar org-jira-proj-id nilorg-jira-proj-id338,10684
(defvar org-jira-logged-in nilorg-jira-logged-in341,10736
(defvar org-jira-buffer-name "*org-jira-%s*"org-jira-buffer-name344,10812
(defvar org-jira-buffer-kill-prompt torg-jira-buffer-kill-prompt347,10888
(defvar org-jira-mode-hook nilorg-jira-mode-hook352,11018
(defvar org-jira-issue-id-history '()org-jira-issue-id-history355,11089
(defvar org-jira-fixversion-id-history '()org-jira-fixversion-id-history358,11162
(defvar org-jira-verbosity 'debug)org-jira-verbosity361,11245
(defun org-jira-log (s) (when (eq 'debug org-jira-verbosity) (message (format "%s" s))))org-jira-log363,11281
(defmacro ensure-on-issue (&rest body)ensure-on-issue365,11371
(defmacro org-jira-with-callback (&rest body)org-jira-with-callback379,11894
(defmacro org-jira-freeze-ui (&rest body)org-jira-freeze-ui388,12175
(defvar org-jira-proj-key-override nilorg-jira-proj-key-override399,12464
(defun org-jira--get-proj-key (issue-id)org-jira--get-proj-key403,12648
(defun org-jira--get-proj-key-from-issue (Issue)org-jira--get-proj-key-from-issue408,12864
(defmacro ensure-on-issue-id (issue-id &rest body)ensure-on-issue-id413,13072
(defmacro ensure-on-issue-id-with-filename (issue-id filename &rest body)ensure-on-issue-id-with-filename431,13855
(defmacro ensure-on-issue-Issue (Issue &rest body)ensure-on-issue-Issue451,14722
(defmacro ensure-on-todo (&rest body)ensure-on-todo470,15599
(defmacro ensure-on-comment (&rest body)ensure-on-comment488,16163
(defmacro ensure-on-worklog (&rest body)ensure-on-worklog501,16545
(defvar org-jira-entry-mode-maporg-jira-entry-mode-map514,16927
(define-minor-mode org-jira-modeorg-jira-mode544,18870
(defun org-jira-get-project-name (proj)org-jira-get-project-name563,19294
(defun org-jira-find-value (l &rest keys)org-jira-find-value566,19370
(defun org-jira--get-project-file-name (project-key)org-jira--get-project-file-name584,19868
(defun org-jira-get-project-lead (proj)org-jira-get-project-lead590,20178
(defun org-jira-get-assignable-users (project-key)org-jira-get-assignable-users593,20261
(defun org-jira-get-reporter-candidates (project-key)org-jira-get-reporter-candidates603,20660
(defun org-jira-entry-put (pom property value)org-jira-entry-put612,21036
(defun org-jira-kill-line ()org-jira-kill-line625,21550
(defun org-jira-org-kill-line (&optional _arg)org-jira-org-kill-line631,21746
(defun org-jira-get-projects ()org-jira-get-projects650,22570
(defun org-jira-get-issue-components (issue)org-jira-get-issue-components686,24389
(defun org-jira-get-issue-labels (issue)org-jira-get-issue-labels693,24611
(defun org-jira-decode (data)org-jira-decode697,24744
(defun org-jira-insert (&rest args)org-jira-insert705,24952
(defun org-jira-transform-time-format (jira-time-str)org-jira-transform-time-format709,25105
(defun org-jira--fix-encode-time-args (arg)org-jira--fix-encode-time-args722,25543
(defun org-jira-time-format-to-jira (org-time-str)org-jira-time-format-to-jira730,25737
(defun org-jira-get-comment-val (key comment)org-jira-get-comment-val740,26058
(defun org-jira-time-stamp-to-org-clock (time-stamp)org-jira-time-stamp-to-org-clock744,26198
(defun org-jira-date-strip-letter-t (date)org-jira-date-strip-letter-t748,26353
(defun org-jira-date-to-org-clock (date)org-jira-date-to-org-clock756,26689
(defun org-jira-worklogs-to-org-clocks (worklogs)org-jira-worklogs-to-org-clocks763,26958
(defun org-jira-format-clock (clock-entry)org-jira-format-clock782,27544
(defun org-jira-insert-clock (clock-entry)org-jira-insert-clock787,27788
(defun org-jira-logbook-reset (issue-id filename &optional clocks)org-jira-logbook-reset799,28374
(defun org-jira-get-worklog-val (key WORKLOG)org-jira-get-worklog-val827,29795
(defun org-jira-get-issue-val (key issue)org-jira-get-issue-val831,29937
(defvar org-jira-jql-history nil)org-jira-jql-history869,31536
(defun org-jira-get-issue-list (&optional callback)org-jira-get-issue-list872,31586
(defun org-jira-get-issue-by-id (id)org-jira-get-issue-by-id889,32441
(defun org-jira-get-issue-by-fixversion (fixversion-id)org-jira-get-issue-by-fixversion895,32616
(defun org-jira-get-summary ()org-jira-get-summary902,32876
(defun org-jira-get-summary-url ()org-jira-get-summary-url911,33192
(defun org-jira-get-issues-headonly (issues)org-jira-get-issues-headonly920,33605
(defun org-jira-get-issue (id)org-jira-get-issue946,34559
(defun org-jira-get-issues-by-fixversion (fixversion)org-jira-get-issues-by-fixversion956,34923
(defun org-jira-get-issue-project (issue)org-jira-get-issue-project963,35226
(defun org-jira-get-issue-key (issue)org-jira-get-issue-key966,35322
(defun org-jira-get-issue-summary (issue)org-jira-get-issue-summary969,35397
(defvar org-jira-get-issue-list-callbackorg-jira-get-issue-list-callback972,35488
(defun org-jira-get-issues (issues)org-jira-get-issues986,36040
(defvar org-jira-original-default-jql nil)org-jira-original-default-jql1000,36559
(defun org-jira-get-issues-from-custom-jql-callback (filename list)org-jira-get-issues-from-custom-jql-callback1002,36603
(defun org-jira-get-issues-from-custom-jql (&optional jql-list)org-jira-get-issues-from-custom-jql1021,37454
(defun org-jira--get-project-buffer (Issue)org-jira--get-project-buffer1040,38351
(defun org-jira--is-top-headline? (proj-key)org-jira--is-top-headline?1046,38607
(defun org-jira--maybe-render-top-heading (proj-key)org-jira--maybe-render-top-heading1054,38927
(defun org-jira--render-issue (Issue)org-jira--render-issue1068,39481
(defun org-jira--render-issues-from-issue-list (Issues)org-jira--render-issues-from-issue-list1156,43448
(defun org-jira-update-comment ()org-jira-update-comment1176,44371
(defun org-jira-add-comment (issue-id filename comment)org-jira-add-comment1205,45724
(defun org-jira-org-clock-to-date (org-time)org-jira-org-clock-to-date1223,46462
(defun org-jira-worklog-time-from-org-time (org-time)org-jira-worklog-time-from-org-time1229,46650
(defun org-jira-org-clock-to-jira-worklog (org-time clock-content)org-jira-org-clock-to-jira-worklog1240,47283
(defun org-jira-update-worklogs-from-org-clocks ()org-jira-update-worklogs-from-org-clocks1260,48247
(defun org-jira-update-worklog ()org-jira-update-worklog1316,51129
(defun org-jira-delete-current-comment ()org-jira-delete-current-comment1346,52692
(defun org-jira-delete-current-worklog ()org-jira-delete-current-worklog1351,52833
(defun org-jira-copy-current-issue-key ()org-jira-copy-current-issue-key1357,52989
(defun org-jira-get-comment-id (comment)org-jira-get-comment-id1365,53246
(defun org-jira-get-comment-author (comment)org-jira-get-comment-author1368,53325
(defun org-jira-isa-ignored-comment? (comment)org-jira-isa-ignored-comment?1371,53425
(defun org-jira-maybe-reverse-comments (comments)org-jira-maybe-reverse-comments1374,53553
(defun org-jira-extract-comments-from-data (data)org-jira-extract-comments-from-data1377,53671
(defun org-jira--render-comment (Issue Comment)org-jira--render-comment1383,53893
(defun org-jira-update-comments-for-issue (Issue)org-jira-update-comments-for-issue1408,54970
(defun org-jira-update-comments-for-current-issue ()org-jira-update-comments-for-current-issue1420,55448
(defun org-jira-delete-subtree ()org-jira-delete-subtree1428,55849
(defun org-jira-update-attachments-for-current-issue ()org-jira-update-attachments-for-current-issue1453,56754
(defun org-jira-sort-org-clocks (clocks)org-jira-sort-org-clocks1510,59959
(defun org-jira-update-worklogs-for-current-issue ()org-jira-update-worklogs-for-current-issue1521,60395
(defun org-jira-update-worklogs-for-issue (issue-id filename)org-jira-update-worklogs-for-issue1527,60652
(defun org-jira-unassign-issue ()org-jira-unassign-issue1544,61461
(defun org-jira-set-issue-reporter ()org-jira-set-issue-reporter1552,61732
(defun org-jira-assign-issue ()org-jira-assign-issue1573,62736
(defun org-jira-update-issue ()org-jira-update-issue1594,63685
(defun org-jira-todo-to-jira ()org-jira-todo-to-jira1604,63977
(defun org-jira-get-subtasks ()org-jira-get-subtasks1618,64443
(defvar org-jira-project-read-history nil)org-jira-project-read-history1624,64661
(defvar org-jira-boards-read-history nil)org-jira-boards-read-history1625,64704
(defvar org-jira-components-read-history nil)org-jira-components-read-history1626,64746
(defvar org-jira-priority-read-history nil)org-jira-priority-read-history1627,64792
(defvar org-jira-type-read-history nil)org-jira-type-read-history1628,64836
(defun org-jira-read-project ()org-jira-read-project1630,64877
(defun org-jira-read-board ()org-jira-read-board1641,65112
(defun org-jira-read-component (project)org-jira-read-component1652,65565
(defun org-jira-read-components (project)org-jira-read-components1664,65927
(defun org-jira-read-priority ()org-jira-read-priority1676,66335
(defun org-jira-read-issue-type (&optional project)org-jira-read-issue-type1687,66566
(defun org-jira-read-subtask-type ()org-jira-read-subtask-type1704,67130
(defun org-jira-get-issue-struct (project type summary description)org-jira-get-issue-struct1715,67358
(defun org-jira-create-issue (project type summary description)org-jira-create-issue1741,68696
(defun org-jira-create-subtask (project type summary description)org-jira-create-subtask1758,69433
(defun org-jira-strip-string (str)org-jira-strip-string1772,70193
(defun org-jira-get-issue-val-from-org (key)org-jira-get-issue-val-from-org1776,70311
(defun org-jira-read-action (actions)org-jira-read-action1815,71939
(defvar org-jira-fields-history nil)org-jira-fields-history1827,72329
(defun org-jira-read-field (fields)org-jira-read-field1828,72366
(defvar org-jira-rest-fields nilorg-jira-rest-fields1844,72912
(defvar org-jira-resolution-history nil)org-jira-resolution-history1848,73079
(defun org-jira-read-resolution ()org-jira-read-resolution1849,73120
(defun org-jira-refresh-issues-in-buffer ()org-jira-refresh-issues-in-buffer1872,74244
(defun org-jira-refresh-issue ()org-jira-refresh-issue1892,74957
(defun org-jira--refresh-issue (issue-id &optional filename)org-jira--refresh-issue1898,75136
(defun org-jira--refresh-issue-by-id (issue-id)org-jira--refresh-issue-by-id1910,75661
(defvar org-jira-fields-values-history nil)org-jira-fields-values-history1915,75833
(defun org-jira-progress-issue ()org-jira-progress-issue1917,75892
(defun org-jira-progress-next-action (actions current-status)org-jira-progress-next-action1974,78587
(defun org-jira-progress-issue-next ()org-jira-progress-issue-next1983,79036
(defun org-jira-get-id-name-alist (name ids-to-names)org-jira-get-id-name-alist2043,81953
(defun org-jira-build-components-list (project-components org-issue-components)org-jira-build-components-list2049,82196
(defun org-jira-strip-priority-tags (s)org-jira-strip-priority-tags2076,83075
(defun org-jira-update-issue-details (issue-id filename &rest rest)org-jira-update-issue-details2080,83239
(defun org-jira-parse-issue-id ()org-jira-parse-issue-id2141,86521
(defun org-jira-parse-issue-filename ()org-jira-parse-issue-filename2155,86974
(defun org-jira-get-from-org (type entry)org-jira-get-from-org2167,87329
(defun org-jira-get-comment-val-from-org (entry)org-jira-get-comment-val-from-org2185,87922
(defun org-jira-get-worklog-val-from-org (entry)org-jira-get-worklog-val-from-org2194,88216
(defun org-jira-get-comment-body (&optional comment-id)org-jira-get-comment-body2203,88510
(defun org-jira-get-worklog-comment (&optional worklog-id)org-jira-get-worklog-comment2213,88901
(defun org-jira-id ()org-jira-id2223,89298
(defun org-jira-filename ()org-jira-filename2227,89399
(defun org-jira-browse-issue ()org-jira-browse-issue2232,89527
(defun org-jira-url-copy-file (url newname)org-jira-url-copy-file2238,89744
(defun org-jira-download-attachment ()org-jira-download-attachment2259,90573
(defun org-jira-get-issues-from-filter (filter)org-jira-get-issues-from-filter2277,91190
(defun org-jira-get-issues-from-filter-headonly (filter)org-jira-get-issues-from-filter-headonly2287,91641
(defun org-jira-open (path)org-jira-open2301,92252
(defun org-jira-get-issues-by-board ()org-jira-get-issues-by-board2306,92357
(defun org-jira-get-board-limit (id)org-jira-get-board-limit2316,92800
(defun org-jira--make-jql-queryparams (board-id)org-jira--make-jql-queryparams2324,93084
(defun org-jira-get-issues-by-board-headonly ()org-jira-get-issues-by-board-headonly2332,93439
(defun org-jira--render-boards-from-list (boards)org-jira--render-boards-from-list2343,93868
(defun org-jira--render-board (board)org-jira--render-board2350,94059
(defun org-jira--get-boards-file ()org-jira--get-boards-file2390,95923
(defun org-jira--get-boards-buffer ()org-jira--get-boards-buffer2393,96021
(defun org-jira-get-boards ()org-jira-get-boards2402,96357
(defun org-jira--get-board-from-buffer (id)org-jira--get-board-from-buffer2410,96661
(defun org-jira-get-org-keyword-from-status (status)org-jira-get-org-keyword-from-status2442,98346
(defun org-jira-get-org-priority-string (character)org-jira-get-org-priority-string2451,98793
(defun org-jira-get-org-priority-cookie-from-issue (priority)org-jira-get-org-priority-cookie-from-issue2458,99114

elpa/org-jira-4.3.1/org-jira-autoloads.el,0

elpa/org-jira-4.3.1/jiralib.el,9058
(defconst jiralib-version "3.0.0"jiralib-version91,3104
(defgroup jiralib niljiralib94,3175
(defgroup jiralib-faces niljiralib-faces98,3255
(defcustom jiralib-use-restapi tjiralib-use-restapi102,3349
(defcustom jiralib-coding-system 'utf-8jiralib-coding-system108,3489
(defcustom jiralib-host ""jiralib-host112,3591
(defface jiralib-issue-info-facejiralib-issue-info-face121,3869
(defface jiralib-issue-info-header-facejiralib-issue-info-header-face126,4018
(defface jiralib-issue-summary-facejiralib-issue-summary-face131,4170
(defface jiralib-comment-facejiralib-comment-face136,4284
(defface jiralib-comment-header-facejiralib-comment-header-face141,4400
(defface jiralib-link-issue-facejiralib-link-issue-face146,4517
(defface jiralib-link-project-facejiralib-link-project-face151,4628
(defface jiralib-link-filter-facejiralib-link-filter-face156,4742
(defvar jiralib-mode-hook nil)jiralib-mode-hook161,4854
(defvar jiralib-mode-map nil)jiralib-mode-map162,4885
(defvar jiralib-issue-regexp "\\<\\(?:[A-Za-z0-9]+\\)-[0-9]+\\>")jiralib-issue-regexp163,4915
(defcustom jiralib-wsdl-descriptor-urljiralib-wsdl-descriptor-url165,4982
(defcustom jiralib-urljiralib-url178,5331
(defcustom jiralib-agile-page-sizejiralib-agile-page-size184,5451
(defvar jiralib-token niljiralib-token190,5623
(defvar jiralib-rest-auth-head niljiralib-rest-auth-head193,5691
(defvar jiralib-user-login-name niljiralib-user-login-name196,5756
(defvar jiralib-wsdl nil)jiralib-wsdl200,5876
(defcustom jiralib-worklog-import--filters-alistjiralib-worklog-import--filters-alist202,5903
(defun jiralib-load-wsdl ()jiralib-load-wsdl215,6609
(defun jiralib-login (username password)jiralib-login221,6956
(defvar jiralib-complete-callback nil)jiralib-complete-callback258,8737
(defun jiralib-call (method callback &rest params)jiralib-call260,8777
(defun jiralib--soap-call-it (&rest args)jiralib--soap-call-it422,17502
(defun jiralib--json-read ()jiralib--json-read429,17727
(defun jiralib--rest-call-it (api &rest args)jiralib--rest-call-it434,17871
(defun jiralib--call-it (method &rest params)jiralib--call-it457,18851
(defun jiralib-make-list (data field)jiralib-make-list480,19598
(defun jiralib-make-assoc-list (data key-field value-field)jiralib-make-assoc-list485,19785
(defun jiralib-make-remote-field-values (fields)jiralib-make-remote-field-values495,20237
(defun jiralib--rest-api-for-issue-key (key)jiralib--rest-api-for-issue-key525,21313
(defun jiralib-update-issue (key fields &optional callback)jiralib-update-issue529,21435
(defvar jiralib-status-codes-cache nil)jiralib-status-codes-cache538,21723
(defun jiralib-get-statuses ()jiralib-get-statuses540,21764
(defvar jiralib-issue-types-cache nil)jiralib-issue-types-cache551,22178
(defun jiralib-get-issue-types ()jiralib-get-issue-types553,22218
(defvar jiralib-issue-types-by-project-cache nil "An alist of available issue types.")jiralib-issue-types-by-project-cache574,23005
(defun jiralib-get-issue-types-by-project (project)jiralib-get-issue-types-by-project576,23093
(defvar jiralib-priority-codes-cache nil)jiralib-priority-codes-cache588,23585
(defun jiralib-get-priorities ()jiralib-get-priorities590,23628
(defvar jiralib-resolution-code-cache nil)jiralib-resolution-code-cache601,24056
(defun jiralib-get-resolutions ()jiralib-get-resolutions603,24100
(defun jiralib-get-issue-regexp ()jiralib-get-issue-regexp624,24998
(defun jiralib-do-jql-search (jql &optional limit callback)jiralib-do-jql-search638,25591
(defcustom jiralib-available-actions-cache-p tjiralib-available-actions-cache-p648,26035
(defvar jiralib-available-actions-cache nil "An alist of available actions.")jiralib-available-actions-cache663,26440
(defun jiralib-get-available-actions (issue-key &optional status)jiralib-get-available-actions665,26519
(defcustom jiralib-fields-for-action-cache-p tjiralib-fields-for-action-cache-p695,27840
(defvar jiralib-fields-for-action-cache nil "An alist of available fields.")jiralib-fields-for-action-cache706,28138
(defun jiralib-get-fields-for-action-with-cache (issue-key action-id)jiralib-get-fields-for-action-with-cache708,28216
(defun jiralib-get-fields-for-action (issue-key action-id)jiralib-get-fields-for-action719,28783
(defun jiralib-progress-workflow-action (issue-key action-id params &optional callback)jiralib-progress-workflow-action735,29534
(defun jiralib-format-datetime (&optional datetime)jiralib-format-datetime747,30080
(defvar jiralib-worklog-coming-soon-messagejiralib-worklog-coming-soon-message768,30801
(defun jiralib-add-worklog-and-autoadjust-remaining-estimate (issue-key start-date time-spent comment)jiralib-add-worklog-and-autoadjust-remaining-estimate771,30906
(defun jiralib-issue-key (issue)jiralib-issue-key796,31993
(defun jiralib-issue-owner (issue)jiralib-issue-owner800,32084
(defun jiralib-issue-status (issue)jiralib-issue-status804,32183
(defun jiralib-custom-field-value (custom-field issue)jiralib-custom-field-value809,32395
(defvar jiralib-current-issue niljiralib-current-issue817,32732
(defvar jiralib-projects-list niljiralib-projects-list820,32813
(defvar jiralib-types niljiralib-types823,32902
(defvar jiralib-priorities niljiralib-priorities826,32969
(defvar jiralib-user-fullnames niljiralib-user-fullnames829,33039
(defun jiralib-get-project-name (key)jiralib-get-project-name832,33117
(defun jiralib-get-type-name (id)jiralib-get-type-name841,33413
(defun jiralib-get-user-fullname (username)jiralib-get-user-fullname850,33674
(defun jiralib-get-filter (filter-id)jiralib-get-filter860,34107
(defun jiralib-get-filter-alist ()jiralib-get-filter-alist866,34342
(defun jiralib-add-comment (issue-key comment &optional callback)jiralib-add-comment873,34595
(defun jiralib-edit-comment (issue-id comment-id comment &optional callback)jiralib-edit-comment877,34801
(defun jiralib-create-issue (issue)jiralib-create-issue884,35196
(defun jiralib-create-subtask (subtask parent-issue-id)jiralib-create-subtask890,35340
(defvar jiralib-subtask-types-cache nil)jiralib-subtask-types-cache897,35551
(defun jiralib-get-subtask-types ()jiralib-get-subtask-types899,35593
(defun jiralib-get-comment (issue-key comment-id &optional callback)jiralib-get-comment910,36033
(defun jiralib-get-comments (issue-key &optional callback)jiralib-get-comments914,36240
(defun jiralib-get-attachments (issue-key &optional callback)jiralib-get-attachments918,36427
(defun jiralib-get-worklogs (issue-key &optional callback)jiralib-get-worklogs922,36632
(defun jiralib-add-worklog (issue-id started time-spent-seconds comment &optional callback)jiralib-add-worklog926,36819
(defun jiralib-update-worklog (issue-id worklog-id started time-spent-seconds comment &optional callback)jiralib-update-worklog941,37709
(defvar jiralib-components-cache nil "An alist of project components.")jiralib-components-cache956,38645
(defun jiralib-get-components (project-key)jiralib-get-components958,38718
(defun jiralib-get-issue (issue-key &optional callback)jiralib-get-issue967,39118
(defun jiralib-get-issues-from-filter (filter-id)jiralib-get-issues-from-filter971,39285
(defun jiralib-get-issues-from-text-search (search-terms)jiralib-get-issues-from-text-search976,39526
(defun jiralib-get-issues-from-text-search-with-projectjiralib-get-issues-from-text-search-with-project980,39699
(defun jiralib-get-projects ()jiralib-get-projects990,40148
(defun jiralib-get-saved-filters ()jiralib-get-saved-filters999,40460
(defun jiralib-get-server-info ()jiralib-get-server-info1003,40643
(defun jiralib-get-sub-task-issue-types ()jiralib-get-sub-task-issue-types1007,40809
(defun jiralib-get-user (username)jiralib-get-user1011,40956
(defvar jiralib-users-cache nil "Cached list of users.")jiralib-users-cache1016,41151
(defun jiralib-get-users (project-key)jiralib-get-users1018,41209
(defun jiralib-get-versions (project-key)jiralib-get-versions1025,41449
(defun jiralib-strip-cr (string)jiralib-strip-cr1029,41598
(defun jiralib-worklog-import--filter-applyjiralib-worklog-import--filter-apply1033,41732
(defun jiralib-get-board (id &optional callback)jiralib-get-board1092,44530
(defun jiralib-get-boards ()jiralib-get-boards1096,44650
(defun jiralib-get-board-issues (board-id &rest params)jiralib-get-board-issues1100,44745
(defun jiralib--agile-not-last-entry (num-entries total start-at limit)jiralib--agile-not-last-entry1105,44952
(defun jiralib--agile-limit-page-size (page-size start-at limit)jiralib--agile-limit-page-size1114,45300
(defun jiralib--agile-rest-call-it (api max-results start-at limit query-params)jiralib--agile-rest-call-it1121,45464
(defun jiralib--agile-call-it (api values-key &rest params)jiralib--agile-call-it1130,45789
(defun jiralib--agile-call-sync (api values-key &rest params)jiralib--agile-call-sync1154,46680
(defun jiralib--agile-call-async  (api values-key &rest params)jiralib--agile-call-async1184,47913

elpa/flx-0.6.1/flx.el,1322
(defgroup flx nilflx56,1709
(defcustom flx-word-separators '(?\  ?- ?_ ?: ?. ?/ ?\\)flx-word-separators61,1805
(defface flx-highlight-face  '((t (:inherit font-lock-variable-name-face :bold t :underline t)))flx-highlight-face66,1964
(defsubst flx-word-p (char)flx-word-p71,2182
(defsubst flx-capital-p (char)flx-capital-p76,2309
(defsubst flx-boundary-p (last-char char)flx-boundary-p82,2455
(defsubst flx-inc-vec (vec &optional inc beg end)flx-inc-vec92,2781
(defun flx-get-hash-for-string (str heatmap-func)flx-get-hash-for-string106,3114
(defun flx-get-heatmap-str (str &optional group-separator)flx-get-heatmap-str126,3953
(defun flx-get-heatmap-file (filename)flx-get-heatmap-file218,8347
(defsubst flx-bigger-sublist (sorted-list val)flx-bigger-sublist223,8465
(defun flx-make-filename-cache ()flx-make-filename-cache233,8752
(defun flx-make-string-cache (&optional heat-func)flx-make-string-cache237,8898
(defun flx-process-cache (str cache)flx-process-cache244,9179
(defun flx-find-best-match (str-infoflx-find-best-match258,9630
(defun flx-score (str query &optional cache)flx-score340,13151
(defun flx-propertize (obj score &optional add-score)flx-propertize379,14673
(defvar flx-file-cache nilflx-file-cache405,15534
(defvar flx-strings-cache nilflx-strings-cache411,15687

elpa/flx-0.6.1/flx-autoloads.el,0

elpa/flx-0.6.1/flx-pkg.el,232
(define-package "flx" "0.6.1" "fuzzy matching with good sorting" '((cl-lib "0.3")) :commit "7fce6a4cdb65ac1b52e2b409ba548767581ce34c" :authors '(("Le Wang")) :maintainer '("Le Wang") :url "https://github.com/lewang/flx")"flx"2,31

elpa/smooth-scroll-1.2/smooth-scroll.el,2453
(defconst smooth-scroll/version "1.1")smooth-scroll/version112,3607
(defgroup smooth-scroll nilsmooth-scroll125,3910
(defcustom smooth-scroll/vscroll-step-size 2smooth-scroll/vscroll-step-size129,3986
(defcustom smooth-scroll/hscroll-step-size 2smooth-scroll/hscroll-step-size139,4307
(defun scroll-up-1 (&optional arg)scroll-up-1156,4859
(defun scroll-down-1 (&optional arg)scroll-down-1168,5327
(defun scroll-left-1 (&optional arg)scroll-left-1180,5791
(defun scroll-right-1 (&optional arg)scroll-right-1192,6263
(defvar smooth-scroll/.scrolling-p nilsmooth-scroll/.scrolling-p210,6922
(defvar smooth-scroll/.debugging-p nilsmooth-scroll/.debugging-p213,7014
(defmacro smooth-scroll/.run-without-recursive-call (&rest body)smooth-scroll/.run-without-recursive-call222,7310
(defun smooth-scroll/.debug-msg (str)smooth-scroll/.debug-msg230,7623
(defun smooth-scroll/.drop-events ()smooth-scroll/.drop-events239,7870
(defvar smooth-scroll/redisplay-interval (when (not window-system) 0.005)smooth-scroll/redisplay-interval250,8279
(defun smooth-scroll/.force-redisplay ()smooth-scroll/.force-redisplay253,8406
(defun smooth-scroll/scroll-up (&optional arg)smooth-scroll/scroll-up272,9105
(defun smooth-scroll/scroll-down (&optional arg)smooth-scroll/scroll-down283,9578
(defun smooth-scroll/scroll-other-window (&optional arg)smooth-scroll/scroll-other-window294,10047
(defun smooth-scroll/scroll-other-window-down (&optional arg)smooth-scroll/scroll-other-window-down318,11199
(defun smooth-scroll/.vscroll-aux (amount up-p &optional inverse)smooth-scroll/.vscroll-aux337,11957
(defun smooth-scroll/scroll-left (&optional arg set-minimum)smooth-scroll/scroll-left388,13799
(defun smooth-scroll/scroll-right (&optional arg set-minimum)smooth-scroll/scroll-right403,14391
(defun smooth-scroll/.keep-cursor-within-new-hscroll-margin (delta left-p)smooth-scroll/.keep-cursor-within-new-hscroll-margin422,15164
(defun smooth-scroll/.do-primitive-hscroll (delta left-p)smooth-scroll/.do-primitive-hscroll468,17321
(defvar smooth-scroll/.pre-command-hook nil)smooth-scroll/.pre-command-hook477,17729
(defvar smooth-scroll/.orig-auto-hscroll-mode nil)smooth-scroll/.orig-auto-hscroll-mode478,17774
(defun smooth-scroll/.restore-auto-hscroll-mode (orig-auto-hscroll-mode)smooth-scroll/.restore-auto-hscroll-mode480,17826
(defun smooth-scroll/.hscroll-aux (amount left-p)smooth-scroll/.hscroll-aux496,18648

elpa/smooth-scroll-1.2/smooth-scroll-autoloads.el,0

elpa/smooth-scroll-1.2/smooth-scroll-pkg.el,432
(define-package "smooth-scroll" "1.2" "Minor mode for smooth scrolling and in-place scrolling." 'nil :commit "02320f28abb5cae28b3a18f6b9ce93129bdbfc45" :keywords '("convenience" "emulations" "frames") :authors '(("K-talo Miyazaki <Keitaro dot Miyazaki at gmail dot com>")) :maintainer '("K-talo Miyazaki <Keitaro dot Miyazaki at gmail dot com>") :url "http://www.emacswiki.org/emacs/download/smooth-scroll.el")"smooth-scroll"2,31

elpa/git-gutter-0.90/git-gutter-autoloads.el,68
(defvar global-git-gutter-mode nil "\global-git-gutter-mode22,486

elpa/git-gutter-0.90/git-gutter-pkg.el,332
(define-package "git-gutter" "0.90" "Port of Sublime Text plugin GitGutter" '((cl-lib "0.5") (emacs "24")) :commit "a786465bd527c13e32c73c02b95086560c1be878" :authors '(("Syohei YOSHIDA" . "syohex@gmail.com")) :maintainer '("Syohei YOSHIDA" . "syohex@gmail.com") :url "https://github.com/syohex/emacs-git-gutter")"git-gutter"2,31

elpa/git-gutter-0.90/git-gutter.el,12361
(defgroup git-gutter nilgit-gutter32,1068
(defcustom git-gutter:window-width nilgit-gutter:window-width37,1151
(defcustom git-gutter:diff-option ""git-gutter:diff-option43,1399
(defcustom git-gutter:subversion-diff-option ""git-gutter:subversion-diff-option47,1479
(defcustom git-gutter:mercurial-diff-option ""git-gutter:mercurial-diff-option51,1570
(defcustom git-gutter:bazaar-diff-option ""git-gutter:bazaar-diff-option55,1659
(defcustom git-gutter:update-commandsgit-gutter:update-commands59,1746
(defcustom git-gutter:update-windows-commandsgit-gutter:update-windows-commands65,2017
(defcustom git-gutter:update-hooksgit-gutter:update-hooks72,2328
(defcustom git-gutter:always-show-separator nilgit-gutter:always-show-separator79,2606
(defcustom git-gutter:separator-sign nilgit-gutter:separator-sign83,2722
(defcustom git-gutter:modified-sign "="git-gutter:modified-sign87,2800
(defcustom git-gutter:added-sign "+"git-gutter:added-sign91,2876
(defcustom git-gutter:deleted-sign "-"git-gutter:deleted-sign95,2946
(defcustom git-gutter:unchanged-sign nilgit-gutter:unchanged-sign99,3020
(defcustom git-gutter:hide-gutter nilgit-gutter:hide-gutter103,3098
(defcustom git-gutter:lighter " GitGutter"git-gutter:lighter107,3195
(defcustom git-gutter:verbosity 0git-gutter:verbosity111,3292
(defcustom git-gutter:visual-line nilgit-gutter:visual-line115,3392
(defface git-gutter:separatorgit-gutter:separator119,3489
(defface git-gutter:modifiedgit-gutter:modified123,3603
(defface git-gutter:addedgit-gutter:added127,3718
(defface git-gutter:deletedgit-gutter:deleted131,3825
(defface git-gutter:unchangedgit-gutter:unchanged135,3917
(defcustom git-gutter:disabled-modes nilgit-gutter:disabled-modes139,4003
(defcustom git-gutter:handled-backends '(git)git-gutter:handled-backends143,4142
(defvar git-gutter:view-diff-function #'git-gutter:view-diff-infosgit-gutter:view-diff-function148,4337
(defvar git-gutter:clear-function #'git-gutter:clear-diff-infosgit-gutter:clear-function151,4438
(defvar git-gutter:init-function 'nilgit-gutter:init-function154,4534
(defcustom git-gutter-mode-on-hook nilgit-gutter-mode-on-hook157,4601
(defcustom git-gutter-mode-off-hook nilgit-gutter-mode-off-hook161,4697
(defcustom git-gutter:update-interval 0git-gutter:update-interval165,4795
(defcustom git-gutter:ask-p tgit-gutter:ask-p169,4914
(defcustom git-gutter:display-p tgit-gutter:display-p173,5000
(defvar git-gutter:enabled nil)git-gutter:enabled180,5157
(defvar git-gutter:diffinfos nil)git-gutter:diffinfos181,5189
(defvar git-gutter:has-indirect-buffers nil)git-gutter:has-indirect-buffers182,5223
(defvar git-gutter:real-this-command nil)git-gutter:real-this-command183,5268
(defvar git-gutter:linum-enabled nil)git-gutter:linum-enabled184,5310
(defvar git-gutter:linum-prev-window-margin nil)git-gutter:linum-prev-window-margin185,5348
(defvar git-gutter:vcs-type nil)git-gutter:vcs-type186,5397
(defvar git-gutter:start-revision nil)git-gutter:start-revision187,5430
(defvar git-gutter:revision-history nil)git-gutter:revision-history188,5469
(defvar git-gutter:update-timer nil)git-gutter:update-timer189,5510
(defvar git-gutter:last-sha1 nil)git-gutter:last-sha1190,5547
(defvar git-gutter:popup-buffer "*git-gutter:diff*")git-gutter:popup-buffer192,5582
(defvar git-gutter:ignore-commandsgit-gutter:ignore-commands193,5635
(defmacro git-gutter:awhen (test &rest body)git-gutter:awhen200,5818
(defsubst git-gutter:execute-command (cmd output &rest args)git-gutter:execute-command206,5952
(defun git-gutter:in-git-repository-p ()git-gutter:in-git-repository-p209,6064
(defun git-gutter:in-repository-common-p (cmd check-subcmd repodir)git-gutter:in-repository-common-p216,6319
(defun git-gutter:vcs-check-function (vcs)git-gutter:vcs-check-function222,6638
(defun git-gutter:in-repository-p ()git-gutter:in-repository-p229,6946
(defsubst git-gutter:changes-to-number (str)git-gutter:changes-to-number234,7159
(defsubst git-gutter:base-file ()git-gutter:base-file239,7265
(defun git-gutter:diff-content ()git-gutter:diff-content242,7343
(defun git-gutter:process-diff-output (buf)git-gutter:process-diff-output252,7651
(defsubst git-gutter:window-margin ()git-gutter:window-margin274,8820
(defun git-gutter:set-window-margin (width)git-gutter:set-window-margin277,8923
(defsubst git-gutter:revision-set-p ()git-gutter:revision-set-p282,9139
(defun git-gutter:git-diff-arguments (file)git-gutter:git-diff-arguments285,9259
(defun git-gutter:start-git-diff-process (file proc-buf)git-gutter:start-git-diff-process293,9551
(defun git-gutter:svn-diff-arguments (file)git-gutter:svn-diff-arguments300,9860
(defsubst git-gutter:start-svn-diff-process (file proc-buf)git-gutter:start-svn-diff-process309,10197
(defun git-gutter:hg-diff-arguments (file)git-gutter:hg-diff-arguments314,10428
(defsubst git-gutter:start-hg-diff-process (file proc-buf)git-gutter:start-hg-diff-process323,10762
(defun git-gutter:bzr-diff-arguments (file)git-gutter:bzr-diff-arguments327,10954
(defsubst git-gutter:start-bzr-diff-process (file proc-buf)git-gutter:start-bzr-diff-process336,11283
(defun git-gutter:start-diff-process1 (file proc-buf)git-gutter:start-diff-process1341,11497
(defun git-gutter:start-diff-process (curfile proc-buf)git-gutter:start-diff-process348,11823
(defsubst git-gutter:gutter-sperator ()git-gutter:gutter-sperator368,12710
(defun git-gutter:before-string (sign)git-gutter:before-string372,12858
(defun git-gutter:propertized-sign (type)git-gutter:propertized-sign376,13031
(defsubst git-gutter:linum-get-overlay (pos)git-gutter:linum-get-overlay387,13437
(defun git-gutter:put-signs-linum (sign points)git-gutter:put-signs-linum392,13593
(defun git-gutter:put-signs (sign points)git-gutter:put-signs401,13970
(defsubst git-gutter:sign-width (sign)git-gutter:sign-width410,14310
(defun git-gutter:longest-sign-width ()git-gutter:longest-sign-width414,14411
(defun git-gutter:next-visual-line (arg)git-gutter:next-visual-line423,14790
(defun git-gutter:view-for-unchanged ()git-gutter:view-for-unchanged428,14909
(defsubst git-gutter:check-file-and-directory ()git-gutter:check-file-and-directory444,15471
(defun git-gutter:pre-command-hook ()git-gutter:pre-command-hook448,15615
(defun git-gutter:update-other-window-buffers (curwin curbuf)git-gutter:update-other-window-buffers452,15766
(defun git-gutter:post-command-hook ()git-gutter:post-command-hook465,16305
(defsubst git-gutter:diff-process-buffer (curfile)git-gutter:diff-process-buffer473,16668
(defun git-gutter:kill-buffer-hook ()git-gutter:kill-buffer-hook476,16761
(defsubst git-gutter:linum-padding ()git-gutter:linum-padding481,16936
(defun git-gutter:linum-prepend-spaces ()git-gutter:linum-prepend-spaces486,17111
(defun git-gutter:linum-update (diffinfos)git-gutter:linum-update496,17400
(defun git-gutter:linum-init ()git-gutter:linum-init506,17840
(defun git-gutter:linum-setup ()git-gutter:linum-setup511,18008
(defun git-gutter:show-backends ()git-gutter:show-backends524,18626
(define-minor-mode git-gutter-modegit-gutter-mode530,18806
(defun git-gutter--turn-on ()git-gutter--turn-on564,20459
(define-global-minor-mode global-git-gutter-mode git-gutter-mode git-gutter--turn-on)global-git-gutter-mode570,20628
(defsubst git-gutter:show-gutter-p (diffinfos)git-gutter:show-gutter-p572,20715
(defun git-gutter:show-gutter (diffinfos)git-gutter:show-gutter577,20909
(defun git-gutter:view-set-overlays (diffinfos)git-gutter:view-set-overlays581,21061
(defun git-gutter:view-diff-infos (diffinfos)git-gutter:view-diff-infos613,22394
(defsubst git-gutter:reset-window-margin-p ()git-gutter:reset-window-margin-p618,22581
(defun git-gutter:clear-diff-infos ()git-gutter:clear-diff-infos621,22688
(defun git-gutter:clear-gutter ()git-gutter:clear-gutter626,22867
(defun git-gutter:update-diffinfo (diffinfos)git-gutter:update-diffinfo634,23080
(defun git-gutter:search-near-diff-index (diffinfos is-reverse)git-gutter:search-near-diff-index642,23357
(defun git-gutter:search-here-diffinfo (diffinfos)git-gutter:search-here-diffinfo653,23878
(defun git-gutter:collect-deleted-line (str)git-gutter:collect-deleted-line664,24353
(defun git-gutter:delete-added-lines (start-line end-line)git-gutter:delete-added-lines672,24626
(defun git-gutter:insert-deleted-lines (content)git-gutter:insert-deleted-lines678,24840
(defsubst git-gutter:delete-from-first-line-p (start-line end-line)git-gutter:delete-from-first-line-p682,24983
(defun git-gutter:do-revert-hunk (diffinfo)git-gutter:do-revert-hunk685,25105
(defsubst git-gutter:popup-buffer-window ()git-gutter:popup-buffer-window699,25807
(defun git-gutter:query-action (action action-fn update-fn)git-gutter:query-action702,25912
(defun git-gutter:revert-hunk ()git-gutter:revert-hunk714,26425
(defun git-gutter:extract-hunk-header ()git-gutter:extract-hunk-header719,26580
(defun git-gutter:read-hunk-header (header)git-gutter:read-hunk-header730,27047
(defun git-gutter:convert-hunk-header (type)git-gutter:convert-hunk-header738,27478
(defun git-gutter:insert-staging-hunk (hunk type)git-gutter:insert-staging-hunk750,28040
(defun git-gutter:apply-directory-option ()git-gutter:apply-directory-option755,28174
(defun git-gutter:do-stage-hunk (diff-info)git-gutter:do-stage-hunk759,28362
(defun git-gutter:stage-hunk ()git-gutter:stage-hunk778,29181
(defsubst git-gutter:line-point (line)git-gutter:line-point783,29346
(defun git-gutter:mark-hunk ()git-gutter:mark-hunk789,29475
(defun git-gutter:update-popuped-buffer (diffinfo)git-gutter:update-popuped-buffer797,29803
(defun git-gutter:popup-hunk (&optional diffinfo)git-gutter:popup-hunk809,30144
(defun git-gutter:next-hunk (arg)git-gutter:next-hunk817,30442
(defun git-gutter:previous-hunk (arg)git-gutter:previous-hunk839,31413
(defun git-gutter:end-of-hunk ()git-gutter:end-of-hunk844,31537
(defalias 'git-gutter:next-diff 'git-gutter:next-hunk)git-gutter:next-diff851,31803
(defalias 'git-gutter:previous-diff 'git-gutter:previous-hunk)git-gutter:previous-diff853,31925
(defalias 'git-gutter:popup-diff 'git-gutter:popup-hunk)git-gutter:popup-diff855,32063
(defun git-gutter:update-indirect-buffers (orig-file)git-gutter:update-indirect-buffers858,32190
(defun git-gutter ()git-gutter869,32610
(defadvice make-indirect-buffer (before git-gutter:has-indirect-buffers activate)make-indirect-buffer881,33172
(defadvice vc-revert (after git-gutter:vc-revert activate)vc-revert885,33359
(defadvice toggle-truncate-lines (after git-gutter:toggle-truncate-lines activate)toggle-truncate-lines889,33491
(defadvice quit-window (after git-gutter:quit-window activate)quit-window895,33812
(defadvice switch-to-buffer (after git-gutter:switch-to-buffer activate)switch-to-buffer899,33919
(defun git-gutter:clear ()git-gutter:clear903,34036
(defun git-gutter:toggle ()git-gutter:toggle910,34216
(defun git-gutter:revision-valid-p (revision)git-gutter:revision-valid-p918,34434
(defun git-gutter:set-start-revision (start-rev)git-gutter:set-start-revision929,35064
(defun git-gutter:update-all-windows ()git-gutter:update-all-windows941,35539
(defun git-gutter:start-update-timer ()git-gutter:start-update-timer950,35811
(defun git-gutter:cancel-update-timer ()git-gutter:cancel-update-timer957,36065
(defsubst git-gutter:write-current-content (tmpfile)git-gutter:write-current-content964,36272
(defsubst git-gutter:original-file-content (file)git-gutter:original-file-content969,36456
(defun git-gutter:write-original-content (tmpfile filename)git-gutter:write-original-content974,36667
(defsubst git-gutter:start-raw-diff-process (proc-buf original now)git-gutter:start-raw-diff-process980,36849
(defun git-gutter:start-live-update (file original now)git-gutter:start-live-update984,37025
(defun git-gutter:should-update-p ()git-gutter:should-update-p1006,37981
(defun git-gutter:live-update ()git-gutter:live-update1011,38160
(defun git-gutter:all-hunks ()git-gutter:all-hunks1027,38797
(defun git-gutter:buffer-hunks ()git-gutter:buffer-hunks1036,39042
(defun git-gutter:stat-hunk (hunk)git-gutter:stat-hunk1040,39154
(defun git-gutter:statistic ()git-gutter:statistic1055,39861

elpa/dap-mode-0.2/dap-ui-repl.el,781
(defcustom dap-ui-repl-prompt ">> "dap-ui-repl-prompt18,372
(defvar dap-ui-repl-welcomedap-ui-repl-welcome23,475
(defun dap-ui-repl-process ()dap-ui-repl-process31,799
(define-derived-mode dap-ui-repl-mode comint-mode "DAP-REPL"dap-ui-repl-mode35,915
(defun dap-ui-input-sender (_ input)dap-ui-input-sender56,1915
(defun dap-ui-repl ()dap-ui-repl78,2943
(defun dap-ui-repl--calculate-candidates ()dap-ui-repl--calculate-candidates90,3395
(defun dap-ui-repl--post-completion (candidate)dap-ui-repl--post-completion112,4504
(defun dap-ui-repl--annotate (candidate)dap-ui-repl--annotate119,4760
(defun company-dap-ui-repl (command &optional candidate &rest _args)company-dap-ui-repl123,4903
(defun dap-ui-repl-company-prefix ()dap-ui-repl-company-prefix139,5544

elpa/dap-mode-0.2/dap-ruby.el,229
(defcustom dap-ruby-debug-program `("node" ,(expand-file-name "~/.extensions/ruby/out/debugger/main.js"))dap-ruby-debug-program32,1081
(defun dap-ruby--populate-start-file-args (conf)dap-ruby--populate-start-file-args37,1268

elpa/dap-mode-0.2/dap-mode-autoloads.el,88
(defvar dap-mode nil "\dap-mode45,1260
(defvar dap-ui-mode nil "\dap-ui-mode88,2563

elpa/dap-mode-0.2/dap-java.el,1227
(defcustom  dap-java-compile-port 33000dap-java-compile-port34,1108
(defcustom dap-java-test-runnerdap-java-test-runner40,1309
(defcustom dap-java-build 'askdap-java-build46,1520
(defcustom dap-java-test-additional-args ()dap-java-test-additional-args53,1717
(defcustom  dap-java-default-debug-port 1044dap-java-default-debug-port58,1859
(defun dap-java--select-main-class ()dap-java--select-main-class63,1965
(defun dap-java--populate-launch-args (conf)dap-java--populate-launch-args84,2956
(defun dap-java--populate-attach-args (conf)dap-java--populate-attach-args112,4429
(defun dap-java--populate-compile-attach-args (conf)dap-java--populate-compile-attach-args124,5046
(defun dap-java--populate-default-args (conf)dap-java--populate-default-args146,6102
(defun dap-java-debug (debug-args)dap-java-debug159,6731
(defun dap-java--run-unit-test-command (runner run-method?)dap-java--run-unit-test-command164,6905
(defun dap-java-run-test-method ()dap-java-run-test-method187,8229
(defun dap-java-debug-test-method (port)dap-java-debug-test-method195,8497
(defun dap-java-run-test-class ()dap-java-run-test-class213,9187
(defun dap-java-debug-test-class (port)dap-java-debug-test-class220,9389

elpa/dap-mode-0.2/dap-lldb.el,353
(defcustom dap-lldb-debug-program `(,(expand-file-name "~/.vscode/extensions/llvm-org.lldb-vscode-0.1.0/bin/lldb-vscode"))dap-lldb-debug-program32,1107
(defcustom dap-lldb-debugged-program-function 'buffer-file-namedap-lldb-debugged-program-function37,1311
(defun dap-lldb--populate-start-file-args (conf)dap-lldb--populate-start-file-args42,1473

elpa/dap-mode-0.2/dap-hydra.el,118
(defhydra dap-hydra (:color pink :hint nil :foreign-keys run)dap-hydra34,1088
(defun dap-hydra ()dap-hydra72,2586

elpa/dap-mode-0.2/dap-overlays.el,922
(defface dap-result-overlay-facedap-result-overlay-face34,1147
(defcustom dap-overlays-use-font-lock tdap-overlays-use-font-lock45,1618
(defcustom dap-overlays-use-overlays 'bothdap-overlays-use-overlays53,1876
(defcustom dap-overlays-eval-result-prefix "=> "dap-overlays-eval-result-prefix66,2365
(defcustom dap-overlays-eval-result-duration 'commanddap-overlays-eval-result-duration72,2548
(defun dap-overlays--delete-overlay (ov &rest _)dap-overlays--delete-overlay85,3038
(defun dap-overlays--make-overlay (l r type &rest props)dap-overlays--make-overlay90,3230
(defun dap-overlays--remove-result-overlay ()dap-overlays--remove-result-overlay103,3843
(defun dap-overlays--remove-result-overlay-after-command ()dap-overlays--remove-result-overlay-after-command109,4124
(defun dap-overlays--display-interactive-eval-result (value &optional point)dap-overlays--display-interactive-eval-result214,9325

elpa/dap-mode-0.2/dap-mode-pkg.el,78
(define-package "dap-mode" "0.2" "Debug Adapter Protocol mode""dap-mode"1,0

elpa/dap-mode-0.2/dap-ui.el,8075
(defcustom dap-ui-stack-frames-loaded nildap-ui-stack-frames-loaded39,1192
(defcustom dap-ui-session-refresh-delay 0.5dap-ui-session-refresh-delay44,1292
(defcustom dap-ui-themes-directory (f-join (f-dirname (or load-file-name buffer-file-name)) "icons")dap-ui-themes-directory49,1415
(defcustom dap-ui-theme "eclipse"dap-ui-theme54,1587
(defcustom dap-ui-breakpoints-ui-list-displayed-hook nildap-ui-breakpoints-ui-list-displayed-hook59,1674
(defface dap-ui-compile-errlinedap-ui-compile-errline64,1829
(defface dap-ui-sessions-active-session-facedap-ui-sessions-active-session-face69,1979
(defface dap-ui-sessions-terminated-facedap-ui-sessions-terminated-face74,2164
(defface dap-ui-sessions-running-facedap-ui-sessions-running-face79,2321
(defface dap-ui-locals-scope-facedap-ui-locals-scope-face84,2497
(defface dap-ui-inspect-facedap-ui-inspect-face89,2664
(defface dap-ui-locals-variable-leaf-facedap-ui-locals-variable-leaf-face94,2826
(defface dap-ui-locals-variable-facedap-ui-locals-variable-face99,2999
(defface dap-ui-sessions-thread-facedap-ui-sessions-thread-face104,3156
(defface dap-ui-sessions-stack-frame-facedap-ui-sessions-stack-frame-face109,3297
(defface dap-ui-pending-breakpoint-facedap-ui-pending-breakpoint-face114,3443
(defface dap-ui-verified-breakpoint-facedap-ui-verified-breakpoint-face119,3574
(defface dap-ui-marker-facedap-ui-marker-face124,3707
(defface dap-ui-compile-errlinedap-ui-compile-errline129,3840
(defface dap-ui-breakpoint-verified-fringedap-ui-breakpoint-verified-fringe134,3990
(defcustom  dap-ui-default-fetch-count 30dap-ui-default-fetch-count141,4157
(define-widget 'dap-ui-widget-guide 'itemdap-ui-widget-guide146,4321
(define-widget 'dap-ui-widget-end-guide 'itemdap-ui-widget-end-guide151,4425
(define-widget 'dap-ui-widget-handle 'itemdap-ui-widget-handle156,4542
(defmacro dap-ui-define-widget (name &optional image-open image-closed image-empty)dap-ui-define-widget161,4692
(defvar dap-ui-icons-project-running (dap-ui-define-widget "project-running"))dap-ui-icons-project-running188,5961
(defvar dap-ui-icons-project-stopped (dap-ui-define-widget "project-stopped"))dap-ui-icons-project-stopped189,6040
(defvar dap-ui-icons-stack-frame-running (dap-ui-define-widget "stack-frame-running"))dap-ui-icons-stack-frame-running190,6119
(defvar dap-ui-icons-stack-frame-stopped (dap-ui-define-widget "stack-frame-stopped"))dap-ui-icons-stack-frame-stopped191,6206
(defvar dap-ui-icons-thread-running (dap-ui-define-widget "thread-running"))dap-ui-icons-thread-running192,6293
(defvar dap-ui-icons-thread-stopped (dap-ui-define-widget "thread-stopped"))dap-ui-icons-thread-stopped193,6370
(defvar dap-ui-icons-inspect (dap-ui-define-widget "inspect"))dap-ui-icons-inspect194,6447
(defvar dap-ui-icons-scope (dap-ui-define-widget "scope"))dap-ui-icons-scope195,6510
(defvar dap-ui-icons-variable (dap-ui-define-widget "variable" "expanded" "collapsed"))dap-ui-icons-variable196,6569
(defconst dap-ui--loading-tree-widgetdap-ui--loading-tree-widget198,6658
(defconst dap-ui--locals-buffer "*dap-ui-locals*")dap-ui--locals-buffer201,6759
(defconst dap-ui--sessions-buffer "*dap-ui-sessions*")dap-ui--sessions-buffer202,6810
(defconst dap-ui--inspect-buffer "*dap-ui-inspect*")dap-ui--inspect-buffer203,6865
(defconst dap-ui--debug-window-buffer  "*debug-window*")dap-ui--debug-window-buffer204,6918
(defconst dap-ui--brekapoint-priority 200)dap-ui--brekapoint-priority205,6975
(defconst dap-ui--marker-priority 300)dap-ui--marker-priority209,7133
(defvar dap-ui-buffer-configurationsdap-ui-buffer-configurations211,7173
(defvar dap-ui--sessions-refresh-timer nil)dap-ui--sessions-refresh-timer217,7547
(defvar-local dap-ui--locals-request-id 0dap-ui--locals-request-id219,7592
(defun dap-ui-sessions--tree-under-cursor ()dap-ui-sessions--tree-under-cursor222,7688
(defun dap-ui-sessions-select ()dap-ui-sessions-select229,7944
(defun dap-ui--stack-frames (thread-tree)dap-ui--stack-frames249,9007
(defun dap-ui-sessions-delete-session ()dap-ui-sessions-delete-session303,11993
(defun dap-ui--load-threads (session-tree)dap-ui--load-threads310,12182
(defvar dap-ui-session-mode-mapdap-ui-session-mode-map352,14143
(defvar dap-ui-inspect-mode-mapdap-ui-inspect-mode-map358,14339
(defun dap-ui-sessions--cleanup-hooks ()dap-ui-sessions--cleanup-hooks363,14477
(define-minor-mode dap-ui-sessions-modedap-ui-sessions-mode370,14859
(defun dap-ui-session--calculate-face (debug-session)dap-ui-session--calculate-face384,15389
(defun dap-ui--nearest-widget ()dap-ui--nearest-widget391,15712
(defun dap-ui-sessions--render-session-node (session)dap-ui-sessions--render-session-node400,15957
(defun dap-ui-sessions--render-session (session)dap-ui-sessions--render-session409,16363
(defun dap-ui-sessions--refresh (&rest _args)dap-ui-sessions--refresh427,16922
(defun dap-ui-sessions--schedule-refresh (&rest _args)dap-ui-sessions--schedule-refresh463,18409
(defun dap-ui-sessions ()dap-ui-sessions470,18729
(defun dap-ui--make-overlay (beg end tooltip-text visuals &optional mouse-face buf)dap-ui--make-overlay487,19384
(defun dap-ui--make-overlay-at (file point b e msg visuals)dap-ui--make-overlay-at508,20327
(defvar-local dap-ui--breakpoint-overlays '())dap-ui--breakpoint-overlays534,21200
(defvar-local dap-ui--cursor-overlay '())dap-ui--cursor-overlay536,21248
(defun dap-ui--clear-breakpoint-overlays ()dap-ui--clear-breakpoint-overlays538,21291
(defun dap-ui--breakpoint-visuals (breakpoint breakpoint-dap)dap-ui--breakpoint-visuals543,21487
(defun dap-ui--refresh-breakpoints ()dap-ui--refresh-breakpoints560,22367
(defun dap-ui--clear-marker-overlay (&rest _rest)dap-ui--clear-marker-overlay578,23201
(defun dap-ui--set-debug-marker (file point)dap-ui--set-debug-marker587,23486
(defun dap-ui--stack-frame-changed (debug-session)dap-ui--stack-frame-changed600,23998
(defun dap-ui--after-open ()dap-ui--after-open614,24630
(define-minor-mode dap-ui-modedap-ui-mode626,25100
(defun dap-ui-inspect--invalidate (&rest _args)dap-ui-inspect--invalidate643,25791
(defun dap-ui-inspect--cleanup-hooks ()dap-ui-inspect--cleanup-hooks649,25975
(define-minor-mode dap-ui-inspect-modedap-ui-inspect-mode656,26339
(defun dap-ui--load-variables (debug-session tree)dap-ui--load-variables669,26887
(defun dap-ui--render-eval-result (debug-session variable)dap-ui--render-eval-result695,28292
(defun dap-ui--render-variable (debug-session variable)dap-ui--render-variable712,28999
(defun dap-ui--show-buffer (buf)dap-ui--show-buffer732,29887
(defun dap-ui--inspect-value (debug-session value)dap-ui--inspect-value745,30541
(defun dap-ui-inspect (expression)dap-ui-inspect763,31186
(defun dap-ui-inspect-thing-at-point ()dap-ui-inspect-thing-at-point778,31917
(defun dap-ui-inspect-region (start end)dap-ui-inspect-region783,32047
(defun dap-ui-locals--cleanup-hooks ()dap-ui-locals--cleanup-hooks788,32218
(define-minor-mode dap-ui-locals-modedap-ui-locals-mode795,32552
(defun dap-ui--render-scope (debug-session request-id scope)dap-ui--render-scope806,32982
(defun dap-ui-locals--refresh (&rest _)dap-ui-locals--refresh831,34126
(defun dap-ui-locals ()dap-ui-locals854,35320
(defun dap-ui--breakpoints-entries ()dap-ui--breakpoints-entries868,35802
(define-button-type 'dap-ui-breakpoint-positiondap-ui-breakpoint-position896,37149
(defun dap-ui--get-file-info (file-data &optional _)dap-ui--get-file-info904,37392
(defun dap-ui-breakpoints-goto ()dap-ui-breakpoints-goto922,38048
(defun dap-ui-breakpoints-delete (breakpoint)dap-ui-breakpoints-delete930,38276
(defun dap-ui-breakpoints-delete-selected ()dap-ui-breakpoints-delete-selected941,38922
(defun dap-ui-refresh-breakpoints-list ()dap-ui-refresh-breakpoints-list954,39407
(defun dap-ui--brekapoints-list-cleanup ()dap-ui--brekapoints-list-cleanup962,39699
(defun dap-ui-breakpoints ()dap-ui-breakpoints972,40083
(defun dap-ui-debug-sessions-send ()dap-ui-debug-sessions-send982,40481

elpa/dap-mode-0.2/dap-elixir.el,96
(defun dap-elixir--populate-start-file-args (conf)dap-elixir--populate-start-file-args32,1086

elpa/dap-mode-0.2/dap-mode.el,7401
(defconst dap--breakpoints-file (expand-file-name (locate-user-emacs-file ".dap-breakpoints"))dap--breakpoints-file37,1256
(defcustom dap-print-io tdap-print-io40,1418
(defcustom dap-inhibit-io tdap-inhibit-io45,1550
(defcustom dap-terminated-hook nildap-terminated-hook50,1664
(defcustom dap-stopped-hook nildap-stopped-hook58,1885
(defcustom dap-session-changed-hook nildap-session-changed-hook63,2020
(defcustom dap-session-created-hook nildap-session-created-hook68,2159
(defcustom dap-continue-hook nildap-continue-hook74,2361
(defcustom dap-executed-hook nildap-executed-hook82,2590
(defcustom dap-breakpoints-changed-hook nildap-breakpoints-changed-hook87,2740
(defcustom dap-position-changed-hook nildap-position-changed-hook93,2980
(defcustom dap-stack-frame-changed-hook nildap-stack-frame-changed-hook98,3133
(defvar dap--debug-providers (make-hash-table :test 'equal))dap--debug-providers103,3292
(defvar dap--debug-template-configurations ()dap--debug-template-configurations105,3354
(defvar dap--debug-configuration ()dap--debug-configuration108,3451
(defun dap--get-sessions ()dap--get-sessions169,5526
(defun dap--wait-for-port (host port &optional retry-count sleep-interval)dap--wait-for-port173,5636
(defun dap--cur-session ()dap--cur-session195,6456
(defun dap--resp-handler (&optional success-callback)dap--resp-handler199,6581
(defun dap--session-init-resp-handler (debug-session &optional success-callback)dap--session-init-resp-handler210,6951
(defun dap--cur-session-or-die ()dap--cur-session-or-die228,7721
(defun dap--session-running (debug-session)dap--session-running232,7876
(defun dap--cur-active-session-or-die ()dap--cur-active-session-or-die236,8055
(defun dap-breakpoint-get-point (breakpoint)dap-breakpoint-get-point243,8363
(defun dap--set-cur-session (debug-session)dap--set-cur-session248,8542
(defmacro dap--put-if-absent (config key form)dap--put-if-absent252,8705
(defun dap--completing-read (prompt collection transform-fn &optional predicatedap--completing-read256,8880
(defun dap--plist-delete (plist property)dap--plist-delete271,9696
(defun dap--json-encode (params)dap--json-encode281,9993
(defun dap--make-message (params)dap--make-message287,10214
(defun dap--parse-header (s)dap--parse-header292,10437
(defun dap--get-breakpoints ()dap--get-breakpoints307,11012
(defun dap--persist (file-name to-persist)dap--persist314,11271
(defun dap--set-sessions (debug-sessions)dap--set-sessions325,11570
(defun dap--persist-breakpoints (breakpoints)dap--persist-breakpoints330,11793
(defun dap--breakpoints-changed (updated-file-breakpoints &optional file-name)dap--breakpoints-changed348,12723
(defun dap-breakpoint-toggle ()dap-breakpoint-toggle380,14319
(defun dap--get-breakpoint-at-point (file-breakpoints)dap--get-breakpoint-at-point396,15224
(defun dap-breakpoint-delete ()dap-breakpoint-delete406,15645
(defun dap--breakpoint-update (property message)dap--breakpoint-update414,16057
(defun dap-breakpoint-condition ()dap-breakpoint-condition432,17117
(defun dap-breakpoint-hit-condition ()dap-breakpoint-hit-condition437,17297
(defun dap-breakpoint-log-message ()dap-breakpoint-log-message442,17482
(defun dap-breakpoint-add ()dap-breakpoint-add450,17770
(defun dap--get-body-length (headers)dap--get-body-length459,18181
(defun dap--parser-reset (p)dap--parser-reset469,18544
(defun dap--parser-read (p output)dap--parser-read479,18810
(defun dap--read-json (str)dap--read-json527,21170
(defun dap--resume-application (debug-session)dap--resume-application534,21390
(defun dap-continue ()dap-continue543,21867
(defun dap-disconnect ()dap-disconnect554,22345
(defun dap-next ()dap-next563,22717
(defun dap-step-in ()dap-step-in574,23114
(defun dap-step-out ()dap-step-out584,23491
(defun dap-restart-frame ()dap-restart-frame594,23870
(defun dap--go-to-stack-frame (debug-session stack-frame)dap--go-to-stack-frame606,24347
(defun dap--select-thread-id (debug-session thread-id &optional force)dap--select-thread-id622,25204
(defun dap--buffer-list ()dap--buffer-list644,26285
(defun dap--refresh-breakpoints ()dap--refresh-breakpoints648,26391
(defun dap--mark-session-as-terminated (debug-session)dap--mark-session-as-terminated657,26684
(defun dap--on-event (debug-session event)dap--on-event670,27234
(defun dap--create-filter-function (debug-session)dap--create-filter-function703,28973
(defun dap--make-request (command &optional args)dap--make-request726,30276
(defun dap--initialize-message (adapter-id)dap--initialize-message735,30530
(defun dap--json-pretty-print (msg)dap--json-pretty-print751,31174
(defun dap--send-message (message callback debug-session)dap--send-message756,31358
(defun dap--create-session (launch-args)dap--create-session769,32087
(defun dap--send-configuration-done (debug-session _)dap--send-configuration-done794,33358
(defun dap--set-breakpoints-request (file-name file-breakpoints)dap--set-breakpoints-request803,33795
(defun dap--update-breakpoints (debug-session resp file-name)dap--update-breakpoints822,34894
(defun dap--configure-breakpoints (debug-session breakpoints callback result)dap--configure-breakpoints836,35509
(defun dap-eval (expression)dap-eval865,36694
(defun dap-eval-thing-at-point ()dap-eval-thing-at-point883,37476
(defun dap-eval-region (start end)dap-eval-region888,37597
(defun dap-switch-stack-frame ()dap-switch-stack-frame893,37757
(defun dap--calculate-unique-name (debug-session-name debug-sessions)dap--calculate-unique-name914,38861
(defun dap-start-debugging (launch-args)dap-start-debugging924,39322
(defun dap--set-breakpoints-in-file (file file-breakpoints)dap--set-breakpoints-in-file974,41621
(defun dap--read-from-file (file)dap--read-from-file985,42106
(defun dap--after-initialize ()dap--after-initialize992,42328
(defun dap-mode-line ()dap-mode-line1004,42878
(defun dap--thread-label (debug-session thread)dap--thread-label1012,43136
(defun dap-switch-thread ()dap-switch-thread1022,43512
(defun dap-stop-thread ()dap-stop-thread1037,44164
(defun dap--switch-to-session (new-session)dap--switch-to-session1057,44907
(defun dap-switch-session ()dap-switch-session1074,45563
(defun dap-register-debug-provider (language-id provide-configuration-fn)dap-register-debug-provider1092,46353
(defun dap-register-debug-template (configuration-name configuration-settings)dap-register-debug-template1101,46832
(defun dap--find-available-port (host starting-port)dap--find-available-port1109,47162
(defun dap--select-template ()dap--select-template1121,47588
(defun dap-debug (debug-args)dap-debug1134,48211
(defun dap-debug-edit-template (debug-args)dap-debug-edit-template1150,49036
(defun dap-debug-last ()dap-debug-last1170,49867
(defun dap-debug-recent ()dap-debug-recent1177,50098
(defun dap-go-to-output-buffer ()dap-go-to-output-buffer1186,50354
(defun dap-delete-session (debug-session)dap-delete-session1196,50717
(defun dap-delete-all-sessions ()dap-delete-all-sessions1216,51708
(defun dap-breakpoint-delete-all ()dap-breakpoint-delete-all1228,52150
(defun dap--buffer-killed ()dap--buffer-killed1235,52355
(defun dap--after-open ()dap--after-open1255,53489
(define-minor-mode dap-modedap-mode1264,53777
(defun dap-turn-on-dap-mode ()dap-turn-on-dap-mode1274,54025

elpa/dap-mode-0.2/dap-python.el,182
(defcustom  dap-python-default-debug-port 32000dap-python-default-debug-port32,1089
(defun dap-python--populate-start-file-args (conf)dap-python--populate-start-file-args38,1283

init.el,2072
(define-key key-translation-map (kbd "<s-mouse-1>") (kbd "<mouse-2>"))key-translation-map36,699
(defun find-user-init-file ()find-user-init-file39,808
(defun sp-restrict-c (sym)sp-restrict-c175,5071
(defun ensime-edit-definition-with-fallback ()ensime-edit-definition-with-fallback225,6631
(defun contextual-backspace ()contextual-backspace723,21386
(define-key global-map "\C-cl" 'org-store-link)global-map749,22103
(define-key global-map "\C-ca" 'org-agenda)global-map750,22151
(define-key global-map "\C-cog" 'org-gcal-fetch)global-map751,22195
(define-key global-map "\C-coG" 'org-gcal-sync)global-map752,22244
(define-key global-map "\C-cc" 'org-capture)global-map753,22292
(define-key global-map "\C-c\C-x\C-j" 'org-clock-goto)global-map754,22337
(define-key org-mode-map [(control tab)] nil)org-mode-map756,22433
(defun change-tag (old new)change-tag938,30677
(defun org-rename-tag (old new)org-rename-tag943,30807
(defun org-archive-done-in-fileorg-archive-done-in-file952,31104
(define-key org-mode-map "\C-cC-xs" 'org-archive-done-in-file)org-mode-map956,31209
(defun notify-osx (title message)notify-osx1011,33059
(defun filter-gcal-event-maybe (event)filter-gcal-event-maybe1062,34780
(defun filter-routine-sleep-events (event)filter-routine-sleep-events1075,35304
(defun custom/org-collect-food (property)custom/org-collect-food1102,36550
(defun yas/org-very-safe-expand ()yas/org-very-safe-expand1189,38845
(defun close-and-kill-next-pane ()close-and-kill-next-pane1201,39263
(defun close-and-kill-current-pane ()close-and-kill-current-pane1209,39499
(defun buffer-menu-custom-font-lock  ()buffer-menu-custom-font-lock1250,41509
(defun rename-file-and-buffer ()rename-file-and-buffer1312,43720
(defhydra hydra-zoom (global-map "s-+")hydra-zoom1453,49072
(defhydra hydra-buffer-menu (:color pinkhydra-buffer-menu1458,49190
(define-key Buffer-menu-mode-map "." 'hydra-buffer-menu/body)Buffer-menu-mode-map1488,50369
(defhydra hydra-org-agenda (:pre (setq which-key-inhibit t)hydra-org-agenda1493,50526

yasnippet/yasnippet-snippets/yasnippet-snippets.el,142
(defconst yasnippet-snippets-diryasnippet-snippets-dir34,1037
(defun yasnippet-snippets-initialize ()yasnippet-snippets-initialize46,1384

yasnippet/yasnippet-snippets/snippets/c++-mode/.yas-setup.el,145
(defun yas-c++-class-name (str)yas-c++-class-name3,22
(defun yas-c++-class-method-declare-choice ()yas-c++-class-method-declare-choice10,275

yasnippet/yasnippet-snippets/snippets/bibtex-mode/.yas-setup.el,0

yasnippet/yasnippet-snippets/snippets/js-mode/req.html,0

yasnippet/yasnippet-snippets/snippets/php-mode/.yas-setup.el,88
(defun yas-php-get-class-name-by-file-name ()yas-php-get-class-name-by-file-name8,116

yasnippet/yasnippet-snippets/snippets/prog-mode/.yas-setup.el,333
(defun yas-s-trim-left (s)yas-s-trim-left4,102
(defun yas-s-trim-right (s)yas-s-trim-right10,253
(defun yas-s-trim (s)yas-s-trim16,399
(defun yas-string-reverse (str)yas-string-reverse21,518
(defun yas-trimmed-comment-start ()yas-trimmed-comment-start27,698
(defun yas-trimmed-comment-end ()yas-trimmed-comment-end31,831

yasnippet/yasnippet-snippets/snippets/python-mode/.yas-setup.el,240
(defvar yas-text)yas-text2,21
(defun python-split-args (arg-string)python-split-args4,40
(defun python-args-to-docstring ()python-args-to-docstring10,297
(defun python-args-to-docstring-numpy ()python-args-to-docstring-numpy24,1004

go-guru/icicles.el,0

go-guru/go-guru.el,3672
(defgroup go-guru nilgo-guru55,1488
(defcustom go-guru-command "guru"go-guru-command59,1562
(defcustom go-guru-scope ""go-guru-scope64,1657
(defvar go-guru--scope-historygo-guru--scope-history69,1778
(defcustom go-guru-build-tags '()go-guru-build-tags73,1872
(defface go-guru-hl-identifier-facego-guru-hl-identifier-face78,1982
(defcustom go-guru-debug nilgo-guru-debug83,2139
(defcustom go-guru-hl-identifier-idle-time 0.5go-guru-hl-identifier-idle-time88,2249
(defvar go-guru--current-hl-identifier-idle-timego-guru--current-hl-identifier-idle-time93,2413
(defvar go-guru--hl-identifier-timergo-guru--hl-identifier-timer97,2514
(defvar go-guru--last-enclosinggo-guru--last-enclosing101,2615
(define-key go-mode-map (kbd "C-c C-o") 'go-guru-map)go-mode-map120,3370
(defun go-guru-set-scope ()go-guru-set-scope142,4153
(defun go-guru--set-scope-if-empty ()go-guru--set-scope-if-empty164,4970
(defun go-guru--json (mode)go-guru--json168,5075
(define-compilation-mode go-guru-output-mode "Go guru"go-guru-output-mode204,6543
(defun go-guru--compilation-filter-hook ()go-guru--compilation-filter-hook211,6941
(defun go-guru--compilation-start-hook (proc)go-guru--compilation-start-hook240,8153
(defun go-guru--start (mode)go-guru--start247,8417
(defun go-guru--command (mode filename &optional flags)go-guru--command268,9424
(defun go-guru--insert-modified-files ()go-guru--insert-modified-files293,10277
(defun go-guru--insert-modified-file (name buffer)go-guru--insert-modified-file303,10660
(defun go-guru--buffer-size-bytes (&optional buffer)go-guru--buffer-size-bytes307,10820
(defun go-guru--goto-byte (offset)go-guru--goto-byte314,11119
(defun go-guru--goto-byte-column (offset)go-guru--goto-byte-column318,11239
(defun go-guru--goto-pos (posn other-window)go-guru--goto-pos322,11413
(defun go-guru--goto-pos-no-file (posn)go-guru--goto-pos-no-file331,11895
(defun go-guru-callees ()go-guru-callees340,12260
(defun go-guru-callers ()go-guru-callers347,12449
(defun go-guru-callstack ()go-guru-callstack354,12643
(defun go-guru-definition (&optional other-window)go-guru-definition362,12870
(defun go-guru-definition-other-window ()go-guru-definition-other-window378,13483
(defun go-guru-describe ()go-guru-describe384,13654
(defun go-guru-pointsto ()go-guru-pointsto390,13806
(defun go-guru-implements ()go-guru-implements397,13977
(defun go-guru-freevars ()go-guru-freevars404,14165
(defun go-guru-peers ()go-guru-peers410,14314
(defun go-guru-referrers ()go-guru-referrers418,14534
(defun go-guru-whicherrs ()go-guru-whicherrs425,14705
(defun go-guru-what ()go-guru-what432,14914
(defun go-guru--hl-symbols (posn face id)go-guru--hl-symbols437,15047
(defun go-guru-unhighlight-identifiers ()go-guru-unhighlight-identifiers450,15500
(defun go-guru-hl-identifier ()go-guru-hl-identifier455,15674
(define-minor-mode go-guru-hl-identifier-modego-guru-hl-identifier-mode463,15920
(defun go-guru--hl-identifier ()go-guru--hl-identifier478,16611
(defun go-guru--hl-identifiers-function ()go-guru--hl-identifiers-function483,16827
(defun go-guru--hl-set-timer ()go-guru--hl-set-timer497,17384
(defun go-guru--on-overlay-p (id)go-guru--on-overlay-p506,17745
(defun go-guru--hl-identifiers-post-command-hook ()go-guru--hl-identifiers-post-command-hook510,17932
(defun go-guru--hl-identifiers-before-change-function (_beg _end)go-guru--hl-identifiers-before-change-function515,18108
(defun go-guru--enclosing ()go-guru--enclosing521,18303
(defun go-guru--enclosing-unique ()go-guru--enclosing-unique525,18416
(defun go-guru-expand-region ()go-guru-expand-region538,18851

help-plus/help+.el,1165
(defvar help-origin-buffer nil "Buffer that we left, to go to *Help*.")help-origin-buffer155,5823
(define-key help-map [?\C-m] 'help-on-click/key) ; REThelp-map157,5896
(define-key help-map "u" 'manual-entry) ; in `man.el'help-map158,5951
(define-key help-map "\C-a" 'apropos)help-map159,6005
(define-key help-map "\M-o" 'pop-to-help-toggle)help-map160,6043
(define-key help-map "\C-l" 'locate-library)help-map161,6092
(define-key help-map "\M-a" 'apropos-documentation)help-map162,6137
(define-key help-map "\C-\M-a" 'tags-apropos)help-map163,6189
(define-key help-map [down-mouse-1] 'mouse-help-on-click)help-map164,6235
(define-key help-map [mode-line down-mouse-1] 'mouse-help-on-mode-line-click)help-map165,6293
(defun where-is (definition &optional insert)where-is409,19007
(defun help-on-click/key-lookup (key &optional pp-key where)help-on-click/key-lookup483,22895
(defun help-on-click/key (key)help-on-click/key513,24648
(defun mouse-help-on-click (event)mouse-help-on-click625,31185
(defun mouse-help-on-mode-line-click (event)mouse-help-on-mode-line-click631,31345
(defun pop-to-help-toggle ()pop-to-help-toggle637,31507

help-plus/help-fns+.el,3099
(defvar advertised-signature-table)advertised-signature-table419,19806
(defvar dir-local-variables-alist)dir-local-variables-alist420,19842
(defvar dir-locals-file)dir-locals-file421,19877
(defvar file-local-variables-alist)file-local-variables-alist422,19902
(defvar icicle-mode)                    ; In `icicles-mode.el'icicle-mode423,19938
(defvar icicle-pre-minibuffer-buffer)   ; In `icicles-var.el'icicle-pre-minibuffer-buffer424,20001
(defvar icicle-WYSIWYG-Completions-flag) ; In `icicles-opt.el'icicle-WYSIWYG-Completions-flag425,20063
(defvar Info-indexed-nodes)             ; In `info.el'Info-indexed-nodes426,20126
(defvar help-cross-reference-manuals)   ; For Emacs < 23.2help-cross-reference-manuals427,20181
(defvar help-enable-auto-load)          ; For Emacs < 24.3help-enable-auto-load428,20240
(defvar package-alist)package-alist429,20299
(defvar package-archive-contents)package-archive-contents430,20322
(defvar package--builtins)package--builtins431,20356
(defvar package--initialized)package--initialized432,20383
(defvar variable-name-history () "Minibuffer history for variable names.")variable-name-history436,20440
(define-key help-map "B"    'describe-buffer)help-map438,20516
(define-key help-map "c"    'describe-command)help-map439,20562
(define-key help-map "o"    'describe-option)help-map440,20609
(define-key help-map "\C-c" 'describe-key-briefly)help-map441,20655
(define-key help-map "\C-o" 'describe-option-of-type)help-map442,20706
(define-key help-map "\M-c" 'describe-copying)help-map443,20760
(define-key help-map "\M-f" 'describe-file)help-map444,20807
(define-key help-map "\M-k" 'describe-keymap)help-map445,20851
(define-key help-map "\M-l" 'find-function-on-key)help-map446,20897
(defun describe-function (function &optional commandp)describe-function993,50735
(defun describe-command (function)      ; Bound to `C-h c'describe-command1741,96801
(defmacro with-selected-frame (frame &rest body)with-selected-frame1944,109329
(defun describe-option (variable &optional buffer) ; Bound to `C-h o'describe-option2455,141084
(defun describe-option-of-type (type option) ; Bound to `C-h C-o'describe-option-of-type2473,142208
(defun help-var-is-of-type-p (variable types &optional mode)help-var-is-of-type-p2522,145375
(defun help-var-matches-type-p (variable types)help-var-matches-type-p2571,147741
(defun help-var-inherits-type-p (variable types)help-var-inherits-type-p2582,148161
(defun help-var-val-satisfies-type-p (variable types)help-var-val-satisfies-type-p2601,149062
(defun help-value-satisfies-type-p (value types)help-value-satisfies-type-p2607,149364
(defun help-custom-type (variable)help-custom-type2624,150260
(defun help-remove-duplicates (list)help-remove-duplicates2636,150774
(defun describe-file (filename &optional internal-form-p no-error-p) ; Bound to `C-h M-f'describe-file2746,156784
(defun help-all-exif-data (file)help-all-exif-data2878,165306
(defun describe-keymap (keymap &optional search-symbols-p) ; Bound to `C-h M-k'describe-keymap2887,165716

help-plus/help-mode+.el,311
(defvar help-forward-label)help-forward-label86,2965
(defvar help-xref-override-view-map)help-xref-override-view-map87,2993
(defun help-make-xrefs (&optional buffer)help-make-xrefs128,4343
(defun help-xref-on-pp (from to)help-xref-on-pp331,16039
(define-button-type 'help-libraryhelp-library359,17319

transient/history.el,0
