; -*- mode: Org; eval: (add-hook 'after-save-hook (lambda () (my/tangle-async)) nil t) -*-
#+STARTUP:    overview
#+STARTUP:    indent
#+PROPERTY:   header-args :tangle yes

* init & globals
** messages ts

#+begin_src emacs-lisp
;; timestamps in messages buffer
(defun my-message-with-timestamp (old-func fmt-string &rest args)
   "Prepend current timestamp (with microsecond precision) to a message"
   (when fmt-string ;; did this because of some vr/replace empty messages getting into echo area in minibuffer
     (apply old-func
            (concat (format-time-string "[%T.%3N] ")
                     fmt-string)
            args)))
(advice-add 'message :around #'my-message-with-timestamp)
; to remove
;(advice-remove 'message #'my-message-with-timestamp)

#+end_src
** dependency tree
#+begin_src emacs-lisp :tangle no
(defvar my/require-tree nil)
(defun require--advice (orig-fun feature &rest args)
  (setq my/require-tree
    (append my/require-tree
        (list (let ((my/require-tree (list feature)))
            (apply orig-fun feature args)
            my/require-tree)))))
(advice-add 'require :around 'require--advice)
#+end_src

#+RESULTS:

** package management
#+begin_src emacs-lisp
(require 'package)
(setq
  package-archives
  '(("gnu" . "http://elpa.gnu.org/packages/")
    ("org" . "http://orgmode.org/elpa/")
    ("melpa" . "http://melpa.org/packages/")
    ("melpa-stable" . "http://stable.melpa.org/packages/"))
  ;; prefer stable unless explicit pin on melpa
  package-archive-priorities
      '(("melpa-stable" . 20)
        ("org" . 20)
        ("gnu" . 10)
        ("melpa" . 25))) ;; started using melpa first
(when (boundp 'package-pinned-packages)
  (setq package-pinned-packages
        '((org-plus-contrib . "org"))))

(package-initialize)

(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(require 'use-package)

  ;(require 'benchmark-init)

(setq
;; Enable ensure by default for use-package
  use-package-always-ensure t
  use-package-always-defer t
  use-package-compute-statistics t
  use-package-verbose t
  use-package-minimum-reported-time 0 ;; I want to see order and timing
  )

(use-package quelpa :demand)

(use-package quelpa-use-package
  :demand
  :init (setq quelpa-use-package-inhibit-loading-quelpa t)
  :config (quelpa-use-package-activate-advice))

;; site-lisp
(push (concat user-emacs-directory "lisp") load-path)
#+end_src

** global vars & modes

#+begin_src emacs-lisp
;; TODO - sort this
(use-package emacs
  :demand
  :init
  (message "hello freak bitches")
  :custom
  (user-full-name "Yuri Ostapchuk")
  (user-mail-address "twist522@gmail.com")

  ;; startup
  (inhibit-startup-message t)
  (initial-scratch-message "")
  ;;initial-buffer-choice 'remember-notes
  (initial-major-mode 'text-mode)  ; I don't want to load prog-mode hooks
  ;;(setq debug-on-error t)
  (create-lockfiles nil)
  (make-backup-files nil)

  ;; ui
  (display-time-use-mail-icon t)
  (display-time-mail-directory nil); "~/.mail/gmail/Inbox/new" ; using mu4e
  (display-time-day-and-date nil)
  (column-number-mode t)

  ;; interaction
  (scroll-error-top-bottom t)
  (enable-recursive-minibuffers t) ;; experimental - minibuffer within minibuffer
  (browse-url-browser-function 'browse-url-default-browser)

  ;; editing
  ;;(show-paren-delay 0.5)
  (sentence-end-double-space nil)

  :config
  ;; editing
  ;;(electric-indent-mode 0) ; todo: it makes indentations messy in org, use org-indent-mode?
  (delete-selection-mode 1) ; omg how could I live without this - to remove selection (if active) when inserting text
  (global-so-long-mode 1)


  ;; ui
  (menu-bar-mode -1)
  (fringe-mode 25)
  (set-scroll-bar-mode nil)
  (tool-bar-mode -1)
  (tooltip-mode -1)
  (global-hl-line-mode 1) ; highlight current line
  (show-paren-mode 1)
  (display-time-mode 1) ; time in the tab-bar line

  ;; interaction
  (save-place-mode 1) ; remember file position in the visited previously file
  (auto-insert-mode t)

  ;; for windows - easier integration with Dropbox/org paths
  (when (eq system-type 'window-nt)
    (setenv "HOME" "C:\\Users\\Admin"))
  ;; for mac
  ;;(setq mac-option-modifier 'meta)
  ;;(setq mac-command-modifier 'super)
  )
#+end_src
** package menu
#+begin_src emacs-lisp
(use-package paradox)
#+end_src

** benchmark

#+begin_src emacs-lisp :tangle yes
(use-package benchmark-init :disabled) ;; this package fails to compile
#+end_src

** hydra init
#+begin_src emacs-lisp :tangle yes
(use-package posframe :defer 0.4)

(use-package hydra)

(use-package pretty-hydra
  :demand)

(use-package hydra-posframe
  :demand :after (hydra posframe)
  :quelpa (hydra-posframe :fetcher github :repo "Ladicle/hydra-posframe")
  :config (hydra-posframe-mode)
  ;(setq hydra-hint-display-alist nil)
  )

(use-package major-mode-hydra
  :demand :after hydra
  :preface
  (defun with-alltheicon (icon str &optional height v-adjust)
    "Displays an icon from all-the-icon."
    (s-concat (all-the-icons-alltheicon icon :v-adjust (or v-adjust 0) :height (or height 1)) " " str))

  (defun with-material (icon str &optional height v-adjust)
    "Displays an icon from material."
    (s-concat (all-the-icons-material icon :v-adjust (or v-adjust 0) :height (or height 1)) " " str))

  (defun with-faicon (icon str &optional height v-adjust)
    "Displays an icon from Font Awesome icon."
    (s-concat (all-the-icons-faicon icon :v-adjust (or v-adjust 0) :height (or height 1)) " " str))

  (defun with-fileicon (icon str &optional height v-adjust)
    "Displays an icon from the Atom File Icons package."
    (s-concat (all-the-icons-fileicon icon :v-adjust (or v-adjust 0) :height (or height 1)) " " str))

  (defun with-octicon (icon str &optional height v-adjust)
    "Displays an icon from the GitHub Octicons."
    (s-concat (all-the-icons-octicon icon :v-adjust (or v-adjust 0) :height (or height 1)) " " str)))

#+end_src

#+RESULTS:

** init tools

#+begin_src emacs-lisp
; find bug in init.el
(use-package bug-hunter :disabled)

;(setq
 ;garbage-collection-messages t ; see when gc happens
; gc-cons-threshold #x40000000
; gc-cons-percentage 0.3
;)

(defmacro k-time (&rest body)
  "Measure and return the time it takes evaluating BODY."
  `(let ((time (current-time)))
     ,@body
     (float-time (time-since time))))

; When idle for 15sec run the GC no matter what.
(defvar k-gc-timer
  (run-with-idle-timer 15 t
                       (lambda ()
                         (message "Garbage Collector has run for %.06fsec"
                                  (k-time (garbage-collect))))))

; startup profiler
(use-package esup :commands (esup))

;; esup, didn't work, trying this:
;; workaround chemacs:
;; mv .emacs.d .emacs.d.tmp
;; ln -s .config/emacs .emacs.d
;; emacs -Q -l /home/twist/.config/emacs/lisp/profile-dotemacs.el --eval "(progn (setq user-emacs-directory \"~/.config/emacs/\") (profile-dotemacs))"
;; rm .emacs.d
;; mv .emacs.d.tmp .emacs.d

; startup time
(defun my/display-startup-time ()
  (message "Emacs loaded in %s with %d garbage collections."
           (format "%.2f seconds" (float-time (time-subtract after-init-time before-init-time))) gcs-done))
(add-hook 'emacs-startup-hook #'my/display-startup-time)

(defun byte-recompile-init-file ()
  "Byte-recompile user init files."
  (interactive)
  (byte-recompile-file (concat user-emacs-directory "config.el"))
  (byte-recompile-file (concat user-emacs-directory "init.el"))
  (message (format "byte-compile finished"))
  ;; this doesn't work - subprocess needs correct load-path being populated
  ;; (async-start
  ;;  `(lambda () (require 'bytecomp) (byte-recompile-file ,out-file) ,out-file)
  ;;  `(lambda (result2)
  ;;     (message (format "byte-recompile finished for: %s" result2))))
  )
#+end_src

** safe vars

#+begin_src emacs-lisp
(setq
  safe-local-variable-values
    '(
     (eval add-hook 'after-save-hook (lambda nil (my/tangle-async)) nil t)
     (eval add-hook 'after-save-hook (lambda nil (my/tangle-async-and-byte-compile-init-file)) nil t)
     (org-archive-location . "~/Dropbox/org/archive/%s_archive.gpg::")
     (eval setq org-cycle-include-plain-lists 'integrate)
     (eval load-file "ledger-kredo-regex.el.gpg")
     (doom-modeline-buffer-file-name-style . truncate-with-project)
     (doom-modeline-buffer-file-name-style quote truncate-with-project)
     (org-hugo-footer . "

[//]: # \"Exported with love from a post written in Org mode\"
[//]: # \"- https://github.com/kaushalmodi/ox-hugo\"")
     (checkdoc-minor-mode . t)
     (flycheck-disabled-checkers emacs-lisp-checkdoc)
     (eval visual-line-mode t))

   ; tramp theme
   custom-safe-themes '("6ebdb33507c7db94b28d7787f802f38ac8d2b8cd08506797b3af6cdfd80632e0" default)
)
#+end_src

#+RESULTS:
| 6ebdb33507c7db94b28d7787f802f38ac8d2b8cd08506797b3af6cdfd80632e0 | default |

** feature checks

#+begin_src emacs-lisp
(if (functionp 'json-serialize)
  (message "Native JSON is available")
  (message "Native JSON is *not* available"))
#+end_src

** native comp

#+begin_src emacs-lisp
(if (and (fboundp 'native-comp-available-p)
         (native-comp-available-p))
  (progn
    (message "Native compilation is available")
    (setq native-comp-async-report-warnings-errors nil)
    (setq comp-deferred-compilation t)
    (add-to-list 'native-comp-eln-load-path (expand-file-name "eln-cache/" user-emacs-directory))
    (setq package-native-compile t))
  (message "Native complation is *not* available"))
#+end_src

** elisp tools
*** debug hooks
this tools for debugging hooks came from here - https://emacs.stackexchange.com/a/19582/29202
#+begin_src emacs-lisp
  (defun my/call-logging-hooks (command &optional verbose)
  "Call COMMAND, reporting every hook run in the process.
Interactively, prompt for a command to execute.

Return a list of the hooks run, in the order they were run.
Interactively, or with optional argument VERBOSE, also print a
message listing the hooks."
  (interactive "CCommand to log hooks: \np")
  (let* ((log     nil)
         (logger (lambda (&rest hooks)
                   (setq log (append log hooks nil)))))
    (my/with-advice
        ((#'run-hooks :before logger))
      (call-interactively command))
    (when verbose
      (message
       (if log "Hooks run during execution of %s:"
         "No hooks run during execution of %s.")
       command)
      (dolist (hook log)
        (message "> %s" hook)))
    log))

(defmacro my/with-advice (adlist &rest body)
  "Execute BODY with temporary advice in ADLIST.

Each element of ADLIST should be a list of the form
  (SYMBOL WHERE FUNCTION [PROPS])
suitable for passing to `advice-add'.  The BODY is wrapped in an
`unwind-protect' form, so the advice will be removed even in the
event of an error or nonlocal exit."
  (declare (debug ((&rest (&rest form)) body))
           (indent 1))
  `(progn
     ,@(mapcar (lambda (adform)
                 (cons 'advice-add adform))
               adlist)
     (unwind-protect (progn ,@body)
       ,@(mapcar (lambda (adform)
                   `(advice-remove ,(car adform) ,(nth 2 adform)))
                 adlist))))
#+end_src

*** eval-after-all

#+begin_src emacs-lisp
(defun eval-after-load-all (my-features form)
  "Run FORM after all MY-FEATURES are loaded.
See `eval-after-load' for the possible formats of FORM."
  (if (null my-features)
      (if (functionp form)
      (funcall form)
    (eval form))
    (eval-after-load (car my-features)
      `(lambda ()
     (eval-after-load-all
      (quote ,(cdr my-features))
      (quote ,form))))))
#+end_src
* input & security
** input & langs

#+begin_src emacs-lisp
;; input method
(setq default-input-method "ukrainian-computer")

;; free binding for iedit
(customize-set-variable 'flyspell-auto-correct-binding [(meta control ?\;)])

(add-hook 'text-mode-hook #'flyspell-mode)

(when (eq system-type 'windows-nt)
  (with-eval-after-load "ispell"
    (setq ispell-dictionary "en_US")
    (setq ispell-hunspell-dictionary-alist '(
                                             ("en_US" "[[:alpha:]]" "[^[:alpha:]]" "[']" t ("-d" "en_US") nil utf-8)
    ; TODO - doesn't work
    ;(setenv "LANG" "en_US.UTF-8")
    ;(setq ispell-dictionary "uk_UA,en_US")
    ;(setq ispell-hunspell-dictionary-alist '(("en_US" "[[:alpha:]]" "[^[:alpha:]]" "[']" t ("-d" "en_US") nil utf-8)
    ;                                         ("uk_UA" "[[:alpha:]]" "[^[:alpha:]]" "[']" t ("-d" "uk_UA") nil utf-8)
    ;                                         ))
    ;(ispell-set-spellchecker-params)
    ;(ispell-hunspell-add-multi-dic "uk_UA,en_US")
    ))))

;(set-language-environment "UTF-8")
(set-default-coding-systems 'utf-8)
#+end_src

** clipboard

#+begin_src emacs-lisp
;; clipboard share with x11
(use-package xclip
  :unless (eq system-type 'windows-nt)
  :defer 1
  :config (xclip-mode 1))
#+end_src

** sessions

#+begin_src emacs-lisp
(use-package desktop-save
  :ensure nil
  :init
  (desktop-save-mode 1)
  :custom
  ((desktop-modes-not-to-save '(tags-table-mode org-mode helpful-mode))
   ;;(desktop-files-not-to-save "\\(\\`/[^/:]*:\\|(ftp)\\|(\\.gz)\\'\\)")
   (desktop-files-not-to-save ".*")
   (desktop-load-locked-desktop t) ; do not ask that lock-file exists, this fixes the issue with daemon wait answer
   (desktop-buffers-not-to-save ".*")) ;; actually, I dont' want it to save any buffers
  )

(use-package super-save
  :defer 1.1
  :config
  (super-save-mode +1)
  ;; add integration with ace-window
  ;(add-to-list 'super-save-triggers 'ace-window)
  (add-to-list 'super-save-triggers 'ivy-switch-buffer)
  ;; save on find-file
  (add-to-list 'super-save-hook-triggers 'find-file-hook)
  :custom
  ;; these are actually global configs, but I keep them under super-save
  (backup-directory-alist) `(("." . ,(expand-file-name (concat user-emacs-directory "backups"))))
  (auto-save-file-name-transforms `((".*" ,(concat user-emacs-directory "auto-save/") t)))
  (super-save-idle-duration 20)
  (super-save-auto-save-when-idle t))
#+end_src

** accessibility

#+begin_src emacs-lisp
;(load-file "/usr/share/festival/festival.el")
;(autoload 'say-minor-mode "festival" "Menu for using Festival." t)
;(say-minor-mode t)

#+end_src

** security & encryption

#+begin_src emacs-lisp
;(add-hook 'after-init-hook
;          #'(lambda()
;              (require 'epa-file)
;              (epa-file-enable)))
;(use-package epa
;  :defer t
;  :custom
;  (epg-gpg-program "gpg")
;  (epa-pinentry-mode nil))

;; used for prompts on gpg - if pinentry program = emacs
(use-package pinentry)
;; This should force Emacs to use its own internal password prompt instead of an external pin entry program
(setenv "GPG_AGENT_INFO" nil)

;; password store
(use-package password-store
  :config
  (when (eq system-type 'windows-nt)
    (setq password-store-executable (executable-find "pass.bat"))))

(use-package pass)

(use-package auth-source-pass
  :after auth-source
  :ensure nil
  :config (auth-source-pass-enable)
  )
;; was used until auth-source-pass came
;;(setq auth-sources '("~/.authinfo.gpg" "~/.netrc"))

;; close buffers which will ask for user input on the next start and prevent emacs-server to start through systemctl
(add-hook 'kill-emacs-hook (lambda()
                             (save-some-buffers t)
                             (kill-matching-buffers ".*.gpg" nil t)
                             (kill-matching-buffers "ejc-sql-editor" nil t) ;; this may ask for authinfo on next load
                             ))
#+end_src

** edit-server

#+begin_src emacs-lisp
;; edit server for chrome plugin
(use-package edit-server
  :disabled
  :ensure t
  :commands edit-server-start
  ;;:init
  ;;          (add-hook 'after-init-hook
  ;;                    #'(lambda() (edit-server-start))))
  :config (setq edit-server-new-frame-alist
                '((name . "Edit with Emacs FRAME")
                  (top . 200)
                  (left . 200)
                  (width . 80)
                  (height . 25)
                  (minibuffer . t)
                  (menu-bar-lines . t)
                  (window-system . x))))
#+end_src

* UI & themes
** fonts

#+begin_src emacs-lisp
;; set default
(if (eq system-type 'windows-nt)
  (set-face-attribute 'default nil :font "Fira Mono" :height 95) ;; defaults to 139
  (set-face-attribute 'default nil :font "Input Mono Narrow" :height 83)
  ;(set-face-attribute 'default nil :font "Source Code Pro-9")
  ;; equivalent
  ;(add-to-list 'default-frame-alist '(font . "Input Mono Narrow-9"))
  ;(add-to-list 'default-frame-alist '(font . "Source Code Pro-10"))
  )

;(set-face-attribute 'bold nil :height 95) ;; good way to emphasize

;; to set for current frame and future frames (works instantly)
;(set-face-attribute 'default nil :font "Input Mono Narrow" :height 95)
;;(set-face-attribute 'default nil :font "Source Code Pro" :height 150) ;; defaults to 139
;;(set-face-attribute 'default nil :font "Source Code Pro Medium")
;; equivalent of
;;(set-frame-font "Source Code Pro Medium" nil t)

;; or use M-x menu-set-font, or use M-x set-frame-font

;; testing
;;(set-fontset-font t 'latin "Noto Sans")

;; something for icons?
(setq inhibit-compacting-font-caches t)
#+end_src

** frame alpha
#+begin_src emacs-lisp
(if (eq system-type 'windows-nt)
  (add-to-list 'default-frame-alist '(alpha . (93 . 93)))
  (add-to-list 'default-frame-alist '(alpha . (88 . 88))))

(defun frame-update-alpha (updfunc)
  "Apply a given function to existing alpha parameter of the selected frame.
UPDFUNC function which accepts current alpha and returns new"
  (when (functionp updfunc)
    (let* ((current-alpha (car (frame-parameter nil 'alpha)))
           (new-alpha (funcall updfunc current-alpha))
           (new-alpha (min 100 (max 0 new-alpha))))
    (set-frame-parameter (selected-frame) 'alpha (list new-alpha new-alpha)))))

(defun frame-incr-alpha ()
  "Increment existing frame alpha by 3."
  (interactive)
  (frame-update-alpha (lambda (alpha) (+ alpha 3))))

(defun frame-decr-alpha ()
  "Decrement existing frame alpha by 3."
  (interactive)
  (frame-update-alpha (lambda (alpha) (- alpha 3))))
#+end_src

** icons

#+begin_src emacs-lisp
(use-package all-the-icons)

;; bad with hidpi - icons modeline
;(use-package mode-icons :config (mode-icons-mode -1))

;; in terminal (but it actually doesn't work for doom-modeline)
;(with-eval-after-load 'quelpa
;  (quelpa '(icons-in-terminal :fetcher github :repo "seagle0128/icons-in-terminal.el")))
#+end_src

** modeline

#+begin_src emacs-lisp
;; modeline
(use-package doom-modeline
  :defer 0.2
  ;:hook (after-init . doom-modeline-mode)
  :config
  (doom-modeline-mode)
  ; these will hardcode height and zoom-frm will not work for mode-line
  ;(set-face-attribute 'mode-line nil :height 90)
  ;(set-face-attribute 'mode-line-inactive nil :height 50)
  (setq doom-modeline-height 25)
  (setq doom-modeline-bar-width 6)
  ;; scala projects may have very long file paths, in that case doommodeline doesn't truncate it
  ;;:custom (doom-modeline-buffer-file-name-style 'truncate-with-project)
  (setq doom-modeline-icon t)
)
#+end_src

** themes

#+begin_src emacs-lisp
(use-package gruvbox-theme
  :defer 0.2
  :config
  (load-theme 'gruvbox-dark-medium t))

(use-package doom-themes
  :init
  (defun my/restore-mode-line ()
    "Restore modeline after doom-themes ding, sometimes it gets stuck into doom-modeline-error state"
    (interactive)
    (setq face-remapping-alist (delete (assq 'mode-line face-remapping-alist) face-remapping-alist)))
  :defer 0.3
  :config
  ;(load-theme 'doom-one t)
  ;(load-theme 'doom-gruvbox t)
  (doom-themes-visual-bell-config)
  ;(doom-themes-neotree-config)
  ;(doom-themes-treemacs-config)
  (doom-themes-org-config)
  (setq doom-themes-enable-bold t)
  (setq doom-themes-enable-italic t))
#+end_src

** theme auto changers

#+begin_src emacs-lisp
;; todo - doesn't work
;; (use-package theme-changer
;;   :config
;;   (setq calendar-location-name "Dallas, TX")
;;   (setq calendar-latitude 32.85)
;;   (setq calendar-longitude -96.85)
;;   (change-theme nil 'dracula-theme)
;; )

;(use-package modus-operandi-theme)
;(use-package modus-vivendi-theme)
;; Define coordinates
;(setq calendar-latitude 49.784443
;      calendar-longitude 24.056473)
;; Light at sunrise
;(load-theme 'modus-operandi t t)
;(run-at-time (nth 1 (split-string (sunrise-sunset)))
;             (* 60 60 24)
;             (lambda ()
;               (enable-theme 'modus-operandi)))
;;; Dark at sunset
;(load-theme 'modus-vivendi t t)
;(run-at-time (nth 4 (split-string (sunrise-sunset)))
;             (* 60 60 24)
;             (lambda ()
;               (enable-theme 'modus-vivendi)))
#+end_src

** dashboard

#+begin_src emacs-lisp
(use-package dashboard
  :demand
  ;:defer 0.9
  :init
  (defun dashboard-performance-statement (list-size)
    (insert (propertize " Think" 'face 'dashboard-heading))
    (insert (propertize "\n\t★ SLEEP\n\t★ ROUTINE\n\t★ NUTRITION\n\t★ SPORT\n\t★ REST" 'face '(:height 110))))
  :custom
  ((dashboard-banner-logo-title "With Great Power Comes Great Responsibility")
   (dashboard-startup-banner 'official) ;; 1,2,3,'logo,'official
   (dashboard-center-content t)
   (dashboard-items '((performance)
                      )) ;(elfeed . 10) (agenda . 5) (recents  . 5) (projects . 5) (bookmarks . 5) (registers . 5)
   (dashboard-set-file-icons t)
   (dashboard-set-heading-icons t)
   (dashboard-set-init-info t)
   (dashboard-set-navigator t))
  :config
  ;;(require 'dashboard-elfeed) ; comes from local 'lisp' dir
  ;;(setq de/key "b")
  ;;(setq de/dashboard-search-filter "")
  ;;(elfeed-update)
  (add-to-list 'dashboard-item-generators '(performance . dashboard-performance-statement))
  ;;(add-to-list 'dashboard-item-generators '(elfeed . dashboard-elfeed))
  (dashboard-setup-startup-hook)
  ;; this is for emacsclient
  ;;(setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
  )

;; (defun dashboard-performance-center-line ()
;;     (make-string (max 0 (floor (/ (- dashboard-banner-length (+ 20 1)) 2))) ?\ ))
;; (defun dashboard-performance-statement (number-of-items)
;;   (insert (dashboard-performance-center-line))
;;   (insert (all-the-icons-faicon "check" :height 1.2 :v-adjust 0.0 :face 'font-lock-keyword-face))
;;   (insert (propertize " Think\n" 'face 'dashboard-heading))
;;   (insert (dashboard-performance-center-line))
;;   (insert (propertize "\t★ SLEEP\n" 'face '(:height 110)))
;;   (insert (dashboard-performance-center-line))
;;   (insert (propertize "\t★ ROUTINE\n" 'face '(:height 110)))
;;   (insert (dashboard-performance-center-line))
;;   (insert (propertize "\t★ NUTRITION\n" 'face '(:height 110)))
;;   (insert (dashboard-performance-center-line))
;;   (insert (propertize "\t★ SPORT\n" 'face '(:height 110)))
;;   (insert (dashboard-performance-center-line))
;;   (insert (propertize "\t★ REST\n" 'face '(:height 110))))

#+end_src

** other faces
#+begin_src emacs-lisp
(custom-set-faces '(region ((t (:extend t :background "dark slate blue")))))
;;(custom-set-faces '(fringe ((t (:background "#282828" :weight extra-bold :height 3.0 :width extra-expanded))))
#+end_src

** auto dim inactive buffer
#+begin_src emacs-lisp :tangle yes
(use-package auto-dim-other-buffers
  :defer 0.7
  :config
  (auto-dim-other-buffers-mode t))
#+end_src
8
* text & editing
** scroll
#+begin_src emacs-lisp :tangle yes
  ;; finally!
(use-package good-scroll
  :disabled ;; it actually adds up ~2% of extra cpu all-time - becuase of constant re-rendering
  :defer 0.8
  :config
  (global-set-key [next] #'good-scroll-up-full-screen)
  (global-set-key [prior] #'good-scroll-down-full-screen)
  ;; this doesn't  move to the very top of the window
  ;;(evil-define-key 'motion global-map (kbd "C-f") 'good-scroll-up-full-screen)
  ;;(evil-define-key 'motion global-map (kbd "C-b") 'good-scroll-down-full-screen)
  (evil-define-key 'emacs global-map (kbd "C-v") 'good-scroll-up-full-screen)
  (evil-define-key 'emacs global-map (kbd "M-v") 'good-scroll-down-full-screen)
  (good-scroll-mode 1)
  )
;; scroll one line at a time (less "jumpy" than defaults)
                                        ;(setq mouse-wheel-scroll-amount '(1 ((shift) . 1)((meta)) ((control) . text-scale))) ;; one line at a time
                                        ;(setq mouse-wheel-progressive-speed t);;nil ;; (not) accelerate scrolling
                                        ;(setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse
                                        ;(setq scroll-step 1) ;; keyboard scroll one line at a time

;; multiple problems with this package: 1. no font size change. 2. line separator ^L problem (page-break-lines)
;;(use-package display-line-numbers :custom (global-display-line-numbers-mode t))

;; horizontal scroll
(setq mouse-wheel-tilt-scroll t)
(setq mouse-wheel-flip-direction t)

#+end_src
** various (to sort)
#+begin_src emacs-lisp
(setq-default
  indent-tabs-mode nil
  tab-width 4)

(use-package linum
  ;;:custom (global-linum-mode t)
  :config
  ;;(require 'page-break-lines)
  :hook (prog-mode . linum-mode))

(use-package page-break-lines
  :config
  (global-page-break-lines-mode))

;;(use-package beacon
;;  :custom
;;  (beacon-color "#f1fa8c")
;;  :hook (after-init . beacon-mode))

;; show indents in all modes
;; bad performance
;;(use-package indent-guide
;;  :hook (prog-mode . indent-guide-mode))

;; string manipulation (not really using directly right now)
(use-package s)

(use-package visual-regexp
  :bind
  (("M-%" . vr/replace)
   ("M-C-%" . vr/query-replace)
   ("C-c m" . vr/mc-mark)))

(use-package expand-region
  :after evil
  :commands 'er/expand-region
  :init
  (evil-define-key 'motion global-map (kbd "<leader>v") 'er/expand-region))

(defun contextual-backspace ()
  "Hungry whitespace or delete word depending on context."
  (interactive)
  (if (looking-back "[[:space:]\n]\\{2,\\}" (- (point) 2))
      (while (looking-back "[[:space:]\n]" (- (point) 1))
        (delete-char -1))
    (cond
     ((and (boundp 'smartparens-strict-mode)
           smartparens-strict-mode)
      (sp-backward-kill-word 1))
     ((and (boundp 'subword-mode)
           subword-mode)
      (subword-backward-kill 1))
     (t
      (backward-kill-word 1)))))

(global-set-key (kbd "C-M-<backspace>") 'contextual-backspace)

(global-auto-revert-mode t)

(global-set-key (kbd "C-c w") 'toggle-truncate-lines); wrap

(use-package mixed-pitch
  ;;:hook
  ;; If you want it in all text modes:
  ;;(text-mode . mixed-pitch-mode)
  )

;; writing
(use-package olivetti)
(use-package wc-mode)
(use-package writegood-mode)

;;(add-hook 'org-mode-hook
;;#'olivetti-mode ;; little ugly
;;#'mixed-pitch-mode) ;; little ugly
;;(add-hook 'text-mode-hook
;;           (lambda ()
;;            (variable-pitch-mode 1)))
;;(set-face-attribute 'default nil :family "DejaVu Sans Mono" :height 130)
;;(set-face-attribute 'fixed-pitch nil :family "DejaVu Sans Mono")
;;(set-face-attribute 'variable-pitch nil :family "IBM Plex Serif")

;; thesaurus
(use-package synosaurus
  :custom (synosaurus-choose-method 'default)
  :config (synosaurus-mode))

(use-package flycheck-grammarly
  :quelpa (flycheck-grammarly :repo "jcs-elpa/flycheck-grammarly" :fetcher github))

;; testing
(use-package iedit
  :bind ("C-;" . iedit-mode))

(use-package shrink-whitespace
  :bind ("M-\\" . shrink-whitespace))
#+end_src

** large files

#+begin_src emacs-lisp
(use-package vlf
  :after (ivy counsel)
  :init
  (ivy-add-actions 'counsel-find-file '(("l" vlf "view large file"))))
#+end_src

** avy hydra

#+begin_src emacs-lisp
;; navigate text in the buffer
(use-package avy
  :after evil
  :commands (hydra-avy/body avy-goto-char-timer)
  :init (evil-define-key 'motion global-map
          (kbd "<leader>J") 'hydra-avy/body
          (kbd "<leader>j") 'avy-goto-char-timer)
  :pretty-hydra
  (hydra-avy
   (:exit t :hint nil :title "Avy")
   ("Line"
    (("y" avy-copy-line)
     ("m" avy-move-line)
     ("k" avy-kill-whole-line))
    "Region"
    (("Y" avy-copy-region)
     ("M" avy-move-region)
     ("K" avy-kill-region))
    "Goto"
    (("j" avy-goto-char-timer)
     ("w" avy-goto-word-1)
     ("l" avy-goto-line))
    ""
    (("c" avy-goto-char)
     ("W" avy-goto-word-0)
     ("L" avy-goto-end-of-line)
     ("C" avy-goto-char-2)))))
#+end_src

* files & projects
** dired

#+begin_src emacs-lisp
(use-package async)
(with-eval-after-load 'dired
  (with-eval-after-load 'evil-collection
    (require 'async)
    (require 'dired-async)
    (require 'dired-narrow)
    (require 'dired-open)
    ;(require 'treemacs-icons-dired) ; all-the-icons are better
    ;(require 'all-the-icons-dired) ; performance
    ;(require 'dired-du) ; performance
    ;; this one produces "Permission denied" on listing in Win10 with JUNCTION folders
    ;(add-hook 'dired-mode-hook #'dired-du-mode)
    ;(require 'dired-collapse) ; performance
    (require 'dired-filter)
    (require 'dired-subtree)
    (require 'dired-avfs)
    (require 'dired-hacks-utils)
    (add-hook 'dired-mode-hook 'dired-utils-format-information-line-mode)
    (customize-set-variable 'dired-listing-switches "-alh")
    (require 'dired-hide-dotfiles)
    (add-hook 'evil-collection-setup-hook
              #'(lambda (mode map)
                  (when (eq mode 'dired)
                    (evil-collection-define-key 'normal 'dired-mode-map "." 'dired-hide-dotfiles-mode))))

    (add-hook 'dired-mode-hook 'dired-async-mode)
    ; todo: fix dir-locals for turning this off
    ;(add-hook 'dired-mode-hook #'(lambda() (all-the-icons-dired-mode 1)))
    (customize-set-variable 'all-the-icons-dired-monochrome nil)

    (put 'all-the-icons-dired-mode 'safe-local-variable #'listp)

    ;(put 'dired-find-alternate-file 'disabled nil)
    ;(define-key dired-mode-map (kbd "RET") #'dired-find-alternate-file)
    ; instead of above, since ver28 simply:
    (customize-set-variable 'dired-kill-when-opening-new-dired-buffer t)

    (evil-collection-define-key 'motion 'dired-mode-map "/" 'dired-narrow-fuzzy)
    (evil-collection-define-key 'normal 'dired-mode-map (kbd "M-RET") 'dired-open-xdg)
    (evil-collection-define-key 'normal 'dired-mode-map "q" 'kill-this-buffer)
    (evil-define-key 'normal dired-mode-map (kbd "f") dired-filter-map)
    ))
(use-package dired-avfs) ;; archives
(use-package dired-filter) ;; additional filter keymap
(use-package dired-open) ;; xdg-open
(use-package dired-subtree) ;; evil collection takes care of bindings
(use-package dired-narrow) ;; narrow-fuzzy
(use-package dired-hacks-utils)
;;(use-package dired-du)
;(use-package dired-collapse ;; displays dir1/dir2/..
;  :hook (dired-mode . dired-collapse-mode))
;(use-package dired-rainbow) ;; not sure if it's really being used - more colorful faces
;(use-package ranger)
(use-package all-the-icons-dired)
(use-package peep-dired
  :after evil
  :config
  (evil-define-key 'normal peep-dired-mode-map (kbd "<SPC>") 'peep-dired-scroll-page-down
                                             (kbd "C-<SPC>") 'peep-dired-scroll-page-up
                                             (kbd "<backspace>") 'peep-dired-scroll-page-up
                                             (kbd "j") 'peep-dired-next-file
                                             (kbd "k") 'peep-dired-prev-file)
  (add-hook 'peep-dired-hook 'evil-normalize-keymaps)
  ;:hook (dired-mode . peep-dired)
  )
(use-package treemacs-icons-dired
  :pin melpa
  :after treemacs dired
  ;:hook (dired-mode . treemacs-icons-dired-mode)
  )

#+end_src

** grep tools
#+begin_src emacs-lisp
(use-package ag
  :ensure t
  :custom
  (ag-highlight-search t)
  (ag-reuse-buffers t)
  :config
  (add-to-list 'ag-arguments "--word-regexp"))

(use-package ripgrep)
(use-package flx)
(use-package wgrep)
(use-package wgrep-ag)
#+end_src

** projectile

#+begin_src emacs-lisp
(use-package projectile
  :init (setq projectile-use-git-grep t)
  ; todo
  ;:bind-keymap (:map projectile-mode-map ("s-p" . projectile-command-map))
  :config
  (define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
  (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
  :custom
  (projectile-completion-system 'ivy)
  (projectile-project-search-path (list "~/Documents"))
  :commands (hydra-projectile/body)
  :pretty-hydra
  (hydra-projectile
   (:hint nil :color teal :quit-key "q" :title (with-faicon "rocket" "Projectile" 1 -0.05))
   ("Buffers"
    (("b" counsel-projectile-switch-to-buffer "list")
     ("k" projectile-kill-buffers "kill all")
     ("S" projectile-save-project-buffers "save all"))
    "Find"
    (("d" counsel-projectile-find-dir "directory")
     ("F" projectile-recentf "recent files")
     ("D" projectile-dired "dired")
     ("g" counsel-projectile-find-file-dwim "file dwim")
     ("f" counsel-projectile-find-file "file")
     ("p" counsel-projectile-switch-project "project"))
    "Other"
    (("i" projectile-invalidate-cache "reset cache")
     ("x" projectile-remove-known-project "remove known project")
     ("z" projectile-cache-current-file "cache current file")
     ("X" projectile-cleanup-known-projects "cleanup known projects"))
    "Search"
    (("r" projectile-replace "replace")
     ("o" projectile-multi-occur "occur")
     ("R" projectile-replace-regexp "regexp replace")
     ("sg" counsel-projectile-grep "grep")
     ("ss" counsel-projectile-ag "ag")
     ("sr" counsel-projectile-rg "rg")
     ("ss" counsel-rg "search")))))

(use-package counsel-projectile
  :demand :after (projectile counsel)
  :config (counsel-projectile-mode))
#+end_src

** treemacs

#+begin_src emacs-lisp
(use-package treemacs-evil)
(use-package treemacs-projectile)
(use-package treemacs-magit)
(use-package treemacs-all-the-icons)
(use-package treemacs
  :after evil
  :init (evil-define-key 'motion global-map (kbd "<leader>t") 'treemacs) ;;treemacs-add-and-display-current-project ;; this will add projectile project automatically
  :config
  (require 'treemacs-themes)
  ;(require 'treemacs-icons)
  (require 'evil)
  (require 'projectile)
  (require 'magit)
  (require 'all-the-icons)
  (require 'treemacs-all-the-icons)
  (require 'treemacs-evil)
  (require 'treemacs-projectile)
  (require 'treemacs-magit)
  (treemacs-load-theme 'all-the-icons)
  (treemacs-follow-mode -1) ;; kills remote mounts
  :custom
  (treemacs-follow-after-init t)
  :functions (treemacs-follow-mode treemacs-load-theme)
  :commands treemacs-modify-theme
  ;:custom
  ;(treemacs-fringe-indicator-mode t)
  )
#+end_src

** xah-find

Nice pure lisp find-grep replacement - works on windows well

#+begin_src emacs-lisp
(use-package xah-find
  :config
  (evil-define-key '(normal motion) xah-find-output-mode-map (kbd "RET") 'xah-find--jump-to-place))
#+end_src

** other

#+begin_src emacs-lisp
;; todo - filter out archive files from org
(setq recentf-max-saved-items 100)
#+end_src

* bindings & interaction
** ivy

#+begin_src emacs-lisp
(use-package prescient
  :config (prescient-persist-mode)
  :functions (prescient-persist-mode)
  :custom
  (prescient-filter-method '(literal regexp initialism))
  (prescient-sort-full-matches-first t))

(use-package counsel
  :after ivy
  :config (counsel-mode)
  :custom (counsel-mode-override-describe-bindings nil)
  :bind (("M-y" . counsel-yank-pop)))

(global-set-key (kbd "M-x") 'counsel-M-x)
(global-set-key (kbd "C-x C-f") 'counsel-find-file)

(use-package ivy-prescient
  :disabled
  :demand :after ivy prescient
  ;:config (ivy-prescient-mode) ; annoying - I need to find how to configure it
  :custom (ivy-prescient-sort-commands '(:not swiper swiper-isearch ivy-switch-buffer)))

(use-package ivy
  :diminish
  :bind (("C-c C-r" . ivy-resume)
         ("C-x b" . ivy-switch-buffer)
         ("C-x B" . ivy-switch-buffer-other-window)
         ("C-c v" . ivy-push-view)
         ("C-c V" . ivy-pop-view)
         ("<s-up>" . ivy-push-view)
         ("<s-S-up>" . ivy-pop-view)
         ("<s-down>" . ivy-switch-view)
         (:map ivy-minibuffer-map ("C-c C-c" . hydra-ivy/body)))
  :custom
  (ivy-extra-directories ())
  (ivy-count-format "(%d/%d) ")
  (ivy-use-virtual-buffers t)
  :config
  (require 'counsel)
  (require 'ivy-rich)
  (require 'all-the-icons-ivy)
  (require 'all-the-icons)
  (ivy-mode)
  (setq ivy-re-builders-alist
        '(
          (ivy-switch-buffer . ivy--regex-fuzzy)
          (counsel-ag        . ivy--regex-plus)
          (counsel-git-grep  . ivy--regex-plus)
          (swiper            . ivy--regex-plus)
          (swiper-isearch    . ivy--regex-plus)
          (t                 . ivy--regex-fuzzy)))
  ;; all fuzzy init
  ;;(setq ivy-initial-inputs-alist nil)
)

(use-package ivy-hydra
  :after ivy)

(defun ivy-rich-switch-buffer-icon (candidate)
  (with-current-buffer
      (get-buffer candidate)
    (let ((icon (all-the-icons-icon-for-mode major-mode)))
      (if (symbolp icon)
          (all-the-icons-icon-for-mode 'fundamental-mode)
        icon))))

(use-package ivy-rich
  :pin melpa
  :after counsel ivy
  :custom
  (ivy-virtual-abbreviate 'full
                          ivy-rich-switch-buffer-align-virtual-buffer t
                          ivy-rich-path-style 'abbrev)
  (ivy-rich-display-transformers-list
      '(ivy-switch-buffer
        (:columns
         (
          (ivy-rich-switch-buffer-icon (:width 2))
          (ivy-rich-candidate (:width 30))
          (ivy-rich-switch-buffer-size (:width 7))
          (ivy-rich-switch-buffer-indicators (:width 4 :face error :align right))
          (ivy-rich-switch-buffer-major-mode (:width 12 :face warning))
          (ivy-rich-switch-buffer-project (:width 15 :face success))
          (ivy-rich-switch-buffer-path (:width (lambda (x) (ivy-rich-switch-buffer-shorten-path x (ivy-rich-minibuffer-width 0.3)))))
          )
         :predicate
         (lambda (cand) (get-buffer cand)))))
  :config
  (ivy-rich-mode 1)
  (ivy-rich-project-root-cache-mode) ;; speed-up
  )

(use-package all-the-icons-ivy
  :after ivy-rich
  :config
  (setq all-the-icons-ivy-file-commands
      '(counsel-find-file counsel-file-jump counsel-recentf counsel-projectile-find-file counsel-projectile-find-dir))
  (all-the-icons-ivy-setup)
  )

; why :bind doesn't work?
(global-set-key (kbd "C-s") 'swiper)
(use-package swiper
  :after ivy
  :bind* ("C-s" . swiper))

;; testing it - didn't like it
;;(use-package ivy-posframe)
#+end_src

** helpers & info

#+begin_src emacs-lisp
(use-package which-key
  :defer 0.6
  :custom
  ((which-key-add-column-padding 3)
   (which-key-allow-evil-operators t)
   (which-key-max-description-length 50)
   (which-key-idle-delay 0.5))
  :config
  (which-key-mode))

(customize-set-variable 'help-window-select t)
(customize-set-variable 'describe-bindings-outline t)

(use-package helpful
  :after evil
  :init
  (evil-define-key 'motion global-map (kbd "<leader>h") 'hydra-help/body)
  :ensure t
  :commands (hydra-help/body)
  :bind
  ;; in terminal C-h is basically a backspace
  (("C-c C-h" . help-command)
   ("C-h f" . helpful-callable)
   ("C-h v" . helpful-variable)
   ("C-h k" . helpful-key)
   ("C-h j" . helpful-at-point)
   ("C-h F" . helpful-function)
   ("C-h C" . helpful-command)
   ("C-h M-m" . helpful-macro))
  ;todo - use general?
  ;("C-h" . help-hydra/body)
  :pretty-hydra (hydra-help
  (:color teal :quit-key "q" :title (with-faicon "stethoscope" "Help" 1 -0.05))
   ("Functions & Variables"
    (("f" helpful-callable "callable")
     ("v" helpful-variable "variable")
     ("h" helpful-symbol "symbol")
     ("c" helpful-command "command")
     ("j" helpful-at-point "at-point")
     ("F" helpful-function "function")
     ("M" helpful-macro "macro"))
    "Which-key"
    (("wk" which-key-show-full-keymap "full keymap")
     ("wm" which-key-show-full-major-mode "full major")
     ("wn" which-key-show-full-minor-mode-keymap "full minor"))
    "Info"
    (("I" counsel-info-lookup-symbol "counsel info symbol")
     ("i" info-lookup-symbol "info symbol")
     ("r" info-manual "emacs info")
     ("R" info-display-manual "pick info"))
    "Packages & Libraries"
    (("p" describe-package "package")
     ("C-l" counsel-find-library "library")
     ("P" counsel-package "counsel pkg"))
    "Keys & Bindings"
    (("k" helpful-key "key")
     ("C-k" describe-key-briefly "key brief")
     ("m" describe-mode "mode")
     ("b" describe-bindings "bindings")
     ("B" counsel-descbinds "counsel binds")
     ("M-k" describe-keymap "keymap")
     ("E" evil-collection-describe-bindings "evil-collection")
     ("M-K" describe-personal-keybindings "personal bind-keys"))
    "Local variables"
    (("l" apropos-local-value "local value")
     ("L" apropos-local-variable "local variable"))
    "UI"
    (("uf" counsel-describe-face "describe face")
     ("uF" counsel-faces "faces"))))
  )


;(use-package discover-my-major) ;; not very helpful

;; it will initialize on its own (I guess)
(use-package info+
  :quelpa (info+ :fetcher wiki))
#+end_src

** general.el
#+begin_src emacs-lisp :tangle yes
;; experimental
(use-package general
  :disabled
  :ensure t
  :config
  (general-define-key :states '(normal visual motion) :keymaps 'override "C-\"" 'hydra-space/body)) ;; Replace 'hydra-space/body with your leader function.

#+end_src

** evil

#+begin_src emacs-lisp
(use-package evil
  :defer 0.1
  :init
  (setq evil-want-C-i-jump nil)
  (global-unset-key (kbd "C-z"))
  :config
  (evil-mode)
  (add-to-list 'evil-emacs-state-modes 'debugger-mode)
  ;(evil-set-initial-state 'Info-mode 'emacs)
  (evil-set-initial-state 'ovpn-mode 'emacs) ; todo write evil-collection
  (define-key input-decode-map [(control ?i)] [control-i])
  (define-key input-decode-map [(control ?I)] [(shift control-i)])
  (define-key evil-motion-state-map [tab] nil)
  (define-key evil-motion-state-map [control-i] 'evil-jump-forward)
  :custom
  ;; this is required even by evil-collection-ivy
  (evil-want-minibuffer t)
  ;; these 2 are for evil-collection
  (evil-want-integration t) ;; This is optional since it's already set to t by default.
  (evil-want-keybinding nil)
  (evil-undo-system 'undo-redo)
  )

(use-package evil-collection
  :init
  (setq evil-collection-setup-minibuffer t) ;; before 'require' otherwise it doesn't work
  (setq evil-collection-want-unimpaired-p nil) ;; conflicts [,] bindings in org-evil-agenda
  (with-eval-after-load 'evil
      (require 'evil-collection)
      ;; (evil-collection-define-key 'normal 'ediff-mode-map (kbd "<SPC>") 'evil-send-leader)
      (evil-collection-init)
      ;(evil-collection-minibuffer-setup) ;; evil-collection-setup-minibuffer is not for regular minibuffer
      (with-eval-after-load 'ivy
        (evil-collection-ivy-setup)
        (evil-collection-define-key 'normal 'ivy-minibuffer-map (kbd "<SPC> <SPC>") 'ivy-done)
        (evil-collection-define-key 'normal 'ivy-minibuffer-map (kbd "C-f") 'ivy-scroll-up-command) ; this is very missing in evil-collection
        (evil-collection-define-key 'normal 'ivy-minibuffer-map (kbd "C-b") 'ivy-scroll-down-command)
        ))
  )

(with-eval-after-load 'evil
  (evil-set-leader 'motion (kbd "<SPC>"))
  ;; fix space for some modes, see evil-org-agenda as well
  (evil-collection-define-key 'normal 'dired-mode-map (kbd "<SPC>") 'evil-send-leader)
  (evil-collection-define-key 'normal 'Info-mode-map (kbd "<SPC>") 'evil-send-leader)
  (evil-collection-define-key 'normal 'help-mode-map (kbd "<SPC>") 'evil-send-leader)
  (evil-collection-define-key 'normal 'custom-mode-map (kbd "<SPC>") 'evil-send-leader)
  (evil-collection-define-key 'normal 'Custom-mode-map (kbd "<SPC>") 'evil-send-leader)
  ;; general unbind hook for SPC for all evil-collection modes
  (add-hook 'evil-collection-setup-hook
            #'(lambda (mode maps)
                (unless (eq mode 'ediff-mode)
                  (mapcar (lambda (map) (evil-collection-define-key '(normal visual motion) map (kbd "<SPC>") nil)) maps))
                ))

  (evil-define-key 'motion global-map
     (kbd "<leader>m") 'major-mode-hydra
     (kbd "<leader>qq") 'save-buffers-kill-terminal
     (kbd "<leader>qQ") 'save-buffers-kill-emacs))

;(use-package evil-cleverparens
;  :init
;  (add-hook 'paredit-mode-hook 'evil-cleverparens-mode)
;  :config
;  (setq
;   evil-cleverparens-swap-move-by-word-and-symbol t
;   evil-cleverparens-use-additional-movement-keys t))

(use-package evil-surround
  :after evil
  :config
  ;(global-evil-surround-mode 1) ; will toggle on-demand in hydra-toggle
  (add-to-list 'evil-surround-operator-alist '(evil-cp-change . change))
  (add-to-list 'evil-surround-operator-alist '(evil-cp-delete . delete)))

(use-package multiple-cursors
  :init
  (with-eval-after-load 'evil
    (defvar my-mc-map (make-sparse-keymap) "Keymap for \"mutliple-cursors\" shortcuts.")
    (define-key evil-normal-state-map (kbd "g y") my-mc-map)
    (define-key my-mc-map (kbd "s") 'mc/edit-lines)
    (define-key my-mc-map (kbd "n") 'mc/mark-next-like-this)
    (define-key my-mc-map (kbd "p") 'mc/mark-previous-like-this)
    (define-key my-mc-map (kbd "a") 'mc/mark-all-like-this)))

(use-package evil-mc
  :after evil evil-collection
  :config
  (evil-collection-evil-mc-setup)
  ;; conflict with evil-collection
  (defvar my-evil-mc-map (make-sparse-keymap) "Keymap for \"evil-mc\" shortcuts.")
  (define-key evil-normal-state-map (kbd "g s") my-evil-mc-map)
  (define-key my-evil-mc-map "m" 'evil-mc-make-all-cursors)
  (define-key my-evil-mc-map "u" 'evil-mc-undo-all-cursors)
  (define-key my-evil-mc-map "s" 'evil-mc-pause-cursors)
  (define-key my-evil-mc-map "r" 'evil-mc-resume-cursors)
  (define-key my-evil-mc-map "f" 'evil-mc-make-and-goto-first-cursor)
  (define-key my-evil-mc-map "l" 'evil-mc-make-and-goto-last-cursor)
  (define-key my-evil-mc-map "h" 'evil-mc-make-cursor-here)
  (define-key my-evil-mc-map "j" 'evil-mc-make-cursor-move-next-line)
  (define-key my-evil-mc-map "k" 'evil-mc-make-cursor-move-prev-line)
  (define-key my-evil-mc-map "n" 'evil-mc-skip-and-goto-next-match)
  (define-key my-evil-mc-map "p" 'evil-mc-skip-and-goto-prev-match)
  (define-key my-evil-mc-map "N" 'evil-mc-skip-and-goto-next-cursor)
  (define-key my-evil-mc-map "P" 'evil-mc-skip-and-goto-prev-cursor)
  (define-key my-evil-mc-map (kbd "M-n") 'evil-mc-make-and-goto-next-cursor)
  (define-key my-evil-mc-map (kbd "M-p") 'evil-mc-make-and-goto-prev-cursor)
  (define-key my-evil-mc-map (kbd "C-n") 'evil-mc-make-and-goto-next-match)
  (define-key my-evil-mc-map (kbd "C-p") 'evil-mc-make-and-goto-prev-match)
  (define-key my-evil-mc-map (kbd "C-t") 'evil-mc-skip-and-goto-next-match))

;; 'localized' avy
(use-package evil-snipe
  :demand :after evil
  :custom
  (evil-snipe-scope 'visible)
  (evil-snipe-smart-case t)
  :config
  (add-to-list 'evil-snipe-disabled-modes 'ibuffer-mode)
  (evil-snipe-mode 1)
  (evil-snipe-override-mode 1))

;; number of matches when searching
(use-package evil-anzu :after (evil anzu))

;; evil-anzu actually requires this
(use-package anzu :init (global-anzu-mode +1))
#+end_src

* frames & windows & buffers & tabs

#+begin_src emacs-lisp
(use-package ace-window)

(use-package zoom-frm
  :commands (zoom-frm-in zoom-frm-out)
  :quelpa (zoom-frm :fetcher wiki))

(use-package frame-fns
  :quelpa (frame-fns :fetcher wiki))

(use-package frame-cmds
  :quelpa (frame-cmds :fetcher wiki))

(use-package golden-ratio
  :after which-key
  :init (golden-ratio-mode)
  :config
  ;; otherwise which-key looks too high
  (customize-set-variable 'golden-ratio-inhibit-functions '((lambda () which-key--pages-obj)))
  (customize-set-variable 'golden-ratio-exclude-modes '("ediff-mode" ;"sql-interactive-mode"
                                                        "ranger-mode" "reb-mode" "treemacs-mode" "minibuffer-mode"
                                                        )))

(use-package popwin
  :disabled
  :defer 0.1
  ;:config
  ;(popwin-mode) ; sometimes it annoys me
  )

(use-package windmove
  :ensure nil
  :bind*
  (("M-h" . windmove-left)
   ("M-j" . windmove-down)
   ("M-k" . windmove-up)
   ("M-l" . windmove-right)
   ("M-H" . windmove-swap-states-left)
   ("M-J" . windmove-swap-states-down)
   ("M-K" . windmove-swap-states-up)
   ("M-L" . windmove-swap-states-right))
  :config
  ; no way to override this in other way right now - this gets remapped in org mode from outline mode which is changed by evil-collection
  (add-hook 'evil-collection-setup-hook
              #'(lambda (mode map)
                  (when (eq mode 'outline)
                    (evil-collection-define-key 'normal 'outline-mode-map
                      (kbd "M-h") nil
                      (kbd "M-j") nil
                      (kbd "M-k") nil
                      (kbd "M-l") nil
                      )))))

;; todo try to load below only when certain command is called
(use-package tab-bar
  :ensure nil
  ;:defer 0.4
  :init
  (tab-bar-mode)
  :custom
  (tab-bar-show t)
  :commands (tab-bar-select-tab)
  :bind
  ("C-<tab>" . tab-next)
  ("C-S-<tab>" . tab-previous)
  ("C-S-t" . tab-new)
  ([(shift control-i)] . tab-rename)
  ("C-S-w" . tab-close)
  :custom
  ((tab-bar-tab-hints nil) ; t
   (tab-bar-select-tab-modifiers '(meta))
   (tab-bar-format '(tab-bar-format-menu-global tab-bar-format-tabs-groups tab-bar-separator tab-bar-format-align-right tab-bar-format-global))
   (tab-bar-history-limit 30)
   (tab-bar-close-button-show nil)
   (tab-bar-close-button-show nil)))

(use-package tab-line
  :ensure nil
  ;:defer 0.5
  :bind
  ("C-S-n" . next-buffer)
  ("C-S-p" . previous-buffer)
  ("C-S-b" . bury-buffer) ; this is to emulate tab-line-close-tab, in fact it is the same effect
  ("C-S-k" . kill-current-buffer)
  ;;(global-set-key (kbd "<s-left>") 'tab-bar-history-back)
  ;;(global-set-key (kbd "<s-right>") 'tab-bar-history-forward)
  :config
  (global-tab-line-mode)
  (custom-set-faces ;; will change to :custom one day
   '(tab-bar-tab ((t
                   (:box (:line-width (2 . 2) :color "grey75" :style released-button)
                         :foreground "#fdf4c1" :background "#504945" :extend t))))
   '(tab-line-tab-current ((t ( ;; active tab in current window
                               :extend t :background "#504945" :foreground "#fdf4c1" :weight bold
                               :box '(:line-width (1 . 1) :color "grey75" :style released-button)))))
   '(tab-line-tab-inactive ((t ( ;; inactive tab
                                :foreground "#fdf4c1" :background "#282828"))))
   '(tab-line-highlight ((t (  ;; mouseover
                             :background "white" :foreground unspecified))))
   '(tab-line-tab ((t (  ;; active tab in another window
                       :extend t :background "#504945" :foreground "#fdf4c1"))))
   '(tab-line ((t (  ;; background behind tabs
                   :foreground "#fdf4c1" :background "#282828"
                   :distant-foreground "gray20")))))
  :custom
  ((tab-line-new-button-show nil)
   (tab-line-close-button-show nil)))

;; I just want to lazy load this later
(use-package tab-bar-utils
  :ensure nil
  :after evil
  :commands (hydra-tab/body my/init-my-tabs)
  :init
  (evil-define-key 'motion global-map (kbd "<leader><tab>") 'hydra-tab/body)
  (defun my/init-my-tabs ()
    "Initialize usual tabs in case desktop save was broken."
    (interactive)
    (tab-bar-history-mode); it doesn't really work, see winner-mode and fix this one
    (tab-rename "org")
    (tab-group "personal")
    (tab-new)
    (tab-rename "emacs")
    (tab-group "personal")
    (tab-new)
    (tab-rename "system")
    (tab-group "personal")
    (tab-new)
    (tab-rename "dk")
    (tab-group "work"))
  :pretty-hydra
  (hydra-tab
   (:hint nil :color amaranth :quit-key "q" :title (with-material "tab" "Tab" 1 -0.05))
   ("Tabs"
    (("<tab>" tab-bar-select-tab-by-name "Switch tab")
     ("n" tab-bar-new-tab "New tab")
     ("j" tab-next "Next tab")
     ("k" tab-previous "Previous tab")
     ("g" tab-group "Group")
     ("m" tab-move "Move")
     ("r" tab-bar-rename-tab "Rename tab")
     ("R" tab-bar-rename-tab-by-name "Rename tab by name")
     ("d" tab-bar-close-tab "Close tab")
     ("D" tab-bar-close-tab-by-name "Close tab by name")
     ("1" tab-bar-close-other-tabs "Close other tabs"))))
  :functions (my/name-tab-by-project-or-default projectile-project-name)
  :config
  (with-eval-after-load 'projectile
    (setq tab-bar-tab-name-function #'my/name-tab-by-project-or-default)
    (defun my/name-tab-by-project-or-default ()
      "Return project name if in a project, or default tab-bar name if not.
  The default tab-bar name uses the buffer name."
      (let ((project-name (projectile-project-name)))
        (if (string= "-" project-name)
            (tab-bar-tab-name-current)
          (projectile-project-name))))))

;; using it until I fix tab-bar-history
(use-package winner-mode
  :ensure nil
  :defer 0.5
  :config
  (winner-mode 1)
  :bind
  ("<s-left>" . winner-undo)
  ("<s-right>" . winner-redo))

;; windows & buffers
(use-package windows
  :after evil
  :ensure nil
  :commands (hydra-windows/body close-and-kill-next-pane close-and-kill-current-pane)
  :bind ("C-x 4 1" . close-and-kill-next-pane)
  :init
  (evil-define-key 'motion global-map
    (kbd "<leader>s") 'save-buffer
    (kbd "<leader>d") 'delete-window
    (kbd "<leader>k") 'close-and-kill-current-pane
    (kbd "<leader>w") 'hydra-windows/body
    (kbd "<leader>b") 'ivy-switch-buffer
    (kbd "<leader><SPC>") 'other-window
    (kbd "z j") 'evil-next-buffer
    (kbd "z k") 'evil-prev-buffer)
  (defun close-and-kill-next-pane ()
    "If there are multiple windows, then close the other pane and kill the buffer in it also."
    (interactive)
    (other-window 1)
    (kill-buffer (current-buffer))
    (if (not (one-window-p))
        (delete-window)))
  (defun close-and-kill-current-pane ()
    "Kill current buffer and close the pane, works differently to 'kill-buffer-and-window' as it check whether there are other windows at all."
    (interactive)
    (kill-buffer (current-buffer))
    (if (not (one-window-p))
        (delete-window)))
  :pretty-hydra
  (hydra-windows
   (:hint nil :forein-keys warn :quit-key "q" :title (with-faicon "windows" "Windows & Buffers" 1 -0.05))
   ("Window"
    (("d" delete-window "delete window")
     ("o" delete-other-windows "delete others" :exit t)
     ("h" split-window-horizontally "split horizontally")
     ("v" split-window-vertically "split vertically")
     ("a" ace-window "ace" :exit t)
     ("w" other-window "other window" :exit t))
    "Move"
    (("M-h" windmove-left "left")
     ("M-l" windmove-right "right")
     ("M-j" windmove-down "down")
     ("M-k" windmove-up "up"))
    "Buffer"
    (("r" rename-buffer "rename" :exit t)
     ("c" clone-buffer "clone" :exit t)
     ("p" previous-buffer "previous")
     ("n" next-buffer "next")
     ("b" bury-buffer "bury")
     ("k" kill-current-buffer "kill")
     ("K" close-and-kill-current-pane "kill buf+win" :exit t))
    "Frame"
    (("fk" delete-frame "delete frame")
     ("fo" delete-other-frames "delete others")
     ("fn" make-frame-command "make frame"))
    "Size"
    (("B" balance-windows "balance")
     ("L" shrink-window-horizontally "narrow")
     ("H" enlarge-window-horizontally "widen")
     ("J" shrink-window "lower")
     ("K" enlarge-window "heighten"))
    "Alpha"
    (("<" frame-decr-alpha "-")
     (">" frame-incr-alpha "+"))
    "Zoom"
    (("-" zoom-frm-out "out")
     ("+" zoom-frm-in "in")
     ("=" zoom-frm-unzoom "reset")
     ("0" text-scale-adjust "buffer" :exit t)
     ))))
#+end_src

** ibuffer

#+begin_src emacs-lisp
(use-package ibuffer
  :custom
  (ibuffer-saved-filter-groups
   '(("ibuffer-groups"
      ("org" (or (name . "Org Agenda") (directory . "Dropbox/org")))
      ("work" (or (name . "work\\/") (directory . "Documents/work")))
      ("help" (or (mode . helpful-mode) (mode . help-mode) (name . "help")))
      ("non-file" (and (not (mode . dired-mode)) (not visiting-file) (not (name . "config.org"))))
      ("emacs" (or (directory . "/usr/local/share/emacs") (directory . "\\.config/emacs") (name . "config.org")))
      ("system" (or (directory . "\\.config") (directory . "configs")))
      )))
  (ibuffer-saved-filters
   '(("help"
      (or
       (mode . helpful-mode)
       (mode . help-mode)
       (name . "help")))
     ("programming"
      (or
       (derived-mode . prog-mode)
       (mode . ess-mode)
       (mode . compilation-mode)))
     ("text document"
      (and
       (derived-mode . text-mode)
       (not
        (starred-name))))
     ("mail"
      (or
       (mode . message-mode)
       (mode . mail-mode)
       (mode . gnus-group-mode)
       (mode . gnus-summary-mode)
       (mode . gnus-article-mode)))))
  :bind ("C-x C-b" . ibuffer))

#+end_src

** under test
#+begin_src emacs-lisp :tangle yes
;(unless (package-installed-p 'workgroups2) (package-install 'workgroups2))
;(setq wg-prefix-key "C-c z")
;(require 'workgroups2)
; ok, this one is very buggy
;(workgroups-mode)
;; (defun install (pkg)
;;   "Install package if not installed already."
;;   (unless (package-installed-p pkg) (package-install pkg)))

;; (install 'eyebrowse)
;; (with-eval-after-load 'eyebrowse
;;   (eyebrowse-setup-opinionated-keys)
;;   (with-eval-after-load 'evil
;;     (eyebrowse-setup-evil-keys)))
;; ;(eyebrowse-mode t)

(use-package burly :disabled)

; didn't like any of these
;(use-package persp-mode)
;(use-package perspective)
;(use-package treemacs-perspective)

#+end_src
* utils
** utils & utils-hydra
#+begin_src emacs-lisp
(use-package crux
  :bind
  ("M-<backspace>" . crux-kill-line-backwards))

;; testing
(use-package easy-kill
  :bind
  ([remap kill-ring-save] . easy-kill)
  ([remap mark-sexp] . easy-mark) ;; sort of evil-surround but different
  :custom
  (kill-ring-max 300))

;; testing
(use-package key-chord
  :disabled
  :config
  (require 'key-chord)
  (key-chord-mode 1)
  (key-chord-define-global "hj"     'undo)
  (key-chord-define-global ",."     "<>\C-b"))

(use-package utils-hydra
  :ensure nil
  :after evil
  :init
  (evil-define-key 'motion global-map (kbd "<leader>u") 'hydra-utils/body)
  :commands (rename-file-and-buffer hydra-utils/body toggle-window-dedicated find-user-init-file)
  :bind ("C-c r" . rename-file-and-buffer)
  :pretty-hydra
  (hydra-utils
    (:hint nil :color blue :quit-key "q" :exit t :title (with-fileicon "fancy" "Utils"))
    ("Ivy"
     (("v" ivy-push-view "push view")
      ("u" ivy-switch-view "switch view")
      ("V" ivy-pop-view "pop view"))
     "Search"
     (("gg" counsel-git "git")
      ("gr" counsel-git-grep "grep")
      ("gl" counsel-git-log "git log")
      ("O" counsel-org-file "org file")
      ("gf" counsel-rg "rg"))
     "System"
     (("b" counsel-bookmark "bookmark")
      ("C" counsel-compile "compile")
      ("j" counsel-file-jump "file jump")
      ("l" counsel-locate "locate")
      ("a" counsel-linux-app "linux app")
      ("t" counsel-tramp "tramp")
      ("z" counsel-fzf "fzf")
      ("o" crux-open-with "open-with"))
     "Customization"
     (("T" counsel-load-theme "theme")
      ("U" counsel-unicode-char "unicode")
      ("S" counsel-set-variable "set variable"))
     "Files & Buffers"
     (("c" crux-kill-buffer-truename "copy buffer full name")
      ("r" rename-file-and-buffer "rename file and buffer")
      ("d" crux-delete-file-and-buffer "delete file and buffer")
      ("s" crux-create-scratch-buffer "scratch")
      ("e" crux-visit-shell-buffer "find eshell buffer")
      ("E" crux-visit-term-buffer "find term buffer")
      ("i" find-user-init-file "find config.org")
      ("I" byte-recompile-init-file "byte-recompile config")
      ("D" toggle-window-dedicated "toggle dedicated window"))))
  :init
  ;; define binding lookup for init.el
  (defun find-user-init-file ()
    "Edit the `user-init-file', in another window."
    (interactive)
    (find-file-other-window (concat user-emacs-directory "config.org")))

  (defun toggle-window-dedicated ()
    "Control whether or not Emacs is allowed to display another
buffer in current window."
    (interactive)
    (message
     (if (let (window (get-buffer-window (current-buffer)))
           (set-window-dedicated-p window (not (window-dedicated-p window))))
         "%s: Can't touch this!"
       "%s is up for grabs.")
     (current-buffer)))

  (defun rename-file-and-buffer ()
    "Rename the current buffer and file it is visiting."
    (interactive)
    (let ((filename (buffer-file-name)))
      (if (not (and filename (file-exists-p filename)))
          (message "Buffer is not visiting a file!")
        (let ((new-name (read-file-name "New name: " filename)))
          (cond
           ((vc-backend filename) (vc-rename-file filename new-name))
           (t
            (rename-file filename new-name t)
            (set-visited-file-name new-name t t))))))))

;; todo - add dedicated window to modeline
;(setq global-mode-string
;      (cond ((consp global-mode-string)
;             (add-to-list 'global-mode-string (t (:eval my-func))))
;            ((not global-mode-string)
;             (list my-string))
;            ((stringp global-mode-string)
;             (list global-mode-string my-string))))
#+end_src

#+RESULTS:
: hydra-util/body

** toggle-hydra

#+begin_src emacs-lisp
(use-package toggle-hydra
  :ensure nil
  :after evil
  :commands (hydra-toggle/body)
  :init (evil-define-key 'motion global-map (kbd "<leader>x") 'hydra-toggle/body)
  :pretty-hydra
  (hydra-toggle
   (:hint nil :color amaranth :quit-key "q" :title (with-faicon "toggle-on" "Toggle" 1 -0.05))
   ("Basic"
    (("n" linum-mode "line number" :toggle t)
     ("w" global-whitespace-mode "whitespace (g)" :toggle t)
     ("r" rainbow-mode "rainbow" :toggle t)
     ("b" page-break-lines-mode "page break lines" :toggle t)
     ("L" global-hl-line-mode "highlight line (g)" :toggle t)
     ("D" auto-dim-other-buffers-mode "dim other buffers" :toggle t)
     )
                                        ;("v" symbol-overlay-mode "symbol" :toggle t)
                                        ;("x" highlight-sexp-mode "sexp" :toggle t)
    "Editing"
    (("a" abbrev-mode "abbrev" :toggle t)
     ("n" auto-insert-mode "auto-insert" :toggle t)
     ("m" evil-mc-mode "evil-mc" :toggle t)
     ("t" toggle-truncate-lines "truncate lines" :toggle truncate-lines)
     ("u" global-evil-surround-mode "evil surround (g)" :toggle t))
    "Coding"
    (("e" electric-operator-mode "electric operator" :toggle t)
     ("f" flycheck-mode "flycheck" :toggle t)
     ("l" lsp-mode "lsp" :toggle t)
     ("H" hl-todo-mode "hl-todo" :toggle t)
     ("o" origami-mode "origami" :toggle t)
     ("P" smartparens-strict-mode "smartparens strict" :toggle t)
     ("S" show-smartparens-mode "show smartparens" :toggle t)
     ("s" smartparens-mode "smartparens" :toggle t))
    "Debug"
    (("de" toggle-debug-on-error "debug on error" :toggle debug-on-error)
     ("dq" toggle-debug-on-quit "debug on C-g" :toggle debug-on-quit))
    "UI"
    (("i" ivy-rich-mode "ivy-rich" :toggle t)
     ;; todo - toggle light/dark theme
     ;; ("d" jp-themes-toggle-light-dark "dark theme" :toggle toggle-theme)
     ))))
#+end_src

* org
** org
#+begin_src emacs-lisp
(use-package org
  :ensure org-plus-contrib ;; this is how it works - name of the actual package to load
  :defines (org-state) ;; to silence byte-compiling on after-state-change hooks (see at the bottom of :config)
  :after evil
  :init
  (evil-define-key 'motion global-map
    (kbd "<leader>a") 'org-agenda
    (kbd "<leader>i") 'org-capture)
  :commands (org-agenda org-capture)
  :custom
  ((org-archive-location "~/Dropbox/org/archive/%s_archive::")
    (org-directory "~/Dropbox/org/")
    (org-tags-exclude-from-inheritance (quote ("project" "area")))
    (org-tags-column -100)
    (org-modules '(ol-bbdb ol-bibtex ol-docview ol-eww ol-info ol-irc ol-mhe ol-rmail ol-w3m))
    ;(org-format-latex-options (plist-put org-format-latex-options :scale 1.5))
    ; refile
    (org-refile-targets `((nil :maxlevel . 9)
                          ((,(concat org-directory "english.org"),(concat org-directory "org.org"),(concat org-directory "knowledge.org")) :maxlevel . 9)
                          (org-agenda-files :maxlevel . 5))) ;; todo remove gcal files
    (org-outline-path-complete-in-steps nil)          ; Refile in a single go
    (org-refile-use-outline-path 'file)               ; Show full paths for refiling - trick to refile in 0 level
    (org-refile-allow-creating-parent-nodes 'confirm) ; create new parent on the fly
    ; id
    (org-id-link-to-org-use-id 'create-if-interactive-and-no-custom-id) ;; will create id on C-c C-l
    ;; experiments
    (bidi-paragraph-direction t)
    (org-hide-emphasis-markers t)
    (org-fontify-done-headline t)
    (org-fontify-whole-heading-line t)
    (org-fontify-quote-and-verse-blocks t)
    (org-cycle-emulate-tab t) ;; default setting - TAB in org fallbacks to indent
    (org-startup-folded 'fold)
    (org-return-follows-link t) ;; ret follows link (in evil, go to <insert> and then return)
    (org-default-priority ?C)
    (org-lowest-priority ?D)
    (org-expiry-inactive-timestamps t)
    (org-log-done t)
    (org-use-property-inheritance nil) ;'("GOAL" "VISION")) ;; we can control inheritance directly in function org-entry-get
    (org-log-into-drawer "LOGBOOK") ;; log into LOGBOOK
    (org-adapt-indentation t)
    ;; effort & column view
    ;;(org-columns-default-format "%25ITEM %TODO %3PRIORITY %TAGS")
    (org-columns-default-format-for-agenda "%60ITEM(Task) %6Effort(Estim){:}")
    (org-global-properties '(("Effort_ALL" . "0 0:05 0:10 0:15 0:25 0:30 0:45 1:00 2:00 3:00 4:00 5:00 6:00 7:00 10:00 15:00 24:00"))))
  :config
  (define-key org-mode-map [(control tab)] nil) ;; unset - C-tab used for tab cycling
  ;(org-indent-mode t) ;; todo - electric-indent-mode
  ;this one seems to work only with deadlines
  (require 'org-notify)
  (org-notify-start)
  :hook
   ;; adds CREATED property - works after each capture
  ((org-capture-before-finalize . (lambda() (save-excursion (org-back-to-heading) (org-expiry-insert-created))))
   ;; adds CREATED property - works after changing state
   (org-after-todo-state-change . (lambda ()
                                    (when (string= org-state "TODO")
                                      (save-excursion (org-back-to-heading) (org-expiry-insert-created))))))
)

#+end_src

#+RESULTS:
: ob-async
** org-hydra
#+begin_src emacs-lisp :tangle yes
(use-package org-hydra
  :ensure nil
  :after evil
  :commands (hydra-org/body)
  :init (evil-define-key 'motion global-map (kbd "<leader>o") 'hydra-org/body)
  :pretty-hydra
  (hydra-org
   (:hint nil :color teal :quit-key "q" :title (with-fileicon "org" "Org" 1 -0.05))
   ("Action"
    (("a" org-agenda "agenda")
     ("j" hydra-org-clock/body "clock")
     ("C" cfw:open-org-calendar "calfw-org")
     ("s" my/org-ql-goals "goals")
     ("c" org-capture "capture")
     ("g" org-gcal-fetch "gcal fetch")
     ("G" org-gcal-sync "gcal sync")
     ("L" org-store-link "store-link")
     ("l" org-insert-link-global "insert-link")
     ("i" org-id-copy "copy id")
     ("A" org-archive-done-in-file "archive done in file")
     ("d" org-decrypt-entry "decrypt")
     ("I" org-info-find-node "org info find")
     ("k" org-cut-subtree "cut-subtree")
     ("o" org-open-at-point-global "open-link")
     ("r" org-refile "refile")
     ("t" org-show-todo-tree "todo-tree"))))
  :init
  (defun my/org-ql-goals ()
    (interactive)
    (org-ql-search (org-agenda-files) '(and (todo) (not (todo "GOAL")) (not (todo "VISION")))
      :super-groups '((:auto-map
                       (lambda (item)
                         (-when-let* ((goal-link (org-entry-get (org-super-agenda--get-marker item) "GOAL")))
                           (message goal-link)
                           (org-link-open-from-string goal-link)
                           (org-get-heading 'notags 'notodo)))))))
  ;;;; archive all DONEs in file ;;;;
  ;; in-progress, but not needed actually - do the same - C-c a T DONE * B $
  (defun org-archive-done-in-file ()
    (interactive)
    (org-map-entries 'org-archive-subtree "/DONE" 'file)))
#+end_src
** org-babel
:PROPERTIES:
:CREATED:  [2021-10-09 Sat 08:55]
:END:
#+begin_src emacs-lisp :tangle yes
;; babel header info - https://org-babel.readthedocs.io/en/latest/header-args/#results
(use-package org-babel
  :ensure nil
  :after org
  :commands (my/tangle-async)
  :config
  (require 'async)
  (defun my/tangle-async ()
    "Tangle asynchronously current file."
    (let ((file (buffer-file-name)))
      (async-start
       `(lambda ()
          (require 'org)
          (org-babel-tangle-file ,file))
       `(lambda (result)
          (message (format "tangle-async finished for: %s" result))
          ;; make it a flag? change car-result -> mapcar
          (when (string-match-p ".el$" (car result))
            (byte-recompile-init-file)
            (message "byte-recompile finished"))))))
  :custom
  ((org-confirm-babel-evaluate 'my-org-confirm-babel-evaluate)
   (org-confirm-babel-evaluate (lambda (lang body) (not (member lang '("emacs-lisp" "sql" "sh" "sqlite" "sql-mode")))))
   (org-babel-load-languages
    '((emacs-lisp . t) ;(gnuplot . t) ;(plantuml . t) ;(python . t)
      (shell . t) ;(ledger . t) ;(sqlite . t)
      (sql . t)))
   (org-src-preserve-indentation t) ;; without this it gets crazy when editing src inline
   (org-src-fontify-natively t)
   (org-src-window-setup 'plain) ;'split-window-right ;reorganize-frame;'current-window
   (org-src-tab-acts-natively t))
  :hook
  ;; automatically open src edit when in the src block
  (org-mode . (lambda()
                  (make-local-variable 'evil-insert-state-entry-hook)
                  (add-hook 'evil-insert-state-entry-hook #'org-edit-src-code))))

(use-package ob-async :after org)
#+end_src
** capture templates

#+begin_src emacs-lisp

(setq org-capture-templates
      '(
        ("i" "Todo [inbox]" entry (file "~/Dropbox/org/inbox.org" ) "* TODO %i%?")
        ("g" "Goal" entry (file "~/Dropbox/org/goals.org") "* GOAL *%^{Goal title}* \t:%^G:goal:\n\
  :PROPERTIES:\n\
  :CREATED: %U\n\
  :END:\n\
  %^{Goal description}")
        ("p" "Project" entry (file "~/Dropbox/org/inbox.org") "* PROJECT *%^{Project title}* [%] :%^G:project:\n\
  :PROPERTIES:\n\
  :CREATED: %U\n\
  :END:\n\
  %^{Project description}")
        ("h" "Habit" entry (file+headline "~/Dropbox/org/personal.org" "*habits*") "* %?\n\
  SCHEDULED: <%<%Y-%m-%d %a .+1d>>\n\
  :PROPERTIES:\n\
  :CREATED: %U\n\
  :STYLE: habit\n\
  :REPEAT_TO_STATE: \n\
  :LOGGING: DONE(!)\n\
  :ARCHIVE: archive/%s_archive::* Habits\n\
  :END:\n")
        ("a" "Appointment" entry (file  "~/Dropbox/org/gcal/personal.org") "* %?\n\n%^T")
        ("j" "Journal" entry (file+olp+datetree "~/Dropbox/org/journal.org")
          "* %<%H:%M> %?\n %i\n\n позитивний досвід: \n позитивне впринципі: \n висновки: \n дії: \n\n From: %a" :empty-lines 1)
        ("e" "Word [english]" entry (file "~/Dropbox/org/english.org") "* %i%?")
        ("o" "Org idea" entry (file+olp "~/Dropbox/org/org.org" "ideas" "org ideas") "*** TODO %i%?")
        ("b" "Buylist" entry (file+olp "~/Dropbox/org/personal.org" "*buylist*") "** TODO %i%?")
        ("m" "Meal" entry (file+olp "~/Dropbox/org/food.org" "_MEAL_")
          "** %t meal\n\t- breakfast: %^{Breakfast}\n\t- lunch: %^{Lunch}\n\t- snack: %^{Snack}\n\t- dinner: %^{Dinner}")
        ("t" "Personal task" entry (file+olp "~/Dropbox/org/personal.org" "_TASKS_") "** TODO %i%?\n   SCHEDULED: <%<%Y-%m-%d %a>>")
        ("I" "Idea")
        ("Ib" "talk/blog" entry (file+olp "~/Dropbox/org/ideas.org" "*talk/blog*") "** TODO %i%?")
        ("E" "Emacs todo" entry (file+headline "~/Dropbox/org/emacs.org" "ideas / todo") "* TODO %i%?")))

;; description of capture
;;(setq org-capture-templates '((
;;     "t"                ; key
;;     "Todo"             ; description
;;     entry              ; type
;;     (file+headline "C:/.../org/notes.org" "tasks")       ; target
;;     "* TODO [#B] %^{Todo} %(org-set-tags) \n:PROPERTIES:\n:Created: %U\n:END:\n\n%?"  ; template
;;     :prepend t        ; properties
;;     :empty-lines 1    ; properties
;;     :created t        ; properties
;;     )))
#+end_src

** todo keywords & tags

#+begin_src emacs-lisp
(setq org-todo-keywords
      '(
        (sequence "TODO(t)" "IN-PROGRESS(i)" "WAITING(w@/!)" "DELEGATED(e@/!)" "ON-HOLD(h@/!)" "|")
        (sequence "MAYBE(m)" "SOMEDAY(s)" "PROJECT(p)" "|")
        (sequence "VISION(v)" "GOAL(g)" "FOCUS(f)" "MODE(o)" "|")
        (sequence "|" "DONE(d!)" "CLOSED(c@/!)" "CANCELLED(C@/!)" "SKIPPED(S@/!)")
        )
)

;; Setting Colours (faces) for todo states to give clearer view of work
;; lookup by M-x list-colors-display
(setq org-todo-keyword-faces
      '(
        ("PROJECT" . "maroon2")
        ("GOAL" . "SeaGreen4")
        ("VISION" . "DeepSkyBlue")
        ("FOCUS" . "orange")
        ("MODE" . "peru")
        ("TODO" . "orange red")
        ("SOMEDAY" . "IndianRed2")
        ("MAYBE" . "IndianRed2")
        ("IN-PROGRESS" . "dark goldenrod")
        ("WAITING" . "blue violet")
        ("DELEGATED" . "dark olive green")
        ("ON-HOLD" . "orange")
        ("DONE" . "forest green")
        ("CLOSED" . "cyan4")
        ("CANCELLED" . "cyan4")
        ("SKIPPED" . "cyan4")
        )
)
 ;; TODO=#fe450e")

(setq org-tag-alist '(
        ("@office" . ?O)
        ("@home" . ?H)
        ("@rivne" . ?r)
        ("@phone" . ?o)
        ("@computer" . ?c)
        ("@internet" . ?i)
        ("@shop" . ?S)
        ("@grocery" . ?g)
        ("@pharmacy" . ?R)
        ("work" . ?w)
        ("blocking" . ?B)
        ("goal" . ?G)
        ("family" . ?f)
        ("personal" . ?p)
        ("project" . ?P)
        ("area" . ?A)
        ("health" . ?h)
        ("buy" . ?b)
        ("car" . ?a)
        ("sell" . ?s)
        ("income" . ?I)
        ("expense" . ?E)
        ("ptashka" . ?k)
        ("deep" . ?d)
        )
)
#+end_src

** evil-org
#+begin_src emacs-lisp :tangle yes
(use-package evil-org
  :after (evil org)
  :hook (org-mode . evil-org-mode)
  :custom (evil-org-key-theme '(navigation insert textobjects calendar)) ; no  'additional' - conflict with windmove
  ;; :config
  ;; (evil-define-key 'motion evil-org-mode-map
  ;;   (kbd "M-j") nil (kbd "M-k") nil (kbd "M-l") nil (kbd "M-h") nil
  ;;   (kbd "M-J") nil (kbd "M-K") nil (kbd "M-L") nil (kbd "M-H") nil
  ;;   ) ;; free up for windmove
  ;; (evil-collection-define-key 'normal 'outline-mode-map
  ;;   (kbd "M-j") nil (kbd "M-k") nil (kbd "M-l") nil (kbd "M-h") nil
  ;;   (kbd "M-J") nil (kbd "M-K") nil (kbd "M-L") nil (kbd "M-H") nil)
)

(use-package evil-org-agenda
  :ensure nil ; goes from evil-org
  :demand :after (evil-org)
  :config
  (require 'evil-org-agenda)
  (evil-org-agenda-set-keys)
  (evil-define-key 'motion org-agenda-mode-map
    (kbd "M-k") nil (kbd "M-j") nil  ;; free up for windmove
    (kbd "<SPC>") 'evil-send-leader ;; fix space
    "ZK" 'org-habit-toggle-display-in-agenda
    "ZD" 'org-agenda-toggle-deadlines
    "T" 'org-agenda-todo-yesterday))
#+end_src

#+RESULTS:
: t

** org-agenda

#+begin_src emacs-lisp
(use-package org-agenda
  :ensure nil
  :after org
  :custom
  (org-id-search-archives nil)
  (org-agenda-files
   '("~/Dropbox/org/dk.gpg" "~/Dropbox/org/gcal/trading.org" "~/Dropbox/org/content.org" "~/Dropbox/org/goals.org"
     "~/Dropbox/org/consume.org" "~/Dropbox/org/talks.org" "~/Dropbox/org/gcal/family.org"
     "~/Dropbox/org/gcal/sport.org" "~/Dropbox/org/gcal/personal.org" "~/Dropbox/org/ideas.org"
     "~/Dropbox/org/music.org" "~/Dropbox/org/work.org" "~/Dropbox/org/ptashka.org" "~/Dropbox/org/employment.org" "~/Dropbox/org/sport.org"
     "~/Dropbox/org/health.org" "~/Dropbox/org/food.org" "~/Dropbox/org/personal.org" "~/Dropbox/org/orgzly.org" "~/Dropbox/org/inbox.org" "~/Dropbox/org/emacs.org" "~/Dropbox/org/car.org"))
  (org-agenda-tags-column -140)
  (org-extend-today-until 2)
  (org-habit-graph-column 85)
  (org-habit-show-all-today nil)
  (org-agenda-prefix-format '((agenda . " %i %-16:c%?-12t% s") ;(agenda . " %i %-23b %-16:c%?-12t% s")
                              (todo . " %i %-16:c")
                              (tags . " %i %-16:c")
                              (search . " %i %-16:c")))
  (org-stuck-projects '("+project" ("TODO" "IN-PROGRESS") nil "")) ;default ;'("+LEVEL=2/-DONE" ("TODO" "NEXT" "NEXTACTION") nil ""))
  (org-deadline-warning-days 7)
  (org-agenda-breadcrumbs-separator " ❱ ")
  ;;(setq org-ellipsis "…")
  (org-agenda-start-with-log-mode t)
  (org-agenda-skip-scheduled-delay-if-deadline t)
  (org-agenda-skip-scheduled-if-deadline-is-shown t)
  (org-agenda-skip-deadline-prewarning-if-scheduled t)
  (org-agenda-block-separator (string-to-char " "))
  :config
  (require 'org-habit)
  (org-id-update-id-locations nil t)
  :hook (org-agenda-mode-hook .
            (lambda () ;; this is to make agenda buffer part of org directory project
              (setq default-directory org-directory))))

(defun agenda-in-progress (&optional priority)
  `(tags-todo ,(if priority
                   (concat "+TODO=\"IN-PROGRESS\"+PRIORITY=\"" priority "\"")
                 (concat "+TODO=\"IN-PROGRESS\""))
              ((org-agenda-overriding-header "⚡ Doing:")
               (org-agenda-todo-keyword-format " 🔨")
               (org-agenda-remove-tags t)
               (org-agenda-prefix-format " %-3i %12c %-30(concat \"❱ \" (my/org-get-parent-goal)) ")
               (org-agenda-todo-keyword-format "%11s"))))

(defun agenda-next (&optional priority)
  `(tags-todo ,(if priority
                   (concat "-project+TODO=\"TODO\"+PRIORITY=\"" priority "\"")
                 (concat "-project+TODO=\"TODO\"+PRIORITY=\"A\"|-project+TODO=\"TODO\"+PRIORITY=\"B\""))
              ((org-agenda-overriding-header "⚡ Next:")
               (org-agenda-todo-keyword-format " ↷")
               (org-agenda-max-entries 20)
               (org-agenda-prefix-format " %-3i %12c %-30(concat \"❱ \" (my/org-get-parent-goal)) ")
               (org-agenda-remove-tags t)
               (org-agenda-todo-keyword-format "%11s"))))

(defun agenda-schedule (&optional priority)
  (let* ((skip-func (if priority `(and
                                   (not (or
                                         (not (equal "habit" (org-entry-get nil "STYLE"))) ; skip not-<priority> habits, leave scheduled/deadlines
                                         (equal ,priority (org-entry-get nil "PRIORITY"))))
                                   (point-at-eol)) nil)))
    `(agenda "" ((org-agenda-span 5)
                 (org-agenda-skip-function ',skip-func)
                 (org-agenda-todo-keyword-format " 🔨")
                 ;; (org-agenda-skip-scheduled-if-done t)
                 ;; (org-agenda-skip-timestamp-if-done t)
                 ;; (org-agenda-skip-deadline-if-done t)
                 (org-agenda-remove-tags t)
                 ;; (org-agenda-start-day "+0d")
                 ;; (org-agenda-repeating-timestamp-show-all nil)
                 (org-agenda-current-time-string "⮜┈┈┈┈┈┈┈ now")
                 (org-agenda-scheduled-leaders '("⏰" "⏰.%2dx: "))
                 (org-agenda-deadline-leaders '("☠" "In %3d d.: " "%2d d. ago: "))
                 (org-agenda-time-grid (quote ((today require-timed remove-match) (0900 2100) "      " "┈┈┈┈┈┈┈┈┈┈┈┈┈")))
                 (org-agenda-overriding-header "⚡ Schedule:")
                 (org-agenda-prefix-format " %-3i %12c %-30(concat \"❱ \" (my/org-get-parent-goal)) %?-12t% s")
                 ))))

;; custom agendas ;;
(with-eval-after-load 'org-agenda
  (setq org-agenda-custom-commands
        `(("c" . "Custom Agendas")
          ("cB" "Blocking others" ((tags "+blocking/!")) nil nil)
          ("ct" "Today" ((agenda "" ((org-agenda-span 1))) nil) nil)
          ("cT" "All Todo" ((tags-todo "-project-book/!-GOAL-VISION-MODE-FOCUS-SOMEDAY-MAYBE-DRAFT-IDEA-TOREAD-READING")) nil nil)
          ("cA" "Appointments" agenda* nil nil)
          ("cW" "Waiting for" ((todo "WAITING")) nil nil)
          ("cd" "Delegated" ((todo "DELEGATED")) nil nil)
          ("cD" "Done" ((todo "DONE|CANCELLED|CLOSED|SKIPPED")) nil nil)
          ("cu" "Unscheduled" ((tags-todo "-project-book/!-GOAL-MODE-FOCUS-VISION-SOMEDAY-MAYBE-DRAFT-IDEA-TOREAD-READING"
                                          ((org-agenda-overriding-header "\nUnscheduled TODO")
                                           (org-agenda-skip-function '(org-agenda-skip-entry-if 'timestamp)))))
           nil
           nil)
          ("cI" "All A-B Todo" ((tags-todo "-project+PRIORITY=\"A\"|-project+PRIORITY=\"B\"/!-GOAL-VISION-MODE-FOCUS-SOMEDAY-MAYBE-DRAFT-IDEA-TOREAD-READING"))
           ((org-agenda-overriding-header "All A-B Todo")) nil)
          ("ci" "All In Progress" ((todo "IN-PROGRESS")) ((org-agenda-max-entries 25)) nil)
          ("cp" "Projects" ((tags-todo "+project")) nil nil)
          ("cg" "Goals" ((todo "GOAL")) nil nil)
          ("cv" "Vision" ((todo "VISION")) nil nil)
          ("cS" "Someday/Maybe" ((todo "SOMEDAY|MAYBE")) nil nil)
          ("cs" "Stuck Projects" ((stuck "")) nil nil)
          ("ca" "Areas" ((tags "+area")) nil nil)
          ("cb" "Buylist" ((tags "+buy")) nil nil)
          ("co" "Books" ((tags-todo "+book")) nil nil)
                                        ;("cD" "Deep" ((tags-todo "+deep")) nil nil)
                                        ;("ck" "Deep work" ((tags-todo "+deep+work")) nil nil)
                                        ;("c," "Process" ((tags-todo "-deep-project")) nil nil)
          ("ch" "Habits" ((tags "STYLE=\"habit\""))
           ((org-agenda-overriding-header "Habits")
            (org-agenda-sorting-stragety '(todo-state-down effort-up category-keep))) nil)
          ("cz" "All TODOs groups by category" alltodo "" ((org-super-agenda-groups '((:auto-category t)))))
          ("a" "Action" (
                         ,(agenda-in-progress ())
                         ,(agenda-next ())
                         ,(agenda-schedule ())))
          ("A" "Action #A" (
                            ,(agenda-in-progress "A")
                            ,(agenda-next "A")
                            ,(agenda-schedule "A")))
          ("r" "Review" (
                         (tags "+blocking/!" ((org-agenda-overriding-header "Blocking others")))
                         (todo "DELEGATED" ((org-agenda-overriding-header "Delegated")))
                         (todo "WAITING" ((org-agenda-overriding-header "Waiting for")))
                         (tags-todo "+goal+current/!+GOAL+MODE+DONE" ((org-agenda-overriding-header "⚡ Current goals:")))
                         (todo "IN-PROGRESS" ((org-agenda-overriding-header "In progress")))
                         (tags-todo "-project+PRIORITY=\"A\"-TODO=\"IN-PROGRESS\"|-project+PRIORITY=\"B\"-TODO=\"IN-PROGRESS\"/!-GOAL-DRAFT-TOREAD-IDEA"
                                    ((org-agenda-overriding-header "Most important to do")))
                         (tags-todo "+project+PRIORITY=\"A\"|+project+PRIORITY=\"B\"" ((org-agenda-overriding-header "A-B Projects") (org-agenda-max-entries 15)))
                         (tags-todo "+project+PRIORITY=\"C\"|+project+PRIORITY=\"D\"" ((org-agenda-overriding-header "Other Projects")))
                         (todo "SOMEDAY|MAYBE" ((org-agenda-overriding-header "Someday/Maybe")))
                         (tags-todo "-project-book-PRIORITY=\"A\"-PRIORITY=\"B\"-TODO=\"IN-PROGRESS\"/!-WAITING-GOAL-VISION-MODE-FOCUS-SOMEDAY-MAYBE-DRAFT-IDEA-TOREAD-READING"
                                    ((org-agenda-overriding-header "Other to do")))
                         (tags "STYLE=\"habit\"" ((org-agenda-overriding-header "Habits") (org-agenda-sorting-stragety '(todo-state-down effort-up category-keep))) nil)
                         (tags "+tech+priorities+current" ((org-agenda-overriding-header "⚡ Current tech priorities:")) ((concat org-directory "consume.org")))
                         (todo "READING" ((org-agenda-overriding-header "⚡ Books:")) ((concat org-directory "consume.org")))
                         ;; todo: ideas
                         ;; todo: in-progress courses
                         ;; todo - to-archive list (DONE tasks not under project, with _TASKS_ parrent or specific location)
                         ;;(stuck "") ; review stuck projects as designated by org-stuck-projects
                         ;;(org-ql-block '(tags "project") ((org-agenda-overriding-header "Projects"))) ; example of mixing in org-ql
                         ))
          ))
  )

;; agenda icons

;; (setq org-agenda-category-icon-alist `(
;;  ;("personal" ,(list (all-the-icons-material "check_box" :height 1.2)) nil nil :ascent center)
;;  ("personal" ,(list (all-the-icons-faicon "home")) nil nil :ascent center)
;;  ("work" ,(list (all-the-icons-material "work")) nil nil :ascent center)
;;  ("content" ,(list (all-the-icons-fileicon "video")) nil nil :ascent center)
;;  ("blog" ,(list (all-the-icons-octicon "book")) nil nil :ascent center)
;;  ("employment" ,(list (all-the-icons-material "people")) nil nil :ascent center)
;;  ("finance" ,(list (all-the-icons-faicon "money")) nil nil :ascent center)
;;  ; todo
;;  ("rivne" ,(list (all-the-icons-faicon "sun-o")) nil nil :ascent center)
;;  ("bigtrip" ,(list (all-the-icons-faicon "sun-o")) nil nil :ascent center)
;;  ("emacs" ,(list (all-the-icons-faicon "sun-o")) nil nil :ascent center)
;;  ("software" ,(list (all-the-icons-faicon "sun-o")) nil nil :ascent center)
;;  ("holiday" ,(list (all-the-icons-faicon "sun-o")) nil nil :ascent center)
;;  ("health" ,(list (all-the-icons-faicon "sun-o")) nil nil :ascent center)
;;  ("consume" ,(list (all-the-icons-faicon "sun-o")) nil nil :ascent center)
;;  ("org" ,(list (all-the-icons-faicon "sun-o")) nil nil :ascent center)
;;  ))
;; (setq org-agenda-category-icon-alist nil)

#+end_src

** clock & notify

#+begin_src emacs-lisp
(use-package org-clock
  :ensure nil
  :after org
  :config
  (org-clock-persistence-insinuate)
  ; alert if not clocking
  (run-with-timer 0
                  (* 5 60)
                  #'(lambda ()
                      (when (not (org-clocking-p))
                        (progn (alert "din din" :severity 'low :title "clock in" :category "clock")))))
  :custom
  ((org-clock-persist 'history)
   (org-clock-idle-time 90)
   (org-clock-mode-line-total 'today)
   (visible-bell t)
   (org-clock-sound "/usr/share/sounds/custom/bell_small.wav")
   (org-clock-continuously t)
   (org-agenda-clockreport-parameter-plist '(:link t :maxlevel 4 :hidefiles t :fileskip0 t)))
  )

(use-package org-mru-clock
  :custom
  ((org-mru-clock-how-many 20)
   (org-mru-clock-completing-read #'ivy-completing-read)))

(use-package alert
  :config
  (if (eq system-type 'windows-nt)
      (progn
        ;; assumes it's in site-lisp
        (require 'alert-toast)
        (setq alert-default-style 'toast))
      (setq alert-default-style 'libnotify))
  :custom (alert-fade-time 36000) ;; todo - cannot remove fade-away for org-alert
  )

;; bad performance
;; (use-package org-alert
;;   :functions (org-alert-enable)
;;   :custom (org-alert-interval (* 12 (* 60 60))) ; every 12 hours
;;   :config (org-alert-enable))

;; doesn't work
;; (use-package org-wild-notifier
;;  :config
;; (with-eval-after-load 'org
;;    (require 'async)
;;    (org-wild-notifier--start)
;;    (org-wild-notifier--stop)
;;    (org-wild-notifier-mode 1)))

(use-package org-notifications
  :after org
  :config
  (org-notifications-start))

(use-package org-pomodoro
  :commands (org-pomodoro)
  :after alert
  :custom
  (org-pomodoro-length 50)
  (org-pomodoro-short-break-length 10)
  (org-pomodoro-format "%s")
  (org-pomodoro-short-break-format "%s")
  (org-pomodoro-long-break-format "~~%s~~")
  (org-pomodoro-audio-player "mplayer")
  ; sound-wav cannot play oga - pure noise
  (org-pomodoro-long-break-sound "/usr/share/sounds/custom/bell_small.wav") ;"/usr/share/sounds/freedesktop/stereo/window-attention.oga")
  (org-pomodoro-long-break-sound-args "-af volume=5")
  (org-pomodoro-short-break-sound "/usr/share/sounds/custom/bell_small.wav") ;"/usr/share/sounds/freedesktop/stereo/window-attention.oga")
  (org-pomodoro-short-break-sound-args "-af volume=5")
  (org-pomodoro-finished-sound "/usr/share/sounds/custom/bell_small.wav") ;/usr/share/sounds/freedesktop/stereo/complete.oga")
  (org-pomodoro-finished-sound-args "-af volume=5")
  (org-pomodoro-start-sound "/usr/share/sounds/custom/bell_small.wav") ;"/usr/share/sounds/freedesktop/stereo/complete.oga")
  (org-pomodoro-start-sound-args "-af volume=5")
  :hook
  (org-pomodoro-break-finished . (lambda () (interactive) (org-pomodoro '(16))))
  (org-pomodoro-finished . (lambda () (interactive) (shell-command "~/bin/lock.sh"))))
#+end_src

** org-clock-hydra

#+begin_src emacs-lisp
(use-package org-clock-hydra
  :ensure nil
  :after evil
  :functions (org-pomodoro-reset)
  :commands (hydra-org-clock/body)
  :init (evil-define-key 'motion global-map (kbd "<leader>c") 'hydra-org-clock/body)
  :pretty-hydra
  (hydra-org-clock
   (:hint nil :color blue :quit-key "q" :exit t :title (with-faicon "clock-o" "Clock"))
   ("Clock"
    (("i" org-mru-clock-in "pick in")
     ("I" org-clock-in "in")
     ("o" org-clock-out "out")
     ("c" org-clock-in-last "in last")
     ("j" org-mru-clock-select-recent-task "select recent")
     ("J" org-clock-goto "goto")
     ("e" org-clock-modify-effort-estimate "edit")
     ("q" org-clock-cancel "quit")
     ("?" (org-info "Clocking commands") "info"))
    "Clock report"
    (("d" org-clock-display "display")
     ("r" org-clock-report "report"))
    "Pomodoro"
    (("pp" (org-pomodoro '(16)) "start") ;; (4) - will ask for task interactively
     ("pr" (org-pomodoro-reset) "reset"))
    "Timer"
    (("ts" org-timer-start "start")
     ("tt" org-timer-set-timer "set")
     ("tp" org-timer-pause-or-continue "pause")
     ("tq" org-timer-stop "stop")
     ("t?" (org-info "Timers") "info"))
    "Timer insert"
    (("tm" org-timer "time")
     ("ti" org-timer-item "item")))))
#+end_src

** org-journal

#+begin_src emacs-lisp
(use-package org-journal
  :disabled
  :bind (("C-c j j" . org-journal-new-entry))
  :custom
  (org-journal-dir "~/Dropbox/org/journal/")
  (org-journal-date-format "%A, %d %B %Y")
  (org-journal-file-type 'weekly)
  (org-journal-enable-agenda-integration t)
)
#+end_src

#+RESULTS:

** org-gcal

#+begin_src emacs-lisp
(use-package org-gcal
  :after org
  :config
  (custom-set-variables
    '(org-gcal-down-days 7)
    '(org-gcal-up-days 7)
;    '(org-gcal-local-timezone "America/Mexico_City")
    )
  (require 'auth-source)
  (require 'auth-source-pass)
  (let ((gcal-auth (nth 0 (auth-source-search :host "api.google.com" :requires '(:login :password)))))
    (let ((gcal-secret (plist-get gcal-auth :secret)))
      (setq org-gcal-client-id (plist-get gcal-auth :user)
            org-gcal-client-secret (if (functionp gcal-secret) (funcall gcal-secret) gcal-secret))))
  (setq org-gcal-file-alist '(
                        ("twist.522@gmail.com" . "~/Dropbox/org/gcal/personal.org")
                        ("3fq436g1h8aigd0k0k5jtrv4po@group.calendar.google.com" . "~/Dropbox/org/gcal/sport.org")
                        ("0saojhu0tmsuhvii1vccddgvvk@group.calendar.google.com" . "~/Dropbox/org/gcal/routine.org")
                        ("d9tv5thudt39po9amct0m1jrag@group.calendar.google.com" . "~/Dropbox/org/gcal/nutrition.org")
                        ("family07835897960350574739@group.calendar.google.com" . "~/Dropbox/org/gcal/family.org")
                        ("e7rucoek6h9bu30j8eggn0fdhk@group.calendar.google.com" . "~/Dropbox/org/gcal/trading.org")
                        ))
)

;(with-eval-after-load 'org-agenda
;  (org-gcal-sync))

;; org-timeline ;;
;;(use-package org-timeline)
;;(require 'org-timeline)
;;(add-hook 'org-agenda-finalize-hook 'org-timeline-insert-timeline :append)
#+end_src

** jira

#+begin_src emacs-lisp
(use-package org-jira
  :disabled
  :config
  (setq
   jiralib-url "http://.atlassian.net"
   jiralib-user-login-name "yuri"
   org-jira-custom-jqls '(
                          (:jql "project = \"..\" and sprint = \"Sprint 39\" and resolution = Unresolved order by rank asc"
                                :limit 20
                                :filename "sprint-board")
                          (:jql "project = \"..\" and sprint = \"backlog\" and resolution = Unresolved order by rank asc"
                                :limit 20
                                :filename "tim-data-backlog")
                          )
   )
)

;; confluence support
;; (require 'ox-confluence)
#+end_src

** presentations

#+begin_src emacs-lisp
(use-package org-tree-slide
  :bind (:map org-mode-map (
    ("C-c t t"   . org-tree-slide-mode)
    ("C-c t T d" . org-tree-slide-skip-done-toggle)
    ("C-c t T h" . org-tree-slide-display-header-toggle)
    ("C-c t P s" . org-tree-slide-simple-profile)
    ("C-c t P p" . org-tree-slide-presentation-profile)
    ("C-c t P n" . org-tree-slide-narrowing-control-profile)
)))

(use-package ox-reveal
  :init
  (defun my/create-talk-file()
    "Create an org file for a new talk"
    (interactive)
    (let ((name (read-string "Filename: ")))
      (expand-file-name (format "%s.org" name) "~/Dropbox/org/talks/")))
  :custom
  (org-reveal-root "/home/twist/.local/src/reveal.js")
  (org-reveal-reveal-js-version 4)
  (org-reveal-highlight-css "%r/plugin/highlight/zenburn.css"))
  :config
  ;this works fine but no speaker notes and highlight plugins
  ;(setq org-reveal-root "https://cdn.jsdelivr.net/npm/reveal.js")
  (add-to-list 'org-capture-templates '("T" "Talk" plain (file my/create-talk-file) "\
,#+OPTIONS: reveal_global_footer:t\n\
,#+REVEAL_THEME: beige\n\
,#+REVEAL_PLUGINS: (highlight notes)\n\
,#+REVEAL_INIT_OPTIONS: slideNumber:true\n\
,#+REVEAL_HLEVEL: 1\n\
,#+TITLE: %^{Title}\n\
,#+AUTHOR: https://git.io/Jvd9c\n\
,#+EMAIL: twist522@gmail.com\n\
,#+OPTIONS: reveal_title_slide:\"<h2>\\%t</h2><h4>%^{Sub Title}</h4>\"\n\
,#+OPTIONS: toc:nil\n\
,#+OPTIONS: num:0\n\
\n* Plan\n\
  :PROPERTIES:\n\
  :UNNUMBERED: t\n\
  :END:\n\
  - %^{point1}\n\
  - %^{point2}\n\
  - %^{point3}\n\
  - %^{point4}\n* Problem\n* Solution\n* Call to Action\n\
  - %^{action1}\n\
  - %^{action2}\n* \n\
:PROPERTIES:\n\
:UNNUMBERED: t\n\
:END:\n\
,#+REVEAL_HTML: <h1>&#x1F603;</h1>") t)
#+end_src

** calfw & calendar

#+begin_src emacs-lisp
;; example - https://cestlaz.github.io/posts/using-emacs-26-gcal/#.WIqBud9vGAk
;; should use ical link - it works only if calendar is public

(use-package calfw-org)
(use-package calfw
  :commands cfw:open-calendar-buffer cfw:open-org-calendar
  :config
  (require 'calfw)
  (require 'calfw-org)
  (setq cfw:org-overwrite-default-keybinding t))

;;; local additional holidays to diplay through org-calendar-holiday func
(setq holiday-local-holidays '((holiday-fixed 5 22 "День вишиванки")))

(setq calendar-christian-all-holidays-flag t)

;(with-eval-after-load 'org-agenda
;  (error "test"))

(with-eval-after-load 'org-agenda
  (load-library "ukrainian-holidays"))

#+end_src

** org-download

#+begin_src emacs-lisp
(use-package org-download
  :commands (org-download-screenshot)
  :after org
  ;:init (with-eval-after-load 'org
  ;  (require 'org-download)
  ;  (org-download-enable))
  :bind ("C-S-y" . org-download-screenshot)
  :config
  (org-download-enable)
  (when (eq system-type 'windows-nt)
    (setq org-download-screenshot-method "magick convert clipboard: %s")
    (setq org-download-screenshot-file "C:\\Users\\Admin\\Pictures\\screenshot.png"))
  ;(setq org-download-heading-lvl nil)
  ;; Drag and drop to Dired (?)
  (add-hook 'dired-mode-hook 'org-download-enable)
  (add-hook 'org-mode-hook 'org-download-enable)
  :custom
  (org-download-image-dir "~/Dropbox/org/attachments")
  (org-image-actual-width 400)
  (org-startup-with-inline-images t)
  )

#+end_src

** utilities

#+begin_src emacs-lisp
(defun change-tag (old new)
  (when (member old (org-get-tags))
    (org-toggle-tag new 'on)
    (org-toggle-tag old 'off)))

(defun org-rename-tag (old new)
  (interactive "scurrent tag: \nsnew name: ")
  (org-map-entries
   (lambda () (change-tag old new))
   (format "+%s" old)
   'agenda-with-archives))

(defun my/org-ql-parents ()
  (interactive)
  (org-ql-search (org-agenda-files) '(todo) :super-groups '((:auto-parent t))))

(defun my/org-get-parent-goal ()
  (interactive)
  (-when-let* ((goal-link (org-entry-get (point) "GOAL" t)))
    (save-window-excursion
      (org-link-open-from-string goal-link)
      (org-get-heading 'notags 'notodo))))

(defun my/org-set-goal ()
  (interactive)
  ; todo
  )

#+end_src

** plantuml

#+begin_src emacs-lisp
(use-package plantuml-mode
  :mode "\\.plantuml\\'"
  :config
  (add-to-list 'org-src-lang-modes '("plantuml" . plantuml))
  :custom
  (plantuml-default-exec-mode 'jar)
  (plantuml-jar-path (expand-file-name "/usr/share/java/plantuml/plantuml.jar")))
#+end_src

** gnuplot

#+begin_src emacs-lisp
(use-package gnuplot
  :config
  (setq gnuplot-program-version "5.4") ;; auto-determine version within gnuplot.el doesn't work
  (autoload 'gnuplot-mode "gnuplot" "gnuplot major mode" t)
  (autoload 'gnuplot-make-buffer "gnuplot" "open a buffer in gnuplot mode" t)
  ;; this line automatically causes all files with the .gp extension to be loaded into gnuplot mode
  (setq auto-mode-alist (append '(("\\.gp$" . gnuplot-mode)) auto-mode-alist))
  ;; This line binds the function-9 key so that it opens a buffer into gnuplot mode
  (global-set-key [(f9)] 'gnuplot-make-buffer)
)
#+end_src

** others

#+begin_src emacs-lisp
;; prettify
;; todo - this destroys some of the org-mode and evil bindings for some reason
(add-hook 'org-mode-hook (lambda ()
   "Beautify Org Checkbox Symbol"
   (push '("[ ]" . "☐") prettify-symbols-alist)
   (push '("[X]" . "☑" ) prettify-symbols-alist)
   (push '("[-]" . "❍" ) prettify-symbols-alist)
   (push '("#+BEGIN_SRC" . "➤") prettify-symbols-alist) ;; ➤ 🖝 ➟ ➤ ✎
   (push '("#+begin_src" . "➤") prettify-symbols-alist) ;; ➤ 🖝 ➟ ➤ ✎
   (push '("#+END_SRC" . "⏹") prettify-symbols-alist) ;; ⏹ □
   (push '("#+end_src" . "⏹") prettify-symbols-alist) ;; ⏹ □
   ;(push '("[#A]" . "❗" ) prettify-symbols-alist)
   ;(push '("[#B]" . "⬆" ) prettify-symbols-alist)
   ;(push '("[#C]" . "❖" ) prettify-symbols-alist)
   ;(push '("[#D]" . "⬇" ) prettify-symbols-alist)
   (push '("<=" . "≤") prettify-symbols-alist)
   (push '("part_d" . "∂") prettify-symbols-alist)
   (push '("Gamma" . "Γ") prettify-symbols-alist)
   (push '("sigmoid" . "σ") prettify-symbols-alist)
   (prettify-symbols-mode)))

(defun yant/str-to-glyph (str)
  "Transform string into glyph, displayed correctly."
  (let ((composition nil))
    (dolist (char (string-to-list str)
    (nreverse (cdr composition)))
(push char composition)
(push '(Br . Bl) composition))))
        ;(?▤ org-specific ":LOGBOOK:" (org-mode))
        ;(?⚙ org-specific ":PROPERTIES:" (org-mode))
        ;(?⏏ org-specific ":END:" (org-mode))
        ;((yant/str-to-glyph "⚑") org-specific "\\(?:^*+ +\\)\\(\\<WAITING\\>\\)" (org-mode) 1)
        ;((yant/str-to-glyph "♲") org-specific "\\(?:^*+ +\\)\\(\\<HOLD\\>\\)" (org-mode) 1)
        ;((yant/str-to-glyph "☠D") org-specific "\\<DEADLINE:" (org-mode))
        ;((yant/str-to-glyph "◴S") org-specific "\\<SCHEDULED:" (org-mode))))))

(use-package org-sidebar
  :disabled)

(use-package org-ql)

;(use-package org-super-agenda
;  :config
; ;; (setq org-super-agenda-header-map (copy-keymap evil-org-agenda-mode-map))
;  )

(use-package org-bullets
  :hook (org-mode . (lambda() (org-bullets-mode 1))))

(use-package org-roam
  :init (setq org-roam-v2-ack t) ;; I want to silence bytecompiler
  :custom (org-roam-directory "~/Dropbox/org/")
  :bind
  (:map org-roam-mode-map
        (("C-c n l" . org-roam)
         ("C-c n f" . org-roam-find-file)
         ("C-c n g" . org-roam-graph))
        :map org-mode-map
        (("C-c n i" . org-roam-insert))
        (("C-c n I" . org-roam-insert-immediate))))

;; feed (experiment)
;(setq org-feed-alist
;      '(("Slashdot"
;         "http://rss.slashdot.org/Slashdot/slashdot"
;         "~/Dropbox/org/feeds.org" "Slashdot Entries")))
#+end_src

* prog
** git

#+begin_src emacs-lisp
;; this will prevent asking when visiting git-controlled symlink
(setq vc-follow-symlinks t)

(use-package magit
  ;;:custom (magit-credential-cache-daemon-socket "/home/twist/.git-credential-cache/socket")
  ;:config
  ;(require 'magit-gh-pulls)
  ;(add-hook 'magit-post-refresh-hook 'diff-hl-magit-post-refresh)
  :commands (hydra-git/body)
  :config
  (evil-define-key 'motion global-map (kbd "<leader>g") 'hydra-git/body)
  :pretty-hydra
  (hydra-git
   (:hint nil :color teal :quit-key "q" :title (with-alltheicon "git" "Git" 1 -0.05))
   ("Action"
    (("b" magit-blame-addition "blame")
     ("c" magit-clone "clone")
     ("i" magit-init "init")
     ("t" git-timemachine "time machine")
     ("l" magit-log-buffer-file "commit log (current file)")
     ("L" magit-log-current "commit log (project)")
     ("g" magit-status "status")))))

(use-package git-timemachine
  :config
  (progn
     (evil-make-overriding-map git-timemachine-mode-map 'normal)
     ;; force update evil keymaps after git-timemachine-mode loaded
     (add-hook 'git-timemachine-mode-hook #'evil-normalize-keymaps))
  )

(use-package gh)

(use-package magit-gh-pulls
  :functions (gh-profile-current-profile gh-auth-remember) ;; actually coming from gh
  :after magit
  ;:hook ((magit-mode . magit-gh-pulls-mode)
  ;       ;;(magit-mode . magit-gh-pulls-reload)
  ;       )
  :config
  (gh-auth-remember (gh-profile-current-profile) :token (auth-source-pass-get "oauth-token" "github.com/thatwist"))
  (gh-auth-remember (gh-profile-current-profile) :username "thatwist")
  )

; don't need as it is in evil-collection
;(use-package evil-magit
;  :after evil magit
;  :config
;  (setq evil-magit-state 'motion))

(use-package ediff
  :ensure nil
  :custom (ediff-window-setup-function 'ediff-setup-windows-plain) ; ediff use same frame
  )

(use-package diff-hl
  :config
  :hook
  (prog-mode . diff-hl-mode)
  (vc-dir-mode-hook . diff-hl-mode)
  :custom-face
  (diff-hl-change ((t (:background "#333355" :foreground "blue3" :width extra-expanded))))
  (diff-hl-delete ((t (:inherit diff-removed :foreground "red3" :width extra-expanded))))
  (diff-hl-insert ((t (:inherit diff-added)))))

(when (eq system-type 'windows-nt)
  (with-eval-after-load 'ediff
    (setq ediff-diff-program "C:\\Program Files\\Git\\usr\\bin\\diff.exe"))
  (setq diff-command "\"C:\\Program Files\\Git\\usr\\bin\\diff.exe\""))

;; github gist integration
;;(use-package gist)
#+end_src

** smerge hydra

#+begin_src emacs-lisp
(use-package hydra-smerge
  :after evil
  :ensure nil
  :commands (hydra-smerge/body)
  :init (evil-define-key 'motion global-map (kbd "<leader>M-M") 'hydra-smerge/body)
  :pretty-hydra
  (hydra-smerge
    (:quit-key "q" :color blue :hint nil :pre (smerge-mode 1))
    ("Move"
     (("n" smerge-next)
      ("p" smerge-prev))
     "Keep"
     (("a" smerge-keep-all)
      ("b" smerge-keep-base)
      ("u" smerge-keep-upper)
      ("l" smerge-keep-lower)
      ("RET" smerge-keep-current))
     "Diff"
     (("C" smerge-combine-with-next)
      ("E" smerge-ediff)
      ("R" smerge-refine)
      ("r" smerge-resolve))
     "Pair"
     (("<" smerge-diff-base-upper)
      ("=" smerge-diff-upper-lower)
      (">" smerge-diff-base-lower)))))
#+end_src

** flycheck

#+begin_src emacs-lisp
(use-package flycheck-projectile
  :demand :after (flycheck projectile))

(use-package flycheck
  :hook (prog-mode . flycheck-mode)
  ;; prog-mode in this list doesn't work against child modes
  ;;(cutsomize-set-variable 'flycheck-global-modes '(prog-mode markdown-mode)))
)

(use-package flycheck-hydra
  :ensure nil
  :after evil
  :commands (hydra-flycheck/body)
  :init (evil-define-key 'motion global-map (kbd "<leader>f") 'hydra-flycheck/body)
  :pretty-hydra
  (hydra-flycheck
   (:hint nil :color teal :quit-key "q" :title (with-faicon "plane" "Flycheck" 1 -0.05))
   ("Checker"
    (("?" flycheck-describe-checker "describe")
     ("d" flycheck-disable-checker "disable")
     ("m" flycheck-mode "mode")
     ("s" flycheck-select-checker "select"))
    "Errors"
    (("k" flycheck-previous-error "previous" :color pink)
     ("j" flycheck-next-error "next" :color pink)
     ("f" flycheck-buffer "check")
     ("l" flycheck-list-errors "list"))
    "Other"
    (("M" flycheck-manual "manual")
     ("v" flycheck-verify-setup "verify setup")))))
#+end_src

** next-error hydra
Disabling this one as flycheck hydra is enough
#+begin_src emacs-lisp :tangle no
(defhydra hydra-next-error (:hint nil)
    "
Compilation errors:
_j_: next error        _h_: first error    _q_uit
_k_: previous error    _l_: last error
"
    ("`" next-error     nil)
    ("j" next-error     nil :bind nil)
    ("k" previous-error nil :bind nil)
    ("h" first-error    nil :bind nil)
    ("l" (condition-case err
             (while t
               (next-error))
           (user-error nil))
     nil :bind nil)
    ("q" nil            nil :color blue))
#+end_src

** jump-to
#+begin_src emacs-lisp
(use-package dumb-jump
  :init (setq xref-show-definitions-function #'xref-show-definitions-completing-read)
  :config (add-hook 'xref-backend-functions #'dumb-jump-xref-activate))
#+end_src
** elisp
*** elisp cheatsheet

car/cdr reminder
#+begin_src emacs-lisp :tangle no
(cdr '(1 . 2))
;2

(cdr '(1 2))
;(2)
; equivalent
(cdr '(1 . (2 . nil)))
;(2)
#+end_src
*** editing
#+begin_src emacs-lisp :tangle yes
(use-package paredit ;; conflicts a little with smartparens
  :hook
  (emacs-lisp-mode . enable-paredit-mode)
  (lisp-interaction-mode . (lambda()
                             (enable-paredit-mode)
                             (define-key paredit-mode-map (kbd "C-j") nil)))
  :config
  (with-eval-after-load 'evil
    (evil-define-key 'normal 'lisp-interaction-mode (kbd "C-j") 'eval-print-last-sexp)))

(use-package evil-paredit
  :hook (emacs-lisp-mode . evil-paredit-mode))

; didn't like it
;(use-package lispy
;  :init
;  (add-hook 'emacs-lisp-mode-hook (lambda () (lispy-mode 1)))
;  :config (require 'evil-lispy))
;
;(use-package evil-lispy)
#+end_src
*** edebug
hydra came from [[https://github.com/kaushalmodi/.emacs.d/blob/master/setup-files/setup-elisp.el][here]]
#+begin_src emacs-lisp
(use-package edebug
  :ensure nil
  :after evil
  :init (evil-define-key 'motion emacs-lisp-mode-map (kbd "<leader>e") 'hydra-edebug/body)
  :commands (hydra-edebug/body)
  :bind (:map edebug-mode-map ("?" . hydra-edebug/body))
  :pretty-hydra
  (hydra-edebug
   (:color amaranth :hint none :quit-key "q" :title (with-faicon "wrench" "Edebug" 1 -0.05))
   (""
    (("<SPC>" edebug-step-mode)
     ("n"     edebug-next-mode)
     ("g"     edebug-go-mode)
     ("G"     edebug-Go-nonstop-mode)
     ("t"     edebug-trace-mode)
     ("T"     edebug-Trace-fast-mode)
     ("c"     edebug-continue-mode)
     ("C"     edebug-Continue-fast-mode)
     ("f"     edebug-forward-sexp)
     ("h"     edebug-goto-here)
     ("I"     edebug-instrument-callee)
     ("i"     edebug-step-in)
     ("o"     edebug-step-out))
    "breakpoints"
    (("b"     edebug-set-breakpoint)
     ("u"     edebug-unset-breakpoint)
     ("B"     edebug-next-breakpoint)
     ("x"     edebug-set-conditional-breakpoint)
     ("X"     edebug-set-global-break-condition))
    "evaluation"
    (("r"     edebug-previous-result)
     ("e"     edebug-eval-expression)
     ("l"     edebug-eval-last-sexp)
     ("E"     edebug-visit-eval-list))
    "views"
    (("w"     edebug-where)
     ("d"     edebug-pop-to-backtrace)
     ("p"     edebug-bounce-point)
     ("v"     edebug-view-outside)        ; maybe obsolete??
     ("P"     edebug-view-outside)        ; same as v
     ("W"     edebug-toggle-save-windows))
    "quitting and stopping"
    (("q"     top-level :color blue)
     ("Q"     edebug-top-level-nonstop :color blue)
     ("a"     abort-recursive-edit :color blue)
     ("U"     edebug-remove-instrumentation :color blue)
     ("S"     edebug-stop :color blue)))))
#+end_src

*** elisp-hydra

#+begin_src emacs-lisp
(use-package elisp-hydra
  :ensure nil
  :mode-hydra
  (emacs-lisp-mode
   nil
   ("Eval"
    (("b" eval-buffer "buffer")
     ("e" eval-defun "defun")
     ("r" eval-region "region"))
    "Debug"
    (("E" hydra-edebug/body "edebug"))
    "REPL"
    (("I" ielm "ielm"))
    "Test"
    (("t" ert "prompt")
     ("T" (ert t) "all")
     ("F" (ert :failed) "failed"))
    "Doc"
    (("f" describe-function "function")
     ("v" describe-variable "variable")
     ("i" info-lookup-symbol "info lookup")))))
#+end_src
** company & completion
#+begin_src emacs-lisp
(use-package company-prescient
  :after (prescient company))

(use-package company
  ;; :init
  ;; (setq
  ;;  company-dabbrev-ignore-case nil
  ;;  company-dabbrev-code-ignore-case nil
  ;;  company-dabbrev-downcase nil
  ;;  company-idle-delay 0.5
  ;;  company-minimum-prefix-length 2)
  :custom
  ((tab-always-indent 'complete)
   (tab-first-completion 'word-or-paren-or-punct))
  :config
  (global-company-mode 1)
  (company-prescient-mode 1)
  ;; testing this one, pretty awesome
  ;(add-to-list 'company-backends '(company-capf :with company-dabbrev))

  ;; TODO - figure out company config finally - I relied on below for a long time, lets clean this
  ;; following lines to make TAB call company-mode instead of completion-at-point
  ;; (defvar completion-at-point-functions-saved nil)
  ;; (defun company-indent-for-tab-command (&optional arg)
  ;;   (interactive "P")
  ;;   (let ((completion-at-point-functions-saved completion-at-point-functions)
  ;;         (completion-at-point-functions '(company-complete-common-wrapper)))
  ;;     (indent-for-tab-command arg)))
  ;; (defun company-complete-common-wrapper ()
  ;;   (let ((completion-at-point-functions completion-at-point-functions-saved))
  ;;     (company-complete-common)))

  ;; (define-key company-mode-map [remap indent-for-tab-command] 'company-indent-for-tab-command)

  ;;(define-key company-active-map (kbd "M-n") nil)
  ;;(define-key company-active-map (kbd "M-p") nil)
  ;;(define-key company-active-map (kbd "C-n") #'company-select-next)
  ;;(define-key company-active-map (kbd "C-p") #'company-select-previous)
  ;;(define-key company-mode-map (kbd "C-<space>") #'company-complete)
  ;;(define-key company-active-map (kbd "RET") #'company-complete-selection)

  ;; (define-key company-active-map (kbd "<return>") #'company-complete-selection)
  ;; (define-key company-active-map (kbd "<tab>") #'company-complete-common)
  ;; (define-key company-active-map (kbd "TAB") #'company-complete-common)

  ;; to complete common and then cycle
  ;;(define-key company-active-map (kbd "C-n") (lambda () (interactive) (company-complete-common-or-cycle 1)))
  ;;(define-key company-active-map (kbd "C-p") (lambda () (interactive) (company-complete-common-or-cycle -1)))

  ;; :functions (company-complete-common company-complete)
)

(use-package company-quickhelp
  :demand :after company)

(use-package company-box
  :demand :after company
  ; TODO company-quick-access-hint-function problem
  ;:hook (company-mode . company-box-mode)
  )
#+end_src

** yasnippet

#+begin_src emacs-lisp
(use-package yasnippet
  :config
  ;(yas-reload-all)
  ;; default dir is ~/.emacs.d/snippets, others are somehow loaded from yasnippet-snippets
  (yas-global-mode 1)
  ;;:bind ("<tab>" . yas-expand)
)

(use-package yasnippet-snippets
  :after yasnippet)

(use-package ivy-yasnippet
  :after yasnippet)

;; very slow load
;;(use-package aws-snippets
;;  :after yasnippet)

(use-package yas-hydra
  :ensure nil
  :after evil
  :commands (hydra-yas/body)
  :init (evil-define-key 'motion global-map (kbd "<leader>y") 'hydra-yas/body)
  :config
  :pretty-hydra
  (hydra-yas
   (:color blue :quit-key "q" :hint nil :title (with-faicon "code" "Yas" 1 -0.05))
    ("Modes"
     (("g" yas-global-mode)
      ("m" yas-minor-mode)
      ("e" yas-activate-extra-mode))
     "Load/Visit"
     (("d" yas-load-directory)
      ("f" yas-visit-snippet-file :color blue)
      ("l" yas-describe-tables)
      ("a" yas-reload-all))
     "Actions"
     (("i" yas-insert-snippet)
      ("t" yas-tryout-snippet)
      ("n" yas-new-snippet)))))
#+end_src

** lsp

#+begin_src emacs-lisp
(use-package lsp-mode
  :pin melpa ; ok I can afford it
  :after evil
  :init
  (setq lsp-prefer-flymake nil)
  (setq lsp-keymap-prefix "C-l")
  (evil-define-key 'motion global-map (kbd "<leader>l") 'hydra-lsp/body)
  :hook (
         ;; disable automatic lsp start to save resources
         ;;(scala-mode . lsp-deferred)
         ;;(java-mode . lsp-deferred)
         (lsp-mode . lsp-lens-mode))
  ;; waits too long when typing
  ;;:config (add-hook 'lsp-mode-hook #'lsp-enable-which-key-integration)
  :custom (lsp-flycheck-live-reporting t)
  :config
  ;;(lsp-register-custom-settings
  ;; '(("pyls.plugins.pyls_mypy.enabled" t t)
  ;;   ("pyls.plugins.pyls_mypy.live_mode" nil t)
  ;;   ("pyls.plugins.pyls_black.enabled" t t)
  ;;   ("pyls.plugins.pyls_isort.enabled" t t)))
  ;; Uncomment following few lines if you would like to tune lsp-mode performance according to
  ;; https://emacs-lsp.github.io/lsp-mode/page/performance/
  ;(setq gc-cons-threshold 100000000) ;; 100mb
  (setq read-process-output-max (* 1024 1024)) ;; 1mb
  (setq lsp-idle-delay 0.500)
  ;;(setq lsp-log-io nil)
  (setq lsp-completion-provider :capf)
  (setq lsp-signature-auto-activate nil)
  (require 'lsp-protocol)
  :commands (lsp lsp-deferred hydra-lsp/body)
  :pretty-hydra
  (hydra-lsp
   (:hint nil :color teal :quit-key "q" :exit t :title (with-faicon "rocket" "Lsp"))
   ("Find"
    (("D" lsp-find-declaration "declaration")
     ("d" lsp-find-definition "definition")
     ("R" lsp-find-references "references")
     ("i" lsp-find-implementation "implementation")
     ("gt" lsp-find-type-definition "type")
     ("f" lsp-ivy-workspace-symbol "symbol")
     ("F" lsp-ivy-global-workspace-symbol "global symbol")
     ("uf" lsp-ui-find-workspace-symbol "ui symbol")
     ("pd" lsp-ui-peek-find-definitions "peek def")
     ("pr" lsp-ui-peek-find-references "peek refs")
     ("pf" lsp-ui-peek-find-workspace-symbol "peek symb")
     ("pi" lsp-ui-peek-find-implementation "peek impl"))
    "Toggle"
    (("Td" lsp-ui-doc-mode "doc" :toggle t)
     ("TS" lsp-ui-sideline-mode "sideline" :toggle t)
     ("Ts" lsp-ui-sideline-toggle-symbols-info "side symb" :toggle t)
     ("Tl" lsp-lens-mode "lens" :toggle t)
     ("Ti" lsp-toggle-trace-io "trace-io" :toggle t)
     ("Th" lsp-toggle-symbol-highlight "symb highlight")
     ("Tf" lsp-toggle-on-type-formatting "format" :toggle t)
     ("TF" lsp-ui-flycheck-list "flycheck")
     ("TT" lsp-treemacs-sync-mode "treemacs sync" :toggle t)
     ("TD" lsp-modeline-diagnostics-mode "diag line" :toggle t)
     ("Tnf" lsp-signature-toggle-full-docs "sign docs full")
     ("Tna" lsp-signature-activate "sign activate help")
     ("Tns" lsp-toggle-signature-auto-activate "sign auto activate"))
    "Help"
    (("hd" lsp-ui-doc-glance "doc glance")
     ("hh" lsp-describe-thing-at-point "describe"))
    "Code"
    (("=f" lsp-format-buffer "format")
     ("=r" lsp-format-region "region")
     ("r" lsp-rename "rename")
     ("o" lsp-organize-imports "org imports")
     ("m" lsp-ui-imenu "imenu")
     ("x" lsp-execute-code-action "action"))
    "Other"
    (("l" lsp-avy-lens "avy lens")
     ("ge" lsp-treemacs-errors-list "errors")
     ("gh" lsp-treemacs-call-hierarchy "hierarchy")
     ("gf" lsp-ui-flycheck-list "flycheck")
     ("ga" xref-find-apropos "xref-apropos"))
    "Metals"
    (("Mb" lsp-metals-build-import "build import")
     ("Ms" lsp-metals-sources-scan "sources rescan")
     ("Mr" lsp-metals-build-connect "bloop reconnect"))
    "Session"
    (("s?" lsp-describe-session "describe")
     ("ss" lsp "start")
     ("sd" lsp-disconnect "disconnect")
     ("sr" lsp-workspace-restart "restart")
     ("sq" lsp-workspace-shutdown "shutdown")
     ("sl" lsp-workspace-show-log "log")
     ("sfa" lsp-workspace-folders-add "folders +")
     ("sfo" lsp-workspace-folders-open "folder")
     ("sfr" lsp-workspace-folders-remove "folders -")
     ("sfb" lsp-workspace-blacklist-remove "blacklist -")))))

(use-package lsp-ui
  :pin melpa ;; I can afford this
  ;; this plays bad with customized at the bottom of init.el
  :custom
  (lsp-ui-doc-enable nil)
  (lsp-ui-doc-use-childframe t)
  (lsp-ui-doc-position 'top)
  (lsp-ui-doc-include-signature t)
  (lsp-ui-flycheck-enable t)
  (lsp-ui-flycheck-list-position 'bottom)
  (lsp-ui-flycheck-live-reporting t)
  (lsp-ui-sideline-enable t)
  (lsp-ui-sideline-ignore-duplicate t)
  (lsp-ui-sideline-show-symbol t)
  (lsp-ui-sideline-show-hover t)
  (lsp-ui-sideline-show-diagnostics t)
  (lsp-ui-sideline-show-code-actions t)
  (lsp-ui-sideline-code-actions-prefix " ")
  (lsp-ui-peek-enable t)
  (lsp-ui-peek-list-width 60)
  (lsp-ui-peek-peek-height 25)
  (lsp-ui-imenu-enable t)
  (lsp-ui-imenu-kind-position 'top)
  :bind (:map lsp-mode-map ("C-l m" . lsp-ui-imenu))
  :config (lsp-modeline-diagnostics-mode)
  :hook (lsp-mode . lsp-ui-mode)
  :commands (lsp-ui-mode)
  :after lsp-mode)

(use-package lsp-ivy
  :pin melpa
  :after lsp-mode
  :commands lsp-ivy-workspace-symbol)

(use-package lsp-treemacs
  :pin melpa
  :after lsp treemacs
  :config
  ;;(lsp-metals-treeview-enable t)
  ;;(lsp-treemacs-sync-mode 1)
  ;;(setq lsp-metals-treeview-show-when-views-received t)
  :commands (lsp-treemacs-errors-list lsp-treemacs-references))

(use-package dap-mode
  :after lsp-mode
  :config
  (dap-auto-configure-mode)
  :hook (dap-stopped . (lambda (arg) (call-interactively #'dap-hydra)))
  ;; performance-wise
  ;;(lsp-mode . dap-mode)
  ;;(lsp-mode . dap-ui-mode)
  )

(use-package company-lsp
  :after lsp-mode company
  :custom
  (company-lsp-cache-candidates t) ;; auto, t(always using a cache), or nil
  (company-lsp-async t)
  (company-lsp-enable-snippet t)
  (company-lsp-enable-recompletion t)
  :commands company-lsp)
#+end_src

** c++/c
#+begin_src emacs-lisp
(use-package ccls
  :config
  (setq ccls-executable "ccls")
  (setq lsp-prefer-flymake nil)
  (setq-default flycheck-disabled-checkers '(c/c++-clang c/c++-cppcheck c/c++-gcc))
  ;:hook ((c-mode c++-mode objc-mode) .
  ;       (lambda () (require 'ccls) (lsp))))
)
#+end_src

** scala

#+begin_src emacs-lisp
(use-package lsp-metals
  :config
  (customize-set-variable 'lsp-metals-treeview-theme 'Metals-dark))

(use-package scala-mode
  :mode "\\.s\\(cala\\|bt\\|c\\)$"
  :interpreter ("scala" . scala-mode)
  :config
  (require 'smartparens)
  (defun sp-restrict-c (sym)
    "Smartparens restriction on `SYM' for C-derived parenthesis."
    (sp-restrict-to-pairs-interactive "{([" sym))
  (bind-key "C-S-<tab>" 'dabbrev-expand scala-mode-map)
  (bind-key "s-<delete>" (sp-restrict-c 'sp-kill-sexp) scala-mode-map)
  (bind-key "s-<backspace>" (sp-restrict-c 'sp-backward-kill-sexp) scala-mode-map)
  (bind-key "s-<home>" (sp-restrict-c 'sp-beginning-of-sexp) scala-mode-map)
  (bind-key "s-<end>" (sp-restrict-c 'sp-end-of-sexp) scala-mode-map)
  :hook
  (scala-mode
   . (lambda()
       ;;indentation and asterisk-insertion within multi-line comments.
       ;; An alternative is the  'reindent-then-newline-and-indent' command.
       (local-set-key (kbd "RET") '(lambda ()
                                     (interactive)
                                     (newline-and-indent)
                                     (scala-indent:insert-asterisk-on-multiline-comment)))
       (local-set-key (kbd "<backtab>") 'scala-indent:indent-with-reluctant-strategy)
       ;; clean-up whitespace at save
       (make-local-variable 'before-save-hook)
       (add-hook 'before-save-hook 'whitespace-cleanup)
       (setq comment-start "/* "
             comment-end " */"
             comment-style 'multi-line
             comment-empty-lines t)
       (smartparens-mode)
       (scala-mode:goto-start-of-code))))

(use-package play-routes-mode
  :disabled
  :hook (play-routes-mode . (lambda ()
                              (font-lock-add-keywords
                               nil '(("\\<\\(FIXME\\|TODO\\|fixme\\|todo\\):" 1 font-lock-warning-face t))))))

(use-package sbt-mode
  :after evil :init (evil-define-key 'motion global-map (kbd "<leader>S") 'sbt-hydra)
  ;:config
  ;; sbt-supershell kills sbt-mode:  https://github.com/hvesalai/emacs-sbt-mode/issues/152
  ; (setq sbt:program-options '("-Dsbt.supershell=false"))
  )
#+end_src

** python

#+begin_src emacs-lisp
(use-package elpy
  :config
  (setq elpy-modules (delq 'elpy-module-flymake elpy-modules))
  (add-hook 'elpy-mode-hook 'flycheck-mode)
  (add-hook 'elpy-mode-hook 'py-autopep8-enable-on-save)
  )


(use-package py-autopep8)

(use-package blacken)
#+end_src

** java

#+begin_src emacs-lisp
;; java config taken from https://blog.jmibanez.com/2019/03/31/emacs-as-java-ide-revisited.html
(use-package lsp-java
  :pin melpa
  :init
  (defun java-mode-config ()
    (toggle-truncate-lines 1)
    (setq-local tab-width 4)
    (setq-local c-basic-offset 4))
  :config
  ;; Enable dap-java
  (require 'dap-java)
  (setq lombok-jar (expand-file-name "/usr/lib/lombok-common/lombok.jar"))
  ;;(setq my/java-format-settings-file (expand-file-name "~/projects/defaultFormatterProfile.xml"))
  (setq lsp-java-vmargs (list "-noverify"
              "-Xmx2G"
              "-XX:+UseG1GC"
              "-XX:+UseStringDeduplication"
              (concat "-javaagent:" lombok-jar)
              (concat "-Xbootclasspath/a:" lombok-jar))
        lsp-java-import-order '["" "java" "javax" "#"]
        ;; Don't organize imports on save
        lsp-java-save-action-organize-imports nil
        ;; Formatter profile
        lsp-java-format-settings-url "https://raw.githubusercontent.com/google/styleguide/gh-pages/eclipse-java-google-style.xml")
  :hook (java-mode . java-mode-config)
  :after (lsp-mode dap-mode))
#+end_src

** sql
*** ejc

#+begin_src emacs-lisp
(use-package ejc-sql
  :disabled
  ;;:after company-quickhelp - this makes it loading realy after explicit quickhelp load
  :config
  ;;(require 'ejc-sql)
  ;;(require 'ejc-autocomplete)
  (require 'ejc-company)
  (push 'ejc-company-backend company-backends)
  (add-hook 'ejc-sql-minor-mode-hook
            (lambda ()
              ;;(auto-complete-mode t)
              ;;(ejc-ac-setup)
              (ejc-eldoc-setup)
              (company-mode t)))
  (add-hook 'ejc-sql-connected-hook
            (lambda ()
              (ejc-set-fetch-size 200)
              (ejc-set-max-rows 200)
              ;(ejc-set-show-too-many-rows-message t)
              (ejc-set-column-width-limit 100)
              ;(ejc-set-use-unicode t)
              ))
  ;(setq ejc-result-table-impl 'ejc-result-mode)
  (setq ejc-result-table-impl 'orgtbl-mode)
  ;; this will change begin_example to lines starting with :
  (setq org-babel-min-lines-for-block-output 1000)
  ;; sets timeout for long queries, otherwise nrepl will fail (default is 10)
  (setq nrepl-sync-request-timeout 600)
  (global-set-key (kbd "C-c eb") 'ejc-get-temp-editor-buffer)
  (require 'company-quickhelp)
  (company-quickhelp-mode)
  (ejc-create-connection
    "presto"
    :subprotocol "presto"
    :dependencies [[com.facebook.presto/presto-jdbc "0.232"]]
    ;;:classpath (concat "~/.m2/repository/com/facebook/presto/presto-jdbc/0.232/" "presto-jdbc-0.232.jar")
    :connection-uri (concat
                    "jdbc:presto://presto-db.thetimmedia.site:8889/hive/default?"
                    "user=hadoop"))
  (ejc-create-connection
    "conf-db"
    :subprotocol "mysql"
    ;;:dependencies [[mysql/mysql-connector-java "6.0.5"]]

    :dependencies [[org.mariadb.jdbc/mariadb-java-client "2.6.2"]]
    ;;:classname "com.mysql.cj.jdbc.Driver"
    :classname "org.mariadb.jdbc.Driver"
    :connection-uri "jdbc:mariadb://conf-db.site:3306/data"
    :user "app"
    :password (funcall (plist-get (nth 0 (auth-source-search :host "conf-db.site" :require '(:user :secret))) :secret)))
  (ejc-create-connection
    "content-db"
    :subprotocol "mysql"
    :dependencies [[org.mariadb.jdbc/mariadb-java-client "2.6.2"]]
    :classname "org.mariadb.jdbc.Driver"
    :connection-uri "jdbc:mariadb://content-db.site:3306/data"
    :user "admin"
    :password (funcall (plist-get (nth 0 (auth-source-search :host "content-db.site" :require '(:user :secret))) :secret)))
  (ejc-create-connection
    "reporting-db"
    :subprotocol "postgresql"
    :classname "org.postgresql.Driver"
    :classpath "~/.m2/repository/postgresql/postgresql/9.3.1102.jdbc41/postgresql-9.3-1102.jdbc41.jar"
    :connection-uri "jdbc:postgresql://reporting-db.site:3306/postgres"
    :user "postgres"
    :password (funcall (plist-get (nth 0 (auth-source-search :host "reporting-db.site" :require '(:user :secret))) :secret)))
  (ejc-create-connection
    "redshift"
    :subprotocol "postgres"
    ;;:dependencies [[com.amazon.redshift/redshift-jdbc42 "1.2.37.1061"]]
    :classpath "/home/twist/.m2/repository/com/amazon/redshift/redshift-jdbc42/jar/redshift-jdbc42-jar.1.2.37.1061"
    :classname "com.amazon.redshift.jdbc42.Driver"
    :connection-uri "jdbc:redshift://redshift-db.site:5439/dev"
    :user "adminelad"
    :password (funcall (plist-get (nth 0 (auth-source-search :host "redshift-db.site" :require '(:user :secret))) :secret)))
  (ejc-create-connection
    "hive"
    :subprotocol "hive"
    ;;:dependencies [[org.apache.hive/hive-jdbc "2.3.6"]]
    ;;:classpath "/home/twist/.m2/repository/org/apache/hive/hive-jdbc/2.3.6/hive-jdbc-2.3.6.jar"
    ;;:classname "org.apache.hive.jdbc.HiveDriver"
    ;;in fact this path is not valid maven path, but for valid clomacs fails as it tries to resolve artifact in some remote inaccessible repo
    :classpath "/home/twist/.m2/repository/org/amazon/hive/hive-jdbc41-amazon/jar/hive-jdbc41-amazon-jar.2.6.2"
    :classname "com.amazon.hive.jdbc41.HS2Driver"
    :connection-uri "jdbc:hive2://presto-db.site:10000/default"
    :user "hadoop")
  (ejc-create-connection
   "spark-test"
   :subprotocol "spark-sql"
   :classpath ["/home/twist/.m2/repository/org/amazon/spark/spark-jdbc41-amazon/alljars/hive-jdbc-1.2.1-spark2-amzn-1.jar"
               "/home/twist/.m2/repository/org/amazon/spark/spark-jdbc41-amazon/alljars/libthrift-0.9.3.jar"
               "/home/twist/.m2/repository/org/amazon/spark/spark-jdbc41-amazon/alljars/hadoop-common-2.8.5-amzn-5.jar"
               "/home/twist/.m2/repository/org/amazon/spark/spark-jdbc41-amazon/alljars/hive-metastore-1.2.1-spark2-amzn-1.jar"
               "/home/twist/.m2/repository/org/amazon/spark/spark-jdbc41-amazon/alljars/hive-exec-1.2.1-spark2-amzn-1.jar"
               "/home/twist/.m2/repository/org/amazon/spark/spark-jdbc41-amazon/alljars/spark-hive-thriftserver_2.11-2.4.4.jar"]
   :classname "org.apache.hive.jdbc.HiveDriver"
   :connection-uri "jdbc:hive2://spark2.site:10001"
   :user "hadoop")
)
#+end_src

*** sql.el & tools

#+begin_src emacs-lisp
; trying sql.el
(use-package sql-presto
  ;:custom
  ;(sql-presto-options ("--output-format" "CSV_HEADER" ))
  )

(use-package sqlformat
  :commands (sqlformat sqlformat-buffer sqlformat-region)
  ;:hook (sql-mode . sqlformat-on-save-mode)
  ;:init
  ;(setq sqlformat-command 'pgformatter
  ;      sqlformat-args '("-s2" "-g" "-u1"))
  )

(with-eval-after-load 'sql

  (add-hook 'sql-mode-hook (lambda () (company-mode t)))

  ; testing
  ;(setq sql-postgres-options "-w")

  ;(setq sql-password-search-wallet-function #'sql-pass-search-wallet)
  ;(defun sql-pass-search-wallet (wallet product user server database port)
  ;          (auth-source-pass-get 'secret wallet))

  (customize-set-variable 'comint-move-point-for-output 'this)
  (customize-set-variable 'comint-scroll-to-bottom-on-input 'all)

  (add-hook 'sql-interactive-mode-hook (lambda () (toggle-truncate-lines 1)))

  (add-hook 'sql-login-hook 'my-sql-login-hook)

  (defun my-sql-login-hook ()
    "Custom SQL log-in behaviours. See `sql-login-hook'."
    (when (eq sql-product 'postgres)
      (let ((proc (get-buffer-process (current-buffer))))
        ;; Output each query before executing it. (n.b. this also avoids
        ;; the psql prompt breaking the alignment of query results.)
        (comint-send-string proc "\\set ECHO queries\n")
        (comint-send-string proc "\\pset null '<null>'\n"))))

  (setq sql-connection-alist
        '((mysql-local
           (sql-product 'mysql)
           (sql-server "127.0.0.1")
           (sql-user "root")
           (sql-password "root")
           (sql-database "db")
           (sql-port 3306))
          (postgres-local
           (sql-product 'postgres)
           (sql-server "localhost")
           (sql-port 5432)
           (sql-user "postgres")
           (sql-password "postgres")
           (sql-database "postgres"))
          (sqlite
           (sql-product 'sqlite)
           (sql-database "e:\\Documents\\work\\sql\\tmp\\tmp.db"))))

  ; this makes connection list in .dir-locals.el safe
  (put 'sql-connection-alist 'safe-local-variable #'listp)
  )
#+end_src

*** ob-sql-mode
#+begin_src emacs-lisp
  (use-package ob-sql-mode
    :init (with-eval-after-load 'org (require 'ob-sql-mode)))
#+end_src


*** lsp-sqls

#+begin_src emacs-lisp
(use-package lsp-sqls
  :ensure nil
  :custom
  (lsp-sqls-connections
        '(((driver . "mysql") (dataSourceName . "local:local@tcp(localhost:3306)/testdb"))
          ((driver . "postgresql") (dataSourceName . "host=127.0.0.1 port=5433 user=postgres dbname=postgres sslmode=disable"))))
  :pretty-hydra
  (hydra-lsp (
  "SQL"
  (("Sl" lsp-sql-show-schemas "show schemas")
   ("Sq" lsp-sql-execute-query "exec query")
   ("Ss" lsp-sql-execute-paragraph "exec paragraph")
   ("Sd" lsp-sql-show-databases "show databases")
   ("SD" lsp-sql-switch-database "switch database")
   ("Sc" lsp-sql-show-connections "show conns")
   ("SC" lsp-sql-switch-connection "switch conn")))))
#+end_src

** other

#+begin_src emacs-lisp
(use-package typescript-mode)
(use-package php-mode)
;; jupyter
;(use-package ein
;  :config
;  (require 'ein-jupyterhub))

(use-package json
  :ensure nil
  :custom (json-reformat:indent-width 2))

(use-package js
  :ensure nil
  :custom (js-indent-level 2))

(add-to-list 'auto-mode-alist '("\\.avsc$" . json-mode))
(add-to-list 'auto-mode-alist '("\\.hql$" . sql-mode))

(use-package csv-mode)

(use-package yaml-mode
  :bind (:map yaml-mode-map ("C-m" . newline-and-indent)))

(use-package htmlize)

;(require 'ob-clojure)

(use-package cider
  :custom (org-babel-clojure-backend 'cider))

;(use-package awscli-capf
;  :commands (awscli-add-to-capf)
;  :hook (shell-mode . awscli-add-to-capf))

(use-package electric-operator)

(use-package conda
  :config
  (conda-env-initialize-eshell)
  (conda-env-initialize-interactive-shells)
  :custom (
  (conda-anaconda-home (expand-file-name "~/miniconda3/"))
  (conda-env-home-directory (expand-file-name "~/miniconda3/"))
  ;(conda-env-subdirectory "myenvs")
  ))
#+end_src

** smartparens

#+begin_src emacs-lisp
; if M-<backspace> annoys - see this - https://github.com/Fuco1/smartparens/pull/861/files
(use-package smartparens
  :diminish smartparens-mode
  :config
  (require 'smartparens-config)
  (require 'smartparens-scala)
  (sp-use-smartparens-bindings)
  (smartparens-global-mode 1)
  ;; to be protected from introducing unbalanced pairs by editing commands which delete regions, what you want is smartparens-strict-mode
  ;;(smartparens-strict-mode)
  (sp-pair "(" ")" :wrap "C-(") ;; how do people live without this?
  (sp-pair "[" "]" :wrap "s-[") ;; C-[ sends ESC
  (sp-pair "{" "}" :wrap "C-{")
  (bind-key "C-S-<left>" nil smartparens-mode-map)
  (bind-key "C-S-<right>" nil smartparens-mode-map)
  (bind-key "s-<delete>" 'sp-kill-sexp smartparens-mode-map)
  (bind-key "s-<backspace>" 'sp-backward-kill-sexp smartparens-mode-map)
  (bind-key "s-{" 'sp-rewrap-sexp smartparens-mode-map)
  ;; unbind the annoying one
  (unbind-key "M-<backspace>" smartparens-mode-map)
  :hook (prog-mode . show-smartparens-mode)
  :functions (sp-pair sp-restrict-to-pairs-interactive)
  )

(use-package evil-smartparens
  :hook (emacs-lisp . evil-smartparens-mode))

(use-package smartparens-hydra
  :ensure nil
  :after evil
  :commands (hydra-sp/body)
  :init (evil-define-key 'motion global-map (kbd "<leader>[") 'hydra-sp/body)
  :config
  :pretty-hydra
  (hydra-sp
   (:hint nil :title "Smartparens")
   ( "Moving"
     ( ("a" sp-beginning-of-sexp)
       ("e" sp-end-of-sexp)
       ("f" sp-forward-sexp)
       ("b" sp-backward-sexp)
       ("n" sp-down-sexp)
       ("N" sp-backward-down-sexp)
       ("p" sp-up-sexp)
       ("P" sp-backward-up-sexp))
     "Slurp & Barf"
     ;; Slurping & barfing
     ( ("h" sp-backward-slurp-sexp)
       ("H" sp-backward-barf-sexp)
       ("l" sp-forward-slurp-sexp)
       ("L" sp-forward-barf-sexp))
     ;; Wrapping
     "Sexp juggling"
     ( ("R" sp-rewrap-sexp)
       ("u" sp-unwrap-sexp)
       ("U" sp-backward-unwrap-sexp)
       ("(" sp-wrap-round)
       ("{" sp-wrap-curly)
       ("[" sp-wrap-square))
     ;; Sexp juggling
     "Destructive"
     ( ("S" sp-split-sexp)
       ("s" sp-splice-sexp)
       ("r" sp-raise-sexp)
       ("j" sp-join-sexp)
       ("t" sp-transpose-sexp)
       ("A" sp-absorb-sexp)
       ("E" sp-emit-sexp)
       ("o" sp-convolute-sexp))
     "Destructive"
     ( ("c" sp-change-inner :exit t)
       ("C" sp-change-enclosing :exit t)
       ("k" sp-kill-sexp)
       ("K" sp-backward-kill-sexp)
       ("w" sp-copy-sexp)
       ("q" nil)
       ("g" nil)))))
       #+end_src

** code comments

#+begin_src emacs-lisp
(use-package evil-nerd-commenter
  :config
  (evilnc-default-hotkeys nil t)
  (evil-define-key 'motion 'global (kbd "<leader>;i") 'evilnc-comment-or-uncomment-lines)
)
#+end_src

** code highlights

#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :init (with-eval-after-load 'prog-mode (require 'rainbow-delimiters))
  :hook (prog-mode . rainbow-delimiters-mode))

;; navigate snakeCase
(add-hook 'prog-mode-hook #'subword-mode)
#+end_src

#+begin_src emacs-lisp
(use-package whitespace
  :defer 0.7
  :custom
  (whitespace-line-column 170) ;; limit line length
  (whitespace-style
        '(face tabs ;; spaces
               trailing lines space-before-tab newline indentation empty space-after-tab ;; space-mark
               tab-mark newline-mark))
  ;:hook (prog-mode . whitespace-mode) ;; this caused problems in sql-mode (dunno why), global mode + list of modes to enable works better
  :config
  (global-whitespace-mode)
  (customize-set-variable 'whitespace-global-modes '(prog-mode))
)
#+end_src

#+begin_src emacs-lisp
(use-package highlight-symbol
  :diminish highlight-symbol-mode
  :commands highlight-symbol
  :bind ("C-c h" . highlight-symbol))
#+end_src

#+begin_src emacs-lisp
(use-package hl-todo
  :config
  (setq hl-todo-keyword-faces
        '(("TODO"   . "#FF0000")
          ("todo"   . "#FF0000")
          ("FIXME"  . "#FF0000")
          ("fixme"  . "#FF0000")
          ("DEBUG"  . "#A020F0")
          ("GOTCHA" . "#FF4500")
          ("why"    . "#FF4500")
          ("STUB"   . "#1E90FF")))
  (define-key hl-todo-mode-map (kbd "C-c H p") 'hl-todo-previous)
  (define-key hl-todo-mode-map (kbd "C-c H n") 'hl-todo-next)
  (define-key hl-todo-mode-map (kbd "C-c H o") 'hl-todo-occur)
  (define-key hl-todo-mode-map (kbd "C-c H i") 'hl-todo-insert)
  (add-hook 'prog-mode-hook 'hl-todo-mode)
)
#+end_src

display colors visually

#+begin_src emacs-lisp
(use-package rainbow-mode)
#+end_src
** code folding

#+begin_src emacs-lisp
;; integrates with evil-fold z-.. awesome!
;; !! do not use lsp-origami as it will depend on unstable lsp-mode packages
(use-package origami
  :hook (prog-mode . origami-mode)
  :after evil
  :init (evil-define-key 'motion global-map (kbd "<leader>O") 'hydra-folding/body)
  :commands (hydra-folding/body)
  :pretty-hydra
  (hydra-folding
   (:color red :title "Folding")
   (""
    (("o" origami-open-node)
     ("c" origami-close-node)
     ("n" origami-next-fold)
     ("p" origami-previous-fold)
     ("f" origami-forward-toggle-node)
     ("a" origami-toggle-all-nodes)
     ("s" origami-show-only-node)))))

;; warn - this package depends on lsp-mode not from melpa-stable
(use-package lsp-origami
  :after lsp
  :pin melpa
  :config (global-origami-mode)
  :hook (origami-mode . lsp-origami-mode)
  :bind
  ("C-S-t" . origami-toggle-node)
  ("C-S-c" . origami-toggle-all-nodes))
#+end_src

** docker

#+begin_src emacs-lisp
;(use-package dockerfile-mode)
(use-package docker-compose-mode)
(use-package docker
  :bind ("C-c d" . docker))
(use-package docker-tramp)
#+end_src

** markdown

#+begin_src emacs-lisp
(use-package markdown-mode
  :ensure t
  :commands (markdown-mode gfm-mode)
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :init (setq markdown-command "multimarkdown")
  :custom-face (markdown-code-face ((t (:inherit fixed-pitch :background "gray25"))))
)
#+end_src

** log-files

#+begin_src emacs-lisp
;; aka tail -f for log files (doesn't really work)
(add-to-list 'auto-mode-alist '("\\.log\\'" . auto-revert-mode))

(use-package logview :mode "\\.log\\(?:\\.[0-9]+\\)?\\'")
#+end_src

* system
** emacs tools

#+begin_src emacs-lisp
(use-package request
  :custom
  (request-log-level 'debug))
#+end_src

** multimedia
*** image scroll

#+begin_src emacs-lisp
; not using for now - it actually overrides good-scroll
;(add-hook 'after-init-hook
;         #'(lambda() (load-library "iscroll")))
#+end_src

*** emms

#+begin_src emacs-lisp
(use-package emms
  :disabled
  :config
  (emms-all)
  (emms-default-players)
  (define-emms-simple-player mplayer '(file url)
      (regexp-opt '(".ogg" ".mp3" ".wav" ".mpg" ".mpeg" ".wmv" ".wma"
                    ".mov" ".avi" ".divx" ".ogm" ".asf" ".mkv" "http://" "mms://"
                    ".rm" ".rmvb" ".mp4" ".flac" ".vob" ".m4a" ".flv" ".ogv" ".pls"))
      "mplayer" "-slave" "-quiet" "-really-quiet" "-fullscreen")
  ;; (define-emms-simple-player afplay '(file)
  ;;     (regexp-opt '(".mp3" ".m4a" ".aac"))
  ;;     "afplay")
  ;;   (setq emms-player-list `(,emms-player-afplay))
)
;; todo - xterm colors for shell
;;https://github.com/atomontage/xterm-color
#+end_src

** shell, eshell, term
#+begin_src emacs-lisp
(use-package eshell
  :custom (eshell-history-size 12800)
  :config
  (require 'conda)
  :after evil
  :init (evil-define-key 'motion global-map (kbd "<leader>e") 'eshell-new))

(use-package eshell-git-prompt ; use-theme ..
  :config (eshell-git-prompt-use-theme 'powerline))

(defun eshell-new()
  "Open a new instance of eshell."
  (interactive)
  (eshell 'N))

(use-package eshell-syntax-highlighting
  :after esh-mode
  :config
  ;(setq eshell-highlight-prompt nil)
  ;; Enable in all Eshell buffers.
  (eshell-syntax-highlighting-global-mode 1))

;; looks poor
;(use-package eshell-prompt-extras
;  :init
;  (with-eval-after-load "esh-opt"
;    (autoload 'epe-theme-pipeline "eshell-prompt-extras")
;    (autoload 'epe-theme-dakrone "eshell-prompt-extras")
;    (autoload 'epe-theme-lambda "eshell-prompt-extras")
;    (autoload 'epe-theme-multiline-with-status "eshell-prompt-extras")
;    (setq eshell-highlight-prompt  t ;nil
;          eshell-prompt-function 'epe-theme-multiline-with-status)))

(use-package eshell
  :functions (eshell-smart-initialize)
  :custom (eshell-where-to-jump 'begin)
  :hook (eshell-mode . (lambda ()
                         (setq-local global-hl-line-mode nil) ;; disable global mode
                         (eshell-smart-initialize)))
  :config
  (require 'eshell-syntax-highlighting)
  (require 'eshell-git-prompt)
  (require 'em-smart) ; smart eshell features
  )
(with-eval-after-load 'term
  (add-hook 'term-mode-hook (lambda () (setq-local global-hl-line-mode nil)))) ;; disable global mode in term

;(defun term-zsh () (interactive) (term "/usr/bin/zsh"))
;(defun ansi-term-zsh () (interactive) (ansi-term "/usr/bin/zsh"))

(use-package multi-term
  :init (defun my/open-term () (interactive)
               (tab-new)
               (multi-term)
               (set-window-dedicated-p (get-buffer-window (current-buffer)) t))
  :config (setq multi-term-program "/usr/bin/zsh"))

(with-eval-after-load 'evil
  ;(evil-define-key 'motion global-map (kbd "<leader>r") 'term-zsh)
  ;(evil-define-key 'motion global-map (kbd "<leader>r") 'my/open-term)
  (evil-define-key 'motion global-map (kbd "<leader>r") 'multi-term)
  )

; ansi coloring in compilation-mode buffers (e.g. for dap-java-run-test-class)
(defun colorize-compilation-buffer ()
  (read-only-mode t)
  (ansi-color-apply-on-region compilation-filter-start (point))
  (read-only-mode nil))

(defun ansi-colorize-buffer ()
  (interactive)
  (ansi-color-apply-on-region (point-min) (point-max)))

(use-package ansi-color
  :custom (ansi-color-names-vector ["#3c3836" "#fb4934" "#b8bb26" "#fabd2f" "#83a598" "#d3869b" "#8ec07c" "#ebdbb2"])
  :hook (compilation-filter . colorize-compilation-buffer))

;; testing this
(use-package shell-switcher
  :config
  (setq shell-switcher-mode t)
  (setq-default shell-switcher-new-shell-function 'eshell-new))

;; trying to solve coloring problems in 'shell'
;; do not change terminfo - this will break comints like sql.el etc
;; use term "zsh" instead
;;(setq comint-terminfo-terminal "dumb-emacs-ansi")
(setq comint-terminfo-terminal "dumb") ;; default
;dunno what it does
;(with-eval-after-load 'shell (set-face-attribute 'comint-highlight-prompt nil :inherit nil))

#+end_src

** vterm

#+begin_src emacs-lisp
(when (not (eq system-type 'windows-nt))
  (use-package vterm))
#+end_src

** powershell

#+begin_src emacs-lisp
(use-package powershell)
#+end_src

** system
*** systemd

#+begin_src emacs-lisp
;; systemd-mode
(use-package systemd)

;; evil in terminal - cursor shapes (doesn't work in gui)
;(add-hook 'evil-insert-state-entry-hook (lambda () (send-string-to-terminal "\033[5 q")))
;(add-hook 'evil-normal-state-entry-hook (lambda () (send-string-to-terminal "\033[0 q")))
#+end_src

*** terminal cursor

#+begin_src emacs-lisp
(if (eq system-type 'windows-nt)
  nil
  ;; terminal cursor (e.g. for evil)
  ;(quelpa '(term-cursor :repo "h0d/term-cursor.el" :fetcher github))
  ;;(global-term-cursor-mode)
  )
#+end_src

*** sudo edit

#+begin_src emacs-lisp
;; to sudo-edit files
(use-package sudo-edit
  :custom (sudo-edit-user user-login-name))

(use-package auto-sudoedit
  :init (with-eval-after-load 'ivy (require 'auto-sudoedit))
  :config (auto-sudoedit-mode))

; testing sudo
;(defun sudired ()
;  (interactive)
;  (require 'tramp)
;  (let ((dir (expand-file-name default-directory)))
;    (if (string-match "^/sudo:" dir)
;        (user-error "Already in sudo")
;      (dired (concat "/sudo::" dir)))))
;(define-key dired-mode-map "!" 'sudired)
#+end_src

*** docop
#+begin_src emacs-lisp
;;(use-package docopt)
#+end_src

*** i3wm

#+begin_src emacs-lisp
;; i3wm
(use-package i3wm-config-mode
  :hook (i3wm-config-mode . rainbow-mode)
  :pin melpa)
#+end_src

*** exwm

#+begin_src emacs-lisp :tangle no
(when (not (eq system-type 'windows-nt))
  (use-package exwm)
    :config
    (require 'exwm-config)
    (setq exwm-input-global-keys `(,(kbd "s-&") .
                                 (lambda (command)
                                   (interactive (list (read-shell-command "$ ")))
                                   (start-process-shell-command command nil command))))
    (require 'exwm-systemtray)
    ;; didn't work
    ;;(exwm-systemtray-enable)
    ;; uncomment to start exwm
    ;;(exwm-config-default)
)
#+end_src

*** other

#+begin_src emacs-lisp
(use-package ovpn-mode
  :mode ("\\.ovpn$" . conf-mode)
  :custom (ovpn-mode-base-directory "~/vpn"))

(use-package arch-packer)
#+end_src

** tramp

#+begin_src emacs-lisp
(use-package tramp
  :pin gnu
  :ensure t
  :config
  ; not sure what it highlights
  ;(require 'tramp-theme)
  ;(load-theme 'tramp)
  (setq remote-file-name-inhibit-cache nil) ;; set if editing outside of tramp as well
  (setq vc-ignore-dir-regexp (format "%s\\|%s" vc-ignore-dir-regexp tramp-file-name-regexp))
  (setq tramp-verbose 4) ;; raise if debug tramp errors
  ;(setq tramp-connection-timeout 3) ; for debug
  ;(setq-default tramp-default-method "ssh")
  ;(setq-default tramp-default-method "scp")
  ;(setq tramp-default-user "twist") ;deprecated
  ;(setq tramp-default-host "localhost")
  ;(add-to-list 'tramp-default-user-alist '("\\`\\(?:doas\\|sudoedit\\|ksu\\|su\\(?:do\\)?\\)\\'" "localhost" "twist"))
  ;(setq tramp-syntax 'default) ; simplified | default | separate
)

(use-package aggressive-indent)

(use-package editorconfig
  :config
  (editorconfig-mode 1))

(use-package counsel-tramp
  :config
  ; this is to speed up tramp
  (add-hook 'counsel-tramp-pre-command-hook
            #'(lambda ()
                (global-aggressive-indent-mode 0)
                (projectile-mode 0)
                (editorconfig-mode 0)))
  (add-hook 'counsel-tramp-quit-hook
            #'(lambda ()
                (global-aggressive-indent-mode 1)
                (projectile-mode 1)
                (editorconfig-mode 1)))
)

(use-package tramp-theme)

#+end_src
* user
** games & fun

#+begin_src emacs-lisp
(use-package 2048-game)
(use-package fireplace)
#+end_src

** accessibility

#+begin_src emacs-lisp :tangle no
(pretty-hydra-define hydra-accessibility
  (:hint nil :color teal :quit-key "q" :title (with-faicon "universal-access" "Accessibility" 1 -0.05))
  ("TTS" (
    ("b" festival-say-buffer "festival bufer")
    ("r" festival-say-region "festival region")
    ("k" festival-kill-process "festival kill"))))
#+end_src
** hugo

#+begin_src emacs-lisp
(use-package ox-hugo
  :after ox org-capture
  :pin melpa
  :config
  ;; Populates only the EXPORT_FILE_NAME property in the inserted headline.
  (defun org-hugo-new-subtree-post-capture-template ()
    "Returns `org-capture' template string for new Hugo post.
See `org-capture-templates' for more information."
    (let* ((title (read-from-minibuffer "Post Title: ")) ; Prompt to enter the post title
           (fname (org-hugo-slug title)))
      (mapconcat #'identity
                 `(
                   ,(concat "* TODO " title)
                   ":PROPERTIES:"
                   ,(concat ":EXPORT_FILE_NAME: " fname)
                   ":END:"
                   "%?\n")          ;Place the cursor here finally
                 "\n")))
  (add-to-list 'org-capture-templates
               '("h"                ;`org-capture' binding + h
                 "Hugo post"
                 entry
                 ;; It is assumed that below file is present in `org-directory'
                 ;; and that it has a "Blog Ideas" heading. It can even be a
                 ;; symlink pointing to the actual location of all-posts.org!
                 (file+olp "blog.org" "Blog Ideas")
                 (function org-hugo-new-subtree-post-capture-template))))
#+end_src

** ledger

#+begin_src emacs-lisp
(use-package ledger-mode
  :config
  ;(require 'flycheck-ledger)
  (add-to-list 'org-capture-templates '("l" "Ledger") t)
  (add-to-list 'org-capture-templates '("lb" "Bank" plain (file "~/Dropbox/org/ledger/journal.dat")
            "%(org-read-date) %^{Payee}\n\tExpenses:%^{Account}  %^{Ammount} UAH\n\tKredo" :empty-lines 1 :immediate-finish t))
  (add-to-list 'org-capture-templates ' ("lc" "Cash" plain (file "~/Dropbox/org/ledger/journal.dat")
            "%(org-read-date) * %^{Payee}\n\tExpenses:%^{Account}  %^{Amount} UAH\n\tCash" :empty-lines 1 :immediate-finish t))
  :custom
  (ledger-reconcile-default-commodity nil)
  (ledger-reports
   '(("this month budget" "ledger budget expenses -p \"this month\" -X UAH")
     ("last-month-balance" "ledger [[ledger-mode-flags]] -f ~/Dropbox/org/ledger/ledger.dat --monthly bal ^expenses -X UAH -p \"last month\"")
     ("last-month-expenses" "ledger [[ledger-mode-flags]] -f ~/Dropbox/org/ledger/ledger.dat reg ^expenses -X UAH -p \"last month\" --monthly")
     ("bal" "%(binary) -f %(ledger-file) bal")
     ("reg" "%(binary) -f %(ledger-file) reg")
     ("payee" "%(binary) -f %(ledger-file) reg @%(payee)")
     ("account" "%(binary) -f %(ledger-file) reg %(account)"))))

(use-package flycheck-ledger
  :demand :after ledger-mode)

(use-package evil-ledger
  :demand :after evil ledger-mode)
(fset 'euro
      (lambda (&optional arg) "Keyboard macro." (interactive "p")
        (kmacro-exec-ring-item (quote ([24 56 return 35 120 50 48 65 67 return] 0 "%d")) arg)))
#+end_src

** beancount

#+begin_src emacs-lisp
(use-package beancount
  :mode "\\.beancount\\'"
  :quelpa (beancount :repo "beancount/beancount-mode" :fetcher github)
  :hook
  (beancount-mode . (lambda () (setq-local electric-indent-chars nil)))
  (beancount-mode . outline-minor-mode)
  :bind (:map beancount-mode-map
        (("C-c C-n" . outline-next-visible-heading)
         ("C-c C-p" . outline-previous-visible-heading))))
#+end_src

#+RESULTS:

** google-translate

#+begin_src emacs-lisp
; doesn't work
;(use-package go-translate
;  :config
;  (setq go-translate-local-language "en")
;  (setq go-translate-target-language "uk")
;  (setq go-translate-extra-directions '(("uk" . "ru") ("ru" . "en")))
;  (setq go-translate-buffer-follow-p t)       ; focus the result window
;  (setq go-translate-buffer-source-fold-p t)  ; fold the source text in the result window
;  (setq go-translate-buffer-window-config nil) ; config the result window as your wish
;  (setq go-translate-debug-p t)
;  (global-set-key "\C-ct" 'go-translate)
;  (global-set-key "\C-cT" 'go-translate-popup))

; crazy, finally it works
(use-package google-translate
  :ensure t
  ;:init
  ;(require 'google-translate)
  ;(require 'google-translate-smooth-ui)
  ;(defun google-translate--search-tkk () "Search TKK." (list 430675 2721866130))
  :functions (google-translate--search-tkk)
  :config
  (require 'google-translate-smooth-ui)
  (defun google-translate--search-tkk () "Search TKK." (list 430675 2721866130))
  ;todo - fix minibuffer keymap with evil for directions
  ;(evil-define-key '(motion normal insert) minibuffer-local-map)
  :custom
  (google-translate-input-method-auto-toggling t)
  (google-translate-preferable-input-methods-alist '((nil . ("en")) (ukrainian-computer . ("ru" "uk"))))
  (google-translate-translation-directions-alist '(("uk" . "en") ("ru" . "en") ("en" . "uk")))
  ;(google-translate--tkk-url "http://translate.google.com/")
  ;(google-translate-base-url "http://translate.google.com/")
  ;(google-translate-backend-debug t)
  (google-translate-backend-method 'curl)
  (google-translate-show-phonetic t)
  :bind
  ("C-c C-t t" . google-translate-smooth-translate)
  ("C-c C-t p" . google-translate-at-point)
  ("C-c C-t q" . google-translate-query-translate)
  ("C-c C-t d" . google-translate-query-translate-using-directions)
  )
#+end_src

** elfeed

#+begin_src emacs-lisp
(use-package elfeed
  :bind ("C-c f" . elfeed)
  :config (elfeed-update))

(use-package elfeed-org
  :demand :after elfeed
  :config
  (setq rmh-elfeed-org-files (list (concat org-directory "elfeed/feeds.org")))
  (defadvice elfeed (before configure-elfeed activate)
    "Load all feed settings before elfeed is started"
    (rmh-elfeed-org-configure))
  (elfeed-org)
  (elfeed-update))

(use-package elfeed-goodies
  :demand :after elfeed
  :config (elfeed-goodies/setup))

; this is for scoring entries, not using it
;(use-package elfeed-score
;  :after evil
;  :config (progn
;    ;(elfeed-score-enable)
;    (evil-define-key 'normal elfeed-search-mode-map "=" elfeed-score-map)))

#+end_src

** mail
#+begin_src emacs-lisp
(when (not (eq system-type 'windows-nt))
  (progn
    (setq message-directory "~/.mail/gmail/")
    (setq gnus-directory "~/.config/emacs/news/")))

;; smtp mail setting; these are the same that `gnus' uses.
(setq
   message-send-mail-function 'smtpmail-send-it
   smtpmail-smtp-server "smtp.gmail.com"
   smtpmail-smtp-service 587
   smtpmail-stream-type 'starttls
   ;smtpmail-default-smtp-server "smtp.example.com"
   ;smtpmail-local-domain        "example.com"
   ;smtp-queue-dir "~/.mail/gmail/sent wd/"
   )
;; gnus
(setq gnus-select-method `(nnimap "gmail.com"
          (nnimap-user "twist522")
          (nnimap-address "imap.gmail.com")
          (nnimap-server-port 993)
          (nnmail-expiry-wait immediate))
      gnus-message-archive-group "[Gmail]/Sent Mail"
      ;gnus-interactive-exit nil
      ;gnus-novice-user nil
      ;gnus-expert-user t
      gnus-secondary-select-methods '((nntp "news.gmane.io"))
      )

;(bind-key "<delete" 'gnus-summary-delete-article gnus-summary-mode-map)

(use-package mu4e
  :after evil
  :init (evil-define-key 'motion global-map (kbd "<leader>M") 'mu4e)
  :preface (setq ;; these stuff here is because of old mu4e-alert depending on older mu4e
            mu4e~context-current 'mu4e--context-current
            mu4e~main-buffer-name 'mu4e--main-buffer-name)
  :unless (eq system-type 'windows-nt)
  :defines (mu4e~context-current mu4e~main-buffer-name)
  :functions (mu4e-update-mail-and-index)
  :ensure nil
  :commands (mu4e)
  ;:config (mu4e-update-mail-and-index t)
  :custom
  (mail-user-agent 'mu4e-user-agent)
  (mu4e-display-update-status-in-modeline t)
  (mu4e-drafts-folder "/[Gmail]/Drafts")
  (mu4e-sent-folder "/[Gmail]/Sent Mail")
  (mu4e-trash-folder "/[Gmail]/Trash"))

(use-package mu4e-alert
  :demand :after mu4e
  :config
  (mu4e-alert-set-default-style 'libnotify)
  (mu4e-alert-enable-notifications)
  (mu4e-alert-enable-mode-line-display))
#+end_src

** msgs
*** telega

#+begin_src emacs-lisp
(use-package telega)
#+end_src

*** slack
#+begin_src emacs-lisp :tangle no
(use-package slack
  :commands (slack-start)
  :init
  (setq slack-buffer-emojify t) ;; if you want to enable emoji, default nil
  (setq slack-prefer-current-team t)
  :config
  (slack-register-team
   ;:name
   :default t
   ;:token (auth-source-pick-first-password
   ;      :host "myslackteam.slack.com"
   ;      :user "me@example.com")
   :subscribed-channels '(general)
   :full-and-display-names t)
  (evil-define-key 'normal slack-info-mode-map
    ",u" 'slack-room-update-messages)
  (evil-define-key 'normal slack-mode-map
    ",c" 'slack-buffer-kill
    ",ra" 'slack-message-add-reaction
    ",rr" 'slack-message-remove-reaction
    ",rs" 'slack-message-show-reaction-users
    ",pl" 'slack-room-pins-list
    ",pa" 'slack-message-pins-add
    ",pr" 'slack-message-pins-remove
    ",mm" 'slack-message-write-another-buffer
    ",me" 'slack-message-edit
    ",md" 'slack-message-delete
    ",u" 'slack-room-update-messages
    ",2" 'slack-message-embed-mention
    ",3" 'slack-message-embed-channel
    "\C-n" 'slack-buffer-goto-next-message
    "\C-p" 'slack-buffer-goto-prev-message)
   (evil-define-key 'normal slack-edit-message-mode-map
    ",k" 'slack-message-cancel-edit
    ",s" 'slack-message-send-from-buffer
    ",2" 'slack-message-embed-mention
    ",3" 'slack-message-embed-channel))
#+end_src

#+RESULTS:

** matrix
#+begin_src emacs-lisp
;(use-package matrix-client
;  :quelpa (matrix-client :fetcher github :repo "alphapapa/matrix-client.el"
;                         :files (:defaults "logo.png" "matrix-client-standalone.el.sh")))
#+end_src

* custom

#+begin_src emacs-lisp
;;I'm not using custom, but have to keep this file for writing - some functions fail otherwise
(customize-set-variable
 'custom-file ;'null-device "not storing"
 (expand-file-name "custom.el" user-emacs-directory)
 "keep customize settings in their own file")
;;(load custom-file)
#+end_src
